import{p as U}from"./DqSBQOHB.js";import{b as O}from"./DfavyPf3.js";import{g as x}from"./Bj40Iw6y.js";import{i as y}from"./D9FROM4Y.js";import{i as v}from"./l8tU0ONq.js";import{n as D}from"./BH2782tf.js";import{s as C}from"./B5PtpWph.js";import{s as F}from"./C7wh6v0-.js";import{u as T}from"./CQwZNWSf.js";import{i as W}from"./DRK5nedI.js";class oe{constructor({size:s,params:t}){this.data=new Map,this.parameters=[],this.capacity=s??50,t&&(this.parameters=t)}get(s,t){const r=this.hash(s);if(r===!1)return t();if(!this.data.has(r)){if(this.data.size>this.capacity+10){const i=this.data.keys();let n=0;for(;;){const{value:o,done:a}=i.next();if(this.data.delete(o),a||++n>10)break}}this.data.set(r,t())}return this.data.get(r)}size(){return this.data.size}hash(s){let t="";const{parameters:r}=this;if(r.length===0)return!1;for(const i of r){const n=String(s[i]??"");if(n.includes("|;"))return!1;t+=n+"|;"}return t}}const b={},S="endpoints";function f(e){return typeof e!="object"||e==null?e:"ref"in e?`$${f(e.ref)}`:"fn"in e?`${e.fn}(${(e.argv||[]).map(f).join(", ")})`:JSON.stringify(e,null,2)}class d extends Error{constructor(s){super(s),this.name="EndpointError"}}const G={booleanEquals:O,getAttr:x,isSet:y,isValidHostLabel:v,not:D,parseURL:U,stringEquals:C,substring:F,uriEncode:T},A=(e,s)=>{const t=[],r={...s.endpointParams,...s.referenceRecord};let i=0;for(;i<e.length;){const n=e.indexOf("{",i);if(n===-1){t.push(e.slice(i));break}t.push(e.slice(i,n));const o=e.indexOf("}",n);if(o===-1){t.push(e.slice(n));break}e[n+1]==="{"&&e[o+1]==="}"&&(t.push(e.slice(n+1,o)),i=o+2);const a=e.substring(n+1,o);if(a.includes("#")){const[l,u]=a.split("#");t.push(x(r[l],u))}else t.push(r[a]);i=o+1}return t.join("")},L=({ref:e},s)=>({...s.endpointParams,...s.referenceRecord})[e],w=(e,s,t)=>{if(typeof e=="string")return A(e,t);if(e.fn)return I(e,t);if(e.ref)return L(e,t);throw new d(`'${s}': ${String(e)} is not a string, function or reference.`)},I=({fn:e,argv:s},t)=>{const r=s.map(n=>["boolean","number"].includes(typeof n)?n:w(n,"arg",t)),i=e.split(".");return i[0]in b&&i[1]!=null?b[i[0]][i[1]](...r):G[e](...r)},M=({assign:e,...s},t)=>{var i,n;if(e&&e in t.referenceRecord)throw new d(`'${e}' is already defined in Reference Record.`);const r=I(s,t);return(n=(i=t.logger)==null?void 0:i.debug)==null||n.call(i,`${S} evaluateCondition: ${f(s)} = ${f(r)}`),{result:r===""?!0:!!r,...e!=null&&{toAssign:{name:e,value:r}}}},m=(e=[],s)=>{var r,i;const t={};for(const n of e){const{result:o,toAssign:a}=M(n,{...s,referenceRecord:{...s.referenceRecord,...t}});if(!o)return{result:o};a&&(t[a.name]=a.value,(i=(r=s.logger)==null?void 0:r.debug)==null||i.call(r,`${S} assign: ${a.name} := ${f(a.value)}`))}return{result:!0,referenceRecord:t}},z=(e,s)=>Object.entries(e).reduce((t,[r,i])=>({...t,[r]:i.map(n=>{const o=w(n,"Header value entry",s);if(typeof o!="string")throw new d(`Header '${r}' value '${o}' is not a string`);return o})}),{}),P=(e,s)=>{if(Array.isArray(e))return e.map(t=>P(t,s));switch(typeof e){case"string":return A(e,s);case"object":if(e===null)throw new d(`Unexpected endpoint property: ${e}`);return $(e,s);case"boolean":return e;default:throw new d(`Unexpected endpoint property type: ${typeof e}`)}},$=(e,s)=>Object.entries(e).reduce((t,[r,i])=>({...t,[r]:P(i,s)}),{}),N=(e,s)=>{const t=w(e,"Endpoint URL",s);if(typeof t=="string")try{return new URL(t)}catch(r){throw console.error(`Failed to construct URL with ${t}`,r),r}throw new d(`Endpoint URL must be a string, got ${typeof t}`)},H=(e,s)=>{var p,g;const{conditions:t,endpoint:r}=e,{result:i,referenceRecord:n}=m(t,s);if(!i)return;const o={...s,referenceRecord:{...s.referenceRecord,...n}},{url:a,properties:l,headers:u}=r;return(g=(p=s.logger)==null?void 0:p.debug)==null||g.call(p,`${S} Resolving endpoint from template: ${f(r)}`),{...u!=null&&{headers:z(u,o)},...l!=null&&{properties:$(l,o)},url:N(a,o)}},B=(e,s)=>{const{conditions:t,error:r}=e,{result:i,referenceRecord:n}=m(t,s);if(i)throw new d(w(r,"Error",{...s,referenceRecord:{...s.referenceRecord,...n}}))},q=(e,s)=>{const{conditions:t,rules:r}=e,{result:i,referenceRecord:n}=m(t,s);if(i)return k(r,{...s,referenceRecord:{...s.referenceRecord,...n}})},k=(e,s)=>{for(const t of e)if(t.type==="endpoint"){const r=H(t,s);if(r)return r}else if(t.type==="error")B(t,s);else if(t.type==="tree"){const r=q(t,s);if(r)return r}else throw new d(`Unknown endpoint rule: ${t}`);throw new d("Rules evaluation failed")},ae=(e,s)=>{var u,p,g,R;const{endpointParams:t,logger:r}=s,{parameters:i,rules:n}=e;(p=(u=s.logger)==null?void 0:u.debug)==null||p.call(u,`${S} Initial EndpointParams: ${f(t)}`);const o=Object.entries(i).filter(([,c])=>c.default!=null).map(([c,h])=>[c,h.default]);if(o.length>0)for(const[c,h]of o)t[c]=t[c]??h;const a=Object.entries(i).filter(([,c])=>c.required).map(([c])=>c);for(const c of a)if(t[c]==null)throw new d(`Missing required parameter: '${c}'`);const l=k(n,{endpointParams:t,logger:r,referenceRecord:{}});return(R=(g=s.logger)==null?void 0:g.debug)==null||R.call(g,`${S} Resolved endpoint: ${f(l)}`),l},j=(e,s=!1)=>{if(s){for(const t of e.split("."))if(!j(t))return!1;return!0}return!(!v(e)||e.length<3||e.length>63||e!==e.toLowerCase()||W(e))},E=":",V="/",ce=e=>{const s=e.split(E);if(s.length<6)return null;const[t,r,i,n,o,...a]=s;if(t!=="arn"||r===""||i===""||a.join(E)==="")return null;const l=a.map(u=>u.split(V)).flat();return{partition:r,service:i,region:n,accountId:o,resourceId:l}},_=[{id:"aws",outputs:{dnsSuffix:"amazonaws.com",dualStackDnsSuffix:"api.aws",implicitGlobalRegion:"us-east-1",name:"aws",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",regions:{"af-south-1":{description:"Africa (Cape Town)"},"ap-east-1":{description:"Asia Pacific (Hong Kong)"},"ap-east-2":{description:"Asia Pacific (Taipei)"},"ap-northeast-1":{description:"Asia Pacific (Tokyo)"},"ap-northeast-2":{description:"Asia Pacific (Seoul)"},"ap-northeast-3":{description:"Asia Pacific (Osaka)"},"ap-south-1":{description:"Asia Pacific (Mumbai)"},"ap-south-2":{description:"Asia Pacific (Hyderabad)"},"ap-southeast-1":{description:"Asia Pacific (Singapore)"},"ap-southeast-2":{description:"Asia Pacific (Sydney)"},"ap-southeast-3":{description:"Asia Pacific (Jakarta)"},"ap-southeast-4":{description:"Asia Pacific (Melbourne)"},"ap-southeast-5":{description:"Asia Pacific (Malaysia)"},"ap-southeast-7":{description:"Asia Pacific (Thailand)"},"aws-global":{description:"AWS Standard global region"},"ca-central-1":{description:"Canada (Central)"},"ca-west-1":{description:"Canada West (Calgary)"},"eu-central-1":{description:"Europe (Frankfurt)"},"eu-central-2":{description:"Europe (Zurich)"},"eu-north-1":{description:"Europe (Stockholm)"},"eu-south-1":{description:"Europe (Milan)"},"eu-south-2":{description:"Europe (Spain)"},"eu-west-1":{description:"Europe (Ireland)"},"eu-west-2":{description:"Europe (London)"},"eu-west-3":{description:"Europe (Paris)"},"il-central-1":{description:"Israel (Tel Aviv)"},"me-central-1":{description:"Middle East (UAE)"},"me-south-1":{description:"Middle East (Bahrain)"},"mx-central-1":{description:"Mexico (Central)"},"sa-east-1":{description:"South America (Sao Paulo)"},"us-east-1":{description:"US East (N. Virginia)"},"us-east-2":{description:"US East (Ohio)"},"us-west-1":{description:"US West (N. California)"},"us-west-2":{description:"US West (Oregon)"}}},{id:"aws-cn",outputs:{dnsSuffix:"amazonaws.com.cn",dualStackDnsSuffix:"api.amazonwebservices.com.cn",implicitGlobalRegion:"cn-northwest-1",name:"aws-cn",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^cn\\-\\w+\\-\\d+$",regions:{"aws-cn-global":{description:"AWS China global region"},"cn-north-1":{description:"China (Beijing)"},"cn-northwest-1":{description:"China (Ningxia)"}}},{id:"aws-us-gov",outputs:{dnsSuffix:"amazonaws.com",dualStackDnsSuffix:"api.aws",implicitGlobalRegion:"us-gov-west-1",name:"aws-us-gov",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^us\\-gov\\-\\w+\\-\\d+$",regions:{"aws-us-gov-global":{description:"AWS GovCloud (US) global region"},"us-gov-east-1":{description:"AWS GovCloud (US-East)"},"us-gov-west-1":{description:"AWS GovCloud (US-West)"}}},{id:"aws-iso",outputs:{dnsSuffix:"c2s.ic.gov",dualStackDnsSuffix:"c2s.ic.gov",implicitGlobalRegion:"us-iso-east-1",name:"aws-iso",supportsDualStack:!1,supportsFIPS:!0},regionRegex:"^us\\-iso\\-\\w+\\-\\d+$",regions:{"aws-iso-global":{description:"AWS ISO (US) global region"},"us-iso-east-1":{description:"US ISO East"},"us-iso-west-1":{description:"US ISO WEST"}}},{id:"aws-iso-b",outputs:{dnsSuffix:"sc2s.sgov.gov",dualStackDnsSuffix:"sc2s.sgov.gov",implicitGlobalRegion:"us-isob-east-1",name:"aws-iso-b",supportsDualStack:!1,supportsFIPS:!0},regionRegex:"^us\\-isob\\-\\w+\\-\\d+$",regions:{"aws-iso-b-global":{description:"AWS ISOB (US) global region"},"us-isob-east-1":{description:"US ISOB East (Ohio)"}}},{id:"aws-iso-e",outputs:{dnsSuffix:"cloud.adc-e.uk",dualStackDnsSuffix:"cloud.adc-e.uk",implicitGlobalRegion:"eu-isoe-west-1",name:"aws-iso-e",supportsDualStack:!1,supportsFIPS:!0},regionRegex:"^eu\\-isoe\\-\\w+\\-\\d+$",regions:{"aws-iso-e-global":{description:"AWS ISOE (Europe) global region"},"eu-isoe-west-1":{description:"EU ISOE West"}}},{id:"aws-iso-f",outputs:{dnsSuffix:"csp.hci.ic.gov",dualStackDnsSuffix:"csp.hci.ic.gov",implicitGlobalRegion:"us-isof-south-1",name:"aws-iso-f",supportsDualStack:!1,supportsFIPS:!0},regionRegex:"^us\\-isof\\-\\w+\\-\\d+$",regions:{"aws-iso-f-global":{description:"AWS ISOF global region"},"us-isof-east-1":{description:"US ISOF EAST"},"us-isof-south-1":{description:"US ISOF SOUTH"}}},{id:"aws-eusc",outputs:{dnsSuffix:"amazonaws.eu",dualStackDnsSuffix:"amazonaws.eu",implicitGlobalRegion:"eusc-de-east-1",name:"aws-eusc",supportsDualStack:!1,supportsFIPS:!0},regionRegex:"^eusc\\-(de)\\-\\w+\\-\\d+$",regions:{"eusc-de-east-1":{description:"EU (Germany)"}}}],J={partitions:_};let K=J;const ue=e=>{const{partitions:s}=K;for(const r of s){const{regions:i,outputs:n}=r;for(const[o,a]of Object.entries(i))if(o===e)return{...n,...a}}for(const r of s){const{regionRegex:i,outputs:n}=r;if(new RegExp(i).test(e))return{...n}}const t=s.find(r=>r.id==="aws");if(!t)throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");return{...t.outputs}};export{d as E,ce as a,oe as b,b as c,j as i,ue as p,ae as r};

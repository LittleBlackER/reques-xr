var Yv=Object.defineProperty;var Kv=(l,t,e)=>t in l?Yv(l,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[t]=e;var h=(l,t,e)=>Kv(l,typeof t!="symbol"?t+"":t,e);var Zv=(l=>(l.HIGH="high",l.MEDIUM="medium",l.LOW="low",l.LOW_VR="lowVR",l))(Zv||{});const Qv=()=>!Qg()&&!Jg()&&!Zg()&&!Jv(),Zg=()=>{const l=navigator.userAgent.includes("Macintosh"),t=navigator.maxTouchPoints===5,e=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);return l&&t&&e},Qg=()=>navigator.userAgent.includes("Quest"),Jv=()=>{const l=navigator.userAgent.toLowerCase();return l.includes("pico")||l.includes("picolrowser")},Jg=()=>["iOS","Android"].includes(ex()),Ok=()=>new URL(location.href).searchParams.has("nowheel"),Fk=()=>new URL(location.href).searchParams.has("nowheel"),ex=()=>{const l=window.navigator.userAgent.toLowerCase(),t=window.navigator.platform.toLowerCase();return/iphone|ipad|ipod/.test(l)?"iOS":/android/.test(l)?"Android":/mac/.test(t)?"macOS":/win/.test(t)?"Windows":/linux/.test(t)?"Linux":"Unknown"};class Nk{constructor(){this.HIGH_FPS_THRESHOLD=45,this.MEDIUM_FPS_THRESHOLD=30,this.HIGH_MEMORY_THRESHOLD=4*1024*1024*1024,this.MEDIUM_MEMORY_THRESHOLD=2*1024*1024*1024,this.SCORE_THRESHOLDS={HIGH:70,MEDIUM:50,LOW:30},this.VENDOR_WEIGHTS={nvidia:1,amd:.9,apple:.8,intel:.6,qualcomm:.5,arm:.4},this.HIGH_END_PATTERNS={nvidia:[/geforce\s+(?:rtx\s*[3-4]|titan\s*(?:rtx|xp|v))|quadro\s+(?:rtx|a[0-9]+)/i,/a[1-9][0-9]+/i],amd:[/radeon\s+(?:rx\s*[6-9]|rx\s*7[0-9]+|pro\s*w[5-9])|instinct\s+mi[2-9]/i],apple:[/m[1-3]\s+(?:pro|max|ultra)?/i]},this.MEDIUM_END_PATTERNS={nvidia:[/geforce\s+(?:rtx\s*2|gtx\s*1[6-9])|quadro\s+(?:p[2-9]|t[1-9])/i],amd:[/radeon\s+(?:rx\s*[4-5]|vega\s*[5-9])|pro\s*w[2-4]/i],apple:[/a[1-9][0-9]+\s+(?:x|z)?/i]},this.LOW_END_PATTERNS={intel:[/(?:hd|uhd|iris|xe)\s*graphics\s*(?:[6-9][0-9]+|[1-9][0-9]+g)/i],qualcomm:[/adreno\s*[6-9][0-9]+/i],arm:[/mali\s*-?(?:g[7-9][0-9]|t[8-9][0-9])/i]}}getVendorScore(t){const e=t.toLowerCase();for(const[s,i]of Object.entries(this.VENDOR_WEIGHTS))if(e.includes(s))return i*100;return 50}getModelScore(t,e){const s=t.toLowerCase(),i=e.toLowerCase();for(const[r,a]of Object.entries(this.HIGH_END_PATTERNS))if(s.includes(r)&&a.some(n=>n.test(i)))return 90;for(const[r,a]of Object.entries(this.MEDIUM_END_PATTERNS))if(s.includes(r)&&a.some(n=>n.test(i)))return 70;for(const[r,a]of Object.entries(this.LOW_END_PATTERNS))if(s.includes(r)&&a.some(n=>n.test(i)))return 50;return 60}getMemoryScore(t){return t?t>=12e3?100:t>=8e3?90:t>=6e3?80:t>=4e3?70:t>=2e3?60:50:50}getDriverScore(t){if(!t)return 50;const e=t.match(/20[2-9][0-9]/);if(e){const s=parseInt(e[0]);if(s>=2023)return 100;if(s>=2022)return 80;if(s>=2021)return 60}return 50}evaluateGPU(t){const e=this.getVendorScore(t.vendor),s=this.getModelScore(t.vendor,t.renderer),i=this.getMemoryScore(t.memory),r=this.getDriverScore(t.driverVersion);return console.log("GPU:",t.vendor),console.log("GPU:",t.renderer),console.log("GPU:",t.driverVersion),console.table(t),e*.3+s*.4+i*.2+r*.1}evaluateCPU(){const t=navigator.hardwareConcurrency;return t>=8?3:t>=4?2:1}evaluateMemory(t){return typeof t=="string"?0:t.totalJSHeapSize}evaluatePerformance(t){const e=Jg(),s=Zg(),i=Qg();if(s)return"medium";if(i)return"lowVR";if(e)return"low";const r=t.fps>=this.HIGH_FPS_THRESHOLD?3:t.fps>=this.MEDIUM_FPS_THRESHOLD?2:1;let a=1;typeof t.gpuInfo!="string"&&(a=this.evaluateGPU(t.gpuInfo));const n=this.evaluateCPU(),o=this.evaluateMemory(t.memoryInfo)>=this.HIGH_MEMORY_THRESHOLD?3:this.evaluateMemory(t.memoryInfo)>=this.MEDIUM_MEMORY_THRESHOLD?2:1,c=r+a+n+o;return console.log("GPU:",r,a,n,o),c>=this.SCORE_THRESHOLDS.HIGH?"high":c>=this.SCORE_THRESHOLDS.MEDIUM?"medium":"low"}getModelQualitySettings(t){return{high:{textureQuality:"high"},medium:{textureQuality:"medium"},low:{textureQuality:"low"},lowVR:{textureQuality:"lowVR"}}[t]}}const tx=()=>{globalThis.requestIdleCallback=globalThis.requestIdleCallback||function(l){var t=Date.now();return setTimeout(function(){l({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-t))}})},1)},globalThis.cancelIdleCallback=globalThis.cancelIdleCallback||function(l){clearTimeout(l)}},sx="RenderFrame",fd="RenderFrameTime",Qp="RenderPass",rn="RenderPassDetail",Il="RenderAction",Jp="RenderTargetAlloc",em="TextureAlloc",tm="ShaderAlloc",ix="ShaderCompile",rx="VRAM.Texture",ax="VRAM.Vb",nx="VRAM.Ib",ox="BindGroupAlloc",lx="BindGroupFormatAlloc",Bs="Element",hx="Textures",Ml="GpuTimings",an="$_CURRENT_SDK_VERSION",eS="$_CURRENT_SDK_REVISION";function Uh(l,t){for(const e in t){const s=t[e];Array.isArray(s)?l[e]=Uh([],s):s&&typeof s=="object"?l[e]=Uh({},s):l[e]=s}return l}const cx={create(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,l=>{const t=Math.random()*16|0;return(l==="x"?t:t&3|8).toString(16)})}},xe={delimiter:"/",join(...l){let t=l[0];for(let e=0;e<l.length-1;e++){const s=l[e],i=l[e+1];if(i[0]===xe.delimiter){t=i;continue}s&&i&&s[s.length-1]!==xe.delimiter&&i[0]!==xe.delimiter?t+=xe.delimiter+i:t+=i}return t},normalize(l){const t=l.startsWith(xe.delimiter),e=l.endsWith(xe.delimiter),s=l.split("/");let i="",r=[];for(let a=0;a<s.length;a++)if(s[a]!==""&&s[a]!=="."){if(s[a]===".."&&r.length>0){r=r.slice(0,r.length-2);continue}a>0&&r.push(xe.delimiter),r.push(s[a])}return i=r.join(""),!t&&i[0]===xe.delimiter&&(i=i.slice(1)),e&&i[i.length-1]!==xe.delimiter&&(i+=xe.delimiter),i},split(l){const t=l.lastIndexOf(xe.delimiter);return t!==-1?[l.substring(0,t),l.substring(t+1)]:["",l]},getBasename(l){return xe.split(l)[1]},getDirectory(l){return xe.split(l)[0]},getExtension(l){const t=l.split("?")[0].split(".").pop();return t!==l?`.${t}`:""},isRelativePath(l){return l.charAt(0)!=="/"&&l.match(/:\/\//)===null},extractPath(l){let t="";const e=l.split("/");let s=0;if(e.length>1)if(xe.isRelativePath(l))if(e[0]===".")for(s=0;s<e.length-1;++s)t+=s===0?e[s]:`/${e[s]}`;else if(e[0]==="..")for(s=0;s<e.length-1;++s)t+=s===0?e[s]:`/${e[s]}`;else for(t=".",s=0;s<e.length-1;++s)t+=`/${e[s]}`;else for(s=0;s<e.length-1;++s)t+=s===0?e[s]:`/${e[s]}`;return t}},dx=()=>{let l=!1;try{const t=Object.defineProperty({},"passive",{get:function(){return l=!0,!1}});window.addEventListener("testpassive",null,t),window.removeEventListener("testpassive",null,t)}catch{}return l},zi=typeof navigator<"u"?navigator.userAgent:"",Bh=typeof window<"u"?"browser":typeof global<"u"?"node":"worker",sm=/android/i.test(zi)?"android":/ip(?:[ao]d|hone)/i.test(zi)?"ios":/windows/i.test(zi)?"windows":/mac os/i.test(zi)?"osx":/linux/i.test(zi)?"linux":/cros/i.test(zi)?"cros":null,fx=Bh!=="browser"?null:/Chrome\/|Chromium\/|Edg.*\//.test(zi)?"chrome":/Safari\//.test(zi)?"safari":/Firefox\//.test(zi)?"firefox":"other",ux=Bh==="browser"&&("ontouchstart"in window||"maxTouchPoints"in navigator&&navigator.maxTouchPoints>0),px=dx(),Pe={name:sm,browser:Bh==="browser",worker:Bh==="worker",android:sm==="android",touch:ux,passiveEvents:px,browserName:fx},tS="abcdefghijklmnopqrstuvwxyz",sS="ABCDEFGHIJKLMNOPQRSTUVWXYZ",mx=tS+sS,ff=55296,iS=56319,im=56320,_x=57343,gx=8205,rm=127462,am=127487,Sx=127995,yx=127999,vx=8400,xx=8447,uf=65024,pf=65039;function mf(l,t=0){const e=l.length;if(t<0||t>=e)return null;const s=l.charCodeAt(t);if(e>1&&s>=ff&&s<=iS){const i=l.charCodeAt(t+1);if(i>=im&&i<=_x)return{code:(s-ff)*1024+i-im+65536,long:!0}}return{code:s,long:!1}}function dr(l,t,e){if(!l)return!1;const s=mf(l);if(s){const i=s.code;return i>=t&&i<=e}return!1}function Tx(l,t){if(t===l.length-1)return 1;if(dr(l[t],ff,iS)){const e=l.substring(t,t+2),s=l.substring(t+2,t+4);return dr(s,Sx,yx)||dr(e,rm,am)&&dr(s,rm,am)?4:dr(s,uf,pf)?3:2}return dr(l[t+1],uf,pf)?2:1}const wh={ASCII_LOWERCASE:tS,ASCII_UPPERCASE:sS,ASCII_LETTERS:mx,format(l,...t){for(let e=0;e<t.length;e++)l=l.replace(`{${e}}`,t[e]);return l},getCodePoint(l,t){const e=mf(l,t);return e&&e.code},getCodePoints(l){if(typeof l!="string")throw new TypeError("Not a string");let t=0;const e=[];let s;for(;s=mf(l,t);)e.push(s.code),t+=s.long?2:1;return e},getSymbols(l){if(typeof l!="string")throw new TypeError("Not a string");let t=0;const e=l.length,s=[];let i=0,r;for(;t<e;){if(i+=Tx(l,t+i),r=l[t+i],dr(r,vx,xx)&&(r=l[t+i++]),dr(r,uf,pf)&&(r=l[t+i++]),r&&r.charCodeAt(0)===gx){r=l[t+i++];continue}const a=l.substring(t,t+i);s.push(a),t+=i,i=0}return s},fromCodePoint(...l){return l.map(t=>t>65535?(t-=65536,String.fromCharCode((t>>10)+55296,t%1024+56320)):String.fromCharCode(t)).join("")}},Kr=class Kr{static set(t,e=!0){e?Kr._traceChannels.add(t):Kr._traceChannels.delete(t)}static get(t){return Kr._traceChannels.has(t)}};h(Kr,"_traceChannels",new Set),h(Kr,"stack",!1);let mi=Kr;const zt=class zt{static deprecated(t){zt._loggedMessages.has(t)||(zt._loggedMessages.add(t),console.warn(`DEPRECATED: ${t}`))}static removed(t){zt._loggedMessages.has(t)||(zt._loggedMessages.add(t),console.error(`REMOVED: ${t}`))}static assertDeprecated(t,e){t||zt.deprecated(e)}static assert(t,...e){t||console.error("ASSERT FAILED: ",...e)}static assertDestroyed(t){var e;if(t!=null&&t.__alreadyDestroyed){const s=`[${(e=t.constructor)==null?void 0:e.name}] with name [${t.name}] has already been destroyed, and cannot be used.`;zt._loggedMessages.has(s)||(zt._loggedMessages.add(s),console.error("ASSERT FAILED: ",s,t))}}static call(t){t()}static log(...t){console.log(...t)}static logOnce(t,...e){zt._loggedMessages.has(t)||(zt._loggedMessages.add(t),console.log(t,...e))}static warn(...t){console.warn(...t)}static warnOnce(t,...e){zt._loggedMessages.has(t)||(zt._loggedMessages.add(t),console.warn(t,...e))}static error(...t){console.error(...t)}static errorOnce(t,...e){zt._loggedMessages.has(t)||(zt._loggedMessages.add(t),console.error(t,...e))}static trace(t,...e){mi.get(t)&&(console.groupCollapsed(`${t.padEnd(20," ")}|`,...e),console.groupEnd())}};h(zt,"_loggedMessages",new Set);let y=zt;class Ta{static setName(t,e){t&&(t.name=e)}static setLabel(t,e){t&&(t.label=e)}static setDestroyed(t){t&&(t.__alreadyDestroyed=!0)}}class wx{constructor(t,e,s,i,r=!1){h(this,"handler");h(this,"name");h(this,"callback");h(this,"scope");h(this,"_once");h(this,"_removed",!1);this.handler=t,this.name=e,this.callback=s,this.scope=i,this._once=r}off(){this._removed||this.handler.offByHandle(this)}on(t,e,s=this){return y.deprecated("Using chaining with EventHandler.on is deprecated, subscribe to an event from EventHandler directly instead."),this.handler._addCallback(t,e,s,!1)}once(t,e,s=this){return y.deprecated("Using chaining with EventHandler.once is deprecated, subscribe to an event from EventHandler directly instead."),this.handler._addCallback(t,e,s,!0)}set removed(t){t&&(this._removed=!0)}get removed(){return this._removed}toJSON(t){}}class Se{constructor(){h(this,"_callbacks",new Map);h(this,"_callbackActive",new Map)}initEventHandler(){this._callbacks=new Map,this._callbackActive=new Map}_addCallback(t,e,s,i){if((!t||typeof t!="string"||!e)&&console.warn(`EventHandler: subscribing to an event (${t}) with missing arguments`,e),this._callbacks.has(t)||this._callbacks.set(t,[]),this._callbackActive.has(t)){const a=this._callbackActive.get(t);a&&a===this._callbacks.get(t)&&this._callbackActive.set(t,a.slice())}const r=new wx(this,t,e,s,i);return this._callbacks.get(t).push(r),r}on(t,e,s=this){return this._addCallback(t,e,s,!1)}once(t,e,s=this){return this._addCallback(t,e,s,!0)}off(t,e,s){if(t)this._callbackActive.has(t)&&this._callbackActive.get(t)===this._callbacks.get(t)&&this._callbackActive.set(t,this._callbackActive.get(t).slice());else for(const[i,r]of this._callbackActive)this._callbacks.has(i)&&this._callbacks.get(i)===r&&this._callbackActive.set(i,r.slice());if(t)if(e){const i=this._callbacks.get(t);if(!i)return this;for(let r=0;r<i.length;r++)i[r].callback===e&&(s&&i[r].scope!==s||(i[r].removed=!0,i.splice(r,1),r--));i.length===0&&this._callbacks.delete(t)}else{const i=this._callbacks.get(t);if(i){for(let r=0;r<i.length;r++)i[r].removed=!0;this._callbacks.delete(t)}}else{for(const i of this._callbacks.values())for(let r=0;r<i.length;r++)i[r].removed=!0;this._callbacks.clear()}return this}offByHandle(t){const e=t.name;t.removed=!0,this._callbackActive.has(e)&&this._callbackActive.get(e)===this._callbacks.get(e)&&this._callbackActive.set(e,this._callbackActive.get(e).slice());const s=this._callbacks.get(e);if(!s)return this;const i=s.indexOf(t);return i!==-1&&(s.splice(i,1),s.length===0&&this._callbacks.delete(e)),this}fire(t,e,s,i,r,a,n,o,c){if(!t)return this;const d=this._callbacks.get(t);if(!d)return this;let f;this._callbackActive.has(t)?this._callbackActive.get(t)!==d&&(f=d.slice()):this._callbackActive.set(t,d);for(let u=0;(f||this._callbackActive.get(t))&&u<(f||this._callbackActive.get(t)).length;u++){const p=(f||this._callbackActive.get(t))[u];if(p.callback&&(p.callback.call(p.scope,e,s,i,r,a,n,o,c),p._once)){const m=this._callbacks.get(t),_=m?m.indexOf(p):-1;if(_!==-1){this._callbackActive.get(t)===m&&this._callbackActive.set(t,this._callbackActive.get(t).slice());const S=this._callbacks.get(t);if(!S)continue;S[_].removed=!0,S.splice(_,1),S.length===0&&this._callbacks.delete(t)}}}return f||this._callbackActive.delete(t),this}hasEvent(t){var e;return!!((e=this._callbacks.get(t))!=null&&e.length)}}class Ex{constructor(){h(this,"_list",[]);h(this,"_index",{})}push(t,e){if(this._index[t])throw Error(`Key already in index ${t}`);const s=this._list.push(e)-1;this._index[t]=s}has(t){return this._index[t]!==void 0}get(t){const e=this._index[t];return e!==void 0?this._list[e]:null}remove(t){const e=this._index[t];if(e!==void 0){this._list.splice(e,1),delete this._index[t];for(t in this._index){const s=this._index[t];s>e&&(this._index[t]=s-1)}return!0}return!1}list(){return this._list}clear(){this._list.length=0;for(const t in this._index)delete this._index[t]}}const bx=l=>{const t={};let e=t;return()=>(e===t&&(e=l()),e)},ii=class ii{static loadScript(t,e){const s=document.createElement("script");s.setAttribute("src",t),s.onload=()=>{e(null)},s.onerror=()=>{e(`Failed to load script='${t}'`)},document.body.appendChild(s)}static loadWasm(t,e,s){const i=ii.wasmSupported()&&e.glueUrl&&e.wasmUrl?e.glueUrl:e.fallbackUrl;i?ii.loadScript(i,r=>{if(r)s(r,null);else{const a=window[t];window[t]=void 0,a({locateFile:()=>e.wasmUrl,onAbort:()=>{s("wasm module aborted.")}}).then(n=>{s(null,n)})}}):s("No supported wasm modules found.",null)}static getModule(t){return ii.modules.hasOwnProperty(t)||(ii.modules[t]={config:null,initializing:!1,instance:null,callbacks:[]}),ii.modules[t]}static initialize(t,e){if(e.initializing)return;const s=e.config;(s.glueUrl||s.wasmUrl||s.fallbackUrl)&&(e.initializing=!0,ii.loadWasm(t,s,(i,r)=>{i?s.errorHandler?s.errorHandler(i):console.error(`failed to initialize module=${t} error=${i}`):(e.instance=r,e.callbacks.forEach(a=>{a(r)}))}))}};h(ii,"modules",{}),h(ii,"wasmSupported",bx(()=>{try{if(typeof WebAssembly=="object"&&typeof WebAssembly.instantiate=="function"){const t=new WebAssembly.Module(Uint8Array.of(0,97,115,109,1,0,0,0));if(t instanceof WebAssembly.Module)return new WebAssembly.Instance(t)instanceof WebAssembly.Instance}}catch{}return!1}));let jr=ii;class rS{static setConfig(t,e){const s=jr.getModule(t);s.config=e,s.callbacks.length>0&&jr.initialize(t,s)}static getConfig(t){var e,s;return(s=(e=jr.modules)==null?void 0:e[t])==null?void 0:s.config}static getInstance(t,e){const s=jr.getModule(t);s.instance?e(s.instance):(s.callbacks.push(e),s.config&&jr.initialize(t,s))}}class aS{constructor(t){h(this,"arraybuffer");h(this,"dataView");h(this,"offset",0);this.arraybuffer=t,this.dataView=new DataView(t)}get remainingBytes(){return this.dataView.byteLength-this.offset}reset(t=0){this.offset=t}skip(t){this.offset+=t}align(t){this.offset=this.offset+t-1&~(t-1)}_inc(t){return this.offset+=t,this.offset-t}readChar(){return String.fromCharCode(this.dataView.getUint8(this.offset++))}readChars(t){let e="";for(let s=0;s<t;++s)e+=this.readChar();return e}readU8(){return this.dataView.getUint8(this.offset++)}readU16(){return this.dataView.getUint16(this._inc(2),!0)}readU32(){return this.dataView.getUint32(this._inc(4),!0)}readU64(){return this.readU32()+2**32*this.readU32()}readU32be(){return this.dataView.getUint32(this._inc(4),!1)}readArray(t){for(let e=0;e<t.length;++e)t[e]=this.readU8()}readLine(){const t=this.dataView;let e="";for(;!(this.offset>=t.byteLength);){const s=String.fromCharCode(this.readU8());if(s===`
`)break;e+=s}return e}}class zh{constructor(t){h(this,"items",[]);h(this,"length",0);h(this,"loopIndex",-1);h(this,"_sortBy");h(this,"_sortHandler");this._sortBy=t.sortBy,this._sortHandler=this._doSort.bind(this)}_binarySearch(t){let e=0,s=this.items.length-1;const i=t[this._sortBy];let r,a;for(;e<=s;)r=Math.floor((e+s)/2),a=this.items[r][this._sortBy],a<=i?e=r+1:a>i&&(s=r-1);return e}_doSort(t,e){const s=this._sortBy;return t[s]-e[s]}insert(t){const e=this._binarySearch(t);this.items.splice(e,0,t),this.length++,this.loopIndex>=e&&this.loopIndex++}append(t){this.items.push(t),this.length++}remove(t){const e=this.items.indexOf(t);e<0||(this.items.splice(e,1),this.length--,this.loopIndex>=e&&this.loopIndex--)}sort(){const t=this.loopIndex>=0?this.items[this.loopIndex]:null;this.items.sort(this._sortHandler),t!==null&&(this.loopIndex=this.items.indexOf(t))}}class Eo extends Se{constructor(e){super();h(this,"_index",{});h(this,"_list",[]);this._parent=e}add(...e){let s=!1;const i=this._processArguments(e,!0);if(!i.length)return s;for(let r=0;r<i.length;r++)this._index[i[r]]||(s=!0,this._index[i[r]]=!0,this._list.push(i[r]),this.fire("add",i[r],this._parent));return s&&this.fire("change",this._parent),s}remove(...e){let s=!1;if(!this._list.length)return s;const i=this._processArguments(e,!0);if(!i.length)return s;for(let r=0;r<i.length;r++)this._index[i[r]]&&(s=!0,delete this._index[i[r]],this._list.splice(this._list.indexOf(i[r]),1),this.fire("remove",i[r],this._parent));return s&&this.fire("change",this._parent),s}clear(){if(!this._list.length)return;const e=this._list.slice(0);this._list=[],this._index={};for(let s=0;s<e.length;s++)this.fire("remove",e[s],this._parent);this.fire("change",this._parent)}has(...e){return this._list.length?this._has(this._processArguments(e)):!1}_has(e){if(!this._list.length||!e.length)return!1;for(let s=0;s<e.length;s++)if(e[s].length===1){if(this._index[e[s][0]])return!0}else{let i=!0;for(let r=0;r<e[s].length;r++)if(!this._index[e[s][r]]){i=!1;break}if(i)return!0}return!1}list(){return this._list.slice(0)}_processArguments(e,s){const i=[];let r=[];if(!e||!e.length)return i;for(let a=0;a<e.length;a++)if(e[a]instanceof Array){s||(r=[]);for(let n=0;n<e[a].length;n++)typeof e[a][n]=="string"&&(s?i.push(e[a][n]):r.push(e[a][n]));!s&&r.length&&i.push(r)}else typeof e[a]=="string"&&(s?i.push(e[a]):i.push([e[a]]));return i}get size(){return this._list.length}}h(Eo,"EVENT_ADD","add"),h(Eo,"EVENT_REMOVE","remove"),h(Eo,"EVENT_CHANGE","change");const pe=typeof window<"u"&&window.performance&&window.performance.now?performance.now.bind(performance):Date.now,Ax=/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;class ud{constructor(t){h(this,"scheme");h(this,"authority");h(this,"path");h(this,"query");h(this,"fragment");const e=t.match(Ax);this.scheme=e[2],this.authority=e[4],this.path=e[5],this.query=e[7],this.fragment=e[9]}toString(){let t="";return this.scheme&&(t+=`${this.scheme}:`),this.authority&&(t+=`//${this.authority}`),t+=this.path,this.query&&(t+=`?${this.query}`),this.fragment&&(t+=`#${this.fragment}`),t}getQuery(){const t={};if(this.query){const e=decodeURIComponent(this.query).split("&");for(const s of e){const i=s.split("=");t[i[0]]=i[1]}}return t}setQuery(t){let e="";for(const s in t)t.hasOwnProperty(s)&&(e!==""&&(e+="&"),e+=`${encodeURIComponent(s)}=${encodeURIComponent(t[s])}`);this.query=e}}const Cx=0,Cu=1,nm=4,Px=5,Y={DEG_TO_RAD:Math.PI/180,RAD_TO_DEG:180/Math.PI,clamp(l,t,e){return l>=e?e:l<=t?t:l},intToBytes24(l){const t=l>>16&255,e=l>>8&255,s=l&255;return[t,e,s]},intToBytes32(l){const t=l>>24&255,e=l>>16&255,s=l>>8&255,i=l&255;return[t,e,s,i]},bytesToInt24(l,t,e){return l.length&&(e=l[2],t=l[1],l=l[0]),l<<16|t<<8|e},bytesToInt32(l,t,e,s){return l.length&&(s=l[3],e=l[2],t=l[1],l=l[0]),(l<<24|t<<16|e<<8|s)>>>0},lerp(l,t,e){return l+(t-l)*Y.clamp(e,0,1)},lerpAngle(l,t,e){return t-l>180&&(t-=360),t-l<-180&&(t+=360),Y.lerp(l,t,Y.clamp(e,0,1))},powerOfTwo(l){return l!==0&&!(l&l-1)},nextPowerOfTwo(l){return l--,l|=l>>1,l|=l>>2,l|=l>>4,l|=l>>8,l|=l>>16,l++,l},nearestPowerOfTwo(l){return Math.pow(2,Math.round(Math.log2(l)))},random(l,t){const e=t-l;return Math.random()*e+l},smoothstep(l,t,e){return e<=l?0:e>=t?1:(e=(e-l)/(t-l),e*e*(3-2*e))},smootherstep(l,t,e){return e<=l?0:e>=t?1:(e=(e-l)/(t-l),e*e*e*(e*(e*6-15)+10))},roundUp(l,t){return t===0?l:Math.ceil(l/t)*t},between(l,t,e,s){const i=Math.min(t,e),r=Math.max(t,e);return s?l>=i&&l<=r:l>i&&l<r}},vt=class vt{constructor(t=0,e=0,s=0,i=1){h(this,"r");h(this,"g");h(this,"b");h(this,"a");const r=t.length;r===3||r===4?(this.r=t[0],this.g=t[1],this.b=t[2],this.a=t[3]??1):(this.r=t,this.g=e,this.b=s,this.a=i)}clone(){const t=this.constructor;return new t(this.r,this.g,this.b,this.a)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this.a=t.a,this}equals(t){return this.r===t.r&&this.g===t.g&&this.b===t.b&&this.a===t.a}set(t,e,s,i=1){return this.r=t,this.g=e,this.b=s,this.a=i,this}lerp(t,e,s){return this.r=t.r+s*(e.r-t.r),this.g=t.g+s*(e.g-t.g),this.b=t.b+s*(e.b-t.b),this.a=t.a+s*(e.a-t.a),this}linear(t=this){return this.r=Math.pow(t.r,2.2),this.g=Math.pow(t.g,2.2),this.b=Math.pow(t.b,2.2),this.a=t.a,this}gamma(t=this){return this.r=Math.pow(t.r,1/2.2),this.g=Math.pow(t.g,1/2.2),this.b=Math.pow(t.b,1/2.2),this.a=t.a,this}mulScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}fromString(t){const e=parseInt(t.replace("#","0x"),16);let s;return t.length>7?s=Y.intToBytes32(e):(s=Y.intToBytes24(e),s[3]=255),this.set(s[0]/255,s[1]/255,s[2]/255,s[3]/255),this}fromArray(t,e=0){return this.r=t[e]??this.r,this.g=t[e+1]??this.g,this.b=t[e+2]??this.b,this.a=t[e+3]??this.a,this}toString(t,e){const{r:s,g:i,b:r,a}=this;if(e||s>1||i>1||r>1)return`${s.toFixed(3)}, ${i.toFixed(3)}, ${r.toFixed(3)}, ${a.toFixed(3)}`;let n=`#${((1<<24)+(Math.round(s*255)<<16)+(Math.round(i*255)<<8)+Math.round(r*255)).toString(16).slice(1)}`;if(t===!0){const o=Math.round(a*255).toString(16);this.a<16/255?n+=`0${o}`:n+=o}return n}toArray(t=[],e=0,s=!0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,s&&(t[e+3]=this.a),t}};h(vt,"BLACK",Object.freeze(new vt(0,0,0,1))),h(vt,"BLUE",Object.freeze(new vt(0,0,1,1))),h(vt,"CYAN",Object.freeze(new vt(0,1,1,1))),h(vt,"GRAY",Object.freeze(new vt(.5,.5,.5,1))),h(vt,"GREEN",Object.freeze(new vt(0,1,0,1))),h(vt,"MAGENTA",Object.freeze(new vt(1,0,1,1))),h(vt,"RED",Object.freeze(new vt(1,0,0,1))),h(vt,"WHITE",Object.freeze(new vt(1,1,1,1))),h(vt,"YELLOW",Object.freeze(new vt(1,1,0,1)));let ae=vt;class nS{constructor(t,e=0){h(this,"_curve");h(this,"_left",-1/0);h(this,"_right",1/0);h(this,"_recip",0);h(this,"_p0",0);h(this,"_p1",0);h(this,"_m0",0);h(this,"_m1",0);this._curve=t,this._reset(e)}evaluate(t,e=!1){(e||t<this._left||t>=this._right)&&this._reset(t);let s;const i=this._curve.type;if(i===Px)s=this._p0;else{const r=this._recip===0?0:(t-this._left)*this._recip;i===Cx?s=Y.lerp(this._p0,this._p1,r):i===Cu?s=Y.lerp(this._p0,this._p1,r*r*(3-2*r)):s=this._evaluateHermite(this._p0,this._p1,this._m0,this._m1,r)}return s}_reset(t){const e=this._curve.keys,s=e.length;if(!s)this._left=-1/0,this._right=1/0,this._recip=0,this._p0=this._p1=this._m0=this._m1=0;else if(t<e[0][0])this._left=-1/0,this._right=e[0][0],this._recip=0,this._p0=this._p1=e[0][1],this._m0=this._m1=0;else if(t>=e[s-1][0])this._left=e[s-1][0],this._right=1/0,this._recip=0,this._p0=this._p1=e[s-1][1],this._m0=this._m1=0;else{let i=0;for(;t>=e[i+1][0];)i++;this._left=e[i][0],this._right=e[i+1][0];const r=1/(this._right-this._left);this._recip=isFinite(r)?r:0,this._p0=e[i][1],this._p1=e[i+1][1],this._curve.type===nm&&this._calcTangents(e,i)}}_calcTangents(t,e){let s;const i=t[e],r=t[e+1];let a;if(e===0?s=[t[0][0]+(t[0][0]-t[1][0]),t[0][1]+(t[0][1]-t[1][1])]:s=t[e-1],e===t.length-2?a=[t[e+1][0]+(t[e+1][0]-t[e][0]),t[e+1][1]+(t[e+1][1]-t[e][1])]:a=t[e+2],this._curve.type===nm){const n=2*(r[0]-i[0])/(r[0]-s[0]),o=2*(r[0]-i[0])/(a[0]-i[0]);this._m0=this._curve.tension*(isFinite(n)?n:0)*(r[1]-s[1]),this._m1=this._curve.tension*(isFinite(o)?o:0)*(a[1]-i[1])}else{const n=(r[0]-i[0])/(i[0]-s[0]),o=(r[0]-i[0])/(a[0]-r[0]),c=i[1]+(s[1]-i[1])*(isFinite(n)?n:0),d=r[1]+(a[1]-r[1])*(isFinite(o)?o:0),f=this._curve.tension;this._m0=f*(r[1]-c),this._m1=f*(d-i[1])}}_evaluateHermite(t,e,s,i,r){const a=r*r,n=r+r,o=1-r,c=o*o;return t*((1+n)*c)+s*(r*c)+e*(a*(3-n))+i*(a*(r-1))}}class $s{constructor(t){h(this,"keys",[]);h(this,"type",Cu);h(this,"tension",.5);h(this,"_eval",new nS(this));if(t)for(let e=0;e<t.length-1;e+=2)this.keys.push([t[e],t[e+1]]);this.sort()}get length(){return this.keys.length}add(t,e){const s=this.keys,i=s.length;let r=0;for(;r<i&&!(s[r][0]>t);r++);const a=[t,e];return this.keys.splice(r,0,a),a}get(t){return this.keys[t]}sort(){this.keys.sort((t,e)=>t[0]-e[0])}value(t){return this._eval.evaluate(t,!0)}closest(t){const e=this.keys,s=e.length;let i=2,r=null;for(let a=0;a<s;a++){const n=Math.abs(t-e[a][0]);if(i>=n)i=n,r=e[a];else break}return r}clone(){const t=new this.constructor;return t.keys=this.keys.map(e=>[...e]),t.type=this.type,t.tension=this.tension,t}quantize(t){t=Math.max(t,2);const e=new Float32Array(t),s=1/(t-1);e[0]=this._eval.evaluate(0,!0);for(let i=1;i<t;i++)e[i]=this._eval.evaluate(s*i);return e}quantizeClamped(t,e,s){const i=this.quantize(t);for(let r=0;r<i.length;++r)i[r]=Math.min(s,Math.max(e,i[r]));return i}}class ra{constructor(...t){h(this,"curves",[]);h(this,"_type",Cu);if(t.length>1)for(let e=0;e<t.length;e++)this.curves.push(new $s(t[e]));else if(t.length===0)this.curves.push(new $s);else{const e=t[0];if(typeof e=="number")for(let s=0;s<e;s++)this.curves.push(new $s);else for(let s=0;s<e.length;s++)this.curves.push(new $s(e[s]))}}get length(){return this.curves.length}set type(t){this._type=t;for(let e=0;e<this.curves.length;e++)this.curves[e].type=t}get type(){return this._type}get(t){return this.curves[t]}value(t,e=[]){const s=this.curves.length;e.length=s;for(let i=0;i<s;i++)e[i]=this.curves[i].value(t);return e}clone(){const t=new this.constructor;t.curves=[];for(let e=0;e<this.curves.length;e++)t.curves.push(this.curves[e].clone());return t._type=this._type,t}quantize(t){t=Math.max(t,2);const e=this.curves.length,s=new Float32Array(t*e),i=1/(t-1);for(let r=0;r<e;r++){const a=new nS(this.curves[r]);for(let n=0;n<t;n++)s[n*e+r]=a.evaluate(i*n)}return s}quantizeClamped(t,e,s){const i=this.quantize(t);for(let r=0;r<i.length;++r)i[r]=Math.min(s,Math.max(e,i[r]));return i}}const _f=new Float32Array(1),om=new Int32Array(_f.buffer);class ko{static float2Half(t){_f[0]=t;const e=om[0];let s=e>>16&32768,i=e>>12&2047;const r=e>>23&255;return r<103?s:r>142?(s|=31744,s|=(r===255?0:1)&&e&8388607,s):r<113?(i|=2048,s|=(i>>114-r)+(i>>113-r&1),s):(s|=r-112<<10|i>>1,s+=i&1,s)}static float2RGBA8(t,e){_f[0]=t;const s=om[0];e.r=(s>>24&255)/255,e.g=(s>>16&255)/255,e.b=(s>>8&255)/255,e.a=(s&255)/255}}const xt=class xt{constructor(t=0,e=0,s=0){h(this,"x");h(this,"y");h(this,"z");t.length===3?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t,this.y=e,this.z=s)}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}add2(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addScaled(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}clone(){const t=this.constructor;return new t(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}cross(t,e){const s=t.x,i=t.y,r=t.z,a=e.x,n=e.y,o=e.z;return this.x=i*o-n*r,this.y=r*a-o*s,this.z=s*n-a*i,this}distance(t){const e=this.x-t.x,s=this.y-t.y,i=this.z-t.z;return Math.sqrt(e*e+s*s+i*i)}div(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}div2(t,e){return this.x=t.x/e.x,this.y=t.y/e.y,this.z=t.z/e.z,this}divScalar(t){return this.x/=t,this.y/=t,this.z/=t,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsApprox(t,e=1e-6){return Math.abs(this.x-t.x)<e&&Math.abs(this.y-t.y)<e&&Math.abs(this.z-t.z)<e}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}lerp(t,e,s){return this.x=t.x+s*(e.x-t.x),this.y=t.y+s*(e.y-t.y),this.z=t.z+s*(e.z-t.z),this}mul(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}mul2(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}mulScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}normalize(t=this){const e=t.x*t.x+t.y*t.y+t.z*t.z;if(e>0){const s=1/Math.sqrt(e);this.x=t.x*s,this.y=t.y*s,this.z=t.z*s}return this}floor(t=this){return this.x=Math.floor(t.x),this.y=Math.floor(t.y),this.z=Math.floor(t.z),this}ceil(t=this){return this.x=Math.ceil(t.x),this.y=Math.ceil(t.y),this.z=Math.ceil(t.z),this}round(t=this){return this.x=Math.round(t.x),this.y=Math.round(t.y),this.z=Math.round(t.z),this}min(t){return t.x<this.x&&(this.x=t.x),t.y<this.y&&(this.y=t.y),t.z<this.z&&(this.z=t.z),this}max(t){return t.x>this.x&&(this.x=t.x),t.y>this.y&&(this.y=t.y),t.z>this.z&&(this.z=t.z),this}project(t){const e=this.x*t.x+this.y*t.y+this.z*t.z,s=t.x*t.x+t.y*t.y+t.z*t.z,i=e/s;return this.x=t.x*i,this.y=t.y*i,this.z=t.z*i,this}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}sub2(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}fromArray(t,e=0){return this.x=t[e]??this.x,this.y=t[e+1]??this.y,this.z=t[e+2]??this.z,this}toString(){return`[${this.x}, ${this.y}, ${this.z}]`}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}};h(xt,"ZERO",Object.freeze(new xt(0,0,0))),h(xt,"HALF",Object.freeze(new xt(.5,.5,.5))),h(xt,"ONE",Object.freeze(new xt(1,1,1))),h(xt,"UP",Object.freeze(new xt(0,1,0))),h(xt,"DOWN",Object.freeze(new xt(0,-1,0))),h(xt,"RIGHT",Object.freeze(new xt(1,0,0))),h(xt,"LEFT",Object.freeze(new xt(-1,0,0))),h(xt,"FORWARD",Object.freeze(new xt(0,0,-1))),h(xt,"BACK",Object.freeze(new xt(0,0,1)));let A=xt;const fn=class fn{constructor(){h(this,"data",new Float32Array(9));this.data[0]=this.data[4]=this.data[8]=1}clone(){const t=this.constructor;return new t().copy(this)}copy(t){const e=t.data,s=this.data;return s[0]=e[0],s[1]=e[1],s[2]=e[2],s[3]=e[3],s[4]=e[4],s[5]=e[5],s[6]=e[6],s[7]=e[7],s[8]=e[8],this}set(t){const e=this.data;return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],this}getX(t=new A){return t.set(this.data[0],this.data[1],this.data[2])}getY(t=new A){return t.set(this.data[3],this.data[4],this.data[5])}getZ(t=new A){return t.set(this.data[6],this.data[7],this.data[8])}equals(t){const e=this.data,s=t.data;return e[0]===s[0]&&e[1]===s[1]&&e[2]===s[2]&&e[3]===s[3]&&e[4]===s[4]&&e[5]===s[5]&&e[6]===s[6]&&e[7]===s[7]&&e[8]===s[8]}isIdentity(){const t=this.data;return t[0]===1&&t[1]===0&&t[2]===0&&t[3]===0&&t[4]===1&&t[5]===0&&t[6]===0&&t[7]===0&&t[8]===1}setIdentity(){const t=this.data;return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,this}toString(){return`[${this.data.join(", ")}]`}transpose(t=this){const e=t.data,s=this.data;if(e===s){let i;i=e[1],s[1]=e[3],s[3]=i,i=e[2],s[2]=e[6],s[6]=i,i=e[5],s[5]=e[7],s[7]=i}else s[0]=e[0],s[1]=e[3],s[2]=e[6],s[3]=e[1],s[4]=e[4],s[5]=e[7],s[6]=e[2],s[7]=e[5],s[8]=e[8];return this}setFromMat4(t){const e=t.data,s=this.data;return s[0]=e[0],s[1]=e[1],s[2]=e[2],s[3]=e[4],s[4]=e[5],s[5]=e[6],s[6]=e[8],s[7]=e[9],s[8]=e[10],this}setFromQuat(t){const e=t.x,s=t.y,i=t.z,r=t.w,a=e+e,n=s+s,o=i+i,c=e*a,d=e*n,f=e*o,u=s*n,p=s*o,m=i*o,_=r*a,S=r*n,g=r*o,v=this.data;return v[0]=1-(u+m),v[1]=d+g,v[2]=f-S,v[3]=d-g,v[4]=1-(c+m),v[5]=p+_,v[6]=f+S,v[7]=p-_,v[8]=1-(c+u),this}invertMat4(t){const e=t.data,s=e[0],i=e[1],r=e[2],a=e[4],n=e[5],o=e[6],c=e[8],d=e[9],f=e[10],u=f*n-o*d,p=-f*i+r*d,m=o*i-r*n,_=-f*a+o*c,S=f*s-r*c,g=-o*s+r*a,v=d*a-n*c,w=-d*s+i*c,x=n*s-i*a,b=s*u+i*_+r*v;if(b===0)this.setIdentity();else{const C=1/b,D=this.data;D[0]=u*C,D[1]=p*C,D[2]=m*C,D[3]=_*C,D[4]=S*C,D[5]=g*C,D[6]=v*C,D[7]=w*C,D[8]=x*C}return this}transformVector(t,e=new A){const s=this.data,{x:i,y:r,z:a}=t;return e.x=i*s[0]+r*s[3]+a*s[6],e.y=i*s[1]+r*s[4]+a*s[7],e.z=i*s[2]+r*s[5]+a*s[8],e}};h(fn,"IDENTITY",Object.freeze(new fn)),h(fn,"ZERO",Object.freeze(new fn().set([0,0,0,0,0,0,0,0,0])));let _i=fn;const Vt=class Vt{constructor(t=0,e=0){h(this,"x");h(this,"y");t.length===2?(this.x=t[0],this.y=t[1]):(this.x=t,this.y=e)}add(t){return this.x+=t.x,this.y+=t.y,this}add2(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addScaled(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}clone(){const t=this.constructor;return new t(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}cross(t){return this.x*t.y-this.y*t.x}distance(t){const e=this.x-t.x,s=this.y-t.y;return Math.sqrt(e*e+s*s)}div(t){return this.x/=t.x,this.y/=t.y,this}div2(t,e){return this.x=t.x/e.x,this.y=t.y/e.y,this}divScalar(t){return this.x/=t,this.y/=t,this}dot(t){return this.x*t.x+this.y*t.y}equals(t){return this.x===t.x&&this.y===t.y}equalsApprox(t,e=1e-6){return Math.abs(this.x-t.x)<e&&Math.abs(this.y-t.y)<e}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}lengthSq(){return this.x*this.x+this.y*this.y}lerp(t,e,s){return this.x=t.x+s*(e.x-t.x),this.y=t.y+s*(e.y-t.y),this}mul(t){return this.x*=t.x,this.y*=t.y,this}mul2(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this}mulScalar(t){return this.x*=t,this.y*=t,this}normalize(t=this){const e=t.x*t.x+t.y*t.y;if(e>0){const s=1/Math.sqrt(e);this.x=t.x*s,this.y=t.y*s}return this}rotate(t){const e=Math.atan2(this.x,this.y)+t*Y.DEG_TO_RAD,s=Math.sqrt(this.x*this.x+this.y*this.y);return this.x=Math.sin(e)*s,this.y=Math.cos(e)*s,this}angle(){return Math.atan2(this.x,this.y)*Y.RAD_TO_DEG}angleTo(t){return Math.atan2(this.x*t.y+this.y*t.x,this.x*t.x+this.y*t.y)*Y.RAD_TO_DEG}floor(t=this){return this.x=Math.floor(t.x),this.y=Math.floor(t.y),this}ceil(t=this){return this.x=Math.ceil(t.x),this.y=Math.ceil(t.y),this}round(t=this){return this.x=Math.round(t.x),this.y=Math.round(t.y),this}min(t){return t.x<this.x&&(this.x=t.x),t.y<this.y&&(this.y=t.y),this}max(t){return t.x>this.x&&(this.x=t.x),t.y>this.y&&(this.y=t.y),this}set(t,e){return this.x=t,this.y=e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}sub2(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}subScalar(t){return this.x-=t,this.y-=t,this}fromArray(t,e=0){return this.x=t[e]??this.x,this.y=t[e+1]??this.y,this}toString(){return`[${this.x}, ${this.y}]`}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}static angleRad(t,e){return Math.atan2(t.x*e.y-t.y*e.x,t.x*e.x+t.y*e.y)}};h(Vt,"ZERO",Object.freeze(new Vt(0,0))),h(Vt,"HALF",Object.freeze(new Vt(.5,.5))),h(Vt,"ONE",Object.freeze(new Vt(1,1))),h(Vt,"UP",Object.freeze(new Vt(0,1))),h(Vt,"DOWN",Object.freeze(new Vt(0,-1))),h(Vt,"RIGHT",Object.freeze(new Vt(1,0))),h(Vt,"LEFT",Object.freeze(new Vt(-1,0)));let J=Vt;const ur=class ur{constructor(t=0,e=0,s=0,i=0){h(this,"x");h(this,"y");h(this,"z");h(this,"w");t.length===4?(this.x=t[0],this.y=t[1],this.z=t[2],this.w=t[3]):(this.x=t,this.y=e,this.z=s,this.w=i)}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}add2(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addScaled(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}clone(){const t=this.constructor;return new t(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}div(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}div2(t,e){return this.x=t.x/e.x,this.y=t.y/e.y,this.z=t.z/e.z,this.w=t.w/e.w,this}divScalar(t){return this.x/=t,this.y/=t,this.z/=t,this.w/=t,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z&&this.w===t.w}equalsApprox(t,e=1e-6){return Math.abs(this.x-t.x)<e&&Math.abs(this.y-t.y)<e&&Math.abs(this.z-t.z)<e&&Math.abs(this.w-t.w)<e}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}lerp(t,e,s){return this.x=t.x+s*(e.x-t.x),this.y=t.y+s*(e.y-t.y),this.z=t.z+s*(e.z-t.z),this.w=t.w+s*(e.w-t.w),this}mul(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}mul2(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this.w=t.w*e.w,this}mulScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}normalize(t=this){const e=t.x*t.x+t.y*t.y+t.z*t.z+t.w*t.w;if(e>0){const s=1/Math.sqrt(e);this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=t.w*s}return this}floor(t=this){return this.x=Math.floor(t.x),this.y=Math.floor(t.y),this.z=Math.floor(t.z),this.w=Math.floor(t.w),this}ceil(t=this){return this.x=Math.ceil(t.x),this.y=Math.ceil(t.y),this.z=Math.ceil(t.z),this.w=Math.ceil(t.w),this}round(t=this){return this.x=Math.round(t.x),this.y=Math.round(t.y),this.z=Math.round(t.z),this.w=Math.round(t.w),this}min(t){return t.x<this.x&&(this.x=t.x),t.y<this.y&&(this.y=t.y),t.z<this.z&&(this.z=t.z),t.w<this.w&&(this.w=t.w),this}max(t){return t.x>this.x&&(this.x=t.x),t.y>this.y&&(this.y=t.y),t.z>this.z&&(this.z=t.z),t.w>this.w&&(this.w=t.w),this}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}sub2(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}fromArray(t,e=0){return this.x=t[e]??this.x,this.y=t[e+1]??this.y,this.z=t[e+2]??this.z,this.w=t[e+3]??this.w,this}toString(){return`[${this.x}, ${this.y}, ${this.z}, ${this.w}]`}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}};h(ur,"ZERO",Object.freeze(new ur(0,0,0,0))),h(ur,"HALF",Object.freeze(new ur(.5,.5,.5,.5))),h(ur,"ONE",Object.freeze(new ur(1,1,1,1)));let oe=ur;const Kn=new J,Ls=new A,Js=new A,ei=new A,Ll=new A,Zr=class Zr{constructor(){h(this,"data",new Float32Array(16));this.data[0]=this.data[5]=this.data[10]=this.data[15]=1}static _getPerspectiveHalfSize(t,e,s,i,r){r?(t.x=i*Math.tan(e*Math.PI/360),t.y=t.x/s):(t.y=i*Math.tan(e*Math.PI/360),t.x=t.y*s)}add2(t,e){const s=t.data,i=e.data,r=this.data;return r[0]=s[0]+i[0],r[1]=s[1]+i[1],r[2]=s[2]+i[2],r[3]=s[3]+i[3],r[4]=s[4]+i[4],r[5]=s[5]+i[5],r[6]=s[6]+i[6],r[7]=s[7]+i[7],r[8]=s[8]+i[8],r[9]=s[9]+i[9],r[10]=s[10]+i[10],r[11]=s[11]+i[11],r[12]=s[12]+i[12],r[13]=s[13]+i[13],r[14]=s[14]+i[14],r[15]=s[15]+i[15],this}add(t){return this.add2(this,t)}clone(){const t=this.constructor;return new t().copy(this)}copy(t){const e=t.data,s=this.data;return s[0]=e[0],s[1]=e[1],s[2]=e[2],s[3]=e[3],s[4]=e[4],s[5]=e[5],s[6]=e[6],s[7]=e[7],s[8]=e[8],s[9]=e[9],s[10]=e[10],s[11]=e[11],s[12]=e[12],s[13]=e[13],s[14]=e[14],s[15]=e[15],this}equals(t){const e=this.data,s=t.data;return e[0]===s[0]&&e[1]===s[1]&&e[2]===s[2]&&e[3]===s[3]&&e[4]===s[4]&&e[5]===s[5]&&e[6]===s[6]&&e[7]===s[7]&&e[8]===s[8]&&e[9]===s[9]&&e[10]===s[10]&&e[11]===s[11]&&e[12]===s[12]&&e[13]===s[13]&&e[14]===s[14]&&e[15]===s[15]}isIdentity(){const t=this.data;return t[0]===1&&t[1]===0&&t[2]===0&&t[3]===0&&t[4]===0&&t[5]===1&&t[6]===0&&t[7]===0&&t[8]===0&&t[9]===0&&t[10]===1&&t[11]===0&&t[12]===0&&t[13]===0&&t[14]===0&&t[15]===1}mul2(t,e){const s=t.data,i=e.data,r=this.data,a=s[0],n=s[1],o=s[2],c=s[3],d=s[4],f=s[5],u=s[6],p=s[7],m=s[8],_=s[9],S=s[10],g=s[11],v=s[12],w=s[13],x=s[14],b=s[15];let C,D,T,I;return C=i[0],D=i[1],T=i[2],I=i[3],r[0]=a*C+d*D+m*T+v*I,r[1]=n*C+f*D+_*T+w*I,r[2]=o*C+u*D+S*T+x*I,r[3]=c*C+p*D+g*T+b*I,C=i[4],D=i[5],T=i[6],I=i[7],r[4]=a*C+d*D+m*T+v*I,r[5]=n*C+f*D+_*T+w*I,r[6]=o*C+u*D+S*T+x*I,r[7]=c*C+p*D+g*T+b*I,C=i[8],D=i[9],T=i[10],I=i[11],r[8]=a*C+d*D+m*T+v*I,r[9]=n*C+f*D+_*T+w*I,r[10]=o*C+u*D+S*T+x*I,r[11]=c*C+p*D+g*T+b*I,C=i[12],D=i[13],T=i[14],I=i[15],r[12]=a*C+d*D+m*T+v*I,r[13]=n*C+f*D+_*T+w*I,r[14]=o*C+u*D+S*T+x*I,r[15]=c*C+p*D+g*T+b*I,this}mulAffine2(t,e){const s=t.data,i=e.data,r=this.data,a=s[0],n=s[1],o=s[2],c=s[4],d=s[5],f=s[6],u=s[8],p=s[9],m=s[10],_=s[12],S=s[13],g=s[14];let v,w,x;return v=i[0],w=i[1],x=i[2],r[0]=a*v+c*w+u*x,r[1]=n*v+d*w+p*x,r[2]=o*v+f*w+m*x,r[3]=0,v=i[4],w=i[5],x=i[6],r[4]=a*v+c*w+u*x,r[5]=n*v+d*w+p*x,r[6]=o*v+f*w+m*x,r[7]=0,v=i[8],w=i[9],x=i[10],r[8]=a*v+c*w+u*x,r[9]=n*v+d*w+p*x,r[10]=o*v+f*w+m*x,r[11]=0,v=i[12],w=i[13],x=i[14],r[12]=a*v+c*w+u*x+_,r[13]=n*v+d*w+p*x+S,r[14]=o*v+f*w+m*x+g,r[15]=1,this}mul(t){return this.mul2(this,t)}transformPoint(t,e=new A){const s=this.data,{x:i,y:r,z:a}=t;return e.x=i*s[0]+r*s[4]+a*s[8]+s[12],e.y=i*s[1]+r*s[5]+a*s[9]+s[13],e.z=i*s[2]+r*s[6]+a*s[10]+s[14],e}transformVector(t,e=new A){const s=this.data,{x:i,y:r,z:a}=t;return e.x=i*s[0]+r*s[4]+a*s[8],e.y=i*s[1]+r*s[5]+a*s[9],e.z=i*s[2]+r*s[6]+a*s[10],e}transformVec4(t,e=new oe){const s=this.data,{x:i,y:r,z:a,w:n}=t;return e.x=i*s[0]+r*s[4]+a*s[8]+n*s[12],e.y=i*s[1]+r*s[5]+a*s[9]+n*s[13],e.z=i*s[2]+r*s[6]+a*s[10]+n*s[14],e.w=i*s[3]+r*s[7]+a*s[11]+n*s[15],e}setLookAt(t,e,s){ei.sub2(t,e).normalize(),Js.copy(s).normalize(),Ls.cross(Js,ei).normalize(),Js.cross(ei,Ls);const i=this.data;return i[0]=Ls.x,i[1]=Ls.y,i[2]=Ls.z,i[3]=0,i[4]=Js.x,i[5]=Js.y,i[6]=Js.z,i[7]=0,i[8]=ei.x,i[9]=ei.y,i[10]=ei.z,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}setFrustum(t,e,s,i,r,a){const n=2*r,o=e-t,c=i-s,d=a-r,f=this.data;return f[0]=n/o,f[1]=0,f[2]=0,f[3]=0,f[4]=0,f[5]=n/c,f[6]=0,f[7]=0,f[8]=(e+t)/o,f[9]=(i+s)/c,f[10]=(-a-r)/d,f[11]=-1,f[12]=0,f[13]=0,f[14]=-n*a/d,f[15]=0,this}setPerspective(t,e,s,i,r){return Zr._getPerspectiveHalfSize(Kn,t,e,s,r),this.setFrustum(-Kn.x,Kn.x,-Kn.y,Kn.y,s,i)}setOrtho(t,e,s,i,r,a){const n=this.data;return n[0]=2/(e-t),n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=2/(i-s),n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=-2/(a-r),n[11]=0,n[12]=-(e+t)/(e-t),n[13]=-(i+s)/(i-s),n[14]=-(a+r)/(a-r),n[15]=1,this}setFromAxisAngle(t,e){e*=Y.DEG_TO_RAD;const{x:s,y:i,z:r}=t,a=Math.cos(e),n=Math.sin(e),o=1-a,c=o*s,d=o*i,f=this.data;return f[0]=c*s+a,f[1]=c*i+n*r,f[2]=c*r-n*i,f[3]=0,f[4]=c*i-n*r,f[5]=d*i+a,f[6]=d*r+n*s,f[7]=0,f[8]=c*r+n*i,f[9]=d*r-s*n,f[10]=o*r*r+a,f[11]=0,f[12]=0,f[13]=0,f[14]=0,f[15]=1,this}setTranslate(t,e,s){const i=this.data;return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=t,i[13]=e,i[14]=s,i[15]=1,this}setScale(t,e,s){const i=this.data;return i[0]=t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=e,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=s,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}setViewport(t,e,s,i){const r=this.data;return r[0]=s*.5,r[1]=0,r[2]=0,r[3]=0,r[4]=0,r[5]=i*.5,r[6]=0,r[7]=0,r[8]=0,r[9]=0,r[10]=.5,r[11]=0,r[12]=t+s*.5,r[13]=e+i*.5,r[14]=.5,r[15]=1,this}setReflection(t,e){const s=t.x,i=t.y,r=t.z,a=this.data;return a[0]=1-2*s*s,a[1]=-2*s*i,a[2]=-2*s*r,a[3]=0,a[4]=-2*s*i,a[5]=1-2*i*i,a[6]=-2*i*r,a[7]=0,a[8]=-2*s*r,a[9]=-2*i*r,a[10]=1-2*r*r,a[11]=0,a[12]=-2*s*e,a[13]=-2*i*e,a[14]=-2*r*e,a[15]=1,this}invert(t=this){const e=t.data,s=e[0],i=e[1],r=e[2],a=e[3],n=e[4],o=e[5],c=e[6],d=e[7],f=e[8],u=e[9],p=e[10],m=e[11],_=e[12],S=e[13],g=e[14],v=e[15],w=s*o-i*n,x=s*c-r*n,b=s*d-a*n,C=i*c-r*o,D=i*d-a*o,T=r*d-a*c,I=f*S-u*_,L=f*g-p*_,E=f*v-m*_,F=u*g-p*S,k=u*v-m*S,H=p*v-m*g,G=w*H-x*k+b*F+C*E-D*L+T*I;if(G===0)this.setIdentity();else{const W=1/G,R=this.data;R[0]=(o*H-c*k+d*F)*W,R[1]=(-i*H+r*k-a*F)*W,R[2]=(S*T-g*D+v*C)*W,R[3]=(-u*T+p*D-m*C)*W,R[4]=(-n*H+c*E-d*L)*W,R[5]=(s*H-r*E+a*L)*W,R[6]=(-_*T+g*b-v*x)*W,R[7]=(f*T-p*b+m*x)*W,R[8]=(n*k-o*E+d*I)*W,R[9]=(-s*k+i*E-a*I)*W,R[10]=(_*D-S*b+v*w)*W,R[11]=(-f*D+u*b-m*w)*W,R[12]=(-n*F+o*L-c*I)*W,R[13]=(s*F-i*L+r*I)*W,R[14]=(-_*C+S*x-g*w)*W,R[15]=(f*C-u*x+p*w)*W}return this}set(t){const e=this.data;return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],this}setIdentity(){const t=this.data;return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}setTRS(t,e,s){const i=e.x,r=e.y,a=e.z,n=e.w,o=s.x,c=s.y,d=s.z,f=i+i,u=r+r,p=a+a,m=i*f,_=i*u,S=i*p,g=r*u,v=r*p,w=a*p,x=n*f,b=n*u,C=n*p,D=this.data;return D[0]=(1-(g+w))*o,D[1]=(_+C)*o,D[2]=(S-b)*o,D[3]=0,D[4]=(_-C)*c,D[5]=(1-(m+w))*c,D[6]=(v+x)*c,D[7]=0,D[8]=(S+b)*d,D[9]=(v-x)*d,D[10]=(1-(m+g))*d,D[11]=0,D[12]=t.x,D[13]=t.y,D[14]=t.z,D[15]=1,this}transpose(t=this){const e=t.data,s=this.data;if(e===s){let i;i=e[1],s[1]=e[4],s[4]=i,i=e[2],s[2]=e[8],s[8]=i,i=e[3],s[3]=e[12],s[12]=i,i=e[6],s[6]=e[9],s[9]=i,i=e[7],s[7]=e[13],s[13]=i,i=e[11],s[11]=e[14],s[14]=i}else s[0]=e[0],s[1]=e[4],s[2]=e[8],s[3]=e[12],s[4]=e[1],s[5]=e[5],s[6]=e[9],s[7]=e[13],s[8]=e[2],s[9]=e[6],s[10]=e[10],s[11]=e[14],s[12]=e[3],s[13]=e[7],s[14]=e[11],s[15]=e[15];return this}getTranslation(t=new A){return t.set(this.data[12],this.data[13],this.data[14])}getX(t=new A){return t.set(this.data[0],this.data[1],this.data[2])}getY(t=new A){return t.set(this.data[4],this.data[5],this.data[6])}getZ(t=new A){return t.set(this.data[8],this.data[9],this.data[10])}getScale(t=new A){return this.getX(Ls),this.getY(Js),this.getZ(ei),t.set(Ls.length(),Js.length(),ei.length()),t}get scaleSign(){return this.getX(Ls),this.getY(Js),this.getZ(ei),Ls.cross(Ls,Js),Ls.dot(ei)<0?-1:1}setFromEulerAngles(t,e,s){t*=Y.DEG_TO_RAD,e*=Y.DEG_TO_RAD,s*=Y.DEG_TO_RAD;const i=Math.sin(-t),r=Math.cos(-t),a=Math.sin(-e),n=Math.cos(-e),o=Math.sin(-s),c=Math.cos(-s),d=this.data;return d[0]=n*c,d[1]=-n*o,d[2]=a,d[3]=0,d[4]=r*o+c*i*a,d[5]=r*c-i*a*o,d[6]=-n*i,d[7]=0,d[8]=i*o-r*c*a,d[9]=c*i+r*a*o,d[10]=r*n,d[11]=0,d[12]=0,d[13]=0,d[14]=0,d[15]=1,this}getEulerAngles(t=new A){this.getScale(Ll);const e=Ll.x,s=Ll.y,i=Ll.z;if(e===0||s===0||i===0)return t.set(0,0,0);const r=this.data,a=Math.asin(-r[2]/e),n=Math.PI*.5;let o,c;return a<n?a>-n?(o=Math.atan2(r[6]/s,r[10]/i),c=Math.atan2(r[1]/e,r[0]/e)):(c=0,o=-Math.atan2(r[4]/s,r[5]/s)):(c=0,o=Math.atan2(r[4]/s,r[5]/s)),t.set(o,a,c).mulScalar(Y.RAD_TO_DEG)}toString(){return`[${this.data.join(", ")}]`}};h(Zr,"IDENTITY",Object.freeze(new Zr)),h(Zr,"ZERO",Object.freeze(new Zr().set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])));let ie=Zr;const un=class un{constructor(t=0,e=0,s=0,i=1){h(this,"x");h(this,"y");h(this,"z");h(this,"w");t.length===4?(this.x=t[0],this.y=t[1],this.z=t[2],this.w=t[3]):(this.x=t,this.y=e,this.z=s,this.w=i)}clone(){const t=this.constructor;return new t(this.x,this.y,this.z,this.w)}conjugate(t=this){return this.x=t.x*-1,this.y=t.y*-1,this.z=t.z*-1,this.w=t.w,this}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z&&this.w===t.w}equalsApprox(t,e=1e-6){return Math.abs(this.x-t.x)<e&&Math.abs(this.y-t.y)<e&&Math.abs(this.z-t.z)<e&&Math.abs(this.w-t.w)<e}getAxisAngle(t){let e=Math.acos(this.w)*2;const s=Math.sin(e/2);return s!==0?(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s,(t.x<0||t.y<0||t.z<0)&&(t.x*=-1,t.y*=-1,t.z*=-1,e*=-1)):(t.x=1,t.y=0,t.z=0),e*Y.RAD_TO_DEG}getEulerAngles(t=new A){let e,s,i;const r=this.x,a=this.y,n=this.z,o=this.w,c=2*(o*a-r*n);return c<=-.99999?(e=2*Math.atan2(r,o),s=-Math.PI/2,i=0):c>=.99999?(e=2*Math.atan2(r,o),s=Math.PI/2,i=0):(e=Math.atan2(2*(o*r+a*n),1-2*(r*r+a*a)),s=Math.asin(c),i=Math.atan2(2*(o*n+r*a),1-2*(a*a+n*n))),t.set(e,s,i).mulScalar(Y.RAD_TO_DEG)}invert(t=this){return this.conjugate(t).normalize()}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}lerp(t,e,s){const i=(1-s)*(t.dot(e)<0?-1:1);return this.x=t.x*i+e.x*s,this.y=t.y*i+e.y*s,this.z=t.z*i+e.z*s,this.w=t.w*i+e.w*s,this.normalize()}mul(t){const e=this.x,s=this.y,i=this.z,r=this.w,a=t.x,n=t.y,o=t.z,c=t.w;return this.x=r*a+e*c+s*o-i*n,this.y=r*n+s*c+i*a-e*o,this.z=r*o+i*c+e*n-s*a,this.w=r*c-e*a-s*n-i*o,this}mulScalar(t,e=this){return this.x=e.x*t,this.y=e.y*t,this.z=e.z*t,this.w=e.w*t,this}mul2(t,e){const s=t.x,i=t.y,r=t.z,a=t.w,n=e.x,o=e.y,c=e.z,d=e.w;return this.x=a*n+s*d+i*c-r*o,this.y=a*o+i*d+r*n-s*c,this.z=a*c+r*d+s*o-i*n,this.w=a*d-s*n-i*o-r*c,this}normalize(t=this){let e=t.length();return e===0?(this.x=this.y=this.z=0,this.w=1):(e=1/e,this.x=t.x*e,this.y=t.y*e,this.z=t.z*e,this.w=t.w*e),this}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}setFromAxisAngle(t,e){e*=.5*Y.DEG_TO_RAD;const s=Math.sin(e),i=Math.cos(e);return this.x=s*t.x,this.y=s*t.y,this.z=s*t.z,this.w=i,this}setFromEulerAngles(t,e,s){if(t instanceof A){const f=t;t=f.x,e=f.y,s=f.z}const i=.5*Y.DEG_TO_RAD;t*=i,e*=i,s*=i;const r=Math.sin(t),a=Math.cos(t),n=Math.sin(e),o=Math.cos(e),c=Math.sin(s),d=Math.cos(s);return this.x=r*o*d-a*n*c,this.y=a*n*d+r*o*c,this.z=a*o*c-r*n*d,this.w=a*o*d+r*n*c,this}setFromMat4(t){const e=t.data;let s=e[0],i=e[1],r=e[2],a=e[4],n=e[5],o=e[6],c=e[8],d=e[9],f=e[10],u;return u=s*s+i*i+r*r,u===0?this.set(0,0,0,1):(u=1/Math.sqrt(u),s*=u,i*=u,r*=u,u=a*a+n*n+o*o,u===0?this.set(0,0,0,1):(u=1/Math.sqrt(u),a*=u,n*=u,o*=u,u=c*c+d*d+f*f,u===0?this.set(0,0,0,1):(u=1/Math.sqrt(u),c*=u,d*=u,f*=u,f<0?s>n?this.set(1+s-n-f,i+a,c+r,o-d):this.set(i+a,1-s+n-f,o+d,c-r):s<-n?this.set(c+r,o+d,1-s-n+f,i-a):this.set(o-d,c-r,i-a,1+s+n+f),this.mulScalar(1/this.length()))))}setFromDirections(t,e){const s=1+t.dot(e);return s<Number.EPSILON?Math.abs(t.x)>Math.abs(t.y)?(this.x=-t.z,this.y=0,this.z=t.x,this.w=0):(this.x=0,this.y=-t.z,this.z=t.y,this.w=0):(this.x=t.y*e.z-t.z*e.y,this.y=t.z*e.x-t.x*e.z,this.z=t.x*e.y-t.y*e.x,this.w=s),this.normalize()}slerp(t,e,s){const i=t.x,r=t.y,a=t.z,n=t.w;let o=e.x,c=e.y,d=e.z,f=e.w,u=n*f+i*o+r*c+a*d;if(u<0&&(f=-f,o=-o,c=-c,d=-d,u=-u),Math.abs(u)>=1)return this.w=n,this.x=i,this.y=r,this.z=a,this;const p=Math.acos(u),m=Math.sqrt(1-u*u);if(Math.abs(m)<.001)return this.w=n*.5+f*.5,this.x=i*.5+o*.5,this.y=r*.5+c*.5,this.z=a*.5+d*.5,this;const _=Math.sin((1-s)*p)/m,S=Math.sin(s*p)/m;return this.w=n*_+f*S,this.x=i*_+o*S,this.y=r*_+c*S,this.z=a*_+d*S,this}transformVector(t,e=new A){const s=t.x,i=t.y,r=t.z,a=this.x,n=this.y,o=this.z,c=this.w,d=c*s+n*r-o*i,f=c*i+o*s-a*r,u=c*r+a*i-n*s,p=-a*s-n*i-o*r;return e.x=d*c+p*-a+f*-o-u*-n,e.y=f*c+p*-n+u*-a-d*-o,e.z=u*c+p*-o+d*-n-f*-a,e}fromArray(t,e=0){return this.x=t[e]??this.x,this.y=t[e+1]??this.y,this.z=t[e+2]??this.z,this.w=t[e+3]??this.w,this}toString(){return`[${this.x}, ${this.y}, ${this.z}, ${this.w}]`}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}};h(un,"IDENTITY",Object.freeze(new un(0,0,0,1))),h(un,"ZERO",Object.freeze(new un(0,0,0,0)));let ue=un;const Aa=new A,Ca=new A,lm=new A,hm=new A,Dx=new A;class Me{constructor(t,e){h(this,"center",new A);h(this,"halfExtents",new A(.5,.5,.5));h(this,"_min",new A);h(this,"_max",new A);t&&this.center.copy(t),e&&this.halfExtents.copy(e)}add(t){const e=this.center,s=e.x,i=e.y,r=e.z,a=this.halfExtents,n=a.x,o=a.y,c=a.z;let d=s-n,f=s+n,u=i-o,p=i+o,m=r-c,_=r+c;const S=t.center,g=S.x,v=S.y,w=S.z,x=t.halfExtents,b=x.x,C=x.y,D=x.z,T=g-b,I=g+b,L=v-C,E=v+C,F=w-D,k=w+D;T<d&&(d=T),I>f&&(f=I),L<u&&(u=L),E>p&&(p=E),F<m&&(m=F),k>_&&(_=k),e.x=(d+f)*.5,e.y=(u+p)*.5,e.z=(m+_)*.5,a.x=(f-d)*.5,a.y=(p-u)*.5,a.z=(_-m)*.5}copy(t){this.center.copy(t.center),this.halfExtents.copy(t.halfExtents)}clone(){return new Me(this.center,this.halfExtents)}intersects(t){const e=this.getMax(),s=this.getMin(),i=t.getMax(),r=t.getMin();return s.x<=i.x&&e.x>=r.x&&s.y<=i.y&&e.y>=r.y&&s.z<=i.z&&e.z>=r.z}_intersectsRay(t,e){const s=Aa.copy(this.getMin()).sub(t.origin),i=Ca.copy(this.getMax()).sub(t.origin),r=t.direction;r.x===0?(s.x=s.x<0?-Number.MAX_VALUE:Number.MAX_VALUE,i.x=i.x<0?-Number.MAX_VALUE:Number.MAX_VALUE):(s.x/=r.x,i.x/=r.x),r.y===0?(s.y=s.y<0?-Number.MAX_VALUE:Number.MAX_VALUE,i.y=i.y<0?-Number.MAX_VALUE:Number.MAX_VALUE):(s.y/=r.y,i.y/=r.y),r.z===0?(s.z=s.z<0?-Number.MAX_VALUE:Number.MAX_VALUE,i.z=i.z<0?-Number.MAX_VALUE:Number.MAX_VALUE):(s.z/=r.z,i.z/=r.z);const a=lm.set(Math.min(s.x,i.x),Math.min(s.y,i.y),Math.min(s.z,i.z)),n=hm.set(Math.max(s.x,i.x),Math.max(s.y,i.y),Math.max(s.z,i.z)),o=Math.min(Math.min(n.x,n.y),n.z),c=Math.max(Math.max(a.x,a.y),a.z),d=o>=c&&c>=0;return d&&e.copy(t.direction).mulScalar(c).add(t.origin),d}_fastIntersectsRay(t){const e=Aa,s=Ca,i=lm,r=hm,a=Dx,n=t.direction;return e.sub2(t.origin,this.center),r.set(Math.abs(e.x),Math.abs(e.y),Math.abs(e.z)),i.mul2(e,n),!(r.x>this.halfExtents.x&&i.x>=0||r.y>this.halfExtents.y&&i.y>=0||r.z>this.halfExtents.z&&i.z>=0||(a.set(Math.abs(n.x),Math.abs(n.y),Math.abs(n.z)),s.cross(n,e),s.set(Math.abs(s.x),Math.abs(s.y),Math.abs(s.z)),s.x>this.halfExtents.y*a.z+this.halfExtents.z*a.y)||s.y>this.halfExtents.x*a.z+this.halfExtents.z*a.x||s.z>this.halfExtents.x*a.y+this.halfExtents.y*a.x)}intersectsRay(t,e){return e?this._intersectsRay(t,e):this._fastIntersectsRay(t)}setMinMax(t,e){this.center.add2(e,t).mulScalar(.5),this.halfExtents.sub2(e,t).mulScalar(.5)}getMin(){return this._min.copy(this.center).sub(this.halfExtents)}getMax(){return this._max.copy(this.center).add(this.halfExtents)}containsPoint(t){const e=this.getMin(),s=this.getMax();return!(t.x<e.x||t.x>s.x||t.y<e.y||t.y>s.y||t.z<e.z||t.z>s.z)}setFromTransformedAabb(t,e,s=!1){const i=t.center,r=t.halfExtents,a=e.data;let n=a[0],o=a[4],c=a[8],d=a[1],f=a[5],u=a[9],p=a[2],m=a[6],_=a[10];if(s){let S=n*n+o*o+c*c;if(S>0){const g=1/Math.sqrt(S);n*=g,o*=g,c*=g}if(S=d*d+f*f+u*u,S>0){const g=1/Math.sqrt(S);d*=g,f*=g,u*=g}if(S=p*p+m*m+_*_,S>0){const g=1/Math.sqrt(S);p*=g,m*=g,_*=g}}this.center.set(a[12]+n*i.x+o*i.y+c*i.z,a[13]+d*i.x+f*i.y+u*i.z,a[14]+p*i.x+m*i.y+_*i.z),this.halfExtents.set(Math.abs(n)*r.x+Math.abs(o)*r.y+Math.abs(c)*r.z,Math.abs(d)*r.x+Math.abs(f)*r.y+Math.abs(u)*r.z,Math.abs(p)*r.x+Math.abs(m)*r.y+Math.abs(_)*r.z)}static computeMinMax(t,e,s,i=t.length/3){if(i>0){let r=t[0],a=t[1],n=t[2],o=r,c=a,d=n;const f=i*3;for(let u=3;u<f;u+=3){const p=t[u],m=t[u+1],_=t[u+2];p<r&&(r=p),m<a&&(a=m),_<n&&(n=_),p>o&&(o=p),m>c&&(c=m),_>d&&(d=_)}e.set(r,a,n),s.set(o,c,d)}}compute(t,e){Me.computeMinMax(t,Aa,Ca,e),this.setMinMax(Aa,Ca)}intersectsBoundingSphere(t){return this._distanceToBoundingSphereSq(t)<=t.radius*t.radius}_distanceToBoundingSphereSq(t){const e=this.getMin(),s=this.getMax();let i=0;const r=["x","y","z"];for(let a=0;a<3;++a){let n=0;const o=t.center[r[a]],c=e[r[a]],d=s[r[a]];let f=0;o<c&&(f=c-o,n+=f*f),o>d&&(f=o-d,n+=f*f),i+=n}return i}_expand(t,e){Aa.add2(this.getMin(),t),Ca.add2(this.getMax(),e),this.setMinMax(Aa,Ca)}}const Rl=new A,Ix=new A;class Pu{constructor(t=new A,e=.5){h(this,"center");h(this,"radius");y.assert(!Object.isFrozen(t),"The constructor of 'BoundingSphere' does not accept a constant (frozen) object as a 'center' parameter"),this.center=t,this.radius=e}containsPoint(t){const e=Rl.sub2(t,this.center).lengthSq(),s=this.radius;return e<s*s}intersectsRay(t,e){const s=Rl.copy(t.origin).sub(this.center),i=s.dot(Ix.copy(t.direction).normalize()),r=s.dot(s)-this.radius*this.radius;if(r>0&&i>0)return!1;const a=i*i-r;if(a<0)return!1;const n=Math.abs(-i-Math.sqrt(a));return e&&e.copy(t.direction).mulScalar(n).add(t.origin),!0}intersectsBoundingSphere(t){Rl.sub2(t.center,this.center);const e=t.radius+this.radius;return Rl.lengthSq()<=e*e}}class oS{constructor(t=A.UP,e=0){h(this,"normal",new A);h(this,"distance");this.normal.copy(t),this.distance=e}clone(){const t=this.constructor;return new t().copy(this)}copy(t){return this.normal.copy(t.normal),this.distance=t.distance,this}intersectsLine(t,e,s){const i=this.distance,r=this.normal.dot(t)+i,a=this.normal.dot(e)+i,n=r/(r-a),o=n>=0&&n<=1;return o&&s&&s.lerp(t,e,n),o}intersectsRay(t,e){const s=this.normal.dot(t.direction);if(s===0)return!1;const i=-(this.normal.dot(t.origin)+this.distance)/s;return i>=0&&e&&e.copy(t.direction).mulScalar(i).add(t.origin),i>=0}normalize(){const t=1/this.normal.length();return this.normal.mulScalar(t),this.distance*=t,this}set(t,e,s,i){return this.normal.set(t,e,s),this.distance=i,this}setFromPointNormal(t,e){return this.normal.copy(e),this.distance=-this.normal.dot(t),this}}class Mx{constructor(){h(this,"planes",[]);for(let t=0;t<6;t++)this.planes[t]=new oS}clone(){const t=this.constructor;return new t().copy(this)}copy(t){for(let e=0;e<6;e++)this.planes[e].copy(t.planes[e]);return this}setFromMat4(t){const[e,s,i,r,a,n,o,c,d,f,u,p,m,_,S,g]=t.data,v=this.planes;v[0].set(r-e,c-a,p-d,g-m).normalize(),v[1].set(r+e,c+a,p+d,g+m).normalize(),v[2].set(r+s,c+n,p+f,g+_).normalize(),v[3].set(r-s,c-n,p-f,g-_).normalize(),v[4].set(r-i,c-o,p-u,g-S).normalize(),v[5].set(r+i,c+o,p+u,g+S).normalize()}containsPoint(t){for(let e=0;e<6;e++){const{normal:s,distance:i}=this.planes[e];if(s.dot(t)+i<=0)return!1}return!0}containsSphere(t){const{center:e,radius:s}=t;let i=0;for(let r=0;r<6;r++){const{normal:a,distance:n}=this.planes[r],o=a.dot(e)+n;if(o<=-s)return 0;o>s&&i++}return i===6?2:1}}class En{constructor(t,e){h(this,"origin",new A);h(this,"direction",A.FORWARD.clone());t&&this.origin.copy(t),e&&this.direction.copy(e)}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.set(t.origin,t.direction)}clone(){return new this.constructor(this.origin,this.direction)}}const St=0,me=1,Du=2,Iu=0,Rt=1,Lx=2,lS=4,Rx=5,Cc=6,Pc=8,ds=0,Ox=2,Fx=3,Nx=4,ps=0,Vh=1,hS=2,kx=3,Uo=1,Bo=2,Gh=4,wt=0,fa=1,bo=2,Ux=3,Te=0,yt=1,Dc=2,Ic=3,Mc=4,ua=5,Bx=0,Hh=1,Wh=2,gf=3,zx=4,Vx=5,Gx=6,$i=7,Sf=0,Ki=1,Tr=2,cS=0,dS=1,Mu=2,Lc=3,Lu=4,Rc=5,Ar=6,Fe=7,Oc=8,Ru=9,cl=10,ui=11,nt=12,Ye=13,$t=14,er=15,Xi=16,Fc=17,bn=18,Ou=19,ms=20,Nc=21,Fu=22,Nu=23,dl=24,fl=25,kc=26,Uc=27,fS=28,uS=29,pS=30,mS=31,ku=32,_S=33,Uu=34,Bu=35,zu=36,Zi=37,Vu=38,gS=39,Gu=40,Hu=41,Wu=42,$u=43,Xu=44,SS=45,qu=46,Bc=47,ju=48,ke=49,zc=50,Yu=51,Ku=52,Zu=53,yf=54,vf=55,xf=56,Tf=61,wf=62,Ef=63,yS=64,vS=65,xS=66,TS=67,bf=68,mn=69,Ft=new Map([[cS,{name:"A8",size:1,ldr:!0}],[Ku,{name:"R8",size:1,ldr:!0}],[dS,{name:"L8",size:1,ldr:!0}],[Mu,{name:"LA8",size:2,ldr:!0}],[Zu,{name:"RG8",size:2,ldr:!0}],[Lc,{name:"RGB565",size:2,ldr:!0}],[Lu,{name:"RGBA5551",size:2,ldr:!0}],[Rc,{name:"RGBA4",size:2,ldr:!0}],[Ar,{name:"RGB8",size:4,ldr:!0}],[Fe,{name:"RGBA8",size:4,ldr:!0,srgbFormat:ms}],[zc,{name:"R16F",size:2}],[Yu,{name:"RG16F",size:4}],[ui,{name:"RGB16F",size:8}],[nt,{name:"RGBA16F",size:8}],[Ye,{name:"RGB32F",size:16}],[$t,{name:"RGBA32F",size:16}],[er,{name:"R32F",size:4}],[Xi,{name:"DEPTH",size:4}],[mn,{name:"DEPTH16",size:2}],[Fc,{name:"DEPTHSTENCIL",size:4}],[bn,{name:"111110F",size:4}],[Ou,{name:"SRGB8",size:4,ldr:!0,srgb:!0}],[ms,{name:"SRGBA8",size:4,ldr:!0,srgb:!0}],[mS,{name:"BGRA8",size:4,ldr:!0}],[yS,{name:"SBGRA8",size:4,ldr:!0,srgb:!0}],[Oc,{name:"DXT1",blockSize:8,ldr:!0,srgbFormat:yf}],[Ru,{name:"DXT3",blockSize:16,ldr:!0,srgbFormat:vf}],[cl,{name:"DXT5",blockSize:16,ldr:!0,srgbFormat:xf}],[Nc,{name:"ETC1",blockSize:8,ldr:!0}],[Fu,{name:"ETC2_RGB",blockSize:8,ldr:!0,srgbFormat:Tf}],[Nu,{name:"ETC2_RGBA",blockSize:16,ldr:!0,srgbFormat:wf}],[dl,{name:"PVRTC_2BPP_RGB_1",ldr:!0,blockSize:8}],[fl,{name:"PVRTC_2BPP_RGBA_1",ldr:!0,blockSize:8}],[kc,{name:"PVRTC_4BPP_RGB_1",ldr:!0,blockSize:8}],[Uc,{name:"PVRTC_4BPP_RGBA_1",ldr:!0,blockSize:8}],[fS,{name:"ASTC_4x4",blockSize:16,ldr:!0,srgbFormat:Ef}],[uS,{name:"ATC_RGB",blockSize:8,ldr:!0}],[pS,{name:"ATC_RGBA",blockSize:16,ldr:!0}],[vS,{name:"BC6H_RGBF",blockSize:16}],[xS,{name:"BC6H_RGBUF",blockSize:16}],[TS,{name:"BC7_RGBA",blockSize:16,ldr:!0,srgbFormat:bf}],[yf,{name:"DXT1_SRGB",blockSize:8,ldr:!0,srgb:!0}],[vf,{name:"DXT3_SRGBA",blockSize:16,ldr:!0,srgb:!0}],[xf,{name:"DXT5_SRGBA",blockSize:16,ldr:!0,srgb:!0}],[Tf,{name:"ETC2_SRGB",blockSize:8,ldr:!0,srgb:!0}],[wf,{name:"ETC2_SRGBA",blockSize:16,ldr:!0,srgb:!0}],[Ef,{name:"ASTC_4x4_SRGB",blockSize:16,ldr:!0,srgb:!0}],[bf,{name:"BC7_SRGBA",blockSize:16,ldr:!0,srgb:!0}],[ku,{name:"R8I",size:1,isInt:!0}],[_S,{name:"R8U",size:1,isInt:!0}],[Uu,{name:"R16I",size:2,isInt:!0}],[Bu,{name:"R16U",size:2,isInt:!0}],[zu,{name:"R32I",size:4,isInt:!0}],[Zi,{name:"R32U",size:4,isInt:!0}],[Vu,{name:"RG8I",size:2,isInt:!0}],[gS,{name:"RG8U",size:2,isInt:!0}],[Gu,{name:"RG16I",size:4,isInt:!0}],[Hu,{name:"RG16U",size:4,isInt:!0}],[Wu,{name:"RG32I",size:8,isInt:!0}],[$u,{name:"RG32U",size:8,isInt:!0}],[Xu,{name:"RGBA8I",size:4,isInt:!0}],[SS,{name:"RGBA8U",size:4,isInt:!0}],[qu,{name:"RGBA16I",size:8,isInt:!0}],[Bc,{name:"RGBA16U",size:8,isInt:!0}],[ju,{name:"RGBA32I",size:16,isInt:!0}],[ke,{name:"RGBA32U",size:16,isInt:!0}]]),Hx=l=>{var t;return((t=Ft.get(l))==null?void 0:t.blockSize)!==void 0},$h=l=>{var t;return((t=Ft.get(l))==null?void 0:t.srgb)===!0},nn=l=>{var t;return((t=Ft.get(l))==null?void 0:t.isInt)===!0},Vc=l=>{var t;return((t=Ft.get(l))==null?void 0:t.srgbFormat)||l},Wx=l=>{for(const[t,e]of Ft)if(e.srgbFormat===l)return t;return l},wS=l=>{const t=Ft.get(l);return!!(t!=null&&t.ldr&&!(t!=null&&t.srgb))},ES=l=>{switch(l){case er:case Ye:case $t:return Float32Array;case zu:case Wu:case ju:return Int32Array;case Zi:case $u:case ke:return Uint32Array;case Uu:case Gu:case qu:return Int16Array;case Zu:case Bu:case Hu:case Bc:case Lc:case Lu:case Rc:case zc:case Yu:case ui:case nt:return Uint16Array;case ku:case Vu:case Xu:return Int8Array;default:return Uint8Array}},Gc=0,Hc=1,bS=2,AS=3,Xs=4,wr=5,aa=6,Ae="POSITION",_s="NORMAL",yi="TANGENT",gi="BLENDWEIGHT",fs="BLENDINDICES",Ht="COLOR",cm="TEXCOORD",ts="TEXCOORD0",wa="TEXCOORD1",ul="TEXCOORD2",pl="TEXCOORD3",ml="TEXCOORD4",_l="TEXCOORD5",gl="TEXCOORD6",Sl="TEXCOORD7",Af="ATTR0",Xh="ATTR1",Qu="ATTR2",Ju="ATTR3",ep="ATTR4",$x="ATTR5",Xx="ATTR6",qx="ATTR7",zo="ATTR8",Vo="ATTR9",jx="ATTR10",tp="ATTR11",sp="ATTR12",qh="ATTR13",ip="ATTR14",An="ATTR15",CS=1,_n=0,Yx=2,Kx=3,Zx=5,Ol=0,PS=1,pd=2,Ds="default",Qi="rgbm",jh="rgbe",Go="rgbp",Ho="swizzleGGGR",Cf=1,Cr=2,DS=3,IS="2d",Qx=0,Jx="none",Pf="cube",dm="equirect",e0="octahedral",Oe="glsl",it="wgsl",Wc=0,na=1,$c=2,yl=3,MS=4,Wo=5,ze=6,gn=0,pa=1,Ws=2,ma=3,cs=4,Cn=5,oa=6,la=7,ha=8,$o=9,Xo=10,qo=11,Yh=12,Pn=13,li=14,t0=15,s0=16,Xc=17,i0=18,r0=19,a0=20,qc=21,jc=22,rp=23,LS=24,n0=25,Dn=26,In=27,Mn=28,Ln=29,Rn=30,Yc=31,Kc=32,On=33,Zc=34,Qc=35,Fn=36,Jc=37,ed=38,Kh=39,ap=40,np=41,o0=42,l0=43,h0=44,c0=45,d0=46,f0=47,u0=48,p0=49,RS=["bool","int","float","vec2","vec3","vec4","ivec2","ivec3","ivec4","bvec2","bvec3","bvec4","mat2","mat3","mat4","sampler2D","samplerCube","","sampler2DShadow","samplerCubeShadow","sampler3D","","","","","sampler2DArray","uint","uvec2","uvec3","uvec4","","","","","","","","","","","","","isampler2D","usampler2D","isamplerCube","usamplerCube","isampler3D","usampler3D","isampler2DArray","usampler2DArray"],m0=[["bool"],["i32"],["f32"],["vec2f","vec2<f32>"],["vec3f","vec3<f32>"],["vec4f","vec4<f32>"],["vec2i","vec2<i32>"],["vec3i","vec3<i32>"],["vec4i","vec4<i32>"],["vec2<bool>"],["vec3<bool>"],["vec4<bool>"],["mat2x2f","mat2x2<f32>"],["mat3x3f","mat3x3<f32>"],["mat4x4f","mat4x4<f32>"],["texture_2d<f32>"],["texture_cube<f32>"],["array<f32>"],["texture_depth_2d"],["texture_depth_cube"],["texture_3d<f32>"],["array<vec2<f32>>"],["array<vec3<f32>>"],["array<vec4<f32>>"],["array<mat4x4<f32>>"],["texture_2d_array<f32>"],["u32"],["vec2u","vec2<u32>"],["vec3u","vec3<u32>"],["vec4u","vec4<u32>"],["array<i32>"],["array<u32>"],["array<bool>"],["array<vec2i>","array<vec2<i32>>"],["array<vec2u>","array<vec2<u32>>"],["array<vec2b>","array<vec2<bool>>"],["array<vec3i>","array<vec3<i32>>"],["array<vec3u>","array<vec3<u32>>"],["array<vec3b>","array<vec3<bool>>"],["array<vec4i>","array<vec4<i32>>"],["array<vec4u>","array<vec4<u32>>"],["array<vec4b>","array<vec4<bool>>"],["texture_2d<i32>"],["texture_2d<u32>"],["texture_cube<i32>"],["texture_cube<u32>"],["texture_3d<i32>"],["texture_3d<u32>"],["texture_2d_array<i32>"],["texture_2d_array<u32>"]],_0=new Map;m0.forEach((l,t)=>{l.forEach(e=>_0.set(e,t))});const g0="webgl2",op=1,OS=2,S0=4,y0="ldr",FS=1,NS=2,kS=4,US=8,BS=16,zS=32,VS=64,GS=128,v0=255,jo=0,HS=1,Df=2,lp="default",Sn=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array],Ao=[1,1,2,2,4,4,4,2],x0=["INT8","UINT8","INT16","UINT16","INT32","UINT32","FLOAT32","FLOAT16"],Zh=[Uint8Array,Uint16Array,Uint32Array],T0=[1,2,4],WS=new Map([["float","f32"],["vec2","vec2f"],["vec3","vec3f"],["vec4","vec4f"],["int","i32"],["ivec2","vec2i"],["ivec3","vec3i"],["ivec4","vec4i"],["uint","u32"],["uvec2","vec2u"],["uvec3","vec3u"],["uvec4","vec4u"]]),Ie={};Ie[Ae]=0;Ie[_s]=1;Ie[gi]=2;Ie[fs]=3;Ie[Ht]=4;Ie[ts]=5;Ie[wa]=6;Ie[ul]=7;Ie[pl]=8;Ie[ml]=9;Ie[_l]=10;Ie[gl]=11;Ie[Sl]=12;Ie[yi]=13;Ie[Af]=0;Ie[Xh]=1;Ie[Qu]=2;Ie[Ju]=3;Ie[ep]=4;Ie[$x]=5;Ie[Xx]=6;Ie[qx]=7;Ie[zo]=8;Ie[Vo]=9;Ie[jx]=10;Ie[tp]=11;Ie[sp]=12;Ie[qh]=13;Ie[ip]=14;Ie[An]=15;const pr=class pr{static clearGpuMarkers(){pr.markers.length=0}static pushGpuMarker(t,e){pr.markers.push(e),t.pushMarker(e)}static popGpuMarker(t){pr.markers.length&&pr.markers.pop(),t.popMarker()}static toString(){return pr.markers.join(" | ")}};h(pr,"markers",[]);let Z=pr,w0=0;class td{constructor(t,e){h(this,"slot",-1);h(this,"scopeId",null);this.name=t,this.visibility=e}}class hp extends td{}class E0 extends td{constructor(e,s,i=!1){super(e,s);h(this,"format","");this.readOnly=i,y.assert(i||!(s&op),"Storage buffer can only be used in read-only mode in SHADERSTAGE_VERTEX.")}}class fm extends td{constructor(t,e,s=IS,i=Qx,r=!0,a=null){super(t,e),this.textureDimension=s,this.sampleType=i,this.hasSampler=r,this.samplerName=a??`${t}_sampler`}}class b0 extends td{constructor(t,e=Fe,s=IS,i=!0,r=!1){super(t,S0),this.format=e,this.textureDimension=s,this.write=i,this.read=r}}class $S{constructor(t,e){h(this,"uniformBufferFormats",[]);h(this,"textureFormats",[]);h(this,"storageTextureFormats",[]);h(this,"storageBufferFormats",[]);this.id=w0++,Ta.setName(this,`BindGroupFormat_${this.id}`),y.assert(e);let s=0;e.forEach(r=>{r.slot=s++,r instanceof fm&&r.hasSampler&&s++,r instanceof hp?this.uniformBufferFormats.push(r):r instanceof fm?this.textureFormats.push(r):r instanceof b0?this.storageTextureFormats.push(r):r instanceof E0?this.storageBufferFormats.push(r):y.assert("Invalid bind format",r)}),this.device=t;const i=t.scope;this.bufferFormatsMap=new Map,this.uniformBufferFormats.forEach((r,a)=>this.bufferFormatsMap.set(r.name,a)),this.textureFormatsMap=new Map,this.textureFormats.forEach((r,a)=>{this.textureFormatsMap.set(r.name,a),r.scopeId=i.resolve(r.name)}),this.storageTextureFormatsMap=new Map,this.storageTextureFormats.forEach((r,a)=>{this.storageTextureFormatsMap.set(r.name,a),r.scopeId=i.resolve(r.name)}),this.storageBufferFormatsMap=new Map,this.storageBufferFormats.forEach((r,a)=>{this.storageBufferFormatsMap.set(r.name,a),r.scopeId=i.resolve(r.name)}),this.impl=t.createBindGroupFormatImpl(this),y.trace(lx,`Alloc: Id ${this.id}, while rendering [${Z.toString()}]`,this)}destroy(){this.impl.destroy()}getTexture(t){const e=this.textureFormatsMap.get(t);return e!==void 0?this.textureFormats[e]:null}getStorageTexture(t){const e=this.storageTextureFormatsMap.get(t);return e!==void 0?this.storageTextureFormats[e]:null}loseContext(){}}class jt{constructor(){h(this,"_cache",new Map)}get(t,e){return this._cache.has(t)||(this._cache.set(t,e()),t.on("destroy",()=>{this.remove(t)}),t.on("devicelost",()=>{var s,i;(i=(s=this._cache.get(t))==null?void 0:s.loseContext)==null||i.call(s,t)})),this._cache.get(t)}remove(t){var e,s;(s=(e=this._cache.get(t))==null?void 0:e.destroy)==null||s.call(e,t),this._cache.delete(t)}}class qi{static calcLevelDimension(t,e){return Math.max(t>>e,1)}static calcMipLevelsCount(t,e,s=1){return 1+Math.floor(Math.log2(Math.max(t,e,s)))}static calcLevelGpuSize(t,e,s,i){var f;const r=Ft.get(i);y.assert(r!==void 0,`Invalid pixel format ${i}`);const a=((f=Ft.get(i))==null?void 0:f.size)??0;if(a>0)return t*e*s*a;const n=r.blockSize??0;let o=Math.floor((t+3)/4);const c=Math.floor((e+3)/4),d=Math.floor((s+3)/4);return(i===dl||i===fl)&&(o=Math.max(Math.floor(o/2),1)),o*c*d*n}static calcGpuSize(t,e,s,i,r,a){let n=0;for(;n+=qi.calcLevelGpuSize(t,e,s,i),!(!r||t===1&&e===1&&s===1);)t=Math.max(t>>1,1),e=Math.max(e>>1,1),s=Math.max(s>>1,1);return n*(a?6:1)}}let A0=0;class ge{constructor(t,e={}){h(this,"name");h(this,"_gpuSize",0);h(this,"id",A0++);h(this,"_invalid",!1);h(this,"_lockedLevel",-1);h(this,"_lockedMode",Ol);h(this,"renderVersionDirty",0);h(this,"_storage",!1);h(this,"_numLevels",0);h(this,"_numLevelsRequested");var i;this.device=t,y.assert(this.device,"Texture constructor requires a graphicsDevice to be valid"),y.assert(!e.width||Number.isInteger(e.width),"Texture width must be an integer number, got",e),y.assert(!e.height||Number.isInteger(e.height),"Texture height must be an integer number, got",e),y.assert(!e.depth||Number.isInteger(e.depth),"Texture depth must be an integer number, got",e),this.name=e.name??"",this._width=Math.floor(e.width??4),this._height=Math.floor(e.height??4),this._format=e.format??Fe,this._compressed=Hx(this._format),this._integerFormat=nn(this._format),this._integerFormat&&(e.minFilter=Te,e.magFilter=Te),this._volume=e.volume??!1,this._depth=Math.floor(e.depth??1),this._arrayLength=Math.floor(e.arrayLength??0),this._storage=e.storage??!1,this._cubemap=e.cubemap??!1,this._flipY=e.flipY??!1,this._premultiplyAlpha=e.premultiplyAlpha??!1,this._mipmaps=e.mipmaps??!0,this._numLevelsRequested=e.numLevels,e.numLevels!==void 0&&(this._numLevels=e.numLevels),this._updateNumLevel(),this._minFilter=e.minFilter??ua,this._magFilter=e.magFilter??yt,this._anisotropy=e.anisotropy??1,this._addressU=e.addressU??St,this._addressV=e.addressV??St,this._addressW=e.addressW??St,this._compareOnRead=e.compareOnRead??!1,this._compareFunc=e.compareFunc??Hh,this._type=e.type??Ds,y.assert(!e.hasOwnProperty("rgbm"),"Use options.type."),y.assert(!e.hasOwnProperty("swizzleGGGR"),"Use options.type."),this.projection=Jx,this._cubemap?this.projection=Pf:e.projection&&e.projection!==Pf&&(this.projection=e.projection),this.profilerHint=e.profilerHint??0,this._levels=e.levels;const s=!!e.levels;this._levels||this._clearLevels(),this.recreateImpl(s),t.textures.push(this),y.trace(em,`Alloc: Id ${this.id} ${this.name}: ${this.width}x${this.height} [${(i=Ft.get(this.format))==null?void 0:i.name}]${this.cubemap?"[Cubemap]":""}${this.volume?"[Volume]":""}${this.array?"[Array]":""}[MipLevels:${this.numLevels}]`,this)}destroy(){y.trace(em,`DeAlloc: Id ${this.id} ${this.name}`);const t=this.device;if(t){const e=t.textures.indexOf(this);e!==-1&&t.textures.splice(e,1),t.scope.removeValue(this),this.impl.destroy(t),this.adjustVramSizeTracking(t._vram,-this._gpuSize),this._levels=null,this.device=null}}recreateImpl(t=!0){var s;const{device:e}=this;(s=this.impl)==null||s.destroy(e),this.impl=null,this.impl=e.createTextureImpl(this),this.dirtyAll(),t&&this.upload()}_clearLevels(){this._levels=this._cubemap?[[null,null,null,null,null,null]]:[null]}resize(t,e,s=1){const i=this.device;this.adjustVramSizeTracking(i._vram,-this._gpuSize),this.impl.destroy(i),this._clearLevels(),this._width=Math.floor(t),this._height=Math.floor(e),this._depth=Math.floor(s),this._updateNumLevel(),this.impl=i.createTextureImpl(this),this.dirtyAll()}loseContext(){this.impl.loseContext(),this.dirtyAll()}adjustVramSizeTracking(t,e){y.trace(rx,`${this.id} ${this.name} size: ${e} vram.texture: ${t.tex} => ${t.tex+e}`),t.tex+=e,this.profilerHint===Cf?t.texShadow+=e:this.profilerHint===Cr?t.texAsset+=e:this.profilerHint===DS&&(t.texLightmap+=e)}propertyChanged(t){this.impl.propertyChanged(t),this.renderVersionDirty=this.device.renderVersion}_updateNumLevel(){const t=this.mipmaps?qi.calcMipLevelsCount(this.width,this.height):1,e=this._numLevelsRequested;e!==void 0&&e>t&&y.warn("Texture#numLevels: requested mip level count is greater than the maximum possible, will be clamped to",t,this),this._numLevels=Math.min(e??t,t),this._mipmaps=this._numLevels>1}get lockedMode(){return this._lockedMode}set minFilter(t){this._minFilter!==t&&(nn(this._format)?y.warn("Texture#minFilter: minFilter property cannot be changed on an integer texture, will remain FILTER_NEAREST",this):(this._minFilter=t,this.propertyChanged(FS)))}get minFilter(){return this._minFilter}set magFilter(t){this._magFilter!==t&&(nn(this._format)?y.warn("Texture#magFilter: magFilter property cannot be changed on an integer texture, will remain FILTER_NEAREST",this):(this._magFilter=t,this.propertyChanged(NS)))}get magFilter(){return this._magFilter}set addressU(t){this._addressU!==t&&(this._addressU=t,this.propertyChanged(kS))}get addressU(){return this._addressU}set addressV(t){this._addressV!==t&&(this._addressV=t,this.propertyChanged(US))}get addressV(){return this._addressV}set addressW(t){if(!this._volume){y.warn("pc.Texture#addressW: Can't set W addressing mode for a non-3D texture.");return}t!==this._addressW&&(this._addressW=t,this.propertyChanged(BS))}get addressW(){return this._addressW}set compareOnRead(t){this._compareOnRead!==t&&(this._compareOnRead=t,this.propertyChanged(zS))}get compareOnRead(){return this._compareOnRead}set compareFunc(t){this._compareFunc!==t&&(this._compareFunc=t,this.propertyChanged(VS))}get compareFunc(){return this._compareFunc}set anisotropy(t){this._anisotropy!==t&&(this._anisotropy=t,this.propertyChanged(GS))}get anisotropy(){return this._anisotropy}set mipmaps(t){this._mipmaps!==t&&(this.device.isWebGPU?y.warn("Texture#mipmaps: mipmap property is currently not allowed to be changed on WebGPU, create the texture appropriately.",this):nn(this._format)?y.warn("Texture#mipmaps: mipmap property cannot be changed on an integer texture, will remain false",this):this._mipmaps=t,t&&(this._needsMipmapsUpload=!0))}get mipmaps(){return this._mipmaps}get numLevels(){return this._numLevels}get storage(){return this._storage}get width(){return this._width}get height(){return this._height}get depth(){return this._depth}get format(){return this._format}get cubemap(){return this._cubemap}get gpuSize(){const t=this.pot&&this._mipmaps&&!(this._compressed&&this._levels.length===1);return qi.calcGpuSize(this._width,this._height,this._depth,this._format,t,this._cubemap)}get array(){return this._arrayLength>0}get arrayLength(){return this._arrayLength}get volume(){return this._volume}set type(t){this._type!==t&&(this._type=t,this.device._shadersDirty=!0)}get type(){return this._type}set srgb(t){var s,i,r,a;const e=$h(this.format);if(t!==e)if(t){const n=Vc(this.format);this._format!==n&&(y.warn(`Switching format of texture '${this.name}' to sRGB equivalent: ${(s=Ft.get(this.format))==null?void 0:s.name} -> ${(i=Ft.get(n))==null?void 0:i.name}. This is an expensive operation, and the texture should be created using the right format to avoid this.`,this),this._format=n,this.recreateImpl(),this.device._shadersDirty=!0)}else{const n=Wx(this.format);this._format!==n&&(y.warn(`Switching format of texture '${this.name}' to linear equivalent: ${(r=Ft.get(this.format))==null?void 0:r.name} -> ${(a=Ft.get(n))==null?void 0:a.name}. This is an expensive operation, and the texture should be created using the right format to avoid this.`,this),this._format=n,this.recreateImpl(),this.device._shadersDirty=!0)}}get srgb(){return $h(this.format)}set flipY(t){this._flipY!==t&&(this._flipY=t,this._needsUpload=!0)}get flipY(){return this._flipY}set premultiplyAlpha(t){this._premultiplyAlpha!==t&&(this._premultiplyAlpha=t,this._needsUpload=!0)}get premultiplyAlpha(){return this._premultiplyAlpha}get pot(){return Y.powerOfTwo(this._width)&&Y.powerOfTwo(this._height)}get encoding(){switch(this.type){case Qi:return"rgbm";case jh:return"rgbe";case Go:return"rgbp"}return wS(this.format)?"srgb":"linear"}dirtyAll(){this._levelsUpdated=this._cubemap?[[!0,!0,!0,!0,!0,!0]]:[!0],this._needsUpload=!0,this._needsMipmapsUpload=this._mipmaps,this._mipmapsUploaded=!1,this.propertyChanged(v0)}lock(t={}){t.level??(t.level=0),t.face??(t.face=0),t.mode??(t.mode=pd),y.assert(this._lockedMode===Ol,"The texture is already locked. Call `texture.unlock()` before attempting to lock again.",this),y.assert(t.mode===PS||t.mode===pd,"Cannot lock a texture with TEXTURELOCK_NONE. To unlock a texture, call `texture.unlock()`.",this),this._lockedMode=t.mode,this._lockedLevel=t.level;const e=this.cubemap?this._levels[t.face]:this._levels;if((e==null?void 0:e[t.level])===null){const s=Math.max(1,this._width>>t.level),i=Math.max(1,this._height>>t.level),r=Math.max(1,this._depth>>t.level),a=new ArrayBuffer(qi.calcLevelGpuSize(s,i,r,this._format));e[t.level]=new(ES(this._format))(a)}return e==null?void 0:e[t.level]}setSource(t,e=0){let s=!1,i,r;if(this._cubemap){if(t[0]){i=t[0].width||0,r=t[0].height||0;for(let a=0;a<6;a++){const n=t[a];if(!n||n.width!==i||n.height!==r||!this.device._isBrowserInterface(n)){s=!0;break}}}else s=!0;if(!s)for(let a=0;a<6;a++)this._levels[e][a]!==t[a]&&(this._levelsUpdated[e][a]=!0)}else this.device._isBrowserInterface(t)||(s=!0),s||(t!==this._levels[e]&&(this._levelsUpdated[e]=!0),t instanceof HTMLVideoElement?(i=t.videoWidth,r=t.videoHeight):(i=t.width,r=t.height));if(s)if(this._width=4,this._height=4,this._cubemap)for(let a=0;a<6;a++)this._levels[e][a]=null,this._levelsUpdated[e][a]=!0;else this._levels[e]=null,this._levelsUpdated[e]=!0;else e===0&&(this._width=i,this._height=r),this._levels[e]=t;(this._invalid!==s||!s)&&(this._invalid=s,this.upload())}getSource(t=0){return this._levels[t]}unlock(){this._lockedMode===Ol&&y.warn("pc.Texture#unlock: Attempting to unlock a texture that is not locked.",this),this._lockedMode===pd&&this.upload(),this._lockedLevel=-1,this._lockedMode=Ol}upload(){var t,e;this._needsUpload=!0,this._needsMipmapsUpload=this._mipmaps,(e=(t=this.impl).uploadImmediate)==null||e.call(t,this.device,this)}read(t,e,s,i,r={}){var a,n;return(n=(a=this.impl).read)==null?void 0:n.call(a,t,e,s,i,r)}write(t,e,s,i,r){var a,n;return(n=(a=this.impl).write)==null?void 0:n.call(a,t,e,s,i,r)}}const C0={white:[255,255,255,255],gray:[128,128,128,255],black:[0,0,0,255],normal:[128,128,255,255],pink:[255,128,255,255]};class P0{constructor(){h(this,"map",new Map)}destroy(){this.map.forEach(t=>{t.destroy()})}}const D0=new jt,ca=(l,t)=>{const e=D0.get(l,()=>new P0);if(!e.map.has(t)){const s=new ge(l,{name:`built-in-texture-${t}`,width:1,height:1,format:Fe}),i=s.lock(),r=C0[t];y.assert(r,`Data for built-in texture '${t}' not found`),i.set(r),s.unlock(),e.map.set(t,s)}return e.map.get(t)};let I0=0;class XS{constructor(){h(this,"bindGroup");h(this,"offsets",[])}}class cp{constructor(t,e,s){h(this,"renderVersionUpdated",-1);h(this,"uniformBuffers");h(this,"uniformBufferOffsets",[]);this.id=I0++,this.device=t,this.format=e,this.dirty=!0,this.impl=t.createBindGroupImpl(this),this.textures=[],this.storageTextures=[],this.storageBuffers=[],this.uniformBuffers=[],this.defaultUniformBuffer=s,s&&this.setUniformBuffer(lp,s),y.trace(ox,`Alloc: Id ${this.id}`,this,e)}destroy(){this.impl.destroy(),this.impl=null,this.format=null,this.defaultUniformBuffer=null}setUniformBuffer(t,e){const s=this.format.bufferFormatsMap.get(t);y.assert(s!==void 0,`Setting a uniform [${t}] on a bind group with id ${this.id} which does not contain it, while rendering [${Z.toString()}]`,this),this.uniformBuffers[s]!==e&&(this.uniformBuffers[s]=e,this.dirty=!0)}setStorageBuffer(t,e){const s=this.format.storageBufferFormatsMap.get(t);y.assert(s!==void 0,`Setting a storage buffer [${t}] on a bind group with id: ${this.id} which does not contain it, while rendering [${Z.toString()}]`,this),this.storageBuffers[s]!==e&&(this.storageBuffers[s]=e,this.dirty=!0)}setTexture(t,e){const s=this.format.textureFormatsMap.get(t);y.assert(s!==void 0,`Setting a texture [${t}] on a bind group with id: ${this.id} which does not contain it, while rendering [${Z.toString()}]`,this),this.textures[s]!==e?(this.textures[s]=e,this.dirty=!0):this.renderVersionUpdated<e.renderVersionDirty&&(this.dirty=!0)}setStorageTexture(t,e){const s=this.format.storageTextureFormatsMap.get(t);y.assert(s!==void 0,`Setting a storage texture [${t}] on a bind group with id: ${this.id} which does not contain it, while rendering [${Z.toString()}]`,this),this.storageTextures[s]!==e?(this.storageTextures[s]=e,this.dirty=!0):this.renderVersionUpdated<e.renderVersionDirty&&(this.dirty=!0)}updateUniformBuffers(){for(let t=0;t<this.uniformBuffers.length;t++)this.uniformBuffers[t].update()}update(){const{textureFormats:t,storageTextureFormats:e,storageBufferFormats:s}=this.format;for(let i=0;i<t.length;i++){const r=t[i];let a=r.scopeId.value;a||(r.name==="uSceneDepthMap"&&(y.errorOnce(`A uSceneDepthMap texture is used by the shader but a scene depth texture is not available. Use CameraComponent.requestSceneDepthMap / enable Depth Grabpass on the Camera Component to enable it. Rendering [${Z.toString()}]`),a=ca(this.device,"white")),r.name==="uSceneColorMap"&&(y.errorOnce(`A uSceneColorMap texture is used by the shader but a scene color texture is not available. Use CameraComponent.requestSceneColorMap / enable Color Grabpass on the Camera Component to enable it. Rendering [${Z.toString()}]`),a=ca(this.device,"pink")),a||(y.errorOnce(`Texture ${r.name} is required for rendering but was not set. Rendering [${Z.toString()}]`),a=ca(this.device,"pink"))),this.setTexture(r.name,a)}for(let i=0;i<e.length;i++){const r=e[i],a=r.scopeId.value;y.assert(a,`Value was not set when assigning storage texture slot [${r.name}] to a bind group, while rendering [${Z.toString()}]`,this),this.setStorageTexture(r.name,a)}for(let i=0;i<s.length;i++){const r=s[i],a=r.scopeId.value;y.assert(a,`Value was not set when assigning storage buffer slot [${r.name}] to a bind group, while rendering [${Z.toString()}]`,this),this.setStorageBuffer(r.name,a)}this.uniformBufferOffsets.length=this.uniformBuffers.length;for(let i=0;i<this.uniformBuffers.length;i++){const r=this.uniformBuffers[i];this.uniformBufferOffsets[i]=r.offset,this.renderVersionUpdated<r.renderVersionDirty&&(this.dirty=!0)}this.dirty&&(this.dirty=!1,this.renderVersionUpdated=this.device.renderVersion,this.impl.update(this))}}const qe={set(l,t,e,s=1){return l&~(s<<e)|t<<e},get(l,t,e=1){return l>>t&e},all(l,t,e=1){const s=e<<t;return(l&s)===s},any(l,t,e=1){return(l&e<<t)!==0}},Fl=7,ar=15,um=0,pm=3,mm=7,_m=11,gm=14,Sm=18,If=22,ym=23,vm=24,xm=25,Tm=26,M0=15,L0=If,ri=class ri{constructor(t=!1,e=ds,s=Rt,i=Iu,r,a,n,o=!0,c=!0,d=!0,f=!0){h(this,"target0",0);this.setColorBlend(e,s,i),this.setAlphaBlend(r??e,a??s,n??i),this.setColorWrite(o,c,d,f),this.blend=t}set blend(t){this.target0=qe.set(this.target0,t?1:0,Tm)}get blend(){return qe.all(this.target0,Tm)}setColorBlend(t,e,s){this.target0=qe.set(this.target0,t,um,Fl),this.target0=qe.set(this.target0,e,pm,ar),this.target0=qe.set(this.target0,s,mm,ar)}setAlphaBlend(t,e,s){this.target0=qe.set(this.target0,t,_m,Fl),this.target0=qe.set(this.target0,e,gm,ar),this.target0=qe.set(this.target0,s,Sm,ar)}setColorWrite(t,e,s,i){this.redWrite=t,this.greenWrite=e,this.blueWrite=s,this.alphaWrite=i}get colorOp(){return qe.get(this.target0,um,Fl)}get colorSrcFactor(){return qe.get(this.target0,pm,ar)}get colorDstFactor(){return qe.get(this.target0,mm,ar)}get alphaOp(){return qe.get(this.target0,_m,Fl)}get alphaSrcFactor(){return qe.get(this.target0,gm,ar)}get alphaDstFactor(){return qe.get(this.target0,Sm,ar)}set redWrite(t){this.target0=qe.set(this.target0,t?1:0,If)}get redWrite(){return qe.all(this.target0,If)}set greenWrite(t){this.target0=qe.set(this.target0,t?1:0,ym)}get greenWrite(){return qe.all(this.target0,ym)}set blueWrite(t){this.target0=qe.set(this.target0,t?1:0,vm)}get blueWrite(){return qe.all(this.target0,vm)}set alphaWrite(t){this.target0=qe.set(this.target0,t?1:0,xm)}get alphaWrite(){return qe.all(this.target0,xm)}get allWrite(){return qe.get(this.target0,L0,M0)}copy(t){return this.target0=t.target0,this}clone(){return new this.constructor().copy(this)}get key(){return this.target0}equals(t){return this.target0===t.target0}};h(ri,"NOBLEND",Object.freeze(new ri)),h(ri,"NOWRITE",Object.freeze(new ri(void 0,void 0,void 0,void 0,void 0,void 0,void 0,!1,!1,!1,!1))),h(ri,"ALPHABLEND",Object.freeze(new ri(!0,ds,Cc,Pc))),h(ri,"ADDBLEND",Object.freeze(new ri(!0,ds,Rt,Rt)));let ut=ri;class dp{constructor(){h(this,"map",new Map);h(this,"id",0)}get(t){let e=this.map.get(t);return e===void 0&&(e=this.id++,this.map.set(t,e)),e}}const R0=new dp,wm=7,Em=0,bm=3,mr=class mr{constructor(t=gf,e=!0){h(this,"data",0);h(this,"_depthBias",0);h(this,"_depthBiasSlope",0);h(this,"key",0);this.func=t,this.write=e}set test(t){this.func=t?gf:$i,this.updateKey()}get test(){return this.func!==$i}set write(t){this.data=qe.set(this.data,t?1:0,bm),this.updateKey()}get write(){return qe.all(this.data,bm)}set func(t){this.data=qe.set(this.data,t,Em,wm),this.updateKey()}get func(){return qe.get(this.data,Em,wm)}set depthBias(t){this._depthBias=t,this.updateKey()}get depthBias(){return this._depthBias}set depthBiasSlope(t){this._depthBiasSlope=t,this.updateKey()}get depthBiasSlope(){return this._depthBiasSlope}copy(t){return this.data=t.data,this._depthBias=t._depthBias,this._depthBiasSlope=t._depthBiasSlope,this.key=t.key,this}clone(){return new this.constructor().copy(this)}updateKey(){const{data:t,_depthBias:e,_depthBiasSlope:s}=this,i=`${t}-${e}-${s}`;this.key=R0.get(i)}equals(t){return this.key===t.key}};h(mr,"DEFAULT",Object.freeze(new mr)),h(mr,"NODEPTH",Object.freeze(new mr($i,!1))),h(mr,"WRITEDEPTH",Object.freeze(new mr($i,!0)));let qt=mr;class qS{constructor(){h(this,"globalId",0);h(this,"revision",0)}equals(t){return this.globalId===t.globalId&&this.revision===t.revision}copy(t){this.globalId=t.globalId,this.revision=t.revision}reset(){this.globalId=0,this.revision=0}}let Am=0;class O0{constructor(){Am++,this.version=new qS,this.version.globalId=Am}increment(){this.version.revision++}}class F0{constructor(t){this.name=t,this.value=null,this.versionObject=new O0}toJSON(t){}setValue(t){this.value=t,this.versionObject.increment()}getValue(){return this.value}}class N0{constructor(t){this.name=t,this.variables=new Map}resolve(t){return this.variables.has(t)||this.variables.set(t,new F0(t)),this.variables.get(t)}removeValue(t){for(const e in this.variables){const s=this.variables[e];s.value===t&&(s.value=null)}}}let k0=0;class Is{constructor(t,e,s,i){h(this,"usage",ps);y.assert(arguments.length<=4&&(!i||typeof i=="object"),"incorrect arguments"),this.usage=(i==null?void 0:i.usage)??ps,this.device=t,this.format=e,this.numVertices=s,this.id=k0++,this.impl=t.createVertexBufferImpl(this,e,i),this.numBytes=e.verticesByteSize?e.verticesByteSize:e.size*s,this.adjustVramSizeTracking(t._vram,this.numBytes);const r=i==null?void 0:i.data;r?this.setData(r):this.storage=new ArrayBuffer(this.numBytes),this.device.buffers.push(this)}destroy(){const t=this.device,e=t.buffers.indexOf(this);e!==-1&&t.buffers.splice(e,1),this.impl.initialized&&(this.impl.destroy(t),this.adjustVramSizeTracking(t._vram,-this.storage.byteLength)),this.storage=null}adjustVramSizeTracking(t,e){y.trace(ax,`${this.id} size: ${e} vram.vb: ${t.vb} => ${t.vb+e}`),t.vb+=e}loseContext(){this.impl.loseContext()}getFormat(){return this.format}getUsage(){return this.usage}getNumVertices(){return this.numVertices}lock(){return this.storage}unlock(){this.impl.unlock(this)}setData(t){return t.byteLength!==this.numBytes?(y.error(`VertexBuffer: wrong initial data size: expected ${this.numBytes}, got ${t.byteLength}`),!1):(this.storage=t,this.unlock(),!0)}}function ci(l){if(l==null)return 0;let t=0;for(let e=0,s=l.length;e<s;e++)t=(t<<5)-t+l.charCodeAt(e),t|=0;return t}function jS(l){let e=2166136261;for(let s=0;s<l.length;s++)e^=l[s],e*=16777619;return e>>>0}const U0=new dp,B0=[2,4,8,12,16],z0=new jt;class Nt{constructor(t,e,s){this.device=t,this._elements=[],this.hasUv0=!1,this.hasUv1=!1,this.hasColor=!1,this.hasTangents=!1,this.verticesByteSize=0,this.vertexCount=s,this.interleaved=s===void 0,this.instancing=!1,this.size=e.reduce((a,n)=>a+Math.ceil(n.components*Ao[n.type]/4)*4,0);let i=0,r;for(let a=0,n=e.length;a<n;a++){const o=e[a];r=o.components*Ao[o.type],y.assert(Nt.isElementValid(t,o),`WebGPU does not support the format of vertex element ${o.semantic} : ${x0[o.type]} x ${o.components}`),s&&(i=Y.roundUp(i,r),y.assert(r%4===0,`Non-interleaved vertex format with element size not multiple of 4 can have performance impact on some platforms. Element size: ${r}`));const c=o.asInt??!1,d=c?!1:o.normalize??!1,f={name:o.semantic,offset:s?i:o.hasOwnProperty("offset")?o.offset:i,stride:s?r:o.hasOwnProperty("stride")?o.stride:this.size,dataType:o.type,numComponents:o.components,normalize:d,size:r,asInt:c};this._elements.push(f),s?i+=r*s:i+=Math.ceil(r/4)*4,o.semantic===ts?this.hasUv0=!0:o.semantic===wa?this.hasUv1=!0:o.semantic===Ht?this.hasColor=!0:o.semantic===yi&&(this.hasTangents=!0)}s&&(this.verticesByteSize=i),this._evaluateHash()}get elements(){return this._elements}static getDefaultInstancingFormat(t){return z0.get(t,()=>new Nt(t,[{semantic:tp,components:4,type:ze},{semantic:sp,components:4,type:ze},{semantic:ip,components:4,type:ze},{semantic:An,components:4,type:ze}]))}static isElementValid(t,e){const s=e.components*Ao[e.type];return!(t.isWebGPU&&!B0.includes(s))}update(){y.assert(!this.device.isWebGPU,"VertexFormat#update is not supported on WebGPU and VertexFormat cannot be modified."),this._evaluateHash()}_evaluateHash(){const t=[],e=[],s=this._elements.length;for(let r=0;r<s;r++){const{name:a,dataType:n,numComponents:o,normalize:c,offset:d,stride:f,size:u,asInt:p}=this._elements[r],m=a+n+o+c+p;t.push(m);const _=m+d+f+u;e.push(_)}t.sort();const i=t.join();this.batchingHash=ci(i),this.shaderProcessingHashString=i,this.renderingHashString=e.join("_"),this.renderingHash=U0.get(this.renderingHashString)}}const V0=new dp,yc=class yc{constructor(t={}){h(this,"_func");h(this,"_ref");h(this,"_fail");h(this,"_zfail");h(this,"_zpass");h(this,"_readMask");h(this,"_writeMask");h(this,"_dirty",!0);h(this,"_key");this._func=t.func??$i,this._ref=t.ref??0,this._readMask=t.readMask??255,this._writeMask=t.writeMask??255,this._fail=t.fail??_n,this._zfail=t.zfail??_n,this._zpass=t.zpass??_n,this._evalKey()}set func(t){this._func=t,this._dirty=!0}get func(){return this._func}set ref(t){this._ref=t,this._dirty=!0}get ref(){return this._ref}set fail(t){this._fail=t,this._dirty=!0}get fail(){return this._fail}set zfail(t){this._zfail=t,this._dirty=!0}get zfail(){return this._zfail}set zpass(t){this._zpass=t,this._dirty=!0}get zpass(){return this._zpass}set readMask(t){this._readMask=t,this._dirty=!0}get readMask(){return this._readMask}set writeMask(t){this._writeMask=t,this._dirty=!0}get writeMask(){return this._writeMask}_evalKey(){const{_func:t,_ref:e,_fail:s,_zfail:i,_zpass:r,_readMask:a,_writeMask:n}=this,o=`${t},${e},${s},${i},${r},${a},${n}`;this._key=V0.get(o),this._dirty=!1}get key(){return this._dirty&&this._evalKey(),this._key}copy(t){return this._func=t._func,this._ref=t._ref,this._readMask=t._readMask,this._writeMask=t._writeMask,this._fail=t._fail,this._zfail=t._zfail,this._zpass=t._zpass,this._dirty=t._dirty,this._key=t._key,this}clone(){return new this.constructor().copy(this)}};h(yc,"DEFAULT",Object.freeze(new yc));let pi=yc;const Nl=new Set,vc=class vc extends Se{constructor(e,s){var i,r,a,n,o,c;super();h(this,"canvas");h(this,"backBuffer",null);h(this,"backBufferSize",new J);h(this,"backBufferFormat");h(this,"backBufferAntialias",!1);h(this,"isWebGPU",!1);h(this,"isWebGL2",!1);h(this,"isHdr",!1);h(this,"scope");h(this,"maxIndirectDrawCount",1024);h(this,"maxAnisotropy");h(this,"maxCubeMapSize");h(this,"maxTextureSize");h(this,"maxVolumeSize");h(this,"maxColorAttachments",1);h(this,"precision");h(this,"samples");h(this,"maxSamples",1);h(this,"supportsStencil");h(this,"supportsCompute",!1);h(this,"supportsStorageTextureRead",!1);h(this,"renderTarget",null);h(this,"shaders",[]);h(this,"textures",[]);h(this,"targets",new Set);h(this,"renderVersion",0);h(this,"renderPassIndex");h(this,"insideRenderPass",!1);h(this,"supportsUniformBuffers",!1);h(this,"supportsClipDistances",!1);h(this,"textureFloatRenderable");h(this,"textureHalfFloatRenderable");h(this,"textureRG11B10Renderable",!1);h(this,"textureFloatFilterable",!1);h(this,"quadVertexBuffer");h(this,"blendState",new ut);h(this,"depthState",new qt);h(this,"stencilEnabled",!1);h(this,"stencilFront",new pi);h(this,"stencilBack",new pi);h(this,"dynamicBuffers");h(this,"gpuProfiler");h(this,"defaultClearOptions",{color:[0,0,0,1],depth:1,stencil:0,flags:Uo|Bo});h(this,"clientRect",{width:0,height:0});h(this,"_shadersDirty",!1);h(this,"capsDefines",new Map);h(this,"mapsToClear",new Set);this.canvas=e,"setAttribute"in e&&e.setAttribute("data-engine",`PlayCanvas ${an}`),this.initOptions={...s},(i=this.initOptions).alpha??(i.alpha=!0),(r=this.initOptions).depth??(r.depth=!0),(a=this.initOptions).stencil??(a.stencil=!0),(n=this.initOptions).antialias??(n.antialias=!0),(o=this.initOptions).powerPreference??(o.powerPreference="high-performance"),(c=this.initOptions).displayFormat??(c.displayFormat=y0),this._maxPixelRatio=Pe.browser?Math.min(1,window.devicePixelRatio):1,this.buffers=[],this._vram={texShadow:0,texAsset:0,texLightmap:0,tex:0,vb:0,ib:0,ub:0,sb:0},this._shaderStats={vsCompiled:0,fsCompiled:0,linked:0,materialShaders:0,compileTime:0},this.initializeContextCaches(),this._drawCallsPerFrame=0,this._shaderSwitchesPerFrame=0,this._primsPerFrame=[];for(let d=Gc;d<=aa;d++)this._primsPerFrame[d]=0;this._renderTargetCreationTime=0,this.scope=new N0("Device"),this.textureBias=this.scope.resolve("textureBias"),this.textureBias.setValue(0)}postInit(){const e=new Nt(this,[{semantic:Ae,components:2,type:ze}]),s=new Float32Array([-1,-1,1,-1,-1,1,1,1]);this.quadVertexBuffer=new Is(this,e,4,{data:s})}initCapsDefines(){const{capsDefines:e}=this;e.clear(),this.textureFloatFilterable&&e.set("CAPS_TEXTURE_FLOAT_FILTERABLE",""),this.textureFloatRenderable&&e.set("CAPS_TEXTURE_FLOAT_RENDERABLE","")}destroy(){var e,s,i;this.fire("destroy"),(e=this.quadVertexBuffer)==null||e.destroy(),this.quadVertexBuffer=null,(s=this.dynamicBuffers)==null||s.destroy(),this.dynamicBuffers=null,(i=this.gpuProfiler)==null||i.destroy(),this.gpuProfiler=null}onDestroyShader(e){this.fire("destroy:shader",e);const s=this.shaders.indexOf(e);s!==-1&&this.shaders.splice(s,1)}postDestroy(){this.scope=null,this.canvas=null}loseContext(){var e;this.contextLost=!0,this.backBufferSize.set(-1,-1);for(const s of this.textures)s.loseContext();for(const s of this.buffers)s.loseContext();for(const s of this.targets)s.loseContext();(e=this.gpuProfiler)==null||e.loseContext()}restoreContext(){var e,s;this.contextLost=!1,this.initializeRenderState(),this.initializeContextCaches();for(const i of this.buffers)i.unlock();(s=(e=this.gpuProfiler)==null?void 0:e.restoreContext)==null||s.call(e)}toJSON(e){}initializeContextCaches(){this.vertexBuffers=[],this.shader=null,this.shaderValid=void 0,this.shaderAsyncCompile=!1,this.renderTarget=null}initializeRenderState(){this.blendState=new ut,this.depthState=new qt,this.cullMode=fa,this.vx=this.vy=this.vw=this.vh=0,this.sx=this.sy=this.sw=this.sh=0,this.blendColor=new ae(0,0,0,0)}setStencilState(e,s){y.assert(!1)}setBlendState(e){y.assert(!1)}setBlendColor(e,s,i,r){y.assert(!1)}setDepthState(e){y.assert(!1)}setCullMode(e){y.assert(!1)}setRenderTarget(e){this.renderTarget=e}setVertexBuffer(e){e&&this.vertexBuffers.push(e)}clearVertexBuffer(){this.vertexBuffers.length=0}getIndirectDrawSlot(){return 0}get indirectDrawBuffer(){return null}getRenderTarget(){return this.renderTarget}initRenderTarget(e){if(e.initialized)return;const s=pe();this.fire("fbo:create",{timestamp:s,target:this}),e.init(),this.targets.add(e),this._renderTargetCreationTime+=pe()-s}draw(e,s,i,r,a=!0,n=!0){y.assert(!1)}_isBrowserInterface(e){return this._isImageBrowserInterface(e)||this._isImageCanvasInterface(e)||this._isImageVideoInterface(e)}_isImageBrowserInterface(e){return typeof ImageBitmap<"u"&&e instanceof ImageBitmap||typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement}_isImageCanvasInterface(e){return typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement}_isImageVideoInterface(e){return typeof HTMLVideoElement<"u"&&e instanceof HTMLVideoElement}resizeCanvas(e,s){const i=Math.min(this._maxPixelRatio,Pe.browser?window.devicePixelRatio:1),r=Math.floor(e*i),a=Math.floor(s*i);(r!==this.canvas.width||a!==this.canvas.height)&&this.setResolution(r,a)}setResolution(e,s){this.canvas.width=e,this.canvas.height=s,this.fire(vc.EVENT_RESIZE,e,s)}update(){this.updateClientRect()}updateClientRect(){if(Pe.worker)this.clientRect.width=this.canvas.width,this.clientRect.height=this.canvas.height;else{const e=this.canvas.getBoundingClientRect();this.clientRect.width=e.width,this.clientRect.height=e.height}}get width(){return this.canvas.width}get height(){return this.canvas.height}set fullscreen(e){y.error("GraphicsDevice.fullscreen is not implemented on current device.")}get fullscreen(){return y.error("GraphicsDevice.fullscreen is not implemented on current device."),!1}set maxPixelRatio(e){this._maxPixelRatio=e}get maxPixelRatio(){return this._maxPixelRatio}get deviceType(){return this._deviceType}startRenderPass(e){}endRenderPass(e){}startComputePass(e){}endComputePass(){}frameStart(){this.renderPassIndex=0,this.renderVersion++,y.call(()=>{if(mi.get(hx)){const e=this.textures.slice();e.sort((i,r)=>r.gpuSize-i.gpuSize),y.log(`Textures: ${e.length}`);let s=0;e.forEach((i,r)=>{const a=i.gpuSize;s+=a,y.log(`${r}. ${i.name} ${i.width}x${i.height} VRAM: ${(a/1024/1024).toFixed(2)} MB`)}),y.log(`Total: ${(s/1024/1024).toFixed(2)}MB`)}})}frameEnd(){this.mapsToClear.forEach(e=>e.clear()),this.mapsToClear.clear()}computeDispatch(e,s="Unnamed"){}getRenderableHdrFormat(e=[bn,nt,$t],s=!0,i=1){for(let r=0;r<e.length;r++){const a=e[r];switch(a){case bn:{if(this.textureRG11B10Renderable)return a;break}case nt:if(this.textureHalfFloatRenderable)return a;break;case $t:if(this.isWebGPU&&i>1)continue;if(this.textureFloatRenderable&&(!s||this.textureFloatFilterable))return a;break}}}validateAttributes(e,s,i){y.call(()=>{Nl.clear(),s==null||s.elements.forEach(r=>Nl.add(Ie[r.name])),i==null||i.elements.forEach(r=>Nl.add(Ie[r.name]));for(const[r,a]of e.attributes)Nl.has(r)||y.errorOnce(`Vertex attribute [${a}] at location ${r} required by the shader is not present in the currently assigned vertex buffers, while rendering [${Z.toString()}]`,{shader:e,vb0Format:s,vb1Format:i})})}};h(vc,"EVENT_RESIZE","resizecanvas");let $e=vc,G0=0;class _t{constructor(t={}){h(this,"name");h(this,"_device");h(this,"_colorBuffer");h(this,"_colorBuffers");h(this,"_depthBuffer");h(this,"_depth");h(this,"_stencil");h(this,"_samples");h(this,"autoResolve");h(this,"_face");h(this,"_mipLevel");h(this,"_mipmaps");h(this,"flipY");var i,r,a,n,o,c;y.assert(!(t instanceof $e),"pc.RenderTarget constructor no longer accepts GraphicsDevice parameter."),this.id=G0++;const e=((i=t.colorBuffer)==null?void 0:i.device)??((r=t.colorBuffers)==null?void 0:r[0].device)??((a=t.depthBuffer)==null?void 0:a.device)??t.graphicsDevice;y.assert(e,"Failed to obtain the device, colorBuffer nor depthBuffer store it."),this._device=e;const{maxSamples:s}=this._device;if(this._samples=Math.min(t.samples??1,s),e.isWebGPU&&(this._samples=this._samples>1?s:1),this._colorBuffer=t.colorBuffer,t.colorBuffer&&(this._colorBuffers=[t.colorBuffer]),this._depthBuffer=t.depthBuffer,this._face=t.face??0,this._depthBuffer){const d=this._depthBuffer._format;d===Xi||d===mn?(this._depth=!0,this._stencil=!1):d===Fc?(this._depth=!0,this._stencil=!0):d===er&&this._depthBuffer.device.isWebGPU&&this._samples>1?(this._depth=!0,this._stencil=!1):(y.warn("Incorrect depthBuffer format. Must be pc.PIXELFORMAT_DEPTH or pc.PIXELFORMAT_DEPTHSTENCIL"),this._depth=!1,this._stencil=!1)}else this._depth=t.depth??!0,this._stencil=t.stencil??!1;t.colorBuffers&&(y.assert(!this._colorBuffers,"When constructing RenderTarget and options.colorBuffers is used, options.colorBuffer must not be used."),this._colorBuffers||(this._colorBuffers=[...t.colorBuffers],this._colorBuffer=t.colorBuffers[0])),this.autoResolve=t.autoResolve??!0,this.name=t.name,this.name||(this.name=(n=this._colorBuffer)==null?void 0:n.name),this.name||(this.name=(o=this._depthBuffer)==null?void 0:o.name),this.name||(this.name="Untitled"),this.flipY=t.flipY??!1,this._mipLevel=t.mipLevel??0,this._mipLevel>0&&this._depth&&(y.error(`Rendering to a mipLevel is not supported when render target uses a depth buffer. Ignoring mipLevel ${this._mipLevel} for render target ${this.name}`,{renderTarget:this,options:t}),this._mipLevel=0),this._mipmaps=t.mipLevel===void 0,this.validateMrt(),this.impl=e.createRenderTargetImpl(this),y.trace(Jp,`Alloc: Id ${this.id} ${this.name}: ${this.width}x${this.height} [samples: ${this.samples}]${(c=this._colorBuffers)!=null&&c.length?`[MRT: ${this._colorBuffers.length}]`:""}${this.colorBuffer?"[Color]":""}${this.depth?"[Depth]":""}${this.stencil?"[Stencil]":""}[Face:${this.face}]`)}destroy(){y.trace(Jp,`DeAlloc: Id ${this.id} ${this.name}`);const t=this._device;t&&(t.targets.delete(this),t.renderTarget===this&&t.setRenderTarget(null),this.destroyFrameBuffers())}destroyFrameBuffers(){const t=this._device;t&&this.impl.destroy(t)}destroyTextureBuffers(){var t,e;(t=this._depthBuffer)==null||t.destroy(),this._depthBuffer=null,(e=this._colorBuffers)==null||e.forEach(s=>{s.destroy()}),this._colorBuffers=null,this._colorBuffer=null}resize(t,e){var s,i;if(this.width!==t||this.height!==e){if(this.mipLevel>0){y.warn("Only a render target rendering to mipLevel 0 can be resized, ignoring.",this);return}const r=this._device;this.destroyFrameBuffers(),r.renderTarget===this&&r.setRenderTarget(null),(s=this._depthBuffer)==null||s.resize(t,e),(i=this._colorBuffers)==null||i.forEach(a=>{a.resize(t,e)}),this.validateMrt(),this.impl=r.createRenderTargetImpl(this)}}validateMrt(){y.call(()=>{if(this._colorBuffers){const{width:t,height:e,cubemap:s,volume:i}=this._colorBuffers[0];for(let r=1;r<this._colorBuffers.length;r++){const a=this._colorBuffers[r];y.assert(a.width===t,"All render target color buffers must have the same width",this),y.assert(a.height===e,"All render target color buffers must have the same height",this),y.assert(a.cubemap===s,"All render target color buffers must have the same cubemap setting",this),y.assert(a.volume===i,"All render target color buffers must have the same volume setting",this)}}})}init(){this.impl.init(this._device,this)}get initialized(){return this.impl.initialized}get device(){return this._device}loseContext(){this.impl.loseContext()}resolve(t=!0,e=!!this._depthBuffer){this._device&&this._samples>1&&(Z.pushGpuMarker(this._device,`RESOLVE-RT:${this.name}:${t?"[color]":""}:${e?"[depth]":""}`),this.impl.resolve(this._device,this,t,e),Z.popGpuMarker(this._device))}copy(t,e,s){if(!this._device)if(t._device)this._device=t._device;else return y.error("Render targets are not initialized"),!1;Z.pushGpuMarker(this._device,`COPY-RT:${t.name}->${this.name}`);const i=this._device.copyRenderTarget(t,this,e,s);return Z.popGpuMarker(this._device),i}get samples(){return this._samples}get depth(){return this._depth}get stencil(){return this._stencil}get colorBuffer(){return this._colorBuffer}getColorBuffer(t){var e;return(e=this._colorBuffers)==null?void 0:e[t]}get depthBuffer(){return this._depthBuffer}get face(){return this._face}get mipLevel(){return this._mipLevel}get mipmaps(){return this._mipmaps}get width(){var e,s;let t=((e=this._colorBuffer)==null?void 0:e.width)||((s=this._depthBuffer)==null?void 0:s.width)||this._device.width;return this._mipLevel>0&&(t=qi.calcLevelDimension(t,this._mipLevel)),t}get height(){var e,s;let t=((e=this._colorBuffer)==null?void 0:e.height)||((s=this._depthBuffer)==null?void 0:s.height)||this._device.height;return this._mipLevel>0&&(t=qi.calcLevelDimension(t,this._mipLevel)),t}isColorBufferSrgb(t=0){if(this.device.backBuffer===this)return $h(this.device.backBufferFormat);const e=this.getColorBuffer(t);return e?$h(e.format):!1}}const H0={equals(l,t){if(l.length!==t.length)return!1;for(let e=0;e<l.length;e++)if(l[e]!==t[e])return!1;return!0}};class sd{constructor(){h(this,"_refCount",0)}incRefCount(){this._refCount++}decRefCount(){this._refCount--}get refCount(){return this._refCount}}class W0 extends sd{constructor(e){super();h(this,"object");this.object=e,this.incRefCount()}}class $0{constructor(){h(this,"cache",new Map)}destroy(){this.cache.forEach(t=>{var e;(e=t.object)==null||e.destroy()}),this.cache.clear()}clear(){this.cache.clear()}get(t){const e=this.cache.get(t);return e?(e.incRefCount(),e.object):null}set(t,e){y.assert(!this.cache.has(t),"RefCountedKeyCache: Trying to put object with key that already exists in the cache",{key:t,object:e}),this.cache.set(t,new W0(e))}release(t){var s;const e=this.cache.get(t);e?(e.decRefCount(),e.refCount===0&&(this.cache.delete(t),(s=e.object)==null||s.destroy())):y.warn("RefCountedKeyCache: Trying to release object that is not in the cache",{key:t})}}class X0 extends $0{loseContext(t){this.clear()}}const q0=new jt,md=l=>q0.get(l,()=>new X0),Et=[];Et[Ws]=1;Et[ma]=2;Et[cs]=3;Et[Cn]=4;Et[pa]=1;Et[oa]=2;Et[la]=3;Et[ha]=4;Et[gn]=1;Et[$o]=2;Et[Xo]=3;Et[qo]=4;Et[Yh]=8;Et[Pn]=12;Et[li]=16;Et[Dn]=1;Et[In]=2;Et[Mn]=3;Et[Ln]=4;class ct{constructor(t,e,s=0){h(this,"name");h(this,"type");h(this,"byteSize");h(this,"offset");h(this,"scopeId");h(this,"count");h(this,"numComponents");if(this.shortName=t,this.name=s?`${t}[0]`:t,this.type=e,this.numComponents=Et[e],y.assert(this.numComponents,`Unhandled uniform format ${e} used for ${t}`),this.updateType=e,s>0)switch(e){case Ws:this.updateType=Xc;break;case pa:this.updateType=Rn;break;case Dn:this.updateType=Yc;break;case gn:this.updateType=Kc;break;case ma:this.updateType=qc;break;case oa:this.updateType=On;break;case In:this.updateType=Zc;break;case $o:this.updateType=Qc;break;case cs:this.updateType=jc;break;case la:this.updateType=Fn;break;case Mn:this.updateType=Jc;break;case Xo:this.updateType=ed;break;case Cn:this.updateType=rp;break;case ha:this.updateType=Kh;break;case Ln:this.updateType=ap;break;case qo:this.updateType=np;break;case li:this.updateType=LS;break;default:y.error(`Uniform array of type ${RS[e]} is not supported when processing uniform '${t}'.`),y.call(()=>{this.invalid=!0});break}this.count=s,y.assert(!isNaN(s),`Unsupported uniform: ${t}[${s}]`),y.call(()=>{isNaN(s)&&(this.invalid=!0)});let i=this.numComponents;s&&(i=Y.roundUp(i,4)),this.byteSize=i*4,s&&(this.byteSize*=s),y.assert(this.byteSize,`Unknown byte size for uniform format ${e} used for ${t}`)}get isArrayType(){return this.count>0}calculateOffset(t){let e=this.byteSize<=8?this.byteSize:16;this.count&&(e=16),t=Y.roundUp(t,e),this.offset=t/4}}class YS{constructor(t,e){h(this,"byteSize",0);h(this,"map",new Map);this.scope=t.scope,this.uniforms=e;let s=0;for(let i=0;i<e.length;i++){const r=e[i];r.calculateOffset(s),s=r.offset*4+r.byteSize,r.scopeId=this.scope.resolve(r.name),this.map.set(r.name,r)}this.byteSize=Y.roundUp(s,16)}get(t){return this.map.get(t)}}const Mr="Preprocessor",Rs=/[ \t]*#(ifn?def|if|endif|else|elif|define|undef|extension|include)/g,_d=/define[ \t]+([^\n]+)\r?(?:\n|$)/g,Cm=/extension[ \t]+([\w-]+)[ \t]*:[ \t]*(enable|require)/g,gd=/undef[ \t]+([^\n]+)\r?(?:\n|$)/g,Sd=/(ifdef|ifndef|if)[ \t]*([^\r\n]+)\r?\n/g,yd=/(endif|else|elif)(?:[ \t]+([^\r\n]*))?\r?\n?/g,Pm=/\{?[\w-]+\}?/,j0=/(!|\s)?defined\(([\w-]+)\)/,Y0=/!?defined\s*\([^)]*\)/g,K0=/!?defined\s*$/,Z0=/([a-z_]\w*)\s*(==|!=|<|<=|>|>=)\s*([\w"']+)/i,Q0=/[+\-]/g,vd=/include[ \t]+"([\w-]+)(?:\s*,\s*([\w-]+))?"/g,J0=/\{i\}/g,Dm=/(pcFragColor[1-8])\b/g,It=class It{static run(t,e=new Map,s={}){It.sourceName=s.sourceName,t=this.stripComments(t),t=t.split(/\r?\n/).map(n=>n.trimEnd()).join(`
`);const i=new Map,r=new Map;if(t=this._preprocess(t,i,r,e,s.stripDefines),t===null)return null;const a=new Map;return i.forEach((n,o)=>{Number.isInteger(parseFloat(n))&&!n.includes(".")&&a.set(o,n)}),t=this.stripComments(t),t=this.stripUnusedColorAttachments(t,s),t=this.RemoveEmptyLines(t),t=this.processArraySize(t,a),t=this.injectDefines(t,r),t}static stripUnusedColorAttachments(t,e){if(e.stripUnusedColorAttachments){const s=new Map,i=t.match(Dm);if(i==null||i.forEach(a=>{const n=parseInt(a.charAt(a.length-1),10);s.set(n,(s.get(n)??0)+1)}),Array.from(s.values()).some(a=>a===1)){const a=t.split(`
`),n=[];for(let o=0;o<a.length;o++){const c=a[o].match(Dm);if(c){const d=parseInt(c[0].charAt(c[0].length-1),10);if(d>0&&s.get(d)===1)continue}n.push(a[o])}t=n.join(`
`)}}return t}static stripComments(t){return t.replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm,"$1")}static processArraySize(t,e){return t!==null&&e.forEach((s,i)=>{t=t.replace(new RegExp(`\\[${i}\\]`,"g"),`[${s}]`)}),t}static injectDefines(t,e){if(t!==null&&e.size>0){const s=t.split(`
`);e.forEach((i,r)=>{const a=new RegExp(r,"g");for(let n=0;n<s.length;n++)s[n].includes("#")||(s[n]=s[n].replace(a,i))}),t=s.join(`
`)}return t}static RemoveEmptyLines(t){return t!==null&&(t=t.split(/\r?\n/).map(e=>e.trim()===""?"":e).join(`
`),t=t.replace(/(\n\n){3,}/g,`

`)),t}static _preprocess(t,e=new Map,s,i,r){var d;const a=t,n=[];let o=!1,c;for(;(c=Rs.exec(t))!==null&&!o;){const f=c[1];switch(f){case"define":{_d.lastIndex=c.index;const u=_d.exec(t);y.assert(u,`Invalid [${f}]: ${t.substring(c.index,c.index+100)}...`),o||(o=u===null);const p=u[1];Pm.lastIndex=u.index;const _=Pm.exec(p)[0];let S=p.substring(_.length).trim();S===""&&(S="true");const g=It._keep(n);let v=r;if(g){const w=_.startsWith("{")&&_.endsWith("}");w&&(v=!0),w?s.set(_,S):e.set(_,S),v&&(t=t.substring(0,u.index-1)+t.substring(_d.lastIndex),Rs.lastIndex=u.index-1)}y.trace(Mr,`${f}: [${_}] ${S} ${g?"":"IGNORED"}`),v||(Rs.lastIndex=u.index+u[0].length);break}case"undef":{gd.lastIndex=c.index;const u=gd.exec(t),p=u[1].trim(),m=It._keep(n);m&&(e.delete(p),r&&(t=t.substring(0,u.index-1)+t.substring(gd.lastIndex),Rs.lastIndex=u.index-1)),y.trace(Mr,`${f}: [${p}] ${m?"":"IGNORED"}`),r||(Rs.lastIndex=u.index+u[0].length);break}case"extension":{Cm.lastIndex=c.index;const u=Cm.exec(t);if(y.assert(u,`Invalid [${f}]: ${t.substring(c.index,c.index+100)}...`),o||(o=u===null),u){const p=u[1],m=It._keep(n);m&&e.set(p,"true"),y.trace(Mr,`${f}: [${p}] ${m?"":"IGNORED"}`)}Rs.lastIndex=u.index+u[0].length;break}case"ifdef":case"ifndef":case"if":{Sd.lastIndex=c.index;const u=Sd.exec(t),p=u[2],m=It.evaluate(p,e);o||(o=m.error);let _=m.result;f==="ifndef"&&(_=!_),n.push({anyKeep:_,keep:_,start:c.index,end:Sd.lastIndex}),y.trace(Mr,`${f}: [${p}] => ${_}`),Rs.lastIndex=u.index+u[0].length;break}case"endif":case"else":case"elif":{yd.lastIndex=c.index;const u=yd.exec(t),p=n.pop();if(!p){console.error(`Shader preprocessing encountered "#${u[1]}" without a preceding #if #ifdef #ifndef while preprocessing ${It.sourceName} on line:
 ${t.substring(c.index,c.index+100)}...`,{source:a}),o=!0;continue}const m=p.keep?t.substring(p.end,c.index):"";y.trace(Mr,`${f}: [previous block] => ${m!==""}`),t=t.substring(0,p.start)+m+t.substring(yd.lastIndex),Rs.lastIndex=p.start+m.length;const _=u[1];if(_==="else"||_==="elif"){let S=!1;if(!p.anyKeep)if(_==="else")S=!p.keep;else{const g=It.evaluate(u[2],e);S=g.result,o||(o=g.error)}n.push({anyKeep:p.anyKeep||S,keep:S,start:Rs.lastIndex,end:Rs.lastIndex}),y.trace(Mr,`${f}: [${u[2]}] => ${S}`)}break}case"include":{vd.lastIndex=c.index;const u=vd.exec(t);if(o||(o=u===null),!u){y.assert(u,`Invalid [${f}] while preprocessing ${It.sourceName}:
${t.substring(c.index,c.index+100)}...`),o=!0;continue}const p=u[1].trim(),m=(d=u[2])==null?void 0:d.trim(),_=It._keep(n);if(_){let S=i==null?void 0:i.get(p);if(S!==void 0){if(S=this.stripComments(S),m){const g=e.get(m),v=parseFloat(g);if(Number.isInteger(v)){let w="";for(let x=0;x<v;x++)w+=S.replace(J0,String(x));S=w}else console.error(`Include Count identifier "${m}" not resolved while preprocessing ${It.sourceName} on line:
 ${t.substring(c.index,c.index+100)}...`,{originalSource:a,source:t}),o=!0}t=t.substring(0,u.index-1)+S+t.substring(vd.lastIndex),Rs.lastIndex=u.index-1}else{console.error(`Include "${p}" not resolved while preprocessing ${It.sourceName}`,{originalSource:a,source:t}),o=!0;continue}}y.trace(Mr,`${f}: [${p}] ${_?"":"IGNORED"}`);break}}}return n.length>0&&(console.error(`Shader preprocessing reached the end of the file without encountering the necessary #endif to close a preceding #if, #ifdef, or #ifndef block. ${It.sourceName}`),o=!0),o?(console.error("Failed to preprocess shader: ",{source:a}),null):t}static _keep(t){for(let e=0;e<t.length;e++)if(!t[e].keep)return!1;return!0}static evaluateAtomicExpression(t,e){let s=!1;t=t.trim();let i=!1;if(t==="true")return{result:!0,error:s};if(t==="false")return{result:!1,error:s};const r=j0.exec(t);if(r){i=r[1]==="!",t=r[2].trim();const o=e.has(t);return{result:i?!o:o,error:s}}const a=Z0.exec(t);if(a){const o=e.get(a[1].trim())??a[1].trim(),c=e.get(a[3].trim())??a[3].trim(),d=a[2].trim();let f=!1;switch(d){case"==":f=o===c;break;case"!=":f=o!==c;break;case"<":f=o<c;break;case"<=":f=o<=c;break;case">":f=o>c;break;case">=":f=o>=c;break;default:s=!0}return{result:f,error:s}}return{result:e.has(t),error:s}}static processParentheses(t,e){let s=!1,i=t.trim();for(;i.startsWith("(")&&i.endsWith(")");){let r=0,a=!0;for(let n=0;n<i.length-1;n++)if(i[n]==="(")r++;else if(i[n]===")"&&(r--,r===0)){a=!1;break}if(a)i=i.slice(1,-1).trim();else break}for(;;){let r=!1,a=0,n=0,o=-1,c=-1,d=0;for(let m=0;m<i.length;m++)if(i[m]==="("){const _=i.substring(0,m);K0.test(_)?d++:d===0&&(a++,a>n&&(n=a,o=m),r=!0)}else i[m]===")"&&(d>0?d--:a>0&&(a===n&&o!==-1&&(c=m),a--));if(!r||o===-1||c===-1)break;const f=i.substring(o+1,c),{result:u,error:p}=It.evaluate(f,e);s=s||p,i=i.substring(0,o)+(u?"true":"false")+i.substring(c+1)}return{expression:i,error:s}}static evaluate(t,e){const s=Q0.exec(t)===null;y.assert(s,`Resolving expression like this is not supported: ${t}`);let i=t,r=!1;if(t.replace(Y0,"").indexOf("(")!==-1){const o=It.processParentheses(t,e);i=o.expression,r=o.error}if(r)return y.log(`Parenthesis parsing error in expression: "${t}"`),{result:!1,error:!0};const n=i.split("||");for(const o of n){const c=o.split("&&");let d=!0;for(const f of c){const{result:u,error:p}=It.evaluateAtomicExpression(f.trim(),e);if(!u||p){d=!1;break}}if(d)return{result:!0,error:!s}}return{result:!1,error:!s}}};h(It,"sourceName");let Co=It;const KS=`

#ifndef outType_0
#define outType_0 vec4
#endif

layout(location = 0) out highp outType_0 pcFragColor0;

#if COLOR_ATTACHMENT_1
layout(location = 1) out highp outType_1 pcFragColor1;
#endif

#if COLOR_ATTACHMENT_2
layout(location = 2) out highp outType_2 pcFragColor2;
#endif

#if COLOR_ATTACHMENT_3
layout(location = 3) out highp outType_3 pcFragColor3;
#endif

#if COLOR_ATTACHMENT_4
layout(location = 4) out highp outType_4 pcFragColor4;
#endif

#if COLOR_ATTACHMENT_5
layout(location = 5) out highp outType_5 pcFragColor5;
#endif

#if COLOR_ATTACHMENT_6
layout(location = 6) out highp outType_6 pcFragColor6;
#endif

#if COLOR_ATTACHMENT_7
layout(location = 7) out highp outType_7 pcFragColor7;
#endif

#define gl_FragColor pcFragColor0

#define varying in

#define texture2D texture
#define texture2DBias texture
#define textureCube texture
#define texture2DProj textureProj
#define texture2DLod textureLod
#define texture2DProjLod textureProjLod
#define textureCubeLod textureLod
#define texture2DGrad textureGrad
#define texture2DProjGrad textureProjGrad
#define textureCubeGrad textureGrad
#define utexture2D texture
#define itexture2D texture

// deprecated defines
#define texture2DLodEXT texture2DLodEXT_is_no_longer_supported_use_texture2DLod_instead
#define texture2DProjLodEXT texture2DProjLodEXT_is_no_longer_supported_use_texture2DProjLod
#define textureCubeLodEXT textureCubeLodEXT_is_no_longer_supported_use_textureCubeLod_instead
#define texture2DGradEXT texture2DGradEXT_is_no_longer_supported_use_texture2DGrad_instead
#define texture2DProjGradEXT texture2DProjGradEXT_is_no_longer_supported_use_texture2DProjGrad_instead
#define textureCubeGradEXT textureCubeGradEXT_is_no_longer_supported_use_textureCubeGrad_instead

// sample shadows using textureGrad to remove derivatives in the dynamic loops (which are used by
// clustered lighting) - as DirectX shader compiler tries to unroll the loops and takes long time
// to compile the shader. Using textureLod would be even better, but WebGl does not translate it to
// lod instruction for DirectX correctly and uses SampleCmp instead of SampleCmpLevelZero or similar.
#define textureShadow(res, uv) textureGrad(res, uv, vec2(1, 1), vec2(1, 1))

// pass / accept shadow map or texture as a function parameter, on webgl this is simply passed as is
// but this is needed for WebGPU
#define SHADOWMAP_PASS(name) name
#define SHADOWMAP_ACCEPT(name) sampler2DShadow name
#define TEXTURE_PASS(name) name
#define TEXTURE_ACCEPT(name) sampler2D name
#define TEXTURE_ACCEPT_HIGHP(name) highp sampler2D name

#define GL2
`,ZS=`
#define attribute in
#define varying out
#define texture2D texture
#define utexture2D texture
#define itexture2D texture
#define GL2
#define VERTEXSHADER

#define TEXTURE_PASS(name) name
#define TEXTURE_ACCEPT(name) sampler2D name
#define TEXTURE_ACCEPT_HIGHP(name) highp sampler2D name
`,QS=`

// texelFetch support and others
#extension GL_EXT_samplerless_texture_functions : require

#ifndef outType_0
#define outType_0 vec4
#endif
#ifndef outType_1
#define outType_1 vec4
#endif
#ifndef outType_2
#define outType_2 vec4
#endif
#ifndef outType_3
#define outType_3 vec4
#endif
#ifndef outType_4
#define outType_4 vec4
#endif
#ifndef outType_5
#define outType_5 vec4
#endif
#ifndef outType_6
#define outType_6 vec4
#endif
#ifndef outType_7
#define outType_7 vec4
#endif

layout(location = 0) out highp outType_0 pcFragColor0;
layout(location = 1) out highp outType_1 pcFragColor1;
layout(location = 2) out highp outType_2 pcFragColor2;
layout(location = 3) out highp outType_3 pcFragColor3;
layout(location = 4) out highp outType_4 pcFragColor4;
layout(location = 5) out highp outType_5 pcFragColor5;
layout(location = 6) out highp outType_6 pcFragColor6;
layout(location = 7) out highp outType_7 pcFragColor7;

#define gl_FragColor pcFragColor0

#define texture2D(res, uv) texture(sampler2D(res, res ## _sampler), uv)
#define texture2DBias(res, uv, bias) texture(sampler2D(res, res ## _sampler), uv, bias)
#define texture2DLod(res, uv, lod) textureLod(sampler2D(res, res ## _sampler), uv, lod)
#define textureCube(res, uv) texture(samplerCube(res, res ## _sampler), uv)
#define textureCubeLod(res, uv, lod) textureLod(samplerCube(res, res ## _sampler), uv, lod)
#define textureShadow(res, uv) textureLod(sampler2DShadow(res, res ## _sampler), uv, 0.0)
#define itexture2D(res, uv) texture(isampler2D(res, res ## _sampler), uv)
#define utexture2D(res, uv) texture(usampler2D(res, res ## _sampler), uv)

// deprecated defines
#define texture2DLodEXT texture2DLodEXT_is_no_longer_supported_use_texture2DLod_instead
#define texture2DProjLodEXT texture2DProjLodEXT_is_no_longer_supported_use_texture2DProjLod
#define textureCubeLodEXT textureCubeLodEXT_is_no_longer_supported_use_textureCubeLod_instead
#define texture2DGradEXT texture2DGradEXT_is_no_longer_supported_use_texture2DGrad_instead
#define texture2DProjGradEXT texture2DProjGradEXT_is_no_longer_supported_use_texture2DProjGrad_instead
#define textureCubeGradEXT textureCubeGradEXT_is_no_longer_supported_use_textureCubeGrad_instead

// TODO: implement other texture sampling macros
// #define texture2DProj textureProj
// #define texture2DProjLod textureProjLod
// #define texture2DGrad textureGrad
// #define texture2DProjGrad textureProjGrad
// #define textureCubeGrad textureGrad

// pass / accept shadow map as a function parameter, passes both the texture as well as sampler
// as the combined sampler can be only created at a point of use
#define SHADOWMAP_PASS(name) name, name ## _sampler
#define SHADOWMAP_ACCEPT(name) texture2D name, sampler name ## _sampler
#define TEXTURE_PASS(name) name, name ## _sampler
#define TEXTURE_ACCEPT(name) texture2D name, sampler name ## _sampler
#define TEXTURE_ACCEPT_HIGHP TEXTURE_ACCEPT

#define GL2
#define WEBGPU
`,JS=`

// texelFetch support and others
#extension GL_EXT_samplerless_texture_functions : require

#define texture2D(res, uv) texture(sampler2D(res, res ## _sampler), uv)
#define itexture2D(res, uv) texture(isampler2D(res, res ## _sampler), uv)
#define utexture2D(res, uv) texture(usampler2D(res, res ## _sampler), uv)

#define TEXTURE_PASS(name) name, name ## _sampler
#define TEXTURE_ACCEPT(name) texture2D name, sampler name ## _sampler
#define TEXTURE_ACCEPT_HIGHP TEXTURE_ACCEPT

#define GL2
#define WEBGPU
#define VERTEXSHADER
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
`,ey=`
`,ty=`
#define VERTEXSHADER
`,Im=`

// convert clip space position into texture coordinates to sample scene grab textures
vec2 getGrabScreenPos(vec4 clipPos) {
    vec2 uv = (clipPos.xy / clipPos.w) * 0.5 + 0.5;

    #ifdef WEBGPU
        uv.y = 1.0 - uv.y;
    #endif

    return uv;
}

// convert uv coordinates to sample image effect texture (render target texture rendered without
// forward renderer which does the flip in the projection matrix)
vec2 getImageEffectUV(vec2 uv) {
    #ifdef WEBGPU
        uv.y = 1.0 - uv.y;
    #endif

    return uv;
}
`,Mm=`

// convert clip space position into texture coordinates for sampling scene grab textures
fn getGrabScreenPos(clipPos: vec4<f32>) -> vec2<f32> {
    var uv: vec2<f32> = (clipPos.xy / clipPos.w) * 0.5 + vec2<f32>(0.5);
    uv.y = 1.0 - uv.y;
    return uv;
}

// convert uv coordinates to sample image effect texture (render target texture rendered without
// forward renderer which does the flip in the projection matrix)
fn getImageEffectUV(uv: vec2<f32>) -> vec2<f32> {
    var modifiedUV: vec2<f32> = uv;
    modifiedUV.y = 1.0 - modifiedUV.y;
    return modifiedUV;
}

// types wrapped in size aligned structures to ensure correct alignment in uniform buffer arrays
struct WrappedF32 { @size(16) element: f32 }
struct WrappedI32 { @size(16) element: i32 }
struct WrappedU32 { @size(16) element: u32 }
struct WrappedVec2F { @size(16) element: vec2f }
struct WrappedVec2I { @size(16) element: vec2i }
struct WrappedVec2U { @size(16) element: vec2u }
`,eT={vertex_position:Ae,vertex_normal:_s,vertex_tangent:yi,vertex_texCoord0:ts,vertex_texCoord1:wa,vertex_texCoord2:ul,vertex_texCoord3:pl,vertex_texCoord4:ml,vertex_texCoord5:_l,vertex_texCoord6:gl,vertex_texCoord7:Sl,vertex_color:Ht,vertex_boneIndices:fs,vertex_boneWeights:gi};class Zt{static createDefinition(t,e){y.assert(e),y.assert(!e.vertexDefines||e.vertexDefines instanceof Map),y.assert(!e.vertexIncludes||e.vertexIncludes instanceof Map),y.assert(!e.fragmentDefines||e.fragmentDefines instanceof Map),y.assert(!e.fragmentIncludes||e.fragmentIncludes instanceof Map);const s=u=>{let p=u.fragmentOutputTypes??"vec4";return Array.isArray(p)||(p=[p]),p},i=(u,p,m,_)=>{const S=t.isWebGPU?u:p;let g="";if(!m){const v=s(_);for(let w=0;w<t.maxColorAttachments;w++){g+=`#define COLOR_ATTACHMENT_${w}
`;const x=v[w]??"vec4";g+=`#define outType_${w} ${x}
`}}return g+S},r=(u,p)=>{let m="";if(!u){const _=s(p);for(let S=0;S<t.maxColorAttachments;S++){const g=_[S]??"vec4",v=WS.get(g);y.assert(v,`Unknown output type translation: ${g} -> ${v}`),m+=`alias pcOutType${S} = ${v};
`}}return m},a=e.name??"Untitled";let n,o;const c=Zt.getDefinesCode(t,e.vertexDefines),d=Zt.getDefinesCode(t,e.fragmentDefines);return e.shaderLanguage===it?(n=`
                ${r(!0,e)}
                ${ty}
                ${Mm}
                ${c}
                ${e.vertexCode}
            `,o=`
                ${r(!1,e)}
                ${ey}
                ${Mm}
                ${d}
                ${e.fragmentCode}
            `):(y.assert(e.vertexCode),n=`${Zt.versionCode(t)+i(JS,ZS,!0,e)+c+Zt.precisionCode(t)}
                ${Im}
                ${Zt.getShaderNameCode(a)}
                ${e.vertexCode}`,y.assert(e.fragmentCode),o=`${(e.fragmentPreamble||"")+Zt.versionCode(t)+i(QS,KS,!1,e)+d+Zt.precisionCode(t)}
                ${Im}
                ${Zt.getShaderNameCode(a)}
                ${e.fragmentCode}`),{name:a,shaderLanguage:e.shaderLanguage??Oe,attributes:e.attributes,vshader:n,vincludes:e.vertexIncludes,fincludes:e.fragmentIncludes,fshader:o,useTransformFeedback:e.useTransformFeedback,meshUniformBufferFormat:e.meshUniformBufferFormat,meshBindGroupFormat:e.meshBindGroupFormat}}static getDefinesCode(t,e){let s="";return t.capsDefines.forEach((i,r)=>{s+=`#define ${r} ${i}
`}),s+=`
`,e==null||e.forEach((i,r)=>{s+=`#define ${r} ${i}
`}),s+=`
`,s}static getShaderNameCode(t){return`#define SHADER_NAME ${t}
`}static versionCode(t){return t.isWebGPU?`#version 450
`:`#version 300 es
`}static precisionCode(t,e){e&&e!=="highp"&&e!=="mediump"&&e!=="lowp"&&(e=null),e&&(e==="highp"&&t.maxPrecision!=="highp"&&(e="mediump"),e==="mediump"&&t.maxPrecision==="lowp"&&(e="lowp"));const s=e||t.precision;return`
            precision ${s} float;
            precision ${s} int;
            precision ${s} usampler2D;
            precision ${s} isampler2D;
            precision ${s} sampler2DShadow;
            precision ${s} samplerCubeShadow;
            precision ${s} sampler2DArray;
        `}static collectAttributes(t){const e={};let s=0,i=t.indexOf("attribute");for(;i>=0&&!(i>0&&t[i-1]==="/");){let r=!1;if(i>0){let a=t.lastIndexOf(`
`,i);a=a!==-1?a+1:0,t.substring(a,i).includes("#")&&(r=!0)}if(!r){const a=t.indexOf(";",i),n=t.lastIndexOf(" ",a),o=t.substring(n+1,a);if(e[o])y.warn(`Attribute [${o}] already exists when extracting the attributes from the vertex shader, ignoring.`,{vsCode:t});else{const c=eT[o];c!==void 0?e[o]=c:(e[o]=`ATTR${s}`,s++)}}i=t.indexOf("attribute",i+1)}return e}}let tT=0;class sy{constructor(t,e){h(this,"meshUniformBufferFormat");h(this,"meshBindGroupFormat");h(this,"attributes",new Map);if(this.id=tT++,this.device=t,this.definition=e,this.name=e.name||"Untitled",this.init(),e.cshader)y.assert(t.supportsCompute,"Compute shaders are not supported on this device."),y.assert(!e.vshader&&!e.fshader,"Vertex and fragment shaders are not supported when creating a compute shader."),e.cshader=Co.run(e.cshader,e.cincludes,{sourceName:`compute shader for ${this.label}`,stripDefines:!0});else{y.assert(e.vshader,"No vertex shader has been specified when creating a shader."),y.assert(e.fshader,"No fragment shader has been specified when creating a shader."),y.call(()=>{this.vUnmodified=e.vshader,this.fUnmodified=e.fshader});const s=e.shaderLanguage===it;e.vshader=Co.run(e.vshader,e.vincludes,{sourceName:`vertex shader for ${this.label}`,stripDefines:s}),e.shaderLanguage===Oe&&(e.attributes??(e.attributes=Zt.collectAttributes(e.vshader)));const i=t.isWebGL2&&(Pe.name==="osx"||Pe.name==="ios");if(e.fshader=Co.run(e.fshader,e.fincludes,{stripUnusedColorAttachments:i,stripDefines:s,sourceName:`fragment shader for ${this.label}`}),!e.vshader||!e.fshader){y.error(`Shader: Failed to create shader ${this.label}. Vertex or fragment shader source is empty.`,this),this.failed=!0;return}}this.impl=t.createShaderImpl(this),y.trace(tm,`Alloc: ${this.label}, stack: ${Z.toString()}`,{instance:this})}init(){this.ready=!1,this.failed=!1}get label(){return`Shader Id ${this.id} (${this.definition.shaderLanguage===it?"WGSL":"GLSL"}) ${this.name}`}destroy(){y.trace(tm,`DeAlloc: Id ${this.id} ${this.name}`),this.device.onDestroyShader(this),this.impl.destroy(this)}loseContext(){this.init(),this.impl.loseContext()}restoreContext(){this.impl.restoreContext(this.device,this)}}class sT{constructor(){h(this,"storage");h(this,"gpuBuffer");h(this,"offset")}}const Ue=[];Ue[Ws]=function(l,t,e){const s=l.storageFloat32;s[e]=t};Ue[ma]=(l,t,e)=>{const s=l.storageFloat32;s[e]=t[0],s[e+1]=t[1]};Ue[cs]=(l,t,e)=>{const s=l.storageFloat32;s[e]=t[0],s[e+1]=t[1],s[e+2]=t[2]};Ue[Cn]=(l,t,e)=>{const s=l.storageFloat32;s[e]=t[0],s[e+1]=t[1],s[e+2]=t[2],s[e+3]=t[3]};Ue[pa]=function(l,t,e){const s=l.storageInt32;s[e]=t};Ue[oa]=function(l,t,e){const s=l.storageInt32;s[e]=t[0],s[e+1]=t[1]};Ue[la]=function(l,t,e){const s=l.storageInt32;s[e]=t[0],s[e+1]=t[1],s[e+2]=t[2]};Ue[ha]=function(l,t,e){const s=l.storageInt32;s[e]=t[0],s[e+1]=t[1],s[e+2]=t[2],s[e+3]=t[3]};Ue[Yh]=(l,t,e)=>{const s=l.storageFloat32;s[e]=t[0],s[e+1]=t[1],s[e+4]=t[2],s[e+5]=t[3],s[e+8]=t[4],s[e+9]=t[5]};Ue[Pn]=(l,t,e)=>{const s=l.storageFloat32;s[e]=t[0],s[e+1]=t[1],s[e+2]=t[2],s[e+4]=t[3],s[e+5]=t[4],s[e+6]=t[5],s[e+8]=t[6],s[e+9]=t[7],s[e+10]=t[8]};Ue[Xc]=function(l,t,e,s){const i=l.storageFloat32;for(let r=0;r<s;r++)i[e+r*4]=t[r]};Ue[qc]=(l,t,e,s)=>{const i=l.storageFloat32;for(let r=0;r<s;r++)i[e+r*4]=t[r*2],i[e+r*4+1]=t[r*2+1]};Ue[jc]=(l,t,e,s)=>{const i=l.storageFloat32;for(let r=0;r<s;r++)i[e+r*4]=t[r*3],i[e+r*4+1]=t[r*3+1],i[e+r*4+2]=t[r*3+2]};Ue[Dn]=(l,t,e,s)=>{const i=l.storageUint32;i[e]=t};Ue[In]=(l,t,e,s)=>{const i=l.storageUint32;i[e]=t[0],i[e+1]=t[1]};Ue[Mn]=(l,t,e,s)=>{const i=l.storageUint32;i[e]=t[0],i[e+1]=t[1],i[e+2]=t[2]};Ue[Ln]=(l,t,e,s)=>{const i=l.storageUint32;i[e]=t[0],i[e+1]=t[1],i[e+2]=t[2],i[e+3]=t[3]};Ue[Rn]=function(l,t,e,s){const i=l.storageInt32;for(let r=0;r<s;r++)i[e+r*4]=t[r]};Ue[Kc]=Ue[Rn];Ue[Yc]=function(l,t,e,s){const i=l.storageUint32;for(let r=0;r<s;r++)i[e+r*4]=t[r]};Ue[On]=(l,t,e,s)=>{const i=l.storageInt32;for(let r=0;r<s;r++)i[e+r*4]=t[r*2],i[e+r*4+1]=t[r*2+1]};Ue[Qc]=Ue[On];Ue[Zc]=(l,t,e,s)=>{const i=l.storageUint32;for(let r=0;r<s;r++)i[e+r*4]=t[r*2],i[e+r*4+1]=t[r*2+1]};Ue[Fn]=(l,t,e,s)=>{const i=l.storageInt32;for(let r=0;r<s;r++)i[e+r*4]=t[r*3],i[e+r*4+1]=t[r*3+1],i[e+r*4+2]=t[r*3+2]};Ue[ed]=Ue[Fn];Ue[Jc]=(l,t,e,s)=>{const i=l.storageUint32;for(let r=0;r<s;r++)i[e+r*4]=t[r*3],i[e+r*4+1]=t[r*3+1],i[e+r*4+2]=t[r*3+2]};class fp{constructor(t,e,s=!0){h(this,"device");h(this,"persistent");h(this,"allocation");h(this,"storageFloat32");h(this,"storageInt32");h(this,"storageUint32");h(this,"renderVersionDirty",0);if(this.device=t,this.format=e,this.persistent=s,y.assert(e),s){this.impl=t.createUniformBufferImpl(this);const i=new ArrayBuffer(e.byteSize);this.assignStorage(new Int32Array(i)),t._vram.ub+=this.format.byteSize}else this.allocation=new sT}destroy(){if(this.persistent){const t=this.device;this.impl.destroy(t),t._vram.ub-=this.format.byteSize}}get offset(){return this.persistent?0:this.allocation.offset}assignStorage(t){this.storageInt32=t,this.storageUint32=new Uint32Array(t.buffer,t.byteOffset,t.byteLength/4),this.storageFloat32=new Float32Array(t.buffer,t.byteOffset,t.byteLength/4)}loseContext(){var t;(t=this.impl)==null||t.loseContext()}setUniform(t,e){y.assert(t);const s=t.offset;if(e!=null){const i=Ue[t.updateType];i?i(this,e,s,t.count):this.storageFloat32.set(e,s)}else y.warnOnce(`Value was not set when assigning to uniform [${t.name}], expected type ${RS[t.type]} while rendering ${Z.toString()}`)}set(t,e){const s=this.format.map.get(t);y.assert(s,`Uniform name [${t}] is not part of the Uniform buffer.`),s&&this.setUniform(s,e)}startUpdate(t){if(!this.persistent){const e=this.allocation,s=e.gpuBuffer;this.device.dynamicBuffers.alloc(e,this.format.byteSize),this.assignStorage(e.storage),t&&(t.bindGroup=e.gpuBuffer.getBindGroup(this),t.offsets[0]=e.offset),s!==e.gpuBuffer&&(this.renderVersionDirty=this.device.renderVersion)}}endUpdate(){this.persistent?this.impl.unlock(this):(this.storageFloat32=null,this.storageInt32=null)}update(t){this.startUpdate(t);const e=this.format.uniforms;for(let s=0;s<e.length;s++){const i=e[s].scopeId.value;this.setUniform(e[s],i)}this.endUpdate()}}class iT{constructor(){h(this,"frameAllocations",[]);h(this,"pastFrameAllocations",new Map);h(this,"_enabled",!1);h(this,"_enableRequest",!1);h(this,"_frameTime",0)}loseContext(){this.pastFrameAllocations.clear()}set enabled(t){this._enableRequest=t}get enabled(){return this._enableRequest}processEnableRequest(){this._enableRequest!==this._enabled&&(this._enabled=this._enableRequest,this._enabled||(this._frameTime=0))}request(t){this.pastFrameAllocations.set(t,this.frameAllocations),this.frameAllocations=[]}report(t,e){if(e){const s=this.pastFrameAllocations.get(t);if(y.assert(s.length===e.length),e.length>0&&(this._frameTime=e.reduce((i,r)=>i+r,0)),mi.get(Ml)){y.trace(Ml,`-- GPU timings for frame ${t} --`);let i=0;for(let r=0;r<s.length;++r){const a=s[r];i+=e[r],y.trace(Ml,`${e[r].toFixed(2)} ms ${a}`)}y.trace(Ml,`${i.toFixed(2)} ms TOTAL`)}}this.pastFrameAllocations.delete(t)}getSlot(t){const e=this.frameAllocations.length;return this.frameAllocations.push(t),e}get slotCount(){return this.frameAllocations.length}}class iy{constructor(){h(this,"bufferId",null)}destroy(t){this.bufferId&&(t.gl.deleteBuffer(this.bufferId),this.bufferId=null)}get initialized(){return!!this.bufferId}loseContext(){this.bufferId=null}unlock(t,e,s,i){const r=t.gl;if(this.bufferId)r.bindBuffer(s,this.bufferId),r.bufferSubData(s,0,i);else{let a;switch(e){case ps:a=r.STATIC_DRAW;break;case Vh:a=r.DYNAMIC_DRAW;break;case hS:a=r.STREAM_DRAW;break;case kx:a=r.DYNAMIC_COPY;break}this.bufferId=r.createBuffer(),r.bindBuffer(s,this.bufferId),r.bufferData(s,i,a)}}}class rT extends iy{constructor(){super(...arguments);h(this,"vao",null)}destroy(e){super.destroy(e),e.unbindVertexArray()}loseContext(){super.loseContext(),this.vao=null}unlock(e){const s=e.device;super.unlock(s,e.usage,s.gl.ARRAY_BUFFER,e.storage)}}class aT extends iy{constructor(t){super();const e=t.device.gl,s=t.format;s===Sf?this.glFormat=e.UNSIGNED_BYTE:s===Ki?this.glFormat=e.UNSIGNED_SHORT:s===Tr&&(this.glFormat=e.UNSIGNED_INT)}unlock(t){const e=t.device;super.unlock(e,t.usage,e.gl.ELEMENT_ARRAY_BUFFER,t.storage)}}class nT{constructor(t,e,s,i){if(this.locationId=i,this.scopeId=t.scope.resolve(e),this.version=new qS,e.substring(e.length-3)==="[0]")switch(s){case Ws:s=Xc;break;case pa:s=Rn;break;case Dn:s=Yc;break;case gn:s=Kc;break;case ma:s=qc;break;case oa:s=On;break;case In:s=Zc;break;case $o:s=Qc;break;case cs:s=jc;break;case la:s=Fn;break;case Mn:s=Jc;break;case Xo:s=ed;break;case Cn:s=rp;break;case ha:s=Kh;break;case Ln:s=ap;break;case qo:s=np;break}this.dataType=s,this.value=[null,null,null,null],this.array=[]}}let Lm=0;const oT=new Set(["gl_VertexID","gl_InstanceID","gl_DrawID","gl_BaseVertex","gl_BaseInstance"]);class lT{constructor(){h(this,"map",new Map)}destroy(t){this.map.forEach(e=>{t.gl.deleteShader(e)})}loseContext(t){this.map.clear()}}const hT=new jt,cT=new jt;class dT{constructor(t){h(this,"compileDuration",0);this.init(),this.compile(t.device,t),this.link(t.device,t),t.device.shaders.push(t)}destroy(t){this.glProgram&&(t.device.gl.deleteProgram(this.glProgram),this.glProgram=null)}init(){this.uniforms=[],this.samplers=[],this.attributes=[],this.glProgram=null,this.glVertexShader=null,this.glFragmentShader=null}loseContext(){this.init()}restoreContext(t,e){this.compile(t,e),this.link(t,e)}compile(t,e){const s=e.definition;this.glVertexShader=this._compileShaderSource(t,s.vshader,!0),this.glFragmentShader=this._compileShaderSource(t,s.fshader,!1)}link(t,e){if(this.glProgram)return;const s=t.gl;if(s.isContextLost())return;let i=0;y.call(()=>{this.compileDuration=0,i=pe()});const r=s.createProgram();this.glProgram=r,s.attachShader(r,this.glVertexShader),s.attachShader(r,this.glFragmentShader);const a=e.definition,n=a.attributes;if(a.useTransformFeedback){const c=[];for(const d in n)n.hasOwnProperty(d)&&c.push(`out_${d}`);s.transformFeedbackVaryings(r,c,s.INTERLEAVED_ATTRIBS)}const o={};for(const c in n)if(n.hasOwnProperty(c)){const d=n[c],f=Ie[d];y.assert(!o.hasOwnProperty(f),`WARNING: Two attributes are mapped to the same location in a shader: ${o[f]} and ${c}`),o[f]=c,s.bindAttribLocation(r,f,c)}s.linkProgram(r),y.call(()=>{this.compileDuration=pe()-i}),t._shaderStats.linked++,a.tag===CS&&t._shaderStats.materialShaders++}_compileShaderSource(t,e,s){const i=t.gl;if(i.isContextLost())return null;const a=(s?hT:cT).get(t,()=>new lT);let n=a.map.get(e);if(!n){const o=pe();t.fire("shader:compile:start",{timestamp:o,target:t}),n=i.createShader(s?i.VERTEX_SHADER:i.FRAGMENT_SHADER),i.shaderSource(n,e),i.compileShader(n),a.map.set(e,n);const c=pe();t.fire("shader:compile:end",{timestamp:c,target:t}),t._shaderStats.compileTime+=c-o,s?t._shaderStats.vsCompiled++:t._shaderStats.fsCompiled++}return n}finalize(t,e){var p,m;const s=t.gl;if(s.isContextLost())return!0;const i=this.glProgram,r=e.definition,a=pe();t.fire("shader:link:start",{timestamp:a,target:t});let n=0;if(y.call(()=>{n=pe()}),!s.getProgramParameter(i,s.LINK_STATUS)){if(!this._isCompiled(t,e,this.glVertexShader,r.vshader,"vertex")||!this._isCompiled(t,e,this.glFragmentShader,r.fshader,"fragment"))return!1;const _=`Failed to link shader program. Error: ${s.getProgramInfoLog(i)}`;return r.translatedFrag=(p=s.getExtension("WEBGL_debug_shaders"))==null?void 0:p.getTranslatedShaderSource(this.glFragmentShader),r.translatedVert=(m=s.getExtension("WEBGL_debug_shaders"))==null?void 0:m.getTranslatedShaderSource(this.glVertexShader),console.error(_,r),console.error(_),!1}const c=s.getProgramParameter(i,s.ACTIVE_ATTRIBUTES);e.attributes.clear();for(let _=0;_<c;_++){const S=s.getActiveAttrib(i,_),g=s.getAttribLocation(i,S.name);oT.has(S.name)||(r.attributes[S.name]===void 0?(console.error(`Vertex shader attribute "${S.name}" is not mapped to a semantic in shader definition, shader [${e.label}]`,e),e.failed=!0):e.attributes.set(g,S.name))}const d=t._samplerTypes,f=s.getProgramParameter(i,s.ACTIVE_UNIFORMS);for(let _=0;_<f;_++){const S=s.getActiveUniform(i,_),g=s.getUniformLocation(i,S.name),v=new nT(t,S.name,t.pcUniformType[S.type],g);d.has(S.type)?this.samplers.push(v):this.uniforms.push(v)}e.ready=!0;const u=pe();return t.fire("shader:link:end",{timestamp:u,target:t}),t._shaderStats.compileTime+=u-a,y.call(()=>{const _=pe()-n;this.compileDuration+=_,Lm+=this.compileDuration,y.trace(ix,`[id: ${e.id}] ${e.name}: ${this.compileDuration.toFixed(1)}ms, TOTAL: ${Lm.toFixed(1)}ms`)}),!0}_isCompiled(t,e,s,i,r){const a=t.gl;if(!a.getShaderParameter(s,a.COMPILE_STATUS)){const n=a.getShaderInfoLog(s),[o,c]=this._processError(i,n),d=`Failed to compile ${r} shader:

${n}
${o} while rendering ${Z.toString()}`;return c.shader=e,console.error(d,c),console.error(d),!1}return!0}isLinked(t){const{extParallelShaderCompile:e}=t;return e?t.gl.getProgramParameter(this.glProgram,e.COMPLETION_STATUS_KHR):!0}_processError(t,e){const s={};let i="";if(t){const r=t.split(`
`);let a=0,n=r.length;if(e&&e.startsWith("ERROR:")){const o=e.match(/^ERROR:\s(\d+):(\d+):\s*(.+)/);o&&(s.message=o[3],s.line=parseInt(o[2],10),a=Math.max(0,s.line-6),n=Math.min(r.length,s.line+5))}for(let o=a;o<n;o++){const c=o+1===s.line?"> ":"  ";i+=`${c}${o+1}:	${r[o]}
`}s.source=t}return[i,s]}}function Rm(l,t){const e=l.width,s=l.height;if(e>t||s>t){const i=t/Math.max(e,s),r=Math.floor(e*i),a=Math.floor(s*i);y.warn(`Image dimensions larger than max supported texture size of ${t}. Resizing from ${e}, ${s} to ${r}, ${a}.`);const n=document.createElement("canvas");return n.width=r,n.height=a,n.getContext("2d").drawImage(l,0,0,e,s,0,0,r,a),n}return l}class fT{constructor(t){h(this,"_glTexture",null);h(this,"_glTarget");h(this,"_glFormat");h(this,"_glInternalFormat");h(this,"_glPixelType");h(this,"_glCreated");h(this,"dirtyParameterFlags",0);this.texture=t}destroy(t){if(this._glTexture){for(let e=0;e<t.textureUnits.length;e++){const s=t.textureUnits[e];for(let i=0;i<s.length;i++)s[i]===this._glTexture&&(s[i]=null)}t.gl.deleteTexture(this._glTexture),this._glTexture=null}}loseContext(){this._glTexture=null}propertyChanged(t){this.dirtyParameterFlags|=t}initialize(t,e){const s=t.gl;switch(this._glTexture=s.createTexture(),this._glTarget=e._cubemap?s.TEXTURE_CUBE_MAP:e._volume?s.TEXTURE_3D:e.array?s.TEXTURE_2D_ARRAY:s.TEXTURE_2D,e._format){case cS:this._glFormat=s.ALPHA,this._glInternalFormat=s.ALPHA,this._glPixelType=s.UNSIGNED_BYTE;break;case dS:this._glFormat=s.LUMINANCE,this._glInternalFormat=s.LUMINANCE,this._glPixelType=s.UNSIGNED_BYTE;break;case Mu:this._glFormat=s.LUMINANCE_ALPHA,this._glInternalFormat=s.LUMINANCE_ALPHA,this._glPixelType=s.UNSIGNED_BYTE;break;case Ku:this._glFormat=s.RED,this._glInternalFormat=s.R8,this._glPixelType=s.UNSIGNED_BYTE;break;case Zu:this._glFormat=s.RG,this._glInternalFormat=s.RG8,this._glPixelType=s.UNSIGNED_BYTE;break;case Lc:this._glFormat=s.RGB,this._glInternalFormat=s.RGB565,this._glPixelType=s.UNSIGNED_SHORT_5_6_5;break;case Lu:this._glFormat=s.RGBA,this._glInternalFormat=s.RGB5_A1,this._glPixelType=s.UNSIGNED_SHORT_5_5_5_1;break;case Rc:this._glFormat=s.RGBA,this._glInternalFormat=s.RGBA4,this._glPixelType=s.UNSIGNED_SHORT_4_4_4_4;break;case Ar:this._glFormat=s.RGB,this._glInternalFormat=s.RGB8,this._glPixelType=s.UNSIGNED_BYTE;break;case Fe:this._glFormat=s.RGBA,this._glInternalFormat=s.RGBA8,this._glPixelType=s.UNSIGNED_BYTE;break;case mS:case yS:y.error("BGRA8 and SBGRA8 texture formats are not supported by WebGL.");break;case Oc:this._glFormat=s.RGB,this._glInternalFormat=t.extCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case Ru:this._glFormat=s.RGBA,this._glInternalFormat=t.extCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case cl:this._glFormat=s.RGBA,this._glInternalFormat=t.extCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;case Nc:this._glFormat=s.RGB,this._glInternalFormat=t.extCompressedTextureETC1.COMPRESSED_RGB_ETC1_WEBGL;break;case dl:this._glFormat=s.RGB,this._glInternalFormat=t.extCompressedTexturePVRTC.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;break;case fl:this._glFormat=s.RGBA,this._glInternalFormat=t.extCompressedTexturePVRTC.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;break;case kc:this._glFormat=s.RGB,this._glInternalFormat=t.extCompressedTexturePVRTC.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;break;case Uc:this._glFormat=s.RGBA,this._glInternalFormat=t.extCompressedTexturePVRTC.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;break;case Fu:this._glFormat=s.RGB,this._glInternalFormat=t.extCompressedTextureETC.COMPRESSED_RGB8_ETC2;break;case Nu:this._glFormat=s.RGBA,this._glInternalFormat=t.extCompressedTextureETC.COMPRESSED_RGBA8_ETC2_EAC;break;case fS:this._glFormat=s.RGBA,this._glInternalFormat=t.extCompressedTextureASTC.COMPRESSED_RGBA_ASTC_4x4_KHR;break;case uS:this._glFormat=s.RGB,this._glInternalFormat=t.extCompressedTextureATC.COMPRESSED_RGB_ATC_WEBGL;break;case pS:this._glFormat=s.RGBA,this._glInternalFormat=t.extCompressedTextureATC.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL;break;case vS:this._glFormat=s.RGB,this._glInternalFormat=t.extTextureCompressionBPTC.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;break;case xS:this._glFormat=s.RGB,this._glInternalFormat=t.extTextureCompressionBPTC.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;break;case TS:this._glFormat=s.RGBA,this._glInternalFormat=t.extTextureCompressionBPTC.COMPRESSED_RGBA_BPTC_UNORM_EXT;break;case yf:this._glFormat=s.SRGB,this._glInternalFormat=t.extCompressedTextureS3TC_SRGB.COMPRESSED_SRGB_S3TC_DXT1_EXT;break;case vf:this._glFormat=s.SRGB_ALPHA,this._glInternalFormat=t.extCompressedTextureS3TC_SRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;break;case xf:this._glFormat=s.SRGB_ALPHA,this._glInternalFormat=t.extCompressedTextureS3TC_SRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;break;case Tf:this._glFormat=s.SRGB,this._glInternalFormat=t.extCompressedTextureETC.COMPRESSED_SRGB8_ETC2;break;case wf:this._glFormat=s.SRGB_ALPHA,this._glInternalFormat=t.extCompressedTextureETC.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;break;case Ef:this._glFormat=s.SRGB_ALPHA,this._glInternalFormat=t.extCompressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;break;case bf:this._glFormat=s.RGBA,this._glInternalFormat=t.extTextureCompressionBPTC.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT;break;case zc:this._glFormat=s.RED,this._glInternalFormat=s.R16F,this._glPixelType=s.HALF_FLOAT;break;case Yu:this._glFormat=s.RG,this._glInternalFormat=s.RG16F,this._glPixelType=s.HALF_FLOAT;break;case ui:this._glFormat=s.RGB,this._glInternalFormat=s.RGB16F,this._glPixelType=s.HALF_FLOAT;break;case nt:this._glFormat=s.RGBA,this._glInternalFormat=s.RGBA16F,this._glPixelType=s.HALF_FLOAT;break;case Ye:this._glFormat=s.RGB,this._glInternalFormat=s.RGB32F,this._glPixelType=s.FLOAT;break;case $t:this._glFormat=s.RGBA,this._glInternalFormat=s.RGBA32F,this._glPixelType=s.FLOAT;break;case er:this._glFormat=s.RED,this._glInternalFormat=s.R32F,this._glPixelType=s.FLOAT;break;case Xi:this._glFormat=s.DEPTH_COMPONENT,this._glInternalFormat=s.DEPTH_COMPONENT32F,this._glPixelType=s.FLOAT;break;case mn:this._glFormat=s.DEPTH_COMPONENT,this._glInternalFormat=s.DEPTH_COMPONENT16,this._glPixelType=s.UNSIGNED_SHORT;break;case Fc:this._glFormat=s.DEPTH_STENCIL,this._glInternalFormat=s.DEPTH24_STENCIL8,this._glPixelType=s.UNSIGNED_INT_24_8;break;case bn:this._glFormat=s.RGB,this._glInternalFormat=s.R11F_G11F_B10F,this._glPixelType=s.UNSIGNED_INT_10F_11F_11F_REV;break;case Ou:this._glFormat=s.RGB,this._glInternalFormat=s.SRGB8,this._glPixelType=s.UNSIGNED_BYTE;break;case ms:this._glFormat=s.RGBA,this._glInternalFormat=s.SRGB8_ALPHA8,this._glPixelType=s.UNSIGNED_BYTE;break;case ku:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R8I,this._glPixelType=s.BYTE;break;case _S:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R8UI,this._glPixelType=s.UNSIGNED_BYTE;break;case Uu:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R16I,this._glPixelType=s.SHORT;break;case Bu:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R16UI,this._glPixelType=s.UNSIGNED_SHORT;break;case zu:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R32I,this._glPixelType=s.INT;break;case Zi:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R32UI,this._glPixelType=s.UNSIGNED_INT;break;case Vu:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG8I,this._glPixelType=s.BYTE;break;case gS:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG8UI,this._glPixelType=s.UNSIGNED_BYTE;break;case Gu:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG16I,this._glPixelType=s.SHORT;break;case Hu:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG16UI,this._glPixelType=s.UNSIGNED_SHORT;break;case Wu:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG32I,this._glPixelType=s.INT;break;case $u:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG32UI,this._glPixelType=s.UNSIGNED_INT;break;case Xu:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA8I,this._glPixelType=s.BYTE;break;case SS:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA8UI,this._glPixelType=s.UNSIGNED_BYTE;break;case qu:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA16I,this._glPixelType=s.SHORT;break;case Bc:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA16UI,this._glPixelType=s.UNSIGNED_SHORT;break;case ju:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA32I,this._glPixelType=s.INT;break;case ke:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA32UI,this._glPixelType=s.UNSIGNED_INT;break}this._glCreated=!1}upload(t,e){y.assert(e.device,"Attempting to use a texture that has been destroyed.",e);const s=t.gl;if(!e._needsUpload&&(e._needsMipmapsUpload&&e._mipmapsUploaded||!e.pot))return;let i=0,r,a;const n=e.numLevels;for(e.array&&s.texStorage3D(s.TEXTURE_2D_ARRAY,n,this._glInternalFormat,e._width,e._height,e._arrayLength);e._levels[i]||i===0;){if(!e._needsUpload&&i===0){i++;continue}else if(i&&(!e._needsMipmapsUpload||!e._mipmaps))break;if(r=e._levels[i],a=1/Math.pow(2,i),i===1&&!e._compressed&&!e._integerFormat&&e._levels.length<n&&(s.generateMipmap(this._glTarget),e._mipmapsUploaded=!0),e._cubemap){let o;if(t._isBrowserInterface(r[0]))for(o=0;o<6;o++){if(!e._levelsUpdated[0][o])continue;let c=r[o];t._isImageBrowserInterface(c)&&(c.width>t.maxCubeMapSize||c.height>t.maxCubeMapSize)&&(c=Rm(c,t.maxCubeMapSize),i===0&&(e._width=c.width,e._height=c.height)),t.setUnpackFlipY(!1),t.setUnpackPremultiplyAlpha(e._premultiplyAlpha),this._glCreated?s.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+o,i,0,0,this._glFormat,this._glPixelType,c):s.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+o,i,this._glInternalFormat,this._glFormat,this._glPixelType,c)}else for(a=1/Math.pow(2,i),o=0;o<6;o++){if(!e._levelsUpdated[0][o])continue;const c=r[o];e._compressed?this._glCreated&&c?s.compressedTexSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+o,i,0,0,Math.max(e._width*a,1),Math.max(e._height*a,1),this._glInternalFormat,c):s.compressedTexImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+o,i,this._glInternalFormat,Math.max(e._width*a,1),Math.max(e._height*a,1),0,c):(t.setUnpackFlipY(!1),t.setUnpackPremultiplyAlpha(e._premultiplyAlpha),this._glCreated&&c?s.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+o,i,0,0,Math.max(e._width*a,1),Math.max(e._height*a,1),this._glFormat,this._glPixelType,c):s.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+o,i,this._glInternalFormat,Math.max(e._width*a,1),Math.max(e._height*a,1),0,this._glFormat,this._glPixelType,c))}}else if(e._volume)e._compressed?s.compressedTexImage3D(s.TEXTURE_3D,i,this._glInternalFormat,Math.max(e._width*a,1),Math.max(e._height*a,1),Math.max(e._depth*a,1),0,r):(t.setUnpackFlipY(!1),t.setUnpackPremultiplyAlpha(e._premultiplyAlpha),s.texImage3D(s.TEXTURE_3D,i,this._glInternalFormat,Math.max(e._width*a,1),Math.max(e._height*a,1),Math.max(e._depth*a,1),0,this._glFormat,this._glPixelType,r));else if(e.array&&typeof r=="object"){if(e._arrayLength===r.length)if(e._compressed)for(let o=0;o<e._arrayLength;o++)s.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY,i,0,0,o,Math.max(Math.floor(e._width*a),1),Math.max(Math.floor(e._height*a),1),1,this._glInternalFormat,r[o]);else for(let o=0;o<e._arrayLength;o++)s.texSubImage3D(s.TEXTURE_2D_ARRAY,i,0,0,o,Math.max(Math.floor(e._width*a),1),Math.max(Math.floor(e._height*a),1),1,this._glFormat,this._glPixelType,r[o])}else{if(t._isBrowserInterface(r)){t._isImageBrowserInterface(r)&&(r.width>t.maxTextureSize||r.height>t.maxTextureSize)&&(r=Rm(r,t.maxTextureSize),i===0&&(e._width=r.width,e._height=r.height));const o=r.width||r.videoWidth,c=r.height||r.videoHeight;t.setUnpackFlipY(e._flipY),t.setUnpackPremultiplyAlpha(e._premultiplyAlpha),this._glCreated&&e._width===o&&e._height===c&&!t._isImageVideoInterface(r)?s.texSubImage2D(s.TEXTURE_2D,i,0,0,this._glFormat,this._glPixelType,r):(s.texImage2D(s.TEXTURE_2D,i,this._glInternalFormat,this._glFormat,this._glPixelType,r),i===0&&(e._width=o,e._height=c))}else a=1/Math.pow(2,i),e._compressed?this._glCreated&&r?s.compressedTexSubImage2D(s.TEXTURE_2D,i,0,0,Math.max(Math.floor(e._width*a),1),Math.max(Math.floor(e._height*a),1),this._glInternalFormat,r):s.compressedTexImage2D(s.TEXTURE_2D,i,this._glInternalFormat,Math.max(Math.floor(e._width*a),1),Math.max(Math.floor(e._height*a),1),0,r):(t.setUnpackFlipY(!1),t.setUnpackPremultiplyAlpha(e._premultiplyAlpha),this._glCreated&&r?s.texSubImage2D(s.TEXTURE_2D,i,0,0,Math.max(e._width*a,1),Math.max(e._height*a,1),this._glFormat,this._glPixelType,r):s.texImage2D(s.TEXTURE_2D,i,this._glInternalFormat,Math.max(e._width*a,1),Math.max(e._height*a,1),0,this._glFormat,this._glPixelType,r));i===0?e._mipmapsUploaded=!1:e._mipmapsUploaded=!0}i++}if(e._needsUpload)if(e._cubemap)for(let o=0;o<6;o++)e._levelsUpdated[0][o]=!1;else e._levelsUpdated[0]=!1;!e._compressed&&!e._integerFormat&&e._mipmaps&&e._needsMipmapsUpload&&e._levels.length===1&&(s.generateMipmap(this._glTarget),e._mipmapsUploaded=!0),e._gpuSize&&e.adjustVramSizeTracking(t._vram,-e._gpuSize),e._gpuSize=e.gpuSize,e.adjustVramSizeTracking(t._vram,e._gpuSize),this._glCreated=!0}read(t,e,s,i,r){const a=this.texture;return a.device.readTextureAsync(a,t,e,s,i,r)}write(t,e,s,i,r){const{texture:a}=this,{device:n}=a;return n.setTexture(a,0),n.writeTextureAsync(a,t,e,s,i,r)}}class uT{constructor(t,e){h(this,"msaaFB");h(this,"resolveFB");this.msaaFB=t,this.resolveFB=e}destroy(t){this.msaaFB&&(t.deleteRenderbuffer(this.msaaFB),this.msaaFB=null),this.resolveFB&&(t.deleteRenderbuffer(this.resolveFB),this.resolveFB=null)}}class pT{constructor(){h(this,"_glFrameBuffer",null);h(this,"_glDepthBuffer",null);h(this,"_glResolveFrameBuffer",null);h(this,"colorMrtFramebuffers",null);h(this,"_glMsaaColorBuffers",[]);h(this,"_glMsaaDepthBuffer",null);h(this,"msaaDepthBufferKey");h(this,"suppliedColorFramebuffer");h(this,"_isInitialized",!1)}destroy(t){var s;const e=t.gl;this._isInitialized=!1,this._glFrameBuffer&&(this._glFrameBuffer!==this.suppliedColorFramebuffer&&e.deleteFramebuffer(this._glFrameBuffer),this._glFrameBuffer=null),this._glDepthBuffer&&(e.deleteRenderbuffer(this._glDepthBuffer),this._glDepthBuffer=null),this._glResolveFrameBuffer&&(this._glResolveFrameBuffer!==this.suppliedColorFramebuffer&&e.deleteFramebuffer(this._glResolveFrameBuffer),this._glResolveFrameBuffer=null),this._glMsaaColorBuffers.forEach(i=>{e.deleteRenderbuffer(i)}),this._glMsaaColorBuffers.length=0,(s=this.colorMrtFramebuffers)==null||s.forEach(i=>{i.destroy(e)}),this.colorMrtFramebuffers=null,this._glMsaaDepthBuffer&&(this._glMsaaDepthBuffer=null,this.msaaDepthBufferKey&&md(t).release(this.msaaDepthBufferKey)),this.suppliedColorFramebuffer=void 0}get initialized(){return this._isInitialized}init(t,e){var r,a;const s=t.gl;y.assert(!this._isInitialized,"Render target already initialized."),this._isInitialized=!0;const i=[];if(this.suppliedColorFramebuffer!==void 0)this._glFrameBuffer=this.suppliedColorFramebuffer;else{y.call(()=>{(e.width<=0||e.height<=0)&&y.warnOnce(`Invalid render target size: ${e.width} x ${e.height}`,e)}),this._glFrameBuffer=s.createFramebuffer(),t.setFramebuffer(this._glFrameBuffer);const n=((r=e._colorBuffers)==null?void 0:r.length)??0,o=s.COLOR_ATTACHMENT0;for(let d=0;d<n;++d){const f=e.getColorBuffer(d);f&&(f.impl._glTexture||(f._width=Math.min(f.width,t.maxRenderBufferSize),f._height=Math.min(f.height,t.maxRenderBufferSize),t.setTexture(f,0)),s.framebufferTexture2D(s.FRAMEBUFFER,o+d,f._cubemap?s.TEXTURE_CUBE_MAP_POSITIVE_X+e._face:s.TEXTURE_2D,f.impl._glTexture,e.mipLevel),i.push(o+d))}s.drawBuffers(i);const c=e._depthBuffer;if(c||e._depth){const d=e._stencil?s.DEPTH_STENCIL_ATTACHMENT:s.DEPTH_ATTACHMENT;if(c)c.impl._glTexture||(c._width=Math.min(c.width,t.maxRenderBufferSize),c._height=Math.min(c.height,t.maxRenderBufferSize),t.setTexture(c,0)),s.framebufferTexture2D(s.FRAMEBUFFER,d,c._cubemap?s.TEXTURE_CUBE_MAP_POSITIVE_X+e._face:s.TEXTURE_2D,e._depthBuffer.impl._glTexture,e.mipLevel);else if(!(e._samples>1)){this._glDepthBuffer||(this._glDepthBuffer=s.createRenderbuffer());const u=e._stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT32F;s.bindRenderbuffer(s.RENDERBUFFER,this._glDepthBuffer),s.renderbufferStorage(s.RENDERBUFFER,u,e.width,e.height),s.framebufferRenderbuffer(s.FRAMEBUFFER,d,s.RENDERBUFFER,this._glDepthBuffer),s.bindRenderbuffer(s.RENDERBUFFER,null)}}y.call(()=>this._checkFbo(t,e))}if(e._samples>1){this._glResolveFrameBuffer=this._glFrameBuffer,this._glFrameBuffer=s.createFramebuffer(),t.setFramebuffer(this._glFrameBuffer);const n=((a=e._colorBuffers)==null?void 0:a.length)??0;if(this.suppliedColorFramebuffer!==void 0){const o=s.createRenderbuffer();this._glMsaaColorBuffers.push(o);const c=t.backBufferFormat===Fe?s.RGBA8:s.RGB8;s.bindRenderbuffer(s.RENDERBUFFER,o),s.renderbufferStorageMultisample(s.RENDERBUFFER,e._samples,c,e.width,e.height),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.RENDERBUFFER,o)}else for(let o=0;o<n;++o){const c=e.getColorBuffer(o);if(c){const d=s.createRenderbuffer();this._glMsaaColorBuffers.push(d),s.bindRenderbuffer(s.RENDERBUFFER,d),s.renderbufferStorageMultisample(s.RENDERBUFFER,e._samples,c.impl._glInternalFormat,e.width,e.height),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0+o,s.RENDERBUFFER,d)}}if(e._depth){y.assert(!this._glMsaaDepthBuffer);const o=e._stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT32F,c=e._stencil?s.DEPTH_STENCIL_ATTACHMENT:s.DEPTH_ATTACHMENT;let d;const f=e._depthBuffer;f&&(d=`${f.id}:${e.width}:${e.height}:${e._samples}:${o}:${c}`,this._glMsaaDepthBuffer=md(t).get(d)),this._glMsaaDepthBuffer||(this._glMsaaDepthBuffer=s.createRenderbuffer(),s.bindRenderbuffer(s.RENDERBUFFER,this._glMsaaDepthBuffer),s.renderbufferStorageMultisample(s.RENDERBUFFER,e._samples,o,e.width,e.height),this._glMsaaDepthBuffer.destroy=function(){s.deleteRenderbuffer(this)},f&&md(t).set(d,this._glMsaaDepthBuffer)),this.msaaDepthBufferKey=d,s.framebufferRenderbuffer(s.FRAMEBUFFER,c,s.RENDERBUFFER,this._glMsaaDepthBuffer)}y.call(()=>this._checkFbo(t,e,"MSAA")),n>1&&(this._createMsaaMrtFramebuffers(t,e,n),t.setFramebuffer(this._glFrameBuffer),s.drawBuffers(i))}}_createMsaaMrtFramebuffers(t,e,s){const i=t.gl;this.colorMrtFramebuffers=[];for(let r=0;r<s;++r){const a=e.getColorBuffer(r),n=i.createFramebuffer();t.setFramebuffer(n);const o=this._glMsaaColorBuffers[r];i.bindRenderbuffer(i.RENDERBUFFER,o),i.renderbufferStorageMultisample(i.RENDERBUFFER,e._samples,a.impl._glInternalFormat,e.width,e.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.RENDERBUFFER,o),i.drawBuffers([i.COLOR_ATTACHMENT0]),y.call(()=>this._checkFbo(t,e,`MSAA-MRT-src${r}`));const c=i.createFramebuffer();t.setFramebuffer(c),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,a._cubemap?i.TEXTURE_CUBE_MAP_POSITIVE_X+e._face:i.TEXTURE_2D,a.impl._glTexture,0),this.colorMrtFramebuffers[r]=new uT(n,c),y.call(()=>this._checkFbo(t,e,`MSAA-MRT-dst${r}`))}}_checkFbo(t,e,s=""){const i=t.gl,r=i.checkFramebufferStatus(i.FRAMEBUFFER);let a;switch(r){case i.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:a="FRAMEBUFFER_INCOMPLETE_ATTACHMENT";break;case i.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:a="FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";break;case i.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:a="FRAMEBUFFER_INCOMPLETE_DIMENSIONS";break;case i.FRAMEBUFFER_UNSUPPORTED:a="FRAMEBUFFER_UNSUPPORTED";break}y.assert(!a,`Framebuffer creation failed with error code ${a}, render target: ${e.name} ${s}`,e)}loseContext(){this._glFrameBuffer=null,this._glDepthBuffer=null,this._glResolveFrameBuffer=null,this._glMsaaColorBuffers.length=0,this._glMsaaDepthBuffer=null,this.msaaDepthBufferKey=void 0,this.colorMrtFramebuffers=null,this.suppliedColorFramebuffer=void 0,this._isInitialized=!1}internalResolve(t,e,s,i,r){y.assert(e!==s,"Source and destination framebuffers must be different when blitting."),t.setScissor(0,0,i.width,i.height);const a=t.gl;a.bindFramebuffer(a.READ_FRAMEBUFFER,e),a.bindFramebuffer(a.DRAW_FRAMEBUFFER,s),a.blitFramebuffer(0,0,i.width,i.height,0,0,i.width,i.height,r,a.NEAREST)}resolve(t,e,s,i){const r=t.gl;if(this.colorMrtFramebuffers){if(s)for(let a=0;a<this.colorMrtFramebuffers.length;a++){const n=this.colorMrtFramebuffers[a];Z.pushGpuMarker(t,`RESOLVE-MRT${a}`),this.internalResolve(t,n.msaaFB,n.resolveFB,e,r.COLOR_BUFFER_BIT),Z.popGpuMarker(t)}i&&(Z.pushGpuMarker(t,"RESOLVE-MRT-DEPTH"),this.internalResolve(t,this._glFrameBuffer,this._glResolveFrameBuffer,e,r.DEPTH_BUFFER_BIT),Z.popGpuMarker(t))}else Z.pushGpuMarker(t,"RESOLVE"),this.internalResolve(t,this._glFrameBuffer,this._glResolveFrameBuffer,e,(s?r.COLOR_BUFFER_BIT:0)|(i?r.DEPTH_BUFFER_BIT:0)),Z.popGpuMarker(t);r.bindFramebuffer(r.FRAMEBUFFER,this._glFrameBuffer)}}class mT{constructor(){h(this,"renderVersion");h(this,"queries",[])}destroy(t){this.queries.forEach(e=>t.deleteQuery(e)),this.queries=null}}class _T extends iT{constructor(e){super();h(this,"device");h(this,"freeQueries",[]);h(this,"frameQueries",[]);h(this,"previousFrameQueries",[]);h(this,"timings",[]);this.device=e,this.ext=e.extDisjointTimerQuery}destroy(){this.freeQueries.forEach(e=>this.device.gl.deleteQuery(e)),this.frameQueries.forEach(e=>this.device.gl.deleteQuery(e)),this.previousFrameQueries.forEach(e=>e.destroy(this.device.gl)),this.freeQueries=null,this.frameQueries=null,this.previousFrameQueries=null}loseContext(){super.loseContext(),this.freeQueries=[],this.frameQueries=[],this.previousFrameQueries=[]}restoreContext(){this.ext=this.device.extDisjointTimerQuery}getQuery(){return this.freeQueries.pop()??this.device.gl.createQuery()}start(e){if(this.ext){const s=this.getSlot(e),i=this.getQuery();return this.frameQueries[s]=i,this.device.gl.beginQuery(this.ext.TIME_ELAPSED_EXT,i),s}}end(e){e!==void 0&&this.device.gl.endQuery(this.ext.TIME_ELAPSED_EXT)}frameStart(){this.processEnableRequest(),this._enabled&&(this.frameGPUMarkerSlot=this.start("GpuFrame"))}frameEnd(){this._enabled&&this.end(this.frameGPUMarkerSlot)}request(){if(this._enabled){const e=this.ext,s=this.device.gl,i=this.device.renderVersion,r=this.frameQueries;if(r.length>0){this.frameQueries=[];const a=new mT;a.queries=r,a.renderVersion=i,this.previousFrameQueries.push(a)}if(this.previousFrameQueries.length>0){const a=this.previousFrameQueries[0],n=a.queries,o=n[n.length-1],c=s.getQueryParameter(o,s.QUERY_RESULT_AVAILABLE),d=s.getParameter(e.GPU_DISJOINT_EXT);if(c&&!d){this.previousFrameQueries.shift();const f=this.timings;f.length=0;for(let u=0;u<n.length;u++){const p=n[u],m=s.getQueryParameter(p,s.QUERY_RESULT);f[u]=m*1e-6,this.freeQueries.push(p)}this.report(a.renderVersion,f)}d&&(this.previousFrameQueries.forEach(f=>{this.report(f.renderVersion,null),f.destroy(s)}),this.previousFrameQueries.length=0)}super.request(i)}}}const Pa=[];class gT extends $e{constructor(e,s={}){super(e,s);h(this,"gl");h(this,"_defaultFramebuffer",null);h(this,"_defaultFramebufferChanged",!1);s=this.initOptions,this.updateClientRect(),this.initTextureUnits(),this.contextLost=!1,this._contextLostHandler=m=>{m.preventDefault(),this.loseContext(),y.log("pc.GraphicsDevice: WebGL context lost."),this.fire("devicelost")},this._contextRestoredHandler=()=>{y.log("pc.GraphicsDevice: WebGL context restored."),this.restoreContext(),this.fire("devicerestored")};const i=typeof navigator<"u"&&navigator.userAgent;if(this.forceDisableMultisampling=i&&i.includes("AppleWebKit")&&(i.includes("15.4")||i.includes("15_4")),this.forceDisableMultisampling&&(s.antialias=!1,y.log("Antialiasing has been turned off due to rendering issues on AppleWebKit 15.4")),Pe.browserName==="firefox"){const _=(typeof navigator<"u"?navigator.userAgent:"").match(/Firefox\/(\d+(\.\d+)*)/),S=_?_[1]:null;if(S){const g=parseFloat(S);(Pe.name==="windows"&&(g>=120||g===115)||Pe.name==="android"&&g>=132)&&(s.antialias=!1,y.log(`Antialiasing has been turned off due to rendering issues on Firefox ${Pe.name} platform version ${S}`))}}this.backBufferAntialias=s.antialias??!1,s.antialias=!1;const r=s.gl??e.getContext("webgl2",s);if(!r)throw new Error("WebGL not supported");this.gl=r,this.isWebGL2=!0,this._deviceType=g0,this.updateBackbufferFormat(null);const a=Pe.browserName==="chrome",n=Pe.browserName==="safari",o=Pe.browser&&navigator.appVersion.indexOf("Mac")!==-1;this._tempEnableSafariTextureUnitWorkaround=n,this._tempMacChromeBlitFramebufferWorkaround=o&&a&&!s.alpha,e.addEventListener("webglcontextlost",this._contextLostHandler,!1),e.addEventListener("webglcontextrestored",this._contextRestoredHandler,!1),this.initializeExtensions(),this.initializeCapabilities(),this.initializeRenderState(),this.initializeContextCaches(),this.createBackbuffer(null),this.supportsImageBitmap=!n&&typeof ImageBitmap<"u",this._samplerTypes=new Set([r.SAMPLER_2D,r.SAMPLER_CUBE,r.UNSIGNED_INT_SAMPLER_2D,r.INT_SAMPLER_2D,r.SAMPLER_2D_SHADOW,r.SAMPLER_CUBE_SHADOW,r.SAMPLER_3D,r.INT_SAMPLER_3D,r.UNSIGNED_INT_SAMPLER_3D,r.SAMPLER_2D_ARRAY,r.INT_SAMPLER_2D_ARRAY,r.UNSIGNED_INT_SAMPLER_2D_ARRAY]),this.glAddress=[r.REPEAT,r.CLAMP_TO_EDGE,r.MIRRORED_REPEAT],this.glBlendEquation=[r.FUNC_ADD,r.FUNC_SUBTRACT,r.FUNC_REVERSE_SUBTRACT,r.MIN,r.MAX],this.glBlendFunctionColor=[r.ZERO,r.ONE,r.SRC_COLOR,r.ONE_MINUS_SRC_COLOR,r.DST_COLOR,r.ONE_MINUS_DST_COLOR,r.SRC_ALPHA,r.SRC_ALPHA_SATURATE,r.ONE_MINUS_SRC_ALPHA,r.DST_ALPHA,r.ONE_MINUS_DST_ALPHA,r.CONSTANT_COLOR,r.ONE_MINUS_CONSTANT_COLOR],this.glBlendFunctionAlpha=[r.ZERO,r.ONE,r.SRC_COLOR,r.ONE_MINUS_SRC_COLOR,r.DST_COLOR,r.ONE_MINUS_DST_COLOR,r.SRC_ALPHA,r.SRC_ALPHA_SATURATE,r.ONE_MINUS_SRC_ALPHA,r.DST_ALPHA,r.ONE_MINUS_DST_ALPHA,r.CONSTANT_ALPHA,r.ONE_MINUS_CONSTANT_ALPHA],this.glComparison=[r.NEVER,r.LESS,r.EQUAL,r.LEQUAL,r.GREATER,r.NOTEQUAL,r.GEQUAL,r.ALWAYS],this.glStencilOp=[r.KEEP,r.ZERO,r.REPLACE,r.INCR,r.INCR_WRAP,r.DECR,r.DECR_WRAP,r.INVERT],this.glClearFlag=[0,r.COLOR_BUFFER_BIT,r.DEPTH_BUFFER_BIT,r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT,r.STENCIL_BUFFER_BIT,r.STENCIL_BUFFER_BIT|r.COLOR_BUFFER_BIT,r.STENCIL_BUFFER_BIT|r.DEPTH_BUFFER_BIT,r.STENCIL_BUFFER_BIT|r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT],this.glCull=[0,r.BACK,r.FRONT,r.FRONT_AND_BACK],this.glFilter=[r.NEAREST,r.LINEAR,r.NEAREST_MIPMAP_NEAREST,r.NEAREST_MIPMAP_LINEAR,r.LINEAR_MIPMAP_NEAREST,r.LINEAR_MIPMAP_LINEAR],this.glPrimitive=[r.POINTS,r.LINES,r.LINE_LOOP,r.LINE_STRIP,r.TRIANGLES,r.TRIANGLE_STRIP,r.TRIANGLE_FAN],this.glType=[r.BYTE,r.UNSIGNED_BYTE,r.SHORT,r.UNSIGNED_SHORT,r.INT,r.UNSIGNED_INT,r.FLOAT,r.HALF_FLOAT],this.pcUniformType={},this.pcUniformType[r.BOOL]=gn,this.pcUniformType[r.INT]=pa,this.pcUniformType[r.FLOAT]=Ws,this.pcUniformType[r.FLOAT_VEC2]=ma,this.pcUniformType[r.FLOAT_VEC3]=cs,this.pcUniformType[r.FLOAT_VEC4]=Cn,this.pcUniformType[r.INT_VEC2]=oa,this.pcUniformType[r.INT_VEC3]=la,this.pcUniformType[r.INT_VEC4]=ha,this.pcUniformType[r.BOOL_VEC2]=$o,this.pcUniformType[r.BOOL_VEC3]=Xo,this.pcUniformType[r.BOOL_VEC4]=qo,this.pcUniformType[r.FLOAT_MAT2]=Yh,this.pcUniformType[r.FLOAT_MAT3]=Pn,this.pcUniformType[r.FLOAT_MAT4]=li,this.pcUniformType[r.SAMPLER_2D]=t0,this.pcUniformType[r.SAMPLER_CUBE]=s0,this.pcUniformType[r.UNSIGNED_INT]=Dn,this.pcUniformType[r.UNSIGNED_INT_VEC2]=In,this.pcUniformType[r.UNSIGNED_INT_VEC3]=Mn,this.pcUniformType[r.UNSIGNED_INT_VEC4]=Ln,this.pcUniformType[r.SAMPLER_2D_SHADOW]=i0,this.pcUniformType[r.SAMPLER_CUBE_SHADOW]=r0,this.pcUniformType[r.SAMPLER_2D_ARRAY]=n0,this.pcUniformType[r.SAMPLER_3D]=a0,this.pcUniformType[r.INT_SAMPLER_2D]=o0,this.pcUniformType[r.UNSIGNED_INT_SAMPLER_2D]=l0,this.pcUniformType[r.INT_SAMPLER_CUBE]=h0,this.pcUniformType[r.UNSIGNED_INT_SAMPLER_2D]=c0,this.pcUniformType[r.INT_SAMPLER_3D]=d0,this.pcUniformType[r.UNSIGNED_INT_SAMPLER_3D]=f0,this.pcUniformType[r.INT_SAMPLER_2D_ARRAY]=u0,this.pcUniformType[r.UNSIGNED_INT_SAMPLER_2D_ARRAY]=p0,this.targetToSlot={},this.targetToSlot[r.TEXTURE_2D]=0,this.targetToSlot[r.TEXTURE_CUBE_MAP]=1,this.targetToSlot[r.TEXTURE_3D]=2;let c,d,f,u,p;this.commitFunction=[],this.commitFunction[gn]=function(m,_){m.value!==_&&(r.uniform1i(m.locationId,_),m.value=_)},this.commitFunction[pa]=this.commitFunction[gn],this.commitFunction[Ws]=function(m,_){m.value!==_&&(r.uniform1f(m.locationId,_),m.value=_)},this.commitFunction[ma]=function(m,_){p=m.value,c=_[0],d=_[1],(p[0]!==c||p[1]!==d)&&(r.uniform2fv(m.locationId,_),p[0]=c,p[1]=d)},this.commitFunction[cs]=function(m,_){p=m.value,c=_[0],d=_[1],f=_[2],(p[0]!==c||p[1]!==d||p[2]!==f)&&(r.uniform3fv(m.locationId,_),p[0]=c,p[1]=d,p[2]=f)},this.commitFunction[Cn]=function(m,_){p=m.value,c=_[0],d=_[1],f=_[2],u=_[3],(p[0]!==c||p[1]!==d||p[2]!==f||p[3]!==u)&&(r.uniform4fv(m.locationId,_),p[0]=c,p[1]=d,p[2]=f,p[3]=u)},this.commitFunction[oa]=function(m,_){p=m.value,c=_[0],d=_[1],(p[0]!==c||p[1]!==d)&&(r.uniform2iv(m.locationId,_),p[0]=c,p[1]=d)},this.commitFunction[$o]=this.commitFunction[oa],this.commitFunction[la]=function(m,_){p=m.value,c=_[0],d=_[1],f=_[2],(p[0]!==c||p[1]!==d||p[2]!==f)&&(r.uniform3iv(m.locationId,_),p[0]=c,p[1]=d,p[2]=f)},this.commitFunction[Xo]=this.commitFunction[la],this.commitFunction[ha]=function(m,_){p=m.value,c=_[0],d=_[1],f=_[2],u=_[3],(p[0]!==c||p[1]!==d||p[2]!==f||p[3]!==u)&&(r.uniform4iv(m.locationId,_),p[0]=c,p[1]=d,p[2]=f,p[3]=u)},this.commitFunction[qo]=this.commitFunction[ha],this.commitFunction[Yh]=function(m,_){r.uniformMatrix2fv(m.locationId,!1,_)},this.commitFunction[Pn]=function(m,_){r.uniformMatrix3fv(m.locationId,!1,_)},this.commitFunction[li]=function(m,_){r.uniformMatrix4fv(m.locationId,!1,_)},this.commitFunction[Xc]=function(m,_){r.uniform1fv(m.locationId,_)},this.commitFunction[qc]=function(m,_){r.uniform2fv(m.locationId,_)},this.commitFunction[jc]=function(m,_){r.uniform3fv(m.locationId,_)},this.commitFunction[rp]=function(m,_){r.uniform4fv(m.locationId,_)},this.commitFunction[Dn]=function(m,_){m.value!==_&&(r.uniform1ui(m.locationId,_),m.value=_)},this.commitFunction[In]=function(m,_){p=m.value,c=_[0],d=_[1],(p[0]!==c||p[1]!==d)&&(r.uniform2uiv(m.locationId,_),p[0]=c,p[1]=d)},this.commitFunction[Mn]=function(m,_){p=m.value,c=_[0],d=_[1],f=_[2],(p[0]!==c||p[1]!==d||p[2]!==f)&&(r.uniform3uiv(m.locationId,_),p[0]=c,p[1]=d,p[2]=f)},this.commitFunction[Ln]=function(m,_){p=m.value,c=_[0],d=_[1],f=_[2],u=_[3],(p[0]!==c||p[1]!==d||p[2]!==f||p[3]!==u)&&(r.uniform4uiv(m.locationId,_),p[0]=c,p[1]=d,p[2]=f,p[3]=u)},this.commitFunction[Rn]=function(m,_){r.uniform1iv(m.locationId,_)},this.commitFunction[Yc]=function(m,_){r.uniform1uiv(m.locationId,_)},this.commitFunction[Kc]=this.commitFunction[Rn],this.commitFunction[On]=function(m,_){r.uniform2iv(m.locationId,_)},this.commitFunction[Zc]=function(m,_){r.uniform2uiv(m.locationId,_)},this.commitFunction[Qc]=this.commitFunction[On],this.commitFunction[Fn]=function(m,_){r.uniform3iv(m.locationId,_)},this.commitFunction[Jc]=function(m,_){r.uniform3uiv(m.locationId,_)},this.commitFunction[ed]=this.commitFunction[Fn],this.commitFunction[Kh]=function(m,_){r.uniform4iv(m.locationId,_)},this.commitFunction[ap]=function(m,_){r.uniform4uiv(m.locationId,_)},this.commitFunction[np]=this.commitFunction[Kh],this.commitFunction[LS]=function(m,_){r.uniformMatrix4fv(m.locationId,!1,_)},this.constantTexSource=this.scope.resolve("source"),this.postInit()}postInit(){super.postInit(),this.gpuProfiler=new _T(this)}destroy(){super.destroy();const e=this.gl;this.feedback&&e.deleteTransformFeedback(this.feedback),this.clearVertexArrayObjectCache(),this.canvas.removeEventListener("webglcontextlost",this._contextLostHandler,!1),this.canvas.removeEventListener("webglcontextrestored",this._contextRestoredHandler,!1),this._contextLostHandler=null,this._contextRestoredHandler=null,this.gl=null,super.postDestroy()}createBackbuffer(e){this.supportsStencil=this.initOptions.stencil,this.backBuffer=new _t({name:"WebglFramebuffer",graphicsDevice:this,depth:this.initOptions.depth,stencil:this.supportsStencil,samples:this.samples}),this.backBuffer.impl.suppliedColorFramebuffer=e}updateBackbufferFormat(e){const s=this.gl;s.bindFramebuffer(s.FRAMEBUFFER,e);const i=this.gl.getParameter(this.gl.ALPHA_BITS);this.backBufferFormat=i?Fe:Ar}updateBackbuffer(){const e=this.canvas.width!==this.backBufferSize.x||this.canvas.height!==this.backBufferSize.y;(this._defaultFramebufferChanged||e)&&(this._defaultFramebufferChanged&&this.updateBackbufferFormat(this._defaultFramebuffer),this._defaultFramebufferChanged=!1,this.backBufferSize.set(this.canvas.width,this.canvas.height),this.backBuffer.destroy(),this.createBackbuffer(this._defaultFramebuffer))}createVertexBufferImpl(e,s){return new rT}createIndexBufferImpl(e){return new aT(e)}createShaderImpl(e){return new dT(e)}createTextureImpl(e){return new fT(e)}createRenderTargetImpl(e){return new pT}pushMarker(e){if(Pe.browser&&window.spector){const s=Z.toString();window.spector.setMarker(`${s} #`)}}popMarker(){if(Pe.browser&&window.spector){const e=Z.toString();e.length?window.spector.setMarker(`${e} #`):window.spector.clearMarker()}}getPrecision(){const e=this.gl;let s="highp";if(e.getShaderPrecisionFormat){const i=e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT),r=e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT),a=e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT),n=e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT);if(i&&r&&a&&n){const o=i.precision>0&&a.precision>0,c=r.precision>0&&n.precision>0;o||(c?(s="mediump",y.warn("WARNING: highp not supported, using mediump")):(s="lowp",y.warn("WARNING: highp and mediump not supported, using lowp")))}}return s}getExtension(){for(let e=0;e<arguments.length;e++)if(this.supportedExtensions.indexOf(arguments[e])!==-1)return this.gl.getExtension(arguments[e]);return null}get extDisjointTimerQuery(){return this._extDisjointTimerQuery||(this._extDisjointTimerQuery=this.getExtension("EXT_disjoint_timer_query_webgl2","EXT_disjoint_timer_query")),this._extDisjointTimerQuery}initializeExtensions(){const e=this.gl;this.supportedExtensions=e.getSupportedExtensions()??[],this._extDisjointTimerQuery=null,this.textureRG11B10Renderable=!0,this.extColorBufferFloat=this.getExtension("EXT_color_buffer_float"),this.textureFloatRenderable=!!this.extColorBufferFloat,this.extColorBufferHalfFloat=this.getExtension("EXT_color_buffer_half_float"),this.textureHalfFloatRenderable=!!this.extColorBufferHalfFloat||!!this.extColorBufferFloat,this.extDebugRendererInfo=this.getExtension("WEBGL_debug_renderer_info"),this.extTextureFloatLinear=this.getExtension("OES_texture_float_linear"),this.textureFloatFilterable=!!this.extTextureFloatLinear,this.extFloatBlend=this.getExtension("EXT_float_blend"),this.extTextureFilterAnisotropic=this.getExtension("EXT_texture_filter_anisotropic","WEBKIT_EXT_texture_filter_anisotropic"),this.extParallelShaderCompile=this.getExtension("KHR_parallel_shader_compile"),this.extCompressedTextureETC1=this.getExtension("WEBGL_compressed_texture_etc1"),this.extCompressedTextureETC=this.getExtension("WEBGL_compressed_texture_etc"),this.extCompressedTexturePVRTC=this.getExtension("WEBGL_compressed_texture_pvrtc","WEBKIT_WEBGL_compressed_texture_pvrtc"),this.extCompressedTextureS3TC=this.getExtension("WEBGL_compressed_texture_s3tc","WEBKIT_WEBGL_compressed_texture_s3tc"),this.extCompressedTextureS3TC_SRGB=this.getExtension("WEBGL_compressed_texture_s3tc_srgb"),this.extCompressedTextureATC=this.getExtension("WEBGL_compressed_texture_atc"),this.extCompressedTextureASTC=this.getExtension("WEBGL_compressed_texture_astc"),this.extTextureCompressionBPTC=this.getExtension("EXT_texture_compression_bptc")}initializeCapabilities(){const e=this.gl;let s;const i=typeof navigator<"u"?navigator.userAgent:"";this.maxPrecision=this.precision=this.getPrecision();const r=e.getContextAttributes();this.supportsMsaa=(r==null?void 0:r.antialias)??!1,this.supportsStencil=(r==null?void 0:r.stencil)??!1,this.maxTextureSize=e.getParameter(e.MAX_TEXTURE_SIZE),this.maxCubeMapSize=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),this.maxRenderBufferSize=e.getParameter(e.MAX_RENDERBUFFER_SIZE),this.maxTextures=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),this.maxCombinedTextures=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.maxVertexTextures=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),this.vertexUniformsCount=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),this.fragmentUniformsCount=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),this.maxColorAttachments=e.getParameter(e.MAX_COLOR_ATTACHMENTS),this.maxVolumeSize=e.getParameter(e.MAX_3D_TEXTURE_SIZE),s=this.extDebugRendererInfo,this.unmaskedRenderer=s?e.getParameter(s.UNMASKED_RENDERER_WEBGL):"",this.unmaskedVendor=s?e.getParameter(s.UNMASKED_VENDOR_WEBGL):"";const a=/\bMali-G52+/,n=/SM-[a-zA-Z0-9]+/;this.supportsGpuParticles=!(this.unmaskedVendor==="ARM"&&i.match(n))&&!this.unmaskedRenderer.match(a),s=this.extTextureFilterAnisotropic,this.maxAnisotropy=s?e.getParameter(s.MAX_TEXTURE_MAX_ANISOTROPY_EXT):1;const o=!this.forceDisableMultisampling;this.maxSamples=o?e.getParameter(e.MAX_SAMPLES):1,this.maxSamples=Math.min(this.maxSamples,4),this.samples=o&&this.backBufferAntialias?this.maxSamples:1,this.supportsAreaLights=!Pe.android,this.maxTextures<=8&&(this.supportsAreaLights=!1),this.initCapsDefines()}initializeRenderState(){super.initializeRenderState();const e=this.gl;e.disable(e.BLEND),e.blendFunc(e.ONE,e.ZERO),e.blendEquation(e.FUNC_ADD),e.colorMask(!0,!0,!0,!0),e.blendColor(0,0,0,0),e.enable(e.CULL_FACE),this.cullFace=e.BACK,e.cullFace(e.BACK),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.depthMask(!0),this.stencil=!1,e.disable(e.STENCIL_TEST),this.stencilFuncFront=this.stencilFuncBack=$i,this.stencilRefFront=this.stencilRefBack=0,this.stencilMaskFront=this.stencilMaskBack=255,e.stencilFunc(e.ALWAYS,0,255),this.stencilFailFront=this.stencilFailBack=_n,this.stencilZfailFront=this.stencilZfailBack=_n,this.stencilZpassFront=this.stencilZpassBack=_n,this.stencilWriteMaskFront=255,this.stencilWriteMaskBack=255,e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.stencilMask(255),this.alphaToCoverage=!1,this.raster=!0,e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),e.disable(e.RASTERIZER_DISCARD),this.depthBiasEnabled=!1,e.disable(e.POLYGON_OFFSET_FILL),this.clearDepth=1,e.clearDepth(1),this.clearColor=new ae(0,0,0,0),e.clearColor(0,0,0,0),this.clearStencil=0,e.clearStencil(0),e.hint(e.FRAGMENT_SHADER_DERIVATIVE_HINT,e.NICEST),e.enable(e.SCISSOR_TEST),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,e.NONE),this.unpackFlipY=!1,e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),this.unpackPremultiplyAlpha=!1,e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),e.pixelStorei(e.UNPACK_ALIGNMENT,1)}initTextureUnits(e=16){this.textureUnits=[];for(let s=0;s<e;s++)this.textureUnits.push([null,null,null])}initializeContextCaches(){super.initializeContextCaches(),this._vaoMap=new Map,this.boundVao=null,this.activeFramebuffer=null,this.feedback=null,this.transformFeedbackBuffer=null,this.textureUnit=0,this.initTextureUnits(this.maxCombinedTextures)}loseContext(){super.loseContext();for(const e of this.shaders)e.loseContext()}restoreContext(){this.initializeExtensions(),this.initializeCapabilities(),super.restoreContext();for(const e of this.shaders)e.restoreContext()}setViewport(e,s,i,r){(this.vx!==e||this.vy!==s||this.vw!==i||this.vh!==r)&&(this.gl.viewport(e,s,i,r),this.vx=e,this.vy=s,this.vw=i,this.vh=r)}setScissor(e,s,i,r){(this.sx!==e||this.sy!==s||this.sw!==i||this.sh!==r)&&(this.gl.scissor(e,s,i,r),this.sx=e,this.sy=s,this.sw=i,this.sh=r)}setFramebuffer(e){if(this.activeFramebuffer!==e){const s=this.gl;s.bindFramebuffer(s.FRAMEBUFFER,e),this.activeFramebuffer=e}}copyRenderTarget(e,s,i,r){var u,p;const a=this.gl;if(e===this.backBuffer&&(e=null),i){if(s){if(e){if(!e._colorBuffer||!s._colorBuffer)return y.error("Can't copy color buffer, because one of the render targets doesn't have it"),!1;if(e._colorBuffer._format!==s._colorBuffer._format)return y.error("Can't copy render targets of different color formats"),!1}}else if(!e._colorBuffer)return y.error("Can't copy empty color buffer to backbuffer"),!1}if(r&&e&&!e._depth){if(!e._depthBuffer||!s._depthBuffer)return y.error("Can't copy depth buffer, because one of the render targets doesn't have it"),!1;if(e._depthBuffer._format!==s._depthBuffer._format)return y.error("Can't copy render targets of different depth formats"),!1}Z.pushGpuMarker(this,"COPY-RT");const n=this.renderTarget;this.renderTarget=s,this.updateBegin();const o=e?e.impl._glFrameBuffer:(u=this.backBuffer)==null?void 0:u.impl._glFrameBuffer,c=s?s.impl._glFrameBuffer:(p=this.backBuffer)==null?void 0:p.impl._glFrameBuffer;y.assert(o!==c,"Source and destination framebuffers must be different when blitting."),a.bindFramebuffer(a.READ_FRAMEBUFFER,o),a.bindFramebuffer(a.DRAW_FRAMEBUFFER,c);const d=e?e.width:s?s.width:this.width,f=e?e.height:s?s.height:this.height;return a.blitFramebuffer(0,0,d,f,0,0,d,f,(i?a.COLOR_BUFFER_BIT:0)|(r?a.DEPTH_BUFFER_BIT:0),a.NEAREST),this.renderTarget=n,a.bindFramebuffer(a.FRAMEBUFFER,n?n.impl._glFrameBuffer:null),Z.popGpuMarker(this),!0}frameStart(){super.frameStart(),this.updateBackbuffer(),this.gpuProfiler.frameStart()}frameEnd(){super.frameEnd(),this.gpuProfiler.frameEnd(),this.gpuProfiler.request()}startRenderPass(e){const s=e.renderTarget??this.backBuffer;this.renderTarget=s,y.assert(s),Z.pushGpuMarker(this,`Pass:${e.name} RT:${s.name}`),Z.pushGpuMarker(this,"START-PASS"),this.updateBegin();const{width:i,height:r}=s;this.setViewport(0,0,i,r),this.setScissor(0,0,i,r);const a=e.colorOps,n=e.depthStencilOps;if(a!=null&&a.clear||n.clearDepth||n.clearStencil){let o=0;const c={};a!=null&&a.clear&&(o|=Uo,c.color=[a.clearValue.r,a.clearValue.g,a.clearValue.b,a.clearValue.a]),n.clearDepth&&(o|=Bo,c.depth=n.clearDepthValue),n.clearStencil&&(o|=Gh,c.stencil=n.clearStencilValue),c.flags=o,this.clear(c)}y.call(()=>{this.insideRenderPass&&y.errorOnce("RenderPass cannot be started while inside another render pass.")}),this.insideRenderPass=!0,Z.popGpuMarker(this)}endRenderPass(e){var r;Z.pushGpuMarker(this,"END-PASS"),this.unbindVertexArray();const s=this.renderTarget,i=e.colorArrayOps.length;if(s){Pa.length=0;const a=this.gl;for(let n=0;n<i;n++){const o=e.colorArrayOps[n];o.store||o.resolve||Pa.push(a.COLOR_ATTACHMENT0+n)}s!==this.backBuffer&&(e.depthStencilOps.storeDepth||Pa.push(a.DEPTH_ATTACHMENT),e.depthStencilOps.storeStencil||Pa.push(a.STENCIL_ATTACHMENT)),Pa.length>0&&e.fullSizeClearRect&&a.invalidateFramebuffer(a.DRAW_FRAMEBUFFER,Pa),i&&((r=e.colorOps)!=null&&r.resolve)&&e.samples>1&&s.autoResolve&&s.resolve(!0,!1),s.depthBuffer&&e.depthStencilOps.resolveDepth&&e.samples>1&&s.autoResolve&&s.resolve(!1,!0);for(let n=0;n<i;n++)if(e.colorArrayOps[n].genMipmaps){const c=s._colorBuffers[n];c&&c.impl._glTexture&&c.mipmaps&&(Z.pushGpuMarker(this,`MIPS${n}`),this.activeTexture(this.maxCombinedTextures-1),this.bindTexture(c),this.gl.generateMipmap(c.impl._glTarget),Z.popGpuMarker(this))}}this.insideRenderPass=!1,Z.popGpuMarker(this),Z.popGpuMarker(this)}set defaultFramebuffer(e){this._defaultFramebuffer!==e&&(this._defaultFramebuffer=e,this._defaultFramebufferChanged=!0)}get defaultFramebuffer(){return this._defaultFramebuffer}updateBegin(){if(Z.pushGpuMarker(this,"UPDATE-BEGIN"),this.boundVao=null,this._tempEnableSafariTextureUnitWorkaround)for(let i=0;i<this.textureUnits.length;++i)for(let r=0;r<3;++r)this.textureUnits[i][r]=null;const e=this.renderTarget??this.backBuffer;y.assert(e);const s=e.impl;s.initialized||this.initRenderTarget(e),this.setFramebuffer(s._glFrameBuffer),Z.popGpuMarker(this)}updateEnd(){Z.pushGpuMarker(this,"UPDATE-END"),this.unbindVertexArray();const e=this.renderTarget;if(e&&e!==this.backBuffer){e._samples>1&&e.autoResolve&&e.resolve();const s=e._colorBuffer;s&&s.impl._glTexture&&s.mipmaps&&(this.activeTexture(this.maxCombinedTextures-1),this.bindTexture(s),this.gl.generateMipmap(s.impl._glTarget))}Z.popGpuMarker(this)}setUnpackFlipY(e){if(this.unpackFlipY!==e){this.unpackFlipY=e;const s=this.gl;s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,e)}}setUnpackPremultiplyAlpha(e){if(this.unpackPremultiplyAlpha!==e){this.unpackPremultiplyAlpha=e;const s=this.gl;s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e)}}activeTexture(e){this.textureUnit!==e&&(this.gl.activeTexture(this.gl.TEXTURE0+e),this.textureUnit=e)}bindTexture(e){const s=e.impl,i=s._glTarget,r=s._glTexture,a=this.textureUnit,n=this.targetToSlot[i];this.textureUnits[a][n]!==r&&(this.gl.bindTexture(i,r),this.textureUnits[a][n]=r)}bindTextureOnUnit(e,s){const i=e.impl,r=i._glTarget,a=i._glTexture,n=this.targetToSlot[r];this.textureUnits[s][n]!==a&&(this.activeTexture(s),this.gl.bindTexture(r,a),this.textureUnits[s][n]=a)}setTextureParameters(e){const s=this.gl,i=e.impl.dirtyParameterFlags,r=e.impl._glTarget;if(i&FS){let a=e._minFilter;(!e._mipmaps||e._compressed&&e._levels.length===1)&&(a===Dc||a===Ic?a=Te:(a===Mc||a===ua)&&(a=yt)),s.texParameteri(r,s.TEXTURE_MIN_FILTER,this.glFilter[a])}if(i&NS&&s.texParameteri(r,s.TEXTURE_MAG_FILTER,this.glFilter[e._magFilter]),i&kS&&s.texParameteri(r,s.TEXTURE_WRAP_S,this.glAddress[e._addressU]),i&US&&s.texParameteri(r,s.TEXTURE_WRAP_T,this.glAddress[e._addressV]),i&BS&&s.texParameteri(r,s.TEXTURE_WRAP_R,this.glAddress[e._addressW]),i&zS&&s.texParameteri(r,s.TEXTURE_COMPARE_MODE,e._compareOnRead?s.COMPARE_REF_TO_TEXTURE:s.NONE),i&VS&&s.texParameteri(r,s.TEXTURE_COMPARE_FUNC,this.glComparison[e._compareFunc]),i&GS){const a=this.extTextureFilterAnisotropic;a&&s.texParameterf(r,a.TEXTURE_MAX_ANISOTROPY_EXT,Y.clamp(Math.round(e._anisotropy),1,this.maxAnisotropy))}}setTexture(e,s){const i=e.impl;i._glTexture||i.initialize(this,e),i.dirtyParameterFlags>0||e._needsUpload||e._needsMipmapsUpload?(this.activeTexture(s),this.bindTexture(e),i.dirtyParameterFlags&&(this.setTextureParameters(e),i.dirtyParameterFlags=0),(e._needsUpload||e._needsMipmapsUpload)&&(i.upload(this,e),e._needsUpload=!1,e._needsMipmapsUpload=!1)):this.bindTextureOnUnit(e,s)}createVertexArray(e){let s,i;const r=e.length>1;if(r){s="";for(let a=0;a<e.length;a++){const n=e[a];s+=n.id+n.format.renderingHash}i=this._vaoMap.get(s)}if(!i){const a=this.gl;i=a.createVertexArray(),a.bindVertexArray(i),a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,null);let n=!1;for(let o=0;o<e.length;o++){const c=e[o];a.bindBuffer(a.ARRAY_BUFFER,c.impl.bufferId);const d=c.format.elements;for(let f=0;f<d.length;f++){const u=d[f],p=Ie[u.name];p===0&&(n=!0),u.asInt?a.vertexAttribIPointer(p,u.numComponents,this.glType[u.dataType],u.stride,u.offset):a.vertexAttribPointer(p,u.numComponents,this.glType[u.dataType],u.normalize,u.stride,u.offset),a.enableVertexAttribArray(p),c.format.instancing&&a.vertexAttribDivisor(p,1)}}a.bindVertexArray(null),a.bindBuffer(a.ARRAY_BUFFER,null),r&&this._vaoMap.set(s,i),n||y.warn("No vertex attribute is mapped to location 0, which might cause compatibility issues on Safari on MacOS - please use attribute SEMANTIC_POSITION or SEMANTIC_ATTR15")}return i}unbindVertexArray(){this.boundVao&&(this.boundVao=null,this.gl.bindVertexArray(null))}setBuffers(e){const s=this.gl;let i;if(this.vertexBuffers.length===1){const a=this.vertexBuffers[0];y.assert(a.device===this,"The VertexBuffer was not created using current GraphicsDevice"),a.impl.vao||(a.impl.vao=this.createVertexArray(this.vertexBuffers)),i=a.impl.vao}else i=this.createVertexArray(this.vertexBuffers);this.boundVao!==i&&(this.boundVao=i,s.bindVertexArray(i));const r=e?e.impl.bufferId:null;s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,r)}draw(e,s,i,r,a=!0,n=!0){const o=this.shader;if(o&&(this.activateShader(),this.shaderValid)){const c=this.gl;a&&(y.call(()=>{var _,S;return this.validateAttributes(this.shader,(_=this.vertexBuffers[0])==null?void 0:_.format,(S=this.vertexBuffers[1])==null?void 0:S.format)}),this.setBuffers(s));let d=0;const f=o.impl.samplers;for(let _=0,S=f.length;_<S;_++){const g=f[_];let v=g.scopeId.value;if(!v){const w=g.scopeId.name;y.assert(w!=="texture_grabPass","Engine provided texture with sampler name 'texture_grabPass' is not longer supported, use 'uSceneColorMap' instead"),y.assert(w!=="uDepthMap","Engine provided texture with sampler name 'uDepthMap' is not longer supported, use 'uSceneDepthMap' instead"),w==="uSceneDepthMap"&&(y.errorOnce(`A uSceneDepthMap texture is used by the shader but a scene depth texture is not available. Use CameraComponent.requestSceneDepthMap / enable Depth Grabpass on the Camera Component to enable it. Rendering [${Z.toString()}]`),v=ca(this,"white")),w==="uSceneColorMap"&&(y.errorOnce(`A uSceneColorMap texture is used by the shader but a scene color texture is not available. Use CameraComponent.requestSceneColorMap / enable Color Grabpass on the Camera Component to enable it. Rendering [${Z.toString()}]`),v=ca(this,"pink")),v||(y.errorOnce(`Shader ${o.name} requires ${w} texture which was not set. Rendering [${Z.toString()}]`,o),v=ca(this,"pink"))}if(v instanceof ge){const w=v;this.setTexture(w,d),this.renderTarget&&this.renderTarget._samples<2&&(this.renderTarget.colorBuffer&&this.renderTarget.colorBuffer===w?y.error("Trying to bind current color buffer as a texture",{renderTarget:this.renderTarget,texture:w}):this.renderTarget.depthBuffer&&this.renderTarget.depthBuffer===w&&y.error("Trying to bind current depth buffer as a texture",{texture:w})),g.slot!==d&&(c.uniform1i(g.locationId,d),g.slot=d),d++}else{g.array.length=0;const w=v.length;for(let x=0;x<w;x++){const b=v[x];this.setTexture(b,d),g.array[x]=d,d++}c.uniform1iv(g.locationId,g.array)}}const u=o.impl.uniforms;for(let _=0,S=u.length;_<S;_++){const g=u[_],v=g.scopeId,w=g.version,x=v.versionObject.version;if(w.globalId!==x.globalId||w.revision!==x.revision){w.globalId=x.globalId,w.revision=x.revision;const b=v.value;b!=null?this.commitFunction[g.dataType](g,b):y.warnOnce(`Shader [${o.label}] requires uniform [${g.scopeId.name}] which has not been set, while rendering [${Z.toString()}]`)}}this.transformFeedbackBuffer&&(c.bindBufferBase(c.TRANSFORM_FEEDBACK_BUFFER,0,this.transformFeedbackBuffer.impl.bufferId),c.beginTransformFeedback(c.POINTS));const p=this.glPrimitive[e.type],m=e.count;if(e.indexed){y.assert(s.device===this,"The IndexBuffer was not created using current GraphicsDevice");const _=s.impl.glFormat,S=e.base*s.bytesPerIndex;i>0?c.drawElementsInstanced(p,m,_,S,i):c.drawElements(p,m,_,S)}else{const _=e.base;i>0?c.drawArraysInstanced(p,_,m,i):c.drawArrays(p,_,m)}this.transformFeedbackBuffer&&(c.endTransformFeedback(),c.bindBufferBase(c.TRANSFORM_FEEDBACK_BUFFER,0,null)),this._drawCallsPerFrame++,this._primsPerFrame[e.type]+=e.count*(i>1?i:1)}n&&this.clearVertexBuffer()}clear(e){const s=this.defaultClearOptions;e=e||s;const i=e.flags??s.flags;if(i!==0){const r=this.gl;if(i&Uo){const a=e.color??s.color,n=a[0],o=a[1],c=a[2],d=a[3],f=this.clearColor;(n!==f.r||o!==f.g||c!==f.b||d!==f.a)&&(this.gl.clearColor(n,o,c,d),this.clearColor.set(n,o,c,d)),this.setBlendState(ut.NOBLEND)}if(i&Bo){const a=e.depth??s.depth;a!==this.clearDepth&&(this.gl.clearDepth(a),this.clearDepth=a),this.setDepthState(qt.WRITEDEPTH)}if(i&Gh){const a=e.stencil??s.stencil;a!==this.clearStencil&&(this.gl.clearStencil(a),this.clearStencil=a),r.stencilMask(255),this.stencilWriteMaskFront=255,this.stencilWriteMaskBack=255}r.clear(this.glClearFlag[i])}}submit(){this.gl.flush()}readPixels(e,s,i,r,a){const n=this.gl;n.readPixels(e,s,i,r,n.RGBA,n.UNSIGNED_BYTE,a)}clientWaitAsync(e,s){const i=this.gl,r=i.fenceSync(i.SYNC_GPU_COMMANDS_COMPLETE,0);return this.submit(),new Promise((a,n)=>{function o(){const c=i.clientWaitSync(r,e,0);c===i.TIMEOUT_EXPIRED?setTimeout(o,s):(i.deleteSync(r),c===i.WAIT_FAILED?n(new Error("webgl clientWaitSync sync failed")):a())}o()})}async readPixelsAsync(e,s,i,r,a){var u;const n=this.gl,o=(u=this.renderTarget.colorBuffer)==null?void 0:u.impl,c=(o==null?void 0:o._glFormat)??n.RGBA,d=(o==null?void 0:o._glPixelType)??n.UNSIGNED_BYTE,f=n.createBuffer();return n.bindBuffer(n.PIXEL_PACK_BUFFER,f),n.bufferData(n.PIXEL_PACK_BUFFER,a.byteLength,n.STREAM_READ),n.readPixels(e,s,i,r,c,d,0),n.bindBuffer(n.PIXEL_PACK_BUFFER,null),await this.clientWaitAsync(0,16),n.bindBuffer(n.PIXEL_PACK_BUFFER,f),n.getBufferSubData(n.PIXEL_PACK_BUFFER,0,a),n.bindBuffer(n.PIXEL_PACK_BUFFER,null),n.deleteBuffer(f),a}readTextureAsync(e,s,i,r,a,n){const o=n.face??0,c=n.renderTarget??new _t({colorBuffer:e,depth:!1,face:o});y.assert(c.colorBuffer===e);const d=new ArrayBuffer(qi.calcLevelGpuSize(r,a,1,e._format)),f=n.data??new(ES(e._format))(d);return this.setRenderTarget(c),this.initRenderTarget(c),new Promise((u,p)=>{this.readPixelsAsync(s,i,r,a,f).then(m=>{n.renderTarget||c.destroy(),u(m)}).catch(p)})}async writeTextureAsync(e,s,i,r,a,n){const o=this.gl,c=e.impl,d=(c==null?void 0:c._glFormat)??o.RGBA,f=(c==null?void 0:c._glPixelType)??o.UNSIGNED_BYTE,u=o.createBuffer();o.bindBuffer(o.PIXEL_UNPACK_BUFFER,u),o.bufferData(o.PIXEL_UNPACK_BUFFER,n,o.STREAM_DRAW),o.bindTexture(o.TEXTURE_2D,c._glTexture),o.texSubImage2D(o.TEXTURE_2D,0,s,i,r,a,d,f,0),o.bindBuffer(o.PIXEL_UNPACK_BUFFER,null),e._needsUpload=!1,e._mipmapsUploaded=!1,await this.clientWaitAsync(0,16)}setAlphaToCoverage(e){this.alphaToCoverage!==e&&(this.alphaToCoverage=e,e?this.gl.enable(this.gl.SAMPLE_ALPHA_TO_COVERAGE):this.gl.disable(this.gl.SAMPLE_ALPHA_TO_COVERAGE))}setTransformFeedbackBuffer(e){if(this.transformFeedbackBuffer!==e){this.transformFeedbackBuffer=e;const s=this.gl;e?(this.feedback||(this.feedback=s.createTransformFeedback()),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,this.feedback)):s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null)}}setRaster(e){this.raster!==e&&(this.raster=e,e?this.gl.disable(this.gl.RASTERIZER_DISCARD):this.gl.enable(this.gl.RASTERIZER_DISCARD))}setStencilTest(e){if(this.stencil!==e){const s=this.gl;e?s.enable(s.STENCIL_TEST):s.disable(s.STENCIL_TEST),this.stencil=e}}setStencilFunc(e,s,i){(this.stencilFuncFront!==e||this.stencilRefFront!==s||this.stencilMaskFront!==i||this.stencilFuncBack!==e||this.stencilRefBack!==s||this.stencilMaskBack!==i)&&(this.gl.stencilFunc(this.glComparison[e],s,i),this.stencilFuncFront=this.stencilFuncBack=e,this.stencilRefFront=this.stencilRefBack=s,this.stencilMaskFront=this.stencilMaskBack=i)}setStencilFuncFront(e,s,i){if(this.stencilFuncFront!==e||this.stencilRefFront!==s||this.stencilMaskFront!==i){const r=this.gl;r.stencilFuncSeparate(r.FRONT,this.glComparison[e],s,i),this.stencilFuncFront=e,this.stencilRefFront=s,this.stencilMaskFront=i}}setStencilFuncBack(e,s,i){if(this.stencilFuncBack!==e||this.stencilRefBack!==s||this.stencilMaskBack!==i){const r=this.gl;r.stencilFuncSeparate(r.BACK,this.glComparison[e],s,i),this.stencilFuncBack=e,this.stencilRefBack=s,this.stencilMaskBack=i}}setStencilOperation(e,s,i,r){(this.stencilFailFront!==e||this.stencilZfailFront!==s||this.stencilZpassFront!==i||this.stencilFailBack!==e||this.stencilZfailBack!==s||this.stencilZpassBack!==i)&&(this.gl.stencilOp(this.glStencilOp[e],this.glStencilOp[s],this.glStencilOp[i]),this.stencilFailFront=this.stencilFailBack=e,this.stencilZfailFront=this.stencilZfailBack=s,this.stencilZpassFront=this.stencilZpassBack=i),(this.stencilWriteMaskFront!==r||this.stencilWriteMaskBack!==r)&&(this.gl.stencilMask(r),this.stencilWriteMaskFront=r,this.stencilWriteMaskBack=r)}setStencilOperationFront(e,s,i,r){(this.stencilFailFront!==e||this.stencilZfailFront!==s||this.stencilZpassFront!==i)&&(this.gl.stencilOpSeparate(this.gl.FRONT,this.glStencilOp[e],this.glStencilOp[s],this.glStencilOp[i]),this.stencilFailFront=e,this.stencilZfailFront=s,this.stencilZpassFront=i),this.stencilWriteMaskFront!==r&&(this.gl.stencilMaskSeparate(this.gl.FRONT,r),this.stencilWriteMaskFront=r)}setStencilOperationBack(e,s,i,r){(this.stencilFailBack!==e||this.stencilZfailBack!==s||this.stencilZpassBack!==i)&&(this.gl.stencilOpSeparate(this.gl.BACK,this.glStencilOp[e],this.glStencilOp[s],this.glStencilOp[i]),this.stencilFailBack=e,this.stencilZfailBack=s,this.stencilZpassBack=i),this.stencilWriteMaskBack!==r&&(this.gl.stencilMaskSeparate(this.gl.BACK,r),this.stencilWriteMaskBack=r)}setBlendState(e){const s=this.blendState;if(!s.equals(e)){const i=this.gl,{blend:r,colorOp:a,alphaOp:n,colorSrcFactor:o,colorDstFactor:c,alphaSrcFactor:d,alphaDstFactor:f}=e;if(s.blend!==r&&(r?i.enable(i.BLEND):i.disable(i.BLEND)),s.colorOp!==a||s.alphaOp!==n){const u=this.glBlendEquation;i.blendEquationSeparate(u[a],u[n])}(s.colorSrcFactor!==o||s.colorDstFactor!==c||s.alphaSrcFactor!==d||s.alphaDstFactor!==f)&&i.blendFuncSeparate(this.glBlendFunctionColor[o],this.glBlendFunctionColor[c],this.glBlendFunctionAlpha[d],this.glBlendFunctionAlpha[f]),s.allWrite!==e.allWrite&&this.gl.colorMask(e.redWrite,e.greenWrite,e.blueWrite,e.alphaWrite),s.copy(e)}}setBlendColor(e,s,i,r){const a=this.blendColor;(e!==a.r||s!==a.g||i!==a.b||r!==a.a)&&(this.gl.blendColor(e,s,i,r),a.set(e,s,i,r))}setStencilState(e,s){e||s?(this.setStencilTest(!0),e===s?(this.setStencilFunc(e.func,e.ref,e.readMask),this.setStencilOperation(e.fail,e.zfail,e.zpass,e.writeMask)):(e??(e=pi.DEFAULT),this.setStencilFuncFront(e.func,e.ref,e.readMask),this.setStencilOperationFront(e.fail,e.zfail,e.zpass,e.writeMask),s??(s=pi.DEFAULT),this.setStencilFuncBack(s.func,s.ref,s.readMask),this.setStencilOperationBack(s.fail,s.zfail,s.zpass,s.writeMask))):this.setStencilTest(!1)}setDepthState(e){const s=this.depthState;if(!s.equals(e)){const i=this.gl,r=e.write;s.write!==r&&i.depthMask(r);let{func:a,test:n}=e;!n&&r&&(n=!0,a=$i),s.func!==a&&i.depthFunc(this.glComparison[a]),s.test!==n&&(n?i.enable(i.DEPTH_TEST):i.disable(i.DEPTH_TEST));const{depthBias:o,depthBiasSlope:c}=e;o||c?(this.depthBiasEnabled||(this.depthBiasEnabled=!0,this.gl.enable(this.gl.POLYGON_OFFSET_FILL)),i.polygonOffset(c,o)):this.depthBiasEnabled&&(this.depthBiasEnabled=!1,this.gl.disable(this.gl.POLYGON_OFFSET_FILL)),s.copy(e)}}setCullMode(e){if(this.cullMode!==e){if(e===wt)this.gl.disable(this.gl.CULL_FACE);else{this.cullMode===wt&&this.gl.enable(this.gl.CULL_FACE);const s=this.glCull[e];this.cullFace!==s&&(this.gl.cullFace(s),this.cullFace=s)}this.cullMode=e}}setShader(e,s=!1){e!==this.shader&&(this.shader=e,this.shaderAsyncCompile=s,this.shaderValid=void 0,this._shaderSwitchesPerFrame++)}activateShader(){const{shader:e}=this,{impl:s}=e;this.shaderValid===void 0&&(e.failed?this.shaderValid=!1:e.ready||(this.shaderAsyncCompile?s.isLinked(this)?s.finalize(this,e)||(e.failed=!0,this.shaderValid=!1):this.shaderValid=!1:s.finalize(this,e)||(e.failed=!0,this.shaderValid=!1))),this.shaderValid===void 0&&(this.gl.useProgram(s.glProgram),this.shaderValid=!0)}clearVertexArrayObjectCache(){const e=this.gl;this._vaoMap.forEach((s,i,r)=>{e.deleteVertexArray(s)}),this._vaoMap.clear()}set fullscreen(e){e?this.gl.canvas.requestFullscreen():document.exitFullscreen()}get fullscreen(){return!!document.fullscreenElement}debugLoseContext(e=100){const s=this.gl.getExtension("WEBGL_lose_context");s.loseContext(),setTimeout(()=>s.restoreContext(),e)}}let ST=0;class Er{constructor(t,e,s,i=ps,r,a){this.device=t,this.format=e,this.numIndices=s,this.usage=i,this.id=ST++,this.impl=t.createIndexBufferImpl(this,a);const n=T0[e];this.bytesPerIndex=n,this.numBytes=this.numIndices*n,r?this.setData(r):this.storage=new ArrayBuffer(this.numBytes),this.adjustVramSizeTracking(t._vram,this.numBytes),this.device.buffers.push(this)}destroy(){const t=this.device,e=t.buffers.indexOf(this);e!==-1&&t.buffers.splice(e,1),this.device.indexBuffer===this&&(this.device.indexBuffer=null),this.impl.initialized&&(this.impl.destroy(t),this.adjustVramSizeTracking(t._vram,-this.storage.byteLength))}adjustVramSizeTracking(t,e){y.trace(nx,`${this.id} size: ${e} vram.ib: ${t.ib} => ${t.ib+e}`),t.ib+=e}loseContext(){this.impl.loseContext()}getFormat(){return this.format}getNumIndices(){return this.numIndices}lock(){return this.storage}unlock(){this.impl.unlock(this)}setData(t){return t.byteLength!==this.numBytes?(y.error(`IndexBuffer: wrong initial data size: expected ${this.numBytes}, got ${t.byteLength}`),!1):(this.storage=t,this.unlock(),!0)}_lockTypedArray(){const t=this.lock();return this.format===Tr?new Uint32Array(t):this.format===Ki?new Uint16Array(t):new Uint8Array(t)}writeData(t,e){const s=this._lockTypedArray();if(t.length>e)if(ArrayBuffer.isView(t))t=t.subarray(0,e),s.set(t);else for(let i=0;i<e;i++)s[i]=t[i];else s.set(t);this.unlock()}readData(t){const e=this._lockTypedArray(),s=this.numIndices;if(ArrayBuffer.isView(t))t.set(e);else{t.length=0;for(let i=0;i<s;i++)t[i]=e[i]}return s}}class yT{constructor(){h(this,"clearValue",new ae(0,0,0,1));h(this,"clearValueLinear",new ae(0,0,0,1));h(this,"clear",!1);h(this,"store",!1);h(this,"resolve",!0);h(this,"genMipmaps",!1)}}class vT{constructor(){h(this,"clearDepthValue",1);h(this,"clearStencilValue",0);h(this,"clearDepth",!1);h(this,"clearStencil",!1);h(this,"storeDepth",!1);h(this,"resolveDepth",!1);h(this,"storeStencil",!1)}}class Ss{constructor(t){h(this,"_name");h(this,"device");h(this,"_enabled",!0);h(this,"_skipStart",!1);h(this,"_skipEnd",!1);h(this,"executeEnabled",!0);h(this,"renderTarget");h(this,"_options");h(this,"samples",0);h(this,"colorArrayOps",[]);h(this,"depthStencilOps");h(this,"requiresCubemaps",!0);h(this,"fullSizeClearRect",!0);h(this,"beforePasses",[]);h(this,"afterPasses",[]);y.assert(t),this.device=t}get colorOps(){return this.colorArrayOps[0]}set name(t){this._name=t}get name(){return this._name||(this._name=this.constructor.name),this._name}set scaleX(t){y.assert(this._options,"The render pass needs to be initialized first."),this._options.scaleX=t}get scaleX(){return this._options.scaleX}set scaleY(t){y.assert(this._options,"The render pass needs to be initialized first."),this._options.scaleY=t}get scaleY(){return this._options.scaleY}set options(t){this._options=t,t&&(this.scaleX=this.scaleX??1,this.scaleY=this.scaleY??1)}get options(){return this._options}init(t=null,e){this.options=e,this.renderTarget=t,this.samples=Math.max(this.renderTarget?this.renderTarget.samples:this.device.samples,1),this.allocateAttachments(),this.postInit()}allocateAttachments(){var s,i,r,a;const t=this.renderTarget;this.depthStencilOps=new vT,t!=null&&t.depthBuffer&&(this.depthStencilOps.storeDepth=!0);const e=t?((s=t._colorBuffers)==null?void 0:s.length)??0:1;this.colorArrayOps.length=0;for(let n=0;n<e;n++){const o=new yT;this.colorArrayOps[n]=o,this.samples===1&&(o.store=!0,o.resolve=!1);const c=(r=(i=this.renderTarget)==null?void 0:i._colorBuffers)==null?void 0:r[n];if((a=this.renderTarget)!=null&&a.mipmaps&&(c!=null&&c.mipmaps)){const d=nn(c._format);o.genMipmaps=!d}}}destroy(){}postInit(){}frameUpdate(){if(this._options&&this.renderTarget){const t=this._options.resizeSource??this.device.backBuffer,e=Math.floor(t.width*this.scaleX),s=Math.floor(t.height*this.scaleY);this.renderTarget.resize(e,s)}}before(){}execute(){}after(){}onEnable(){}onDisable(){}set enabled(t){this._enabled!==t&&(this._enabled=t,t?this.onEnable():this.onDisable())}get enabled(){return this._enabled}setClearColor(t){const e=this.colorArrayOps.length;for(let s=0;s<e;s++){const i=this.colorArrayOps[s];t&&(i.clearValue.copy(t),i.clearValueLinear.linear(t)),i.clear=!!t}}setClearDepth(t){t&&(this.depthStencilOps.clearDepthValue=t),this.depthStencilOps.clearDepth=t!==void 0}setClearStencil(t){t&&(this.depthStencilOps.clearStencilValue=t),this.depthStencilOps.clearStencil=t!==void 0}render(){if(this.enabled){const t=this.device,e=this.renderTarget!==void 0;y.call(()=>{this.log(t,t.renderPassIndex)}),this.before(),this.executeEnabled&&(e&&!this._skipStart&&t.startRenderPass(this),this.execute(),e&&!this._skipEnd&&t.endRenderPass(this)),this.after(),t.renderPassIndex++}}log(t,e=0){var s,i,r;if(mi.get(Qp)||mi.get(rn)){const a=this.renderTarget??(this.renderTarget===null?t.backBuffer:null),n=!!(a!=null&&a.impl.assignedColorTexture)||(a==null?void 0:a.impl.suppliedColorFramebuffer)!==void 0,o=((s=a==null?void 0:a._colorBuffers)==null?void 0:s.length)??(n?1:0),c=a==null?void 0:a.depth,d=a==null?void 0:a.stencil,f=a==null?void 0:a.mipLevel,u=a?` RT: ${a?a.name:"NULL"} ${o>0?`[Color${o>1?` x ${o}`:""}]`:""}${c?"[Depth]":""}${d?"[Stencil]":""} ${a.width} x ${a.height}${this.samples>0?` samples: ${this.samples}`:""}${f>0?` mipLevel: ${f}`:""}`:"",p=this._skipStart?"++":e.toString().padEnd(2," ");y.trace(Qp,`${p}: ${this.name.padEnd(20," ")}${this.executeEnabled?"":" DISABLED "}${u.padEnd(30)}`);for(let m=0;m<o;m++){const _=this.colorArrayOps[m],S=(i=Ft.get(n?t.backBufferFormat:a.getColorBuffer(m).format))==null?void 0:i.name;y.trace(rn,`    color[${m}]: ${_.clear?"clear":"load"}->${_.store?"store":"discard"} ${_.resolve?"resolve ":""}${_.genMipmaps?"mipmaps ":""} [format: ${S}] ${_.clear?`[clear: ${_.clearValue.toString(!0,!0)}]`:""}`)}if(this.depthStencilOps){const m=`${a.depthBuffer?` [format: ${(r=Ft.get(a.depthBuffer.format))==null?void 0:r.name}]`:""}`;c&&y.trace(rn,`    depthOps: ${this.depthStencilOps.clearDepth?"clear":"load"}->${this.depthStencilOps.storeDepth?"store":"discard"}${this.depthStencilOps.resolveDepth?" resolve":""}${m}${this.depthStencilOps.clearDepth?` [clear: ${this.depthStencilOps.clearDepthValue}]`:""}`),d&&y.trace(rn,`    stencOps: ${this.depthStencilOps.clearStencil?"clear":"load"}->${this.depthStencilOps.storeStencil?"store":"discard"}${m}${this.depthStencilOps.clearStencil?` [clear: ${this.depthStencilOps.clearStencilValue}]`:""}`)}}}}function xT(l){this.array[this.index]=l}function TT(l,t){this.array[this.index]=l,this.array[this.index+1]=t}function wT(l,t,e){this.array[this.index]=l,this.array[this.index+1]=t,this.array[this.index+2]=e}function ET(l,t,e,s){this.array[this.index]=l,this.array[this.index+1]=t,this.array[this.index+2]=e,this.array[this.index+3]=s}function bT(l,t,e){this.array[l]=t[e]}function AT(l,t,e){this.array[l]=t[e],this.array[l+1]=t[e+1]}function CT(l,t,e){this.array[l]=t[e],this.array[l+1]=t[e+1],this.array[l+2]=t[e+2]}function PT(l,t,e){this.array[l]=t[e],this.array[l+1]=t[e+1],this.array[l+2]=t[e+2],this.array[l+3]=t[e+3]}function DT(l,t,e){t[e]=this.array[l]}function IT(l,t,e){t[e]=this.array[l],t[e+1]=this.array[l+1]}function MT(l,t,e){t[e]=this.array[l],t[e+1]=this.array[l+1],t[e+2]=this.array[l+2]}function LT(l,t,e){t[e]=this.array[l],t[e+1]=this.array[l+1],t[e+2]=this.array[l+2],t[e+3]=this.array[l+3]}class RT{constructor(t,e,s){switch(this.index=0,this.numComponents=e.numComponents,s.interleaved?this.array=new Sn[e.dataType](t,e.offset):this.array=new Sn[e.dataType](t,e.offset,s.vertexCount*e.numComponents),this.stride=e.stride/this.array.constructor.BYTES_PER_ELEMENT,e.numComponents){case 1:this.set=xT,this.getToArray=DT,this.setFromArray=bT;break;case 2:this.set=TT,this.getToArray=IT,this.setFromArray=AT;break;case 3:this.set=wT,this.getToArray=MT,this.setFromArray=CT;break;case 4:this.set=ET,this.getToArray=LT,this.setFromArray=PT;break}}get(t){return this.array[this.index+t]}set(t,e,s,i){}getToArray(t,e,s){}setFromArray(t,e,s){}}class Po{constructor(t){this.vertexBuffer=t,this.vertexFormatSize=t.getFormat().size,this.buffer=this.vertexBuffer.lock(),this.accessors=[],this.element={};const e=this.vertexBuffer.getFormat();for(let s=0;s<e.elements.length;s++){const i=e.elements[s];this.accessors[s]=new RT(this.buffer,i,e),this.element[i.name]=this.accessors[s]}}next(t=1){let e=0;const s=this.accessors,i=this.accessors.length;for(;e<i;){const r=s[e++];r.index+=t*r.stride}}end(){this.vertexBuffer.unlock()}writeData(t,e,s){const i=this.element[t];if(i){s>this.vertexBuffer.numVertices&&(y.error(`NumVertices provided to setData: ${s} is larger than space in VertexBuffer: ${this.vertexBuffer.numVertices}`),s=this.vertexBuffer.numVertices);const r=i.numComponents;if(this.vertexBuffer.getFormat().interleaved){let a=0;for(let n=0;n<s;n++)i.setFromArray(a,e,n*r),a+=i.stride}else if(e.length>s*r){const a=s*r;if(ArrayBuffer.isView(e))e=e.subarray(0,a),i.array.set(e);else for(let n=0;n<a;n++)i.array[n]=e[n]}else i.array.set(e)}}readData(t,e){const s=this.element[t];let i=0;if(s){i=this.vertexBuffer.numVertices;let r;const a=s.numComponents;if(this.vertexBuffer.getFormat().interleaved){Array.isArray(e)&&(e.length=0),s.index=0;let n=0;for(r=0;r<i;r++)s.getToArray(n,e,r*a),n+=s.stride}else if(ArrayBuffer.isView(e))e.set(s.array);else{e.length=0;const n=i*a;for(r=0;r<n;r++)e[r]=s.array[r]}}return i}}const OT=-1;class FT{constructor(t,e){h(this,"key",null);h(this,"element",null);h(this,"event",null);e&&(this.key=e.keyCode,this.element=e.target,this.event=e)}}const kl=new FT;function xd(l){return kl.key=l.keyCode,kl.element=l.target,kl.event=l,kl}function Ul(l){return typeof l=="string"?l.toUpperCase().charCodeAt(0):l}const NT={9:"Tab",13:"Enter",16:"Shift",17:"Control",18:"Alt",27:"Escape",37:"Left",38:"Up",39:"Right",40:"Down",46:"Delete",91:"Win"};class Om extends Se{constructor(e,s={}){super();h(this,"_element",null);h(this,"_keymap",{});h(this,"_lastmap",{});this._keyDownHandler=this._handleKeyDown.bind(this),this._keyUpHandler=this._handleKeyUp.bind(this),this._keyPressHandler=this._handleKeyPress.bind(this),this._visibilityChangeHandler=this._handleVisibilityChange.bind(this),this._windowBlurHandler=this._handleWindowBlur.bind(this),e&&this.attach(e),this.preventDefault=s.preventDefault||!1,this.stopPropagation=s.stopPropagation||!1}attach(e){this._element&&this.detach(),this._element=e,this._element.addEventListener("keydown",this._keyDownHandler,!1),this._element.addEventListener("keypress",this._keyPressHandler,!1),this._element.addEventListener("keyup",this._keyUpHandler,!1),document.addEventListener("visibilitychange",this._visibilityChangeHandler,!1),window.addEventListener("blur",this._windowBlurHandler,!1)}detach(){if(!this._element){y.warn("Unable to detach keyboard. It is not attached to an element.");return}this._element.removeEventListener("keydown",this._keyDownHandler),this._element.removeEventListener("keypress",this._keyPressHandler),this._element.removeEventListener("keyup",this._keyUpHandler),this._element=null,document.removeEventListener("visibilitychange",this._visibilityChangeHandler,!1),window.removeEventListener("blur",this._windowBlurHandler,!1)}toKeyIdentifier(e){e=Ul(e);const s=NT[e.toString()];if(s)return s;let i=e.toString(16).toUpperCase();const r=i.length;for(let a=0;a<4-r;a++)i=`0${i}`;return`U+${i}`}_handleKeyDown(e){const s=e.keyCode||e.charCode;if(s===void 0)return;const i=this.toKeyIdentifier(s);this._keymap[i]=!0,this.fire("keydown",xd(e)),this.preventDefault&&e.preventDefault(),this.stopPropagation&&e.stopPropagation()}_handleKeyUp(e){const s=e.keyCode||e.charCode;if(s===void 0)return;const i=this.toKeyIdentifier(s);delete this._keymap[i],this.fire("keyup",xd(e)),this.preventDefault&&e.preventDefault(),this.stopPropagation&&e.stopPropagation()}_handleKeyPress(e){this.fire("keypress",xd(e)),this.preventDefault&&e.preventDefault(),this.stopPropagation&&e.stopPropagation()}_handleVisibilityChange(){document.visibilityState==="hidden"&&this._handleWindowBlur()}_handleWindowBlur(){this._keymap={},this._lastmap={}}update(){for(const e in this._lastmap)delete this._lastmap[e];for(const e in this._keymap)this._keymap.hasOwnProperty(e)&&(this._lastmap[e]=this._keymap[e])}isPressed(e){const s=Ul(e),i=this.toKeyIdentifier(s);return!!this._keymap[i]}wasPressed(e){const s=Ul(e),i=this.toKeyIdentifier(s);return!!this._keymap[i]&&!this._lastmap[i]}wasReleased(e){const s=Ul(e),i=this.toKeyIdentifier(s);return!this._keymap[i]&&!!this._lastmap[i]}}h(Om,"EVENT_KEYDOWN","keydown"),h(Om,"EVENT_KEYUP","keyup");function Mf(){return!!(document.pointerLockElement||document.mozPointerLockElement||document.webkitPointerLockElement)}class ea{constructor(t,e){h(this,"x",0);h(this,"y",0);h(this,"dx",0);h(this,"dy",0);h(this,"button",OT);h(this,"wheelDelta",0);h(this,"element");h(this,"ctrlKey",!1);h(this,"altKey",!1);h(this,"shiftKey",!1);h(this,"metaKey",!1);h(this,"event");let s={x:0,y:0};if(e){if(e instanceof ea)throw Error("Expected MouseEvent");s=t._getTargetCoords(e)}else e={};if(s)this.x=s.x,this.y=s.y;else if(Mf())this.x=0,this.y=0;else return;e.type==="wheel"&&(e.deltaY>0?this.wheelDelta=1:e.deltaY<0&&(this.wheelDelta=-1)),Mf()?(this.dx=e.movementX||e.webkitMovementX||e.mozMovementX||0,this.dy=e.movementY||e.webkitMovementY||e.mozMovementY||0):(this.dx=this.x-t._lastX,this.dy=this.y-t._lastY),(e.type==="mousedown"||e.type==="mouseup")&&(this.button=e.button),this.buttons=t._buttons.slice(0),this.element=e.target,this.ctrlKey=e.ctrlKey??!1,this.altKey=e.altKey??!1,this.shiftKey=e.shiftKey??!1,this.metaKey=e.metaKey??!1,this.event=e}}class Bl extends Se{constructor(e){super();h(this,"_lastX",0);h(this,"_lastY",0);h(this,"_buttons",[!1,!1,!1]);h(this,"_lastbuttons",[!1,!1,!1]);h(this,"_target",null);h(this,"_attached",!1);this._upHandler=this._handleUp.bind(this),this._downHandler=this._handleDown.bind(this),this._moveHandler=this._handleMove.bind(this),this._wheelHandler=this._handleWheel.bind(this),this._contextMenuHandler=s=>{s.preventDefault()},this.attach(e)}static isPointerLocked(){return Mf()}attach(e){if(this._target=e,this._attached)return;this._attached=!0;const s={passive:!1},i=Pe.passiveEvents?s:!1;window.addEventListener("mouseup",this._upHandler,i),window.addEventListener("mousedown",this._downHandler,i),window.addEventListener("mousemove",this._moveHandler,i),window.addEventListener("wheel",this._wheelHandler,i)}detach(){if(!this._attached)return;this._attached=!1,this._target=null;const e={passive:!1},s=Pe.passiveEvents?e:!1;window.removeEventListener("mouseup",this._upHandler,s),window.removeEventListener("mousedown",this._downHandler,s),window.removeEventListener("mousemove",this._moveHandler,s),window.removeEventListener("wheel",this._wheelHandler,s)}disableContextMenu(){this._target&&this._target.addEventListener("contextmenu",this._contextMenuHandler)}enableContextMenu(){this._target&&this._target.removeEventListener("contextmenu",this._contextMenuHandler)}enablePointerLock(e,s){if(!document.body.requestPointerLock){s&&s();return}const i=()=>{e(),document.removeEventListener("pointerlockchange",i)},r=()=>{s(),document.removeEventListener("pointerlockerror",r)};e&&document.addEventListener("pointerlockchange",i,!1),s&&document.addEventListener("pointerlockerror",r,!1),document.body.requestPointerLock()}disablePointerLock(e){if(!document.exitPointerLock)return;const s=()=>{e(),document.removeEventListener("pointerlockchange",s)};e&&document.addEventListener("pointerlockchange",s,!1),document.exitPointerLock()}update(){this._lastbuttons[0]=this._buttons[0],this._lastbuttons[1]=this._buttons[1],this._lastbuttons[2]=this._buttons[2]}isPressed(e){return this._buttons[e]}wasPressed(e){return this._buttons[e]&&!this._lastbuttons[e]}wasReleased(e){return!this._buttons[e]&&this._lastbuttons[e]}_handleUp(e){this._buttons[e.button]=!1;const s=new ea(this,e);s.event&&this.fire("mouseup",s)}_handleDown(e){this._buttons[e.button]=!0;const s=new ea(this,e);s.event&&this.fire("mousedown",s)}_handleMove(e){const s=new ea(this,e);s.event&&(this.fire("mousemove",s),this._lastX=s.x,this._lastY=s.y)}_handleWheel(e){const s=new ea(this,e);s.event&&this.fire("mousewheel",s)}_getTargetCoords(e){const s=this._target.getBoundingClientRect(),i=Math.floor(s.left),r=Math.floor(s.top);return e.clientX<i||e.clientX>=i+this._target.clientWidth||e.clientY<r||e.clientY>=r+this._target.clientHeight?null:{x:e.clientX-i,y:e.clientY-r}}}h(Bl,"EVENT_MOUSEMOVE","mousemove"),h(Bl,"EVENT_MOUSEDOWN","mousedown"),h(Bl,"EVENT_MOUSEUP","mouseup"),h(Bl,"EVENT_MOUSEWHEEL","mousewheel");const Re=class Re{get(t,e,s){typeof e=="function"&&(s=e,e={});const i=this.request("GET",t,e,s),{progress:r}=e;if(r){const a=o=>{o.lengthComputable&&r.fire("progress",o.loaded,o.total)},n=o=>{a(o),i.removeEventListener("loadstart",a),i.removeEventListener("progress",a),i.removeEventListener("loadend",n)};i.addEventListener("loadstart",a),i.addEventListener("progress",a),i.addEventListener("loadend",n)}return i}post(t,e,s,i){return typeof s=="function"&&(i=s,s={}),s.postdata=e,this.request("POST",t,s,i)}put(t,e,s,i){return typeof s=="function"&&(i=s,s={}),s.postdata=e,this.request("PUT",t,s,i)}del(t,e,s){return typeof e=="function"&&(s=e,e={}),this.request("DELETE",t,e,s)}request(t,e,s,i){let r,a,n,o=!1;if(typeof s=="function"&&(i=s,s={}),s.retry&&(s=Object.assign({retries:0,maxRetries:5},s)),s.callback=i,s.async==null&&(s.async=!0),s.headers==null&&(s.headers={}),s.postdata!=null)if(s.postdata instanceof Document)n=s.postdata;else if(s.postdata instanceof FormData)n=s.postdata;else if(s.postdata instanceof Object){let d=s.headers["Content-Type"];switch(d===void 0&&(s.headers["Content-Type"]=Re.ContentType.FORM_URLENCODED,d=s.headers["Content-Type"]),d){case Re.ContentType.FORM_URLENCODED:{n="";let f=!0;for(const u in s.postdata)if(s.postdata.hasOwnProperty(u)){f?f=!1:n+="&";const p=encodeURIComponent(u),m=encodeURIComponent(s.postdata[u]);n+=`${p}=${m}`}break}default:case Re.ContentType.JSON:d==null&&(s.headers["Content-Type"]=Re.ContentType.JSON),n=JSON.stringify(s.postdata);break}}else n=s.postdata;if(s.cache===!1){const d=pe();r=new ud(e),r.query?r.query=`${r.query}&ts=${d}`:r.query=`ts=${d}`,e=r.toString()}s.query&&(r=new ud(e),a=Uh(r.getQuery(),s.query),r.setQuery(a),e=r.toString());const c=new XMLHttpRequest;c.open(t,e,s.async),c.withCredentials=s.withCredentials!==void 0?s.withCredentials:!1,c.responseType=s.responseType||this._guessResponseType(e);for(const d in s.headers)s.headers.hasOwnProperty(d)&&c.setRequestHeader(d,s.headers[d]);c.onreadystatechange=()=>{this._onReadyStateChange(t,e,s,c)},c.onerror=()=>{this._onError(t,e,s,c),o=!0};try{c.send(n)}catch(d){o||s.error(c.status,c,d)}return c}_guessResponseType(t){const e=new ud(t),s=xe.getExtension(e.path).toLowerCase();return Re.binaryExtensions.indexOf(s)>=0?Re.ResponseType.ARRAY_BUFFER:s===".json"?Re.ResponseType.JSON:s===".xml"?Re.ResponseType.DOCUMENT:Re.ResponseType.TEXT}_isBinaryContentType(t){return[Re.ContentType.BASIS,Re.ContentType.BIN,Re.ContentType.DDS,Re.ContentType.GLB,Re.ContentType.MP3,Re.ContentType.MP4,Re.ContentType.OGG,Re.ContentType.OPUS,Re.ContentType.WAV].indexOf(t)>=0}_isBinaryResponseType(t){return t===Re.ResponseType.ARRAY_BUFFER||t===Re.ResponseType.BLOB||t===Re.ResponseType.JSON}_onReadyStateChange(t,e,s,i){if(i.readyState===4)switch(i.status){case 0:{i.responseURL&&i.responseURL.startsWith("file:///")?this._onSuccess(t,e,s,i):this._onError(t,e,s,i);break}case 200:case 201:case 206:case 304:{this._onSuccess(t,e,s,i);break}default:{this._onError(t,e,s,i);break}}}_onSuccess(t,e,s,i){let r,a;const n=i.getResponseHeader("Content-Type");n&&(a=n.split(";")[0].trim());try{this._isBinaryContentType(a)||this._isBinaryResponseType(i.responseType)?r=i.response:a===Re.ContentType.JSON||e.split("?")[0].endsWith(".json")?r=JSON.parse(i.responseText):i.responseType===Re.ResponseType.DOCUMENT||a===Re.ContentType.XML?r=i.responseXML:r=i.responseText,s.callback(null,r)}catch(o){s.callback(o)}}_onError(t,e,s,i){if(!s.retrying)if(s.retry&&s.retries<s.maxRetries){s.retries++,s.retrying=!0;const r=Y.clamp(Math.pow(2,s.retries)*Re.retryDelay,0,s.maxRetryDelay||5e3);console.log(`${t}: ${e} - Error ${i.status}. Retrying in ${r} ms`),setTimeout(()=>{s.retrying=!1,this.request(t,e,s,s.callback)},r)}else s.callback(i.status===0?"Network error":i.status,null)}};h(Re,"ContentType",{AAC:"audio/aac",BASIS:"image/basis",BIN:"application/octet-stream",DDS:"image/dds",FORM_URLENCODED:"application/x-www-form-urlencoded",GIF:"image/gif",GLB:"model/gltf-binary",JPEG:"image/jpeg",JSON:"application/json",MP3:"audio/mpeg",MP4:"audio/mp4",OGG:"audio/ogg",OPUS:'audio/ogg; codecs="opus"',PNG:"image/png",TEXT:"text/plain",WAV:"audio/x-wav",XML:"application/xml"}),h(Re,"ResponseType",{TEXT:"text",ARRAY_BUFFER:"arraybuffer",BLOB:"blob",DOCUMENT:"document",JSON:"json"}),h(Re,"binaryExtensions",[".model",".wav",".ogg",".mp3",".mp4",".m4a",".aac",".dds",".basis",".glb",".opus"]),h(Re,"retryDelay",100);let Ms=Re;const ot=new Ms,up="linear",kT="inverse",UT="exponential";class BT{constructor(t){h(this,"_manager");h(this,"position",new A);h(this,"orientation",new ie);this._manager=t}getPosition(){return this.position}setPosition(t){this.position.copy(t);const e=this.listener;e&&("positionX"in e?(e.positionX.value=t.x,e.positionY.value=t.y,e.positionZ.value=t.z):e.setPosition&&e.setPosition(t.x,t.y,t.z))}setOrientation(t){this.orientation.copy(t);const e=this.listener;if(e){const s=t.data;"forwardX"in e?(e.forwardX.value=-s[8],e.forwardY.value=-s[9],e.forwardZ.value=-s[10],e.upX.value=s[4],e.upY.value=s[5],e.upZ.value=s[6]):e.setOrientation&&e.setOrientation(-s[8],-s[9],-s[10],s[4],s[5],s[6])}}getOrientation(){return this.orientation}get listener(){const t=this._manager.context;return t?t.listener:null}}const zl="running",Fm=["click","touchstart","mousedown"];class zT extends Se{constructor(){super(),this._context=null,this.AudioContext=typeof AudioContext<"u"&&AudioContext||typeof webkitAudioContext<"u"&&webkitAudioContext,this.AudioContext||y.warn("No support for 3D audio found"),this._unlockHandlerFunc=this._unlockHandler.bind(this),this._userSuspended=!1,this.listener=new BT(this),this._volume=1}set volume(t){t=Y.clamp(t,0,1),this._volume=t,this.fire("volumechange",t)}get volume(){return this._volume}get suspended(){return this._userSuspended}get context(){return!this._context&&this.AudioContext&&(this._context=new this.AudioContext,this._context.state!==zl&&this._registerUnlockListeners()),this._context}suspend(){this._userSuspended||(this._userSuspended=!0,this._context&&this._context.state===zl&&this._suspend())}resume(){this._userSuspended&&(this._userSuspended=!1,this._context&&this._context.state!==zl&&this._resume())}destroy(){var t;this.fire("destroy"),this._context&&(this._removeUnlockListeners(),(t=this._context)==null||t.close(),this._context=null)}_resume(){this._context.resume().then(()=>{const t=this._context.createBufferSource();t.buffer=this._context.createBuffer(1,1,this._context.sampleRate),t.connect(this._context.destination),t.start(0),t.onended=e=>{t.disconnect(0),this.fire("resume")}},t=>{y.error(`Attempted to resume the AudioContext on SoundManager.resume(), but it was rejected ${t}`)}).catch(t=>{y.error(`Attempted to resume the AudioContext on SoundManager.resume(), but threw an exception ${t}`)})}_suspend(){this._context.suspend().then(()=>{this.fire("suspend")},t=>{y.error(`Attempted to suspend the AudioContext on SoundManager.suspend(), but it was rejected ${t}`)}).catch(t=>{y.error(`Attempted to suspend the AudioContext on SoundManager.suspend(), but threw an exception ${t}`)})}_unlockHandler(){this._removeUnlockListeners(),!this._userSuspended&&this._context.state!==zl&&this._resume()}_registerUnlockListeners(){Fm.forEach(t=>{window.addEventListener(t,this._unlockHandlerFunc,!1)})}_removeUnlockListeners(){Fm.forEach(t=>{window.removeEventListener(t,this._unlockHandlerFunc,!1)})}}class VT{constructor(t){h(this,"audio");h(this,"buffer");t instanceof Audio?this.audio=t:this.buffer=t}get duration(){let t=0;return this.buffer?t=this.buffer.duration:this.audio&&(t=this.audio.duration),t||0}}function vl(){return typeof AudioContext<"u"||typeof webkitAudioContext<"u"}const Yt=0,on=1,Vs=2;function Qt(l,t){return l%t||0}class As extends Se{constructor(e,s,i){super();h(this,"source",null);this._manager=e,this._volume=i.volume!==void 0?Y.clamp(Number(i.volume)||0,0,1):1,this._pitch=i.pitch!==void 0?Math.max(.01,Number(i.pitch)||0):1,this._loop=!!(i.loop!==void 0&&i.loop),this._sound=s,this._state=Vs,this._suspended=!1,this._suspendEndEvent=0,this._suspendInstanceEvents=!1,this._playWhenLoaded=!0,this._startTime=Math.max(0,Number(i.startTime)||0),this._duration=Math.max(0,Number(i.duration)||0),this._startOffset=null,this._onPlayCallback=i.onPlay,this._onPauseCallback=i.onPause,this._onResumeCallback=i.onResume,this._onStopCallback=i.onStop,this._onEndCallback=i.onEnd,vl()?(this._startedAt=0,this._currentTime=0,this._currentOffset=0,this._inputNode=null,this._connectorNode=null,this._firstNode=null,this._lastNode=null,this._waitingContextSuspension=!1,this._initializeNodes(),this._endedHandler=this._onEnded.bind(this)):(this._isReady=!1,this._loadedMetadataHandler=this._onLoadedMetadata.bind(this),this._timeUpdateHandler=this._onTimeUpdate.bind(this),this._endedHandler=this._onEnded.bind(this),this._createSource())}set currentTime(e){if(!(e<0))if(this._state===Yt){const s=this._suspendInstanceEvents;this._suspendInstanceEvents=!0,this.stop(),this._startOffset=e,this.play(),this._suspendInstanceEvents=s}else this._startOffset=e,this._currentTime=e}get currentTime(){return this._startOffset!==null?this._startOffset:this._state===on?this._currentTime:this._state===Vs||!this.source?0:(this._updateCurrentTime(),this._currentTime)}set duration(e){this._duration=Math.max(0,Number(e)||0);const s=this._state===Yt;this.stop(),s&&this.play()}get duration(){return this._sound?this._duration?Qt(this._duration,this._sound.duration):this._sound.duration:0}get isPaused(){return this._state===on}get isPlaying(){return this._state===Yt}get isStopped(){return this._state===Vs}get isSuspended(){return this._suspended}set loop(e){this._loop=!!e,this.source&&(this.source.loop=this._loop)}get loop(){return this._loop}set pitch(e){this._currentOffset=this.currentTime,this._startedAt=this._manager.context.currentTime,this._pitch=Math.max(Number(e)||0,.01),this.source&&(this.source.playbackRate.value=this._pitch)}get pitch(){return this._pitch}set sound(e){this._sound=e,this._state!==Vs?this.stop():this._createSource()}get sound(){return this._sound}set startTime(e){this._startTime=Math.max(0,Number(e)||0);const s=this._state===Yt;this.stop(),s&&this.play()}get startTime(){return this._startTime}set volume(e){e=Y.clamp(e,0,1),this._volume=e,this.gain&&(this.gain.gain.value=e*this._manager.volume)}get volume(){return this._volume}_onPlay(){this.fire("play"),this._onPlayCallback&&this._onPlayCallback(this)}_onPause(){this.fire("pause"),this._onPauseCallback&&this._onPauseCallback(this)}_onResume(){this.fire("resume"),this._onResumeCallback&&this._onResumeCallback(this)}_onStop(){this.fire("stop"),this._onStopCallback&&this._onStopCallback(this)}_onEnded(){if(this._suspendEndEvent>0){this._suspendEndEvent--;return}this.fire("end"),this._onEndCallback&&this._onEndCallback(this),this.stop()}_onManagerVolumeChange(){this.volume=this._volume}_onManagerSuspend(){this._state===Yt&&!this._suspended&&(this._suspended=!0,this.pause())}_onManagerResume(){this._suspended&&(this._suspended=!1,this.resume())}_initializeNodes(){this.gain=this._manager.context.createGain(),this._inputNode=this.gain,this._connectorNode=this.gain,this._connectorNode.connect(this._manager.context.destination)}play(){return this._state!==Vs&&this.stop(),this._state=Yt,this._playWhenLoaded=!1,this._waitingContextSuspension?!1:this._manager.suspended?(this._manager.once("resume",this._playAudioImmediate,this),this._waitingContextSuspension=!0,!1):(this._playAudioImmediate(),!0)}_playAudioImmediate(){if(this._waitingContextSuspension=!1,this._state!==Yt)return;this.source||this._createSource();let e=Qt(this._startOffset,this.duration);e=Qt(this._startTime+e,this._sound.duration),this._startOffset=null,this._duration?this.source.start(0,e,this._duration):this.source.start(0,e),this._startedAt=this._manager.context.currentTime,this._currentTime=0,this._currentOffset=e,this.volume=this._volume,this.loop=this._loop,this.pitch=this._pitch,this._manager.on("volumechange",this._onManagerVolumeChange,this),this._manager.on("suspend",this._onManagerSuspend,this),this._manager.on("resume",this._onManagerResume,this),this._manager.on("destroy",this._onManagerDestroy,this),this._suspendInstanceEvents||this._onPlay()}pause(){return this._playWhenLoaded=!1,this._state!==Yt?!1:(this._state=on,this._waitingContextSuspension||(this._updateCurrentTime(),this._suspendEndEvent++,this.source.stop(0),this.source=null,this._startOffset=null,this._suspendInstanceEvents||this._onPause()),!0)}resume(){if(this._state!==on)return!1;let e=this.currentTime;return this._state=Yt,this._waitingContextSuspension||(this.source||this._createSource(),this._startOffset!==null&&(e=Qt(this._startOffset,this.duration),e=Qt(this._startTime+e,this._sound.duration),this._startOffset=null),this._duration?this.source.start(0,e,this._duration):this.source.start(0,e),this._startedAt=this._manager.context.currentTime,this._currentOffset=e,this.volume=this._volume,this.loop=this._loop,this.pitch=this._pitch,this._playWhenLoaded=!1,this._suspendInstanceEvents||this._onResume()),!0}stop(){if(this._playWhenLoaded=!1,this._state===Vs)return!1;const e=this._state===Yt;return this._state=Vs,this._waitingContextSuspension||(this._manager.off("volumechange",this._onManagerVolumeChange,this),this._manager.off("suspend",this._onManagerSuspend,this),this._manager.off("resume",this._onManagerResume,this),this._manager.off("destroy",this._onManagerDestroy,this),this._startedAt=0,this._currentTime=0,this._currentOffset=0,this._startOffset=null,this._suspendEndEvent++,e&&this.source&&this.source.stop(0),this.source=null,this._suspendInstanceEvents||this._onStop()),!0}setExternalNodes(e,s){if(!e){console.error("The firstNode must be a valid Audio Node");return}s||(s=e);const i=this._manager.context.destination;this._firstNode!==e&&(this._firstNode?this._connectorNode.disconnect(this._firstNode):this._connectorNode.disconnect(i),this._firstNode=e,this._connectorNode.connect(e)),this._lastNode!==s&&(this._lastNode&&this._lastNode.disconnect(i),this._lastNode=s,this._lastNode.connect(i))}clearExternalNodes(){const e=this._manager.context.destination;this._firstNode&&(this._connectorNode.disconnect(this._firstNode),this._firstNode=null),this._lastNode&&(this._lastNode.disconnect(e),this._lastNode=null),this._connectorNode.connect(e)}getExternalNodes(){return[this._firstNode,this._lastNode]}_createSource(){if(!this._sound)return null;const e=this._manager.context;return this._sound.buffer&&(this.source=e.createBufferSource(),this.source.buffer=this._sound.buffer,this.source.connect(this._inputNode),this.source.onended=this._endedHandler,this.source.loopStart=Qt(this._startTime,this.source.buffer.duration),this._duration&&(this.source.loopEnd=Math.max(this.source.loopStart,Qt(this._startTime+this._duration,this.source.buffer.duration)))),this.source}_updateCurrentTime(){this._currentTime=Qt((this._manager.context.currentTime-this._startedAt)*this._pitch+this._currentOffset,this.duration)}_onManagerDestroy(){this.source&&this._state===Yt&&(this.source.stop(0),this.source=null)}}h(As,"EVENT_PLAY","play"),h(As,"EVENT_PAUSE","pause"),h(As,"EVENT_RESUME","resume"),h(As,"EVENT_STOP","stop"),h(As,"EVENT_END","end");vl()||(Object.assign(As.prototype,{play:function(){return this._state!==Vs&&this.stop(),!this.source&&!this._createSource()?!1:(this.volume=this._volume,this.pitch=this._pitch,this.loop=this._loop,this.source.play(),this._state=Yt,this._playWhenLoaded=!1,this._manager.on("volumechange",this._onManagerVolumeChange,this),this._manager.on("suspend",this._onManagerSuspend,this),this._manager.on("resume",this._onManagerResume,this),this._manager.on("destroy",this._onManagerDestroy,this),this._manager.suspended&&this._onManagerSuspend(),this._suspendInstanceEvents||this._onPlay(),!0)},pause:function(){return!this.source||this._state!==Yt?!1:(this._suspendEndEvent++,this.source.pause(),this._playWhenLoaded=!1,this._state=on,this._startOffset=null,this._suspendInstanceEvents||this._onPause(),!0)},resume:function(){return!this.source||this._state!==on?!1:(this._state=Yt,this._playWhenLoaded=!1,this.source.paused&&(this.source.play(),this._suspendInstanceEvents||this._onResume()),!0)},stop:function(){return!this.source||this._state===Vs?!1:(this._manager.off("volumechange",this._onManagerVolumeChange,this),this._manager.off("suspend",this._onManagerSuspend,this),this._manager.off("resume",this._onManagerResume,this),this._manager.off("destroy",this._onManagerDestroy,this),this._suspendEndEvent++,this.source.pause(),this._playWhenLoaded=!1,this._state=Vs,this._startOffset=null,this._suspendInstanceEvents||this._onStop(),!0)},setExternalNodes:function(){},clearExternalNodes:function(){},getExternalNodes:function(){return[null,null]},_onLoadedMetadata:function(){this.source.removeEventListener("loadedmetadata",this._loadedMetadataHandler),this._isReady=!0;let l=Qt(this._startOffset,this.duration);l=Qt(this._startTime+l,this._sound.duration),this._startOffset=null,this.source.currentTime=l},_createSource:function(){return this._sound&&this._sound.audio&&(this._isReady=!1,this.source=this._sound.audio.cloneNode(!0),this.source.addEventListener("loadedmetadata",this._loadedMetadataHandler),this.source.addEventListener("timeupdate",this._timeUpdateHandler),this.source.onended=this._endedHandler),this.source},_onTimeUpdate:function(){this._duration&&this.source.currentTime>Qt(this._startTime+this._duration,this.source.duration)&&(this.loop?this.source.currentTime=Qt(this._startTime,this.source.duration):(this.source.removeEventListener("timeupdate",this._timeUpdateHandler),this.source.pause(),this._onEnded()))},_onManagerDestroy:function(){this.source&&this.source.pause()}}),Object.defineProperty(As.prototype,"volume",{get:function(){return this._volume},set:function(l){l=Y.clamp(l,0,1),this._volume=l,this.source&&(this.source.volume=l*this._manager.volume)}}),Object.defineProperty(As.prototype,"pitch",{get:function(){return this._pitch},set:function(l){this._pitch=Math.max(Number(l)||0,.01),this.source&&(this.source.playbackRate=this._pitch)}}),Object.defineProperty(As.prototype,"sound",{get:function(){return this._sound},set:function(l){this.stop(),this._sound=l}}),Object.defineProperty(As.prototype,"currentTime",{get:function(){return this._startOffset!==null?this._startOffset:this._state===Vs||!this.source?0:this.source.currentTime-this._startTime},set:function(l){l<0||(this._startOffset=l,this.source&&this._isReady&&(this.source.currentTime=Qt(this._startTime+Qt(l,this.duration),this._sound.duration),this._startOffset=null))}}));const GT=1e4;class Za extends As{constructor(e,s,i={}){super(e,s,i);h(this,"_position",new A);h(this,"_velocity",new A);i.position&&(this.position=i.position),this.maxDistance=i.maxDistance!==void 0?Number(i.maxDistance):GT,this.refDistance=i.refDistance!==void 0?Number(i.refDistance):1,this.rollOffFactor=i.rollOffFactor!==void 0?Number(i.rollOffFactor):1,this.distanceModel=i.distanceModel!==void 0?i.distanceModel:up}_initializeNodes(){this.gain=this._manager.context.createGain(),this.panner=this._manager.context.createPanner(),this.panner.connect(this.gain),this._inputNode=this.panner,this._connectorNode=this.gain,this._connectorNode.connect(this._manager.context.destination)}set position(e){this._position.copy(e);const s=this.panner;"positionX"in s?(s.positionX.value=e.x,s.positionY.value=e.y,s.positionZ.value=e.z):s.setPosition&&s.setPosition(e.x,e.y,e.z)}get position(){return this._position}set velocity(e){y.warn("SoundInstance3d#velocity is not implemented."),this._velocity.copy(e)}get velocity(){return y.warn("SoundInstance3d#velocity is not implemented."),this._velocity}set maxDistance(e){this.panner.maxDistance=e}get maxDistance(){return this.panner.maxDistance}set refDistance(e){this.panner.refDistance=e}get refDistance(){return this.panner.refDistance}set rollOffFactor(e){this.panner.rolloffFactor=e}get rollOffFactor(){return this.panner.rolloffFactor}set distanceModel(e){this.panner.distanceModel=e}get distanceModel(){return this.panner.distanceModel}}if(!vl()){let l=new A;const t=function(e,s,i,r,a,n){l=l.sub2(e,s);const o=l.length();if(o<i)return 1;if(o>r)return 0;let c=0;return n===up?c=1-a*(o-i)/(r-i):n===kT?c=i/(i+a*(o-i)):n===UT&&(c=Math.pow(o/i,-a)),Y.clamp(c,0,1)};Object.defineProperty(Za.prototype,"position",{get:function(){return this._position},set:function(e){if(this._position.copy(e),this.source){const i=this._manager.listener.getPosition(),r=t(i,this._position,this.refDistance,this.maxDistance,this.rollOffFactor,this.distanceModel),a=this.volume;this.source.volume=a*r*this._manager.volume}}}),Object.defineProperty(Za.prototype,"maxDistance",{get:function(){return this._maxDistance},set:function(e){this._maxDistance=e}}),Object.defineProperty(Za.prototype,"refDistance",{get:function(){return this._refDistance},set:function(e){this._refDistance=e}}),Object.defineProperty(Za.prototype,"rollOffFactor",{get:function(){return this._rollOffFactor},set:function(e){this._rollOffFactor=e}}),Object.defineProperty(Za.prototype,"distanceModel",{get:function(){return this._distanceModel},set:function(e){this._distanceModel=e}})}const pp=0,mp=1,Ks=2,Cs=3,Nn=4,_p=5,id=6,gp=7,Sp=8,yp=9,vp=10,ry={[pp]:"SUBTRACTIVE",[mp]:"ADDITIVE",[Ks]:"NORMAL",[Cs]:"NONE",[Nn]:"PREMULTIPLIED",[_p]:"MULTIPLICATIVE",[id]:"ADDITIVEALPHA",[gp]:"MULTIPLICATIVE2X",[Sp]:"SCREEN",[yp]:"MIN",[vp]:"MAX"},Hn="none",HT="linear",WT=0,xp=2,$T={[WT]:"NONE",[xp]:"SCHLICK"},XT=0,ay=15,tr=0,us=1,Tp=2,wp=3,xl=4,ve=0,Ke=1,Ze=2,Nm={[ve]:"DIRECTIONAL",[Ke]:"OMNI",[Ze]:"SPOT"},Eh=100,qs=0,ny=1,oy=2,ly=3,qT={[qs]:"PUNCTUAL",[ny]:"RECT",[oy]:"DISK",[ly]:"SPHERE"},Ep=0,hy=1,jT={[Ep]:"LINEAR",[hy]:"INVERSESQUARED"},Hs=0,Lf=2,bp=3,YT=4,cy=5,Yo=6,dy=7,fy=8,KT=9,ji=new Map([[cy,{name:"PCF1_32F",kind:"PCF1",format:Xi,pcf:!0}],[Hs,{name:"PCF3_32F",kind:"PCF3",format:Xi,pcf:!0}],[YT,{name:"PCF5_32F",kind:"PCF5",format:Xi,pcf:!0}],[dy,{name:"PCF1_16F",kind:"PCF1",format:mn,pcf:!0}],[fy,{name:"PCF3_16F",kind:"PCF3",format:mn,pcf:!0}],[KT,{name:"PCF5_16F",kind:"PCF5",format:mn,pcf:!0}],[Lf,{name:"VSM_16F",kind:"VSM",format:nt,vsm:!0}],[bp,{name:"VSM_32F",kind:"VSM",format:$t,vsm:!0}],[Yo,{name:"PCSS_32F",kind:"PCSS",format:er,pcss:!0}]]),ZT=255,Ap=1,Rf=0,uy=0,ai=0,QT=1,Qh=0,JT=1,ni=0,yn=1,ln=0,Wr=1,Vl=2,Cp=0,py=1,ew={[Cp]:"NONE",[py]:"BOX"},km="mul",Tl=0,bh=1,tw={[Tl]:"NONE",[bh]:"SRGB"},Pp=0,kk=1,Uk=2,Bk=3,zk=4,Vk=5,my=6,_y=["LINEAR","FILMIC","HEJL","ACES","ACES2","NEUTRAL","NONE"],gy=0,rd=1,Sy=2,sw={[gy]:"NONE",[rd]:"AO",[Sy]:"GLOSSDEPENDENT"},yr="none",Jh="envAtlas",ec="envAtlasHQ",tc="cubeMap",yy="sphereMap",iw={[yr]:"NONE",[Jh]:"ENVATLAS",[ec]:"ENVATLASHQ",[tc]:"CUBEMAP",[yy]:"SPHEREMAP"},Dp="ambientSH",Ip="envAtlas",Mp="constant",rw={[Dp]:"AMBIENTSH",[Ip]:"ENVALATLAS",[Mp]:"CONSTANT"},sc=1,Ko=2,Lp=4,vy=8,xy=16,Zo=32,Of=64,Ty=128,ic=256,Rp=512,Qo=1024,Jo=2048,wy=4096,el=8192,Ah=16384,Ps=0,vr=1,Op=2,gs=1,di=2,fi=4,Ea=0,wl=1,Fp=2,Wn=3,hi=0,At=1,Ct=2,aw={[hi]:"SIMPLE",[At]:"SLICED",[Ct]:"TILED"},Ch=1,Gl=0,Ph=0,nw=1,ow=2,Um=3,lw=4,hw=5,Np=0,Ff=1,Ee=0,je=1,Do="infinite",cw="box",dw="dome",_a="none",fw="bayer8",uw="bluenoise",pw="ignnoise",mw={[_a]:"NONE",[fw]:"BAYER8",[uw]:"BLUENOISE",[pw]:"IGNNOISE"},_w="prerender",gw="postrender",Sw="prerender:layer",yw="postrender:layer",Ey="precull",by="postcull",vw="cull:end";class ad{constructor(t,e,s){h(this,"uniformFormats",[]);h(this,"bindGroupFormats",[]);h(this,"vertexFormat");this.uniformFormats[jo]=t,this.bindGroupFormats[jo]=e,this.vertexFormat=s}hasUniform(t){for(let e=0;e<this.uniformFormats.length;e++){const s=this.uniformFormats[e];if(s!=null&&s.get(t))return!0}return!1}hasTexture(t){for(let e=0;e<this.bindGroupFormats.length;e++){const s=this.bindGroupFormats[e];if(s!=null&&s.getTexture(t))return!0}return!1}getVertexElement(t){var e;return(e=this.vertexFormat)==null?void 0:e.elements.find(s=>s.name===t)}generateKey(t){var s;let e=JSON.stringify(this.uniformFormats)+JSON.stringify(this.bindGroupFormats);return t.isWebGPU&&(e+=(s=this.vertexFormat)==null?void 0:s.shaderProcessingHashString),e}}const Ay=new jt;function kn(l){const t=Ay.get(l);return y.assert(t),t}function xw(l,t){y.assert(t),Ay.get(l,()=>t)}class ga{static definesHash(t){const e=Array.from(t).sort((s,i)=>s[0]>i[0]?1:-1);return ci(JSON.stringify(e))}}const Tw=new jt;class ww{constructor(t,e,s={}){h(this,"index");h(this,"name");h(this,"defines",new Map);y.assert(/^[a-z]\w*$/i.test(t),`ShaderPass name can only contain letters, numbers and underscores and start with a letter: ${t}`),this.name=t,this.index=e,Object.assign(this,s),this.buildShaderDefines()}buildShaderDefines(){let t;this.isShadow?t="SHADOW":this.isForward?t="FORWARD":this.index===Wn&&(t="PICK"),this.defines.set(`${t}_PASS`,""),this.defines.set(`${this.name.toUpperCase()}_PASS`,"")}}class Si{constructor(){h(this,"passesNamed",new Map);h(this,"passesIndexed",[]);h(this,"nextIndex",0);const t=(e,s,i)=>{const r=this.allocate(e,i);y.assert(r.index===s)};t("forward",Ea,{isForward:!0}),t("prepass",wl),t("shadow",Fp),t("pick",Wn)}static get(t){return y.assert(t),Tw.get(t,()=>new Si)}allocate(t,e){let s=this.passesNamed.get(t);return s===void 0&&(s=new ww(t,this.nextIndex,e),this.passesNamed.set(s.name,s),this.passesIndexed[s.index]=s,this.nextIndex++),s}getByIndex(t){const e=this.passesIndexed[t];return y.assert(e),e}getByName(t){return this.passesNamed.get(t)}}class Bm extends Map{constructor(){super(...arguments);h(this,"_keyDirty",!1);h(this,"_key","")}set(e,s){return(!this.has(e)||this.get(e)!==s)&&this.markDirty(),super.set(e,s)}add(e){for(const[s,i]of Object.entries(e))this.set(s,i);return this}delete(e){const s=this.has(e),i=super.delete(e);return s&&i&&this.markDirty(),i}clear(){this.size>0&&this.markDirty(),super.clear()}markDirty(){this._dirty=!0,this._keyDirty=!0}isDirty(){return this._dirty}resetDirty(){this._dirty=!1}get key(){return this._keyDirty&&(this._keyDirty=!1,this._key=Array.from(this.entries()).sort(([e],[s])=>e<s?-1:e>s?1:0).map(([e,s])=>`${e}=${ci(s)}`).join(",")),this._key}copy(e){this.clear();for(const[s,i]of e)this.set(s,i);return this}}const Ew=new jt;class be{constructor(){h(this,"glsl",new Bm);h(this,"wgsl",new Bm);h(this,"version","")}static get(t,e=Oe){const s=Ew.get(t,()=>new be);return e===Oe?s.glsl:s.wgsl}get useWGSL(){return this.glsl.size===0||this.wgsl.size>0}get key(){return`GLSL:${this.glsl.key}|WGSL:${this.wgsl.key}|API:${this.version}`}isDirty(){return this.glsl.isDirty()||this.wgsl.isDirty()}resetDirty(){this.glsl.resetDirty(),this.wgsl.resetDirty()}copy(t){return this.version=t.version,this.glsl.copy(t.glsl),this.wgsl.copy(t.wgsl),this}}class rc{static merge(...t){const e=new Map(t[0]??[]);for(let s=1;s<t.length;s++){const i=t[s];if(i)for(const[r,a]of i)e.set(r,a)}return e}}class bw extends ga{constructor(t,e){super(),this.key=t,this.shaderDefinition=e}generateKey(t){return this.key}createShaderDefinition(t,e){return this.shaderDefinition}}class Wt{static createShader(t,e){const s=kn(t);let i=s.getCachedShader(e.uniqueName);if(!i){const r=t.isWebGPU&&(!!e.vertexWGSL||!!e.vertexChunk)&&(!!e.fragmentWGSL||!!e.fragmentChunk),a=be.get(t,r?it:Oe),n=e.vertexChunk?a.get(e.vertexChunk):r?e.vertexWGSL:e.vertexGLSL,o=e.fragmentChunk?a.get(e.fragmentChunk):r?e.fragmentWGSL:e.fragmentGLSL;y.assert(n,"ShaderUtils.createShader: vertex shader code not provided",e),y.assert(o,"ShaderUtils.createShader: fragment shader code not provided",e);const c=rc.merge(a,e.fragmentIncludes),d=rc.merge(a,e.vertexIncludes);i=new sy(t,Zt.createDefinition(t,{name:e.uniqueName,shaderLanguage:r?it:Oe,attributes:e.attributes,vertexCode:n,fragmentCode:o,useTransformFeedback:e.useTransformFeedback,vertexIncludes:d,vertexDefines:e.vertexDefines,fragmentIncludes:c,fragmentDefines:e.fragmentDefines,fragmentOutputTypes:e.fragmentOutputTypes})),s.setCachedShader(e.uniqueName,i)}return i}static getCoreDefines(t,e){const s=new Map(t.defines);return e.cameraShaderParams.defines.forEach((r,a)=>s.set(a,r)),Si.get(e.device).getByIndex(e.pass).defines.forEach((r,a)=>s.set(a,r)),s}static processShader(t,e){y.assert(t);const s=t.definition,r=`${s.name??"shader"}-id-${t.id}`,a=new bw(r,s),n="shader",o=kn(t.device);y.assert(!o.isRegistered(n)),o.register(n,a);const c=o.getProgram(n,{},e);return o.unregister(n),c}static addScreenDepthChunkDefines(t,e,s){e.sceneDepthMapLinear&&s.set("SCENE_DEPTHMAP_LINEAR",""),t.textureFloatRenderable&&s.set("SCENE_DEPTHMAP_FLOAT","")}}const Aw={type:wr,base:0,baseVertex:0,count:4,indexed:!1},Zn=new oe,Qn=new oe,Td=new XS;class ac{constructor(t){h(this,"uniformBuffer");h(this,"bindGroup");const e=t.device;if(this.shader=t,y.assert(t),e.supportsUniformBuffers){const s=new ad;this.shader=Wt.processShader(t,s);const i=this.shader.meshUniformBufferFormat;i&&(this.uniformBuffer=new fp(e,i,!1));const r=this.shader.meshBindGroupFormat;y.assert(r),this.bindGroup=new cp(e,r),Ta.setName(this.bindGroup,`QuadRender-MeshBindGroup_${this.bindGroup.id}`)}}destroy(){var t,e;(t=this.uniformBuffer)==null||t.destroy(),this.uniformBuffer=null,(e=this.bindGroup)==null||e.destroy(),this.bindGroup=null}render(t,e){const s=this.shader.device;Z.pushGpuMarker(s,"QuadRender"),t&&(Zn.set(s.vx,s.vy,s.vw,s.vh),Qn.set(s.sx,s.sy,s.sw,s.sh),e=e??t,s.setViewport(t.x,t.y,t.z,t.w),s.setScissor(e.x,e.y,e.z,e.w)),s.setVertexBuffer(s.quadVertexBuffer,0);const i=this.shader;if(s.setShader(i),s.supportsUniformBuffers){s.setBindGroup(jo,s.emptyBindGroup);const r=this.bindGroup;r.update(),s.setBindGroup(HS,r);const a=this.uniformBuffer;a?(a.update(Td),s.setBindGroup(Df,Td.bindGroup,Td.offsets)):s.setBindGroup(Df,s.emptyBindGroup)}s.draw(Aw),t&&(s.setViewport(Zn.x,Zn.y,Zn.z,Zn.w),s.setScissor(Qn.x,Qn.y,Qn.z,Qn.w)),Z.popGpuMarker(s)}}class Cw extends Ss{constructor(t,e,s,i){super(t),this.quad=e,this.rect=s,this.scissorRect=i}execute(){const{device:t}=this;Z.pushGpuMarker(t,`${this.name}:${this.quad.shader.name}`),t.setCullMode(wt),t.setDepthState(qt.NODEPTH),t.setStencilState(null,null),this.quad.render(this.rect,this.scissorRect),Z.popGpuMarker(t)}}const Pw=new oe;function br(l,t,e,s,i){y.assert(t!==void 0);const r=arguments[5];y.call(()=>{r!==void 0&&y.warnOnce("pc.drawQuadWithShader no longer accepts useBlend parameter, and blending state needs to be set up using GraphicsDevice.setBlendState.")});const a=new ac(e);s||(s=Pw,s.x=0,s.y=0,s.z=t?t.width:l.width,s.w=t?t.height:l.height);const n=new Cw(l,a,s,i);n.init(t),n.colorOps.clear=!1,n.depthStencilOps.clearDepth=!1,l.isWebGPU&&t===null&&l.samples>1&&(n.colorOps.store=!0),n.render(),a.destroy()}class zm{constructor(t,e,s){h(this,"_aabb",new Me);h(this,"origMeshInstances");h(this,"meshInstance",null);h(this,"dynamic");h(this,"batchGroupId");this.origMeshInstances=t,this.dynamic=e,this.batchGroupId=s}destroy(t,e){this.meshInstance&&(this.removeFromLayers(t,e),this.meshInstance.destroy(),this.meshInstance=null)}addToLayers(t,e){for(let s=0;s<e.length;s++){const i=t.layers.getLayerById(e[s]);i&&i.addMeshInstances([this.meshInstance])}}removeFromLayers(t,e){for(let s=0;s<e.length;s++){const i=t.layers.getLayerById(e[s]);i&&i.removeMeshInstances([this.meshInstance])}}updateBoundingBox(){this._aabb.copy(this.origMeshInstances[0].aabb);for(let t=1;t<this.origMeshInstances.length;t++)this._aabb.add(this.origMeshInstances[t].aabb);this.meshInstance.aabb=this._aabb,this.meshInstance._aabbVer=0}get model(){y.removed("pc.Batch#model was removed. Use pc.Batch#meshInstance to access batched mesh instead.")}}class gt{constructor(t,e,s,i,r=[tr]){h(this,"_ui",!1);h(this,"_sprite",!1);h(this,"_obj",{model:[],element:[],sprite:[],render:[]});h(this,"id");h(this,"name");h(this,"dynamic");h(this,"maxAabbSize");h(this,"layers");this.id=t,this.name=e,this.dynamic=s,this.maxAabbSize=i,this.layers=r}}h(gt,"MODEL","model"),h(gt,"ELEMENT","element"),h(gt,"SPRITE","sprite"),h(gt,"RENDER","render");const Vm=new ie;class El{constructor(t){h(this,"bones");this._dirty=!0,this._rootBone=null,this._skinUpdateIndex=-1,this._updateBeforeCull=!0,t&&this.initSkin(t)}set rootBone(t){this._rootBone=t}get rootBone(){return this._rootBone}init(t,e){const s=e*3;let i=Math.ceil(Math.sqrt(s));i=Y.roundUp(i,3);const r=Math.ceil(s/i);this.boneTexture=new ge(t,{width:i,height:r,format:$t,mipmaps:!1,minFilter:Te,magFilter:Te,name:"skin"}),this.matrixPalette=this.boneTexture.lock({mode:PS}),this.boneTexture.unlock()}destroy(){this.boneTexture&&(this.boneTexture.destroy(),this.boneTexture=null)}resolve(t,e){this.rootBone=t;const s=this.skin,i=[];for(let r=0;r<s.boneNames.length;r++){const a=s.boneNames[r];let n=t.findByName(a);n||(y.error(`Failed to find bone [${a}] in the entity hierarchy, RenderComponent on ${e.name}, rootBone: ${t.name}`),n=e),i.push(n)}this.bones=i}initSkin(t){this.skin=t,this.bones=[];const e=t.inverseBindPose.length;this.init(t.device,e),this.matrices=[];for(let s=0;s<e;s++)this.matrices[s]=new ie}uploadBones(t){this.boneTexture.upload()}_updateMatrices(t,e){if(this._skinUpdateIndex!==e){this._skinUpdateIndex=e,Vm.copy(t.getWorldTransform()).invert();for(let s=this.bones.length-1;s>=0;s--)this.matrices[s].mulAffine2(Vm,this.bones[s].getWorldTransform()),this.matrices[s].mulAffine2(this.matrices[s],this.skin.inverseBindPose[s])}}updateMatrices(t,e){this._updateBeforeCull&&this._updateMatrices(t,e)}updateMatrixPalette(t,e){this._updateMatrices(t,e);const s=this.matrixPalette,i=this.bones.length;for(let r=0;r<i;r++){const a=this.matrices[r].data,n=r*12;s[n]=a[0],s[n+1]=a[4],s[n+2]=a[8],s[n+3]=a[12],s[n+4]=a[1],s[n+5]=a[5],s[n+6]=a[9],s[n+7]=a[13],s[n+8]=a[2],s[n+9]=a[6],s[n+10]=a[10],s[n+11]=a[14]}this.uploadBones(this.skin.device)}}class Gm extends El{constructor(t,e,s){super();const i=e.length;this.init(t,i),this.device=t,this.rootNode=s,this.bones=e}updateMatrices(t,e){}updateMatrixPalette(t,e){const s=this.matrixPalette,i=this.bones.length;for(let r=0;r<i;r++){const a=this.bones[r].getWorldTransform().data,n=r*12;s[n]=a[0],s[n+1]=a[4],s[n+2]=a[8],s[n+3]=a[12],s[n+4]=a[1],s[n+5]=a[5],s[n+6]=a[9],s[n+7]=a[13],s[n+8]=a[2],s[n+9]=a[6],s[n+10]=a[10],s[n+11]=a[14]}this.uploadBones(this.device)}}let Dw=0;class oi{constructor(){this.initDefaults()}initDefaults(){this.recreate=!1,this.verticesUsage=ps,this.indicesUsage=ps,this.maxVertices=0,this.maxIndices=0,this.vertexCount=0,this.indexCount=0,this.vertexStreamsUpdated=!1,this.indexStreamUpdated=!1,this.vertexStreamDictionary={},this.indices=null}_changeVertexCount(t,e){this.vertexCount?y.assert(this.vertexCount===t,`Vertex stream ${e} has ${t} vertices, which does not match already set streams with ${this.vertexCount} vertices.`):this.vertexCount=t}}h(oi,"DEFAULT_COMPONENTS_POSITION",3),h(oi,"DEFAULT_COMPONENTS_NORMAL",3),h(oi,"DEFAULT_COMPONENTS_UV",2),h(oi,"DEFAULT_COMPONENTS_COLORS",4);class Iw{constructor(t,e,s,i,r){this.data=t,this.componentCount=e,this.dataType=s,this.dataTypeNormalize=i,this.asInt=r}}class Ve extends sd{constructor(e,s){super();h(this,"indexBuffer",[null]);h(this,"vertexBuffer",null);h(this,"primitive",[{type:0,base:0,baseVertex:0,count:0}]);h(this,"skin",null);h(this,"boneAabb",null);h(this,"_aabbVer",0);h(this,"_aabb",new Me);h(this,"_geometryData",null);h(this,"_morph",null);h(this,"_storageIndex",!1);h(this,"_storageVertex",!1);this.id=Dw++,y.assert(e,"Mesh constructor takes a GraphicsDevice as a parameter, and it was not provided."),this.device=e,this._storageIndex=(s==null?void 0:s.storageIndex)||!1,this._storageVertex=(s==null?void 0:s.storageVertex)||!1}static fromGeometry(e,s,i={}){const r=new Ve(e,i),{positions:a,normals:n,tangents:o,colors:c,uvs:d,uvs1:f,blendIndices:u,blendWeights:p,indices:m}=s;return a&&r.setPositions(a),n&&r.setNormals(n),o&&r.setVertexStream(yi,o,4),c&&r.setColors32(c),d&&r.setUvs(0,d),f&&r.setUvs(1,f),u&&r.setVertexStream(fs,u,4,u.length/4,na),p&&r.setVertexStream(gi,p,4),m&&r.setIndices(m),r.update(),r}set morph(e){e!==this._morph&&(this._morph&&this._morph.decRefCount(),this._morph=e,e&&e.incRefCount())}get morph(){return this._morph}set aabb(e){this._aabb=e,this._aabbVer++}get aabb(){return this._aabb}destroy(){const e=this.morph;e&&(this.morph=null,e.refCount<1&&e.destroy()),this.vertexBuffer&&(this.vertexBuffer.destroy(),this.vertexBuffer=null);for(let s=0;s<this.indexBuffer.length;s++)this._destroyIndexBuffer(s);this.indexBuffer.length=0,this._geometryData=null}_destroyIndexBuffer(e){this.indexBuffer[e]&&(this.indexBuffer[e].destroy(),this.indexBuffer[e]=null)}_initBoneAabbs(e){this.boneAabb=[],this.boneUsed=[];let s,i,r,a,n;const o=[],c=[],d=this.boneUsed,f=this.skin.boneNames.length;let u,p,m;for(let b=0;b<f;b++)o[b]=new A(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),c[b]=new A(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);const _=new Po(this.vertexBuffer),S=_.element[Ae],g=_.element[gi],v=_.element[fs],w=this.vertexBuffer.numVertices;for(let b=0;b<w;b++){for(let C=0;C<4;C++)if(g.array[g.index+C]>0){const T=v.array[v.index+C];if(d[T]=!0,s=S.array[S.index],i=S.array[S.index+1],r=S.array[S.index+2],a=c[T],n=o[T],n.x>s&&(n.x=s),n.y>i&&(n.y=i),n.z>r&&(n.z=r),a.x<s&&(a.x=s),a.y<i&&(a.y=i),a.z<r&&(a.z=r),e){let I=u=s,L=p=i,E=m=r;for(let F=0;F<e.length;F++){const k=e[F],H=k.deltaPositions[b*3],G=k.deltaPositions[b*3+1],W=k.deltaPositions[b*3+2];H<0?I+=H:u+=H,G<0?L+=G:p+=G,W<0?E+=W:m+=W}n.x>I&&(n.x=I),n.y>L&&(n.y=L),n.z>E&&(n.z=E),a.x<u&&(a.x=u),a.y<p&&(a.y=p),a.z<m&&(a.z=m)}}_.next()}const x=this.vertexBuffer.getFormat().elements.find(b=>b.name===Ae);if(x&&x.normalize){const b=(()=>{switch(x.dataType){case Wc:return C=>Math.max(C/127,-1);case na:return C=>C/255;case $c:return C=>Math.max(C/32767,-1);case yl:return C=>C/65535;default:return C=>C}})();for(let C=0;C<f;C++)if(d[C]){const D=o[C],T=c[C];D.set(b(D.x),b(D.y),b(D.z)),T.set(b(T.x),b(T.y),b(T.z))}}for(let b=0;b<f;b++){const C=new Me;C.setMinMax(o[b],c[b]),this.boneAabb.push(C)}}_initGeometryData(){this._geometryData||(this._geometryData=new oi,this.vertexBuffer&&(this._geometryData.vertexCount=this.vertexBuffer.numVertices,this._geometryData.maxVertices=this.vertexBuffer.numVertices),this.indexBuffer.length>0&&this.indexBuffer[0]&&(this._geometryData.indexCount=this.indexBuffer[0].numIndices,this._geometryData.maxIndices=this.indexBuffer[0].numIndices))}clear(e,s,i=0,r=0){this._initGeometryData(),this._geometryData.initDefaults(),this._geometryData.recreate=!0,this._geometryData.maxVertices=i,this._geometryData.maxIndices=r,this._geometryData.verticesUsage=e?ps:Vh,this._geometryData.indicesUsage=s?ps:Vh}setVertexStream(e,s,i,r,a=ze,n=!1,o=!1){this._initGeometryData();const c=r||s.length/i;this._geometryData._changeVertexCount(c,e),this._geometryData.vertexStreamsUpdated=!0,this._geometryData.vertexStreamDictionary[e]=new Iw(s,i,a,n,o)}getVertexStream(e,s){let i=0,r=!1;if(this._geometryData){const a=this._geometryData.vertexStreamDictionary[e];a&&(r=!0,i=this._geometryData.vertexCount,ArrayBuffer.isView(s)?s.set(a.data):(s.length=0,s.push(a.data)))}return r||this.vertexBuffer&&(i=new Po(this.vertexBuffer).readData(e,s)),i}setPositions(e,s=oi.DEFAULT_COMPONENTS_POSITION,i){this.setVertexStream(Ae,e,s,i,ze,!1)}setNormals(e,s=oi.DEFAULT_COMPONENTS_NORMAL,i){this.setVertexStream(_s,e,s,i,ze,!1)}setUvs(e,s,i=oi.DEFAULT_COMPONENTS_UV,r){this.setVertexStream(cm+e,s,i,r,ze,!1)}setColors(e,s=oi.DEFAULT_COMPONENTS_COLORS,i){this.setVertexStream(Ht,e,s,i,ze,!1)}setColors32(e,s){this.setVertexStream(Ht,e,oi.DEFAULT_COMPONENTS_COLORS,s,na,!0)}setIndices(e,s){this._initGeometryData(),this._geometryData.indexStreamUpdated=!0,this._geometryData.indices=e,this._geometryData.indexCount=s||e.length}getPositions(e){return this.getVertexStream(Ae,e)}getNormals(e){return this.getVertexStream(_s,e)}getUvs(e,s){return this.getVertexStream(cm+e,s)}getColors(e){return this.getVertexStream(Ht,e)}getIndices(e){let s=0;if(this._geometryData&&this._geometryData.indices){const i=this._geometryData.indices;if(s=this._geometryData.indexCount,ArrayBuffer.isView(e))e.set(i);else{e.length=0;for(let r=0,a=i.length;r<a;r++)e.push(i[r])}}else this.indexBuffer.length>0&&this.indexBuffer[0]&&(s=this.indexBuffer[0].readData(e));return s}update(e=Xs,s=!0){if(this._geometryData){if(s){const a=this._geometryData.vertexStreamDictionary[Ae];a&&a.componentCount===3&&(this._aabb.compute(a.data,this._geometryData.vertexCount),this._aabbVer++)}let i=this._geometryData.recreate;this._geometryData.vertexCount>this._geometryData.maxVertices&&(i=!0,this._geometryData.maxVertices=this._geometryData.vertexCount),i&&this.vertexBuffer&&(this.vertexBuffer.destroy(),this.vertexBuffer=null);let r=this._geometryData.recreate;this._geometryData.indexCount>this._geometryData.maxIndices&&(r=!0,this._geometryData.maxIndices=this._geometryData.indexCount),r&&this.indexBuffer.length>0&&this.indexBuffer[0]&&(this.indexBuffer[0].destroy(),this.indexBuffer[0]=null),this._geometryData.vertexStreamsUpdated&&this._updateVertexBuffer(),this._geometryData.indexStreamUpdated&&this._updateIndexBuffer(),this.primitive[0].type=e,this.indexBuffer.length>0&&this.indexBuffer[0]?this._geometryData.indexStreamUpdated&&(this.primitive[0].count=this._geometryData.indexCount,this.primitive[0].indexed=!0):this._geometryData.vertexStreamsUpdated&&(this.primitive[0].count=this._geometryData.vertexCount,this.primitive[0].indexed=!1),this._geometryData.vertexCount=0,this._geometryData.indexCount=0,this._geometryData.vertexStreamsUpdated=!1,this._geometryData.indexStreamUpdated=!1,this._geometryData.recreate=!1,this.updateRenderStates()}}_buildVertexFormat(e){const s=[];for(const i in this._geometryData.vertexStreamDictionary){const r=this._geometryData.vertexStreamDictionary[i];s.push({semantic:i,components:r.componentCount,type:r.dataType,normalize:r.dataTypeNormalize,asInt:r.asInt})}return new Nt(this.device,s,e)}_updateVertexBuffer(){if(!this.vertexBuffer){const i=this._geometryData.maxVertices,r=this._buildVertexFormat(i);this.vertexBuffer=new Is(this.device,r,i,{usage:this._geometryData.verticesUsage,storage:this._storageVertex})}const e=new Po(this.vertexBuffer),s=this._geometryData.vertexCount;for(const i in this._geometryData.vertexStreamDictionary){const r=this._geometryData.vertexStreamDictionary[i];e.writeData(i,r.data,s),delete this._geometryData.vertexStreamDictionary[i]}e.end()}_updateIndexBuffer(){if(this.indexBuffer.length<=0||!this.indexBuffer[0]){const s=this._geometryData.maxVertices,i=s>65535||s===0?Tr:Ki,r=this._storageIndex?{storage:!0}:void 0;this.indexBuffer[0]=new Er(this.device,i,this._geometryData.maxIndices,this._geometryData.indicesUsage,void 0,r)}const e=this._geometryData.indices;e&&(this.indexBuffer[0].writeData(e,this._geometryData.indexCount),this._geometryData.indices=null)}prepareRenderState(e){e===Wr?this.generateWireframe():e===Vl&&(this.primitive[Vl]={type:Gc,base:0,baseVertex:0,count:this.vertexBuffer?this.vertexBuffer.numVertices:0,indexed:!1})}updateRenderStates(){this.primitive[Vl]&&this.prepareRenderState(Vl),this.primitive[Wr]&&this.prepareRenderState(Wr)}generateWireframe(){this._destroyIndexBuffer(Wr);const e=this.vertexBuffer.numVertices,s=[];let i;if(this.indexBuffer.length>0&&this.indexBuffer[0]){const n=[[0,1],[1,2],[2,0]],o=this.primitive[ln].base,c=this.primitive[ln].count,d=this.primitive[ln].baseVertex||0,f=this.indexBuffer[ln],u=new Zh[f.format](f.storage),p=new Set;for(let m=o;m<o+c;m+=3)for(let _=0;_<3;_++){const S=u[m+n[_][0]]+d,g=u[m+n[_][1]]+d,v=S>g?g*e+S:S*e+g;p.has(v)||(p.add(v),s.push(S,g))}i=f.format}else{for(let n=0;n<e;n+=3)s.push(n,n+1,n+1,n+2,n+2,n);i=s.length>65535?Tr:Ki}const r=new Er(this.vertexBuffer.device,i,s.length);new Zh[r.format](r.storage).set(s),r.unlock(),this.primitive[Wr]={type:Hc,base:0,baseVertex:0,count:s.length,indexed:!0},this.indexBuffer[Wr]=r}}const Hm=new ie,wd=new A,Wm=new ue,Ed=new ue,$m=new A,Xm=new A,Mw=new ie,Lw=new ue,is=new A,Jn=new ie,rs=new ue,Da=new ue,qm=new ie,bd=new A,Hl=new A;function jm(l,t){return l instanceof Function?l:e=>{let s=e[l];return s instanceof Function&&(s=s()),s===t}}function Cy(l,t){if(t(l))return l;const e=l._children,s=e.length;for(let i=0;i<s;++i){const r=Cy(e[i],t);if(r)return r}return null}class De extends Se{constructor(e="Untitled"){super();h(this,"name");h(this,"tags",new Eo(this));h(this,"localPosition",new A);h(this,"localRotation",new ue);h(this,"localScale",new A(1,1,1));h(this,"localEulerAngles",new A);h(this,"position",new A);h(this,"rotation",new ue);h(this,"eulerAngles",new A);h(this,"_scale",null);h(this,"localTransform",new ie);h(this,"_dirtyLocal",!1);h(this,"_aabbVer",0);h(this,"_frozen",!1);h(this,"worldTransform",new ie);h(this,"_dirtyWorld",!1);h(this,"_worldScaleSign",0);h(this,"_normalMatrix",new _i);h(this,"_dirtyNormal",!0);h(this,"_right",null);h(this,"_up",null);h(this,"_forward",null);h(this,"_parent",null);h(this,"_children",[]);h(this,"_graphDepth",0);h(this,"_enabled",!0);h(this,"_enabledInHierarchy",!1);h(this,"scaleCompensation",!1);this.name=e}get right(){return this._right||(this._right=new A),this.getWorldTransform().getX(this._right).normalize()}get up(){return this._up||(this._up=new A),this.getWorldTransform().getY(this._up).normalize()}get forward(){return this._forward||(this._forward=new A),this.getWorldTransform().getZ(this._forward).normalize().mulScalar(-1)}get normalMatrix(){const e=this._normalMatrix;return this._dirtyNormal&&(e.invertMat4(this.getWorldTransform()).transpose(),this._dirtyNormal=!1),e}set enabled(e){var s;this._enabled!==e&&(this._enabled=e,(e&&((s=this._parent)!=null&&s.enabled)||!e)&&this._notifyHierarchyStateChanged(this,e))}get enabled(){return this._enabled&&this._enabledInHierarchy}get parent(){return this._parent}get path(){let e=this._parent;if(!e)return"";let s=this.name;for(;e&&e._parent;)s=`${e.name}/${s}`,e=e._parent;return s}get root(){let e=this;for(;e._parent;)e=e._parent;return e}get children(){return this._children}get graphDepth(){return this._graphDepth}_notifyHierarchyStateChanged(e,s){e._onHierarchyStateChanged(s);const i=e._children;for(let r=0,a=i.length;r<a;r++)i[r]._enabled&&this._notifyHierarchyStateChanged(i[r],s)}_onHierarchyStateChanged(e){this._enabledInHierarchy=e,e&&!this._frozen&&this._unfreezeParentToRoot()}_cloneInternal(e){e.name=this.name;const s=this.tags._list;e.tags.clear();for(let i=0;i<s.length;i++)e.tags.add(s[i]);e.localPosition.copy(this.localPosition),e.localRotation.copy(this.localRotation),e.localScale.copy(this.localScale),e.localEulerAngles.copy(this.localEulerAngles),e.position.copy(this.position),e.rotation.copy(this.rotation),e.eulerAngles.copy(this.eulerAngles),e.localTransform.copy(this.localTransform),e._dirtyLocal=this._dirtyLocal,e.worldTransform.copy(this.worldTransform),e._dirtyWorld=this._dirtyWorld,e._dirtyNormal=this._dirtyNormal,e._aabbVer=this._aabbVer+1,e._enabled=this._enabled,e.scaleCompensation=this.scaleCompensation,e._enabledInHierarchy=!1}clone(){const e=new this.constructor;return this._cloneInternal(e),e}copy(e){return e._cloneInternal(this),this}destroy(){this.remove();const e=this._children;for(;e.length;){const s=e.pop();s._parent=null,s.destroy()}this.fire("destroy",this),this.off()}find(e,s){const i=[],r=jm(e,s);return this.forEach(a=>{r(a)&&i.push(a)}),i}findOne(e,s){const i=jm(e,s);return Cy(this,i)}findByTag(...e){const s=[],i=(r,a)=>{a&&r.tags.has(...e)&&s.push(r);for(let n=0;n<r._children.length;n++)i(r._children[n],!0)};return i(this,!1),s}findByName(e){return this.findOne("name",e)}findByPath(e){const s=Array.isArray(e)?e:e.split("/");let i=this;for(let r=0,a=s.length;r<a;++r)if(i=i.children.find(n=>n.name===s[r]),!i)return null;return i}forEach(e,s){e.call(s,this);const i=this._children,r=i.length;for(let a=0;a<r;++a)i[a].forEach(e,s)}isDescendantOf(e){let s=this._parent;for(;s;){if(s===e)return!0;s=s._parent}return!1}isAncestorOf(e){return e.isDescendantOf(this)}getEulerAngles(){return this.getWorldTransform().getEulerAngles(this.eulerAngles),this.eulerAngles}getLocalEulerAngles(){return this.localRotation.getEulerAngles(this.localEulerAngles),this.localEulerAngles}getLocalPosition(){return this.localPosition}getLocalRotation(){return this.localRotation}getLocalScale(){return this.localScale}getLocalTransform(){return this._dirtyLocal&&(this.localTransform.setTRS(this.localPosition,this.localRotation,this.localScale),this._dirtyLocal=!1),this.localTransform}getPosition(){return this.getWorldTransform().getTranslation(this.position),this.position}getRotation(){return this.rotation.setFromMat4(this.getWorldTransform()),this.rotation}getScale(){return this._scale||(this._scale=new A),this.getWorldTransform().getScale(this._scale)}getWorldTransform(){return!this._dirtyLocal&&!this._dirtyWorld?this.worldTransform:(this._parent&&this._parent.getWorldTransform(),this._sync(),this.worldTransform)}get worldScaleSign(){return this._worldScaleSign===0&&(this._worldScaleSign=this.getWorldTransform().scaleSign),this._worldScaleSign}remove(){var e;(e=this._parent)==null||e.removeChild(this)}reparent(e,s){this.remove(),e&&(s>=0?e.insertChild(this,s):e.addChild(this))}setLocalEulerAngles(e,s,i){this.localRotation.setFromEulerAngles(e,s,i),this._dirtyLocal||this._dirtifyLocal()}setLocalPosition(e,s,i){e instanceof A?this.localPosition.copy(e):this.localPosition.set(e,s,i),this._dirtyLocal||this._dirtifyLocal()}setLocalRotation(e,s,i,r){e instanceof ue?this.localRotation.copy(e):this.localRotation.set(e,s,i,r),this._dirtyLocal||this._dirtifyLocal()}setLocalScale(e,s,i){e instanceof A?this.localScale.copy(e):this.localScale.set(e,s,i),this._dirtyLocal||this._dirtifyLocal()}_dirtifyLocal(){this._dirtyLocal||(this._dirtyLocal=!0,this._dirtyWorld||this._dirtifyWorld())}_unfreezeParentToRoot(){let e=this._parent;for(;e;)e._frozen=!1,e=e._parent}_dirtifyWorld(){this._dirtyWorld||this._unfreezeParentToRoot(),this._dirtifyWorldInternal()}_dirtifyWorldInternal(){if(!this._dirtyWorld){this._frozen=!1,this._dirtyWorld=!0;for(let e=0;e<this._children.length;e++)this._children[e]._dirtyWorld||this._children[e]._dirtifyWorldInternal()}this._dirtyNormal=!0,this._worldScaleSign=0,this._aabbVer++}setPosition(e,s,i){e instanceof A?is.copy(e):is.set(e,s,i),this._parent===null?this.localPosition.copy(is):(Jn.copy(this._parent.getWorldTransform()).invert(),Jn.transformPoint(is,this.localPosition)),this._dirtyLocal||this._dirtifyLocal()}setRotation(e,s,i,r){if(e instanceof ue?rs.copy(e):rs.set(e,s,i,r),this._parent===null)this.localRotation.copy(rs);else{const a=this._parent.getRotation();Da.copy(a).invert(),this.localRotation.copy(Da).mul(rs)}this._dirtyLocal||this._dirtifyLocal()}setPositionAndRotation(e,s){if(this._parent===null)this.localPosition.copy(e),this.localRotation.copy(s);else{const i=this._parent.getWorldTransform();Jn.copy(i).invert(),Jn.transformPoint(e,this.localPosition),this.localRotation.setFromMat4(Jn).mul(s)}this._dirtyLocal||this._dirtifyLocal()}setEulerAngles(e,s,i){if(this.localRotation.setFromEulerAngles(e,s,i),this._parent!==null){const r=this._parent.getRotation();Da.copy(r).invert(),this.localRotation.mul2(Da,this.localRotation)}this._dirtyLocal||this._dirtifyLocal()}addChild(e){this._prepareInsertChild(e),this._children.push(e),this._onInsertChild(e)}addChildAndSaveTransform(e){const s=e.getPosition(),i=e.getRotation();this._prepareInsertChild(e),e.setPosition(Mw.copy(this.worldTransform).invert().transformPoint(s)),e.setRotation(Lw.copy(this.getRotation()).invert().mul(i)),this._children.push(e),this._onInsertChild(e)}insertChild(e,s){this._prepareInsertChild(e),this._children.splice(s,0,e),this._onInsertChild(e)}_prepareInsertChild(e){e.remove(),y.assert(e!==this,`GraphNode ${e==null?void 0:e.name} cannot be a child of itself`),y.assert(!this.isDescendantOf(e),`GraphNode ${e==null?void 0:e.name} cannot add an ancestor as a child`)}_fireOnHierarchy(e,s,i){this.fire(e,i);for(let r=0;r<this._children.length;r++)this._children[r]._fireOnHierarchy(s,s,i)}_onInsertChild(e){e._parent=this;const s=e._enabled&&this.enabled;e._enabledInHierarchy!==s&&(e._enabledInHierarchy=s,e._notifyHierarchyStateChanged(e,s)),e._updateGraphDepth(),e._dirtifyWorld(),this._frozen&&e._unfreezeParentToRoot(),e._fireOnHierarchy("insert","inserthierarchy",this),this.fire&&this.fire("childinsert",e)}_updateGraphDepth(){this._graphDepth=this._parent?this._parent._graphDepth+1:0;for(let e=0,s=this._children.length;e<s;e++)this._children[e]._updateGraphDepth()}removeChild(e){const s=this._children.indexOf(e);s!==-1&&(this._children.splice(s,1),e._parent=null,e._fireOnHierarchy("remove","removehierarchy",this),this.fire("childremove",e))}_sync(){if(this._dirtyLocal&&(this.localTransform.setTRS(this.localPosition,this.localRotation,this.localScale),this._dirtyLocal=!1),this._dirtyWorld){if(this._parent===null)this.worldTransform.copy(this.localTransform);else if(this.scaleCompensation){let e;const s=this._parent;let i=this.localScale,r=s;if(r){for(;r&&r.scaleCompensation;)r=r._parent;r&&(r=r._parent,r&&(e=r.worldTransform.getScale(),$m.mul2(e,this.localScale),i=$m))}Ed.setFromMat4(s.worldTransform),Wm.mul2(Ed,this.localRotation);let a=s.worldTransform;s.scaleCompensation&&(Xm.mul2(e,s.getLocalScale()),Hm.setTRS(s.worldTransform.getTranslation(wd),Ed,Xm),a=Hm),a.transformPoint(this.localPosition,wd),this.worldTransform.setTRS(wd,Wm,i)}else this.worldTransform.mulAffine2(this._parent.worldTransform,this.localTransform);this._dirtyWorld=!1}}syncHierarchy(){if(!this._enabled||this._frozen)return;this._frozen=!0,(this._dirtyLocal||this._dirtyWorld)&&this._sync();const e=this._children;for(let s=0,i=e.length;s<i;s++)e[s].syncHierarchy()}lookAt(e,s,i,r=0,a=1,n=0){if(e instanceof A)bd.copy(e),s instanceof A?Hl.copy(s):Hl.copy(A.UP);else{if(i===void 0)return;bd.set(e,s,i),Hl.set(r,a,n)}qm.setLookAt(this.getPosition(),bd,Hl),rs.setFromMat4(qm),this.setRotation(rs)}translate(e,s,i){e instanceof A?is.copy(e):is.set(e,s,i),is.add(this.getPosition()),this.setPosition(is)}translateLocal(e,s,i){e instanceof A?is.copy(e):is.set(e,s,i),this.localRotation.transformVector(is,is),this.localPosition.add(is),this._dirtyLocal||this._dirtifyLocal()}rotate(e,s,i){if(rs.setFromEulerAngles(e,s,i),this._parent===null)this.localRotation.mul2(rs,this.localRotation);else{const r=this.getRotation(),a=this._parent.getRotation();Da.copy(a).invert(),rs.mul2(Da,rs),this.localRotation.mul2(rs,r)}this._dirtyLocal||this._dirtifyLocal()}rotateLocal(e,s,i){rs.setFromEulerAngles(e,s,i),this.localRotation.mul(rs),this._dirtyLocal||this._dirtifyLocal()}}const Py=new jt;function $n(l){const t=Py.get(l);return y.assert(t),t}function Rw(l,t){y.assert(t),Py.get(l,()=>t)}class Ow{constructor(){h(this,"cache",new Map)}destroy(){this.cache.forEach((t,e)=>{e.destroy()}),this.cache.clear()}incRef(t){const e=(this.cache.get(t)||0)+1;this.cache.set(t,e)}decRef(t){if(t){let e=this.cache.get(t);e&&(e--,e===0?(this.cache.delete(t),t.destroy()):this.cache.set(t,e))}}}class Vi{static incRef(t){this.cache.incRef(t)}static decRef(t){this.cache.decRef(t)}static destroy(){this.cache.destroy()}}h(Vi,"cache",new Ow);let Fw=0;const Nw=new Me,Wl=new Me,Ad=new Pu,Cd=new Set,Lr=new Uint32Array(4);class kw{constructor(t){h(this,"vertexBuffer",null);h(this,"_destroyVertexBuffer",!1);this.count=t}destroy(){var t;this._destroyVertexBuffer&&((t=this.vertexBuffer)==null||t.destroy()),this.vertexBuffer=null}}class Uw{constructor(){h(this,"map",new Map);h(this,"meshMetaData",new Int32Array(4))}get(t){return this.map.get(t)??this.map.get(null)}}class Bw{constructor(){h(this,"shader");h(this,"bindGroup",null);h(this,"uniformBuffer",null);h(this,"hashes")}getBindGroup(t){if(!this.bindGroup){const e=this.shader;y.assert(e);const s=e.meshBindGroupFormat;y.assert(s),this.bindGroup=new cp(t,s),Ta.setName(this.bindGroup,`MeshBindGroup_${this.bindGroup.id}`)}return this.bindGroup}getUniformBuffer(t){if(!this.uniformBuffer){const e=this.shader;y.assert(e);const s=e.meshUniformBufferFormat;y.assert(s),this.uniformBuffer=new fp(t,s,!1)}return this.uniformBuffer}destroy(){var t,e;(t=this.bindGroup)==null||t.destroy(),this.bindGroup=null,(e=this.uniformBuffer)==null||e.destroy(),this.uniformBuffer=null}}const Qr=class Qr{constructor(t,e,s=null){h(this,"castShadow",!1);h(this,"shadowCascadeMask",ZT);h(this,"cull",!0);h(this,"drawOrder",0);h(this,"_drawBucket",127);h(this,"node");h(this,"visible",!0);h(this,"visibleThisFrame",!1);h(this,"flipFacesFactor",1);h(this,"gsplatInstance",null);h(this,"id",Fw++);h(this,"isVisibleFunc",null);h(this,"instancingData",null);h(this,"indirectData",null);h(this,"parameters",{});h(this,"pick",!0);h(this,"stencilFront",null);h(this,"stencilBack",null);h(this,"transparent",!1);h(this,"_aabb",new Me);h(this,"_aabbVer",-1);h(this,"_aabbMeshVer",-1);h(this,"_customAabb",null);h(this,"_updateAabb",!0);h(this,"_updateAabbFunc",null);h(this,"_sortKeyShadow",0);h(this,"_sortKeyForward",0);h(this,"_sortKeyDynamic",0);h(this,"_layer",ay);h(this,"_material",null);h(this,"_skinInstance",null);h(this,"_morphInstance",null);h(this,"_receiveShadow",!0);h(this,"_renderStyle",ln);h(this,"_screenSpace",!1);h(this,"_shaderCache",new Map);h(this,"_shaderDefs",gs<<16);h(this,"_calculateSortDistance",null);if(y.assert(!(t instanceof De),"Incorrect parameters for MeshInstance's constructor. Use new MeshInstance(mesh, material, node)"),this.node=s,this._mesh=t,t.incRefCount(),this.material=e,t.vertexBuffer){const i=t.vertexBuffer.format;this._shaderDefs|=i.hasUv0?Lp:0,this._shaderDefs|=i.hasUv1?vy:0,this._shaderDefs|=i.hasColor?xy:0,this._shaderDefs|=i.hasTangents?Rp:0}this.updateKey()}set drawBucket(t){this._drawBucket=Math.floor(t)&255,this.updateKey()}get drawBucket(){return this._drawBucket}set renderStyle(t){this._renderStyle=t,this.mesh.prepareRenderState(t)}get renderStyle(){return this._renderStyle}set mesh(t){t!==this._mesh&&(this._mesh&&this._mesh.decRefCount(),this._mesh=t,t&&t.incRefCount())}get mesh(){return this._mesh}set aabb(t){this._aabb=t}get aabb(){if(!this._updateAabb)return this._aabb;if(this._updateAabbFunc)return this._updateAabbFunc(this._aabb);let t=this._customAabb,e=!!t;if(!t){if(t=Nw,this.skinInstance){if(!this.mesh.boneAabb){const r=this._morphInstance?this._morphInstance.morph._targets:null;this.mesh._initBoneAabbs(r)}const s=this.mesh.boneUsed;let i=!0;for(let r=0;r<this.mesh.boneAabb.length;r++)s[r]&&(Wl.setFromTransformedAabb(this.mesh.boneAabb[r],this.skinInstance.matrices[r]),i?(i=!1,t.center.copy(Wl.center),t.halfExtents.copy(Wl.halfExtents)):t.add(Wl));e=!0}else if(this.node._aabbVer!==this._aabbVer||this.mesh._aabbVer!==this._aabbMeshVer){if(this.mesh?(t.center.copy(this.mesh.aabb.center),t.halfExtents.copy(this.mesh.aabb.halfExtents)):(t.center.set(0,0,0),t.halfExtents.set(0,0,0)),this.mesh&&this.mesh.morph){const s=this.mesh.morph.aabb;t._expand(s.getMin(),s.getMax())}e=!0,this._aabbVer=this.node._aabbVer,this._aabbMeshVer=this.mesh._aabbVer}}return e&&this._aabb.setFromTransformedAabb(t,this.node.getWorldTransform()),this._aabb}clearShaders(){this._shaderCache.forEach(t=>{t.destroy()}),this._shaderCache.clear()}getShaderInstance(t,e,s,i,r,a,n){var f;const o=this._shaderDefs;Lr[0]=t,Lr[1]=e,Lr[2]=o,Lr[3]=i.hash;const c=jS(Lr);let d=this._shaderCache.get(c);if(!d){const u=this._material;if(d=new Bw,d.shader=u.variants.get(c),d.hashes=new Uint32Array(Lr),!d.shader){Z.pushGpuMarker(this.mesh.device,`Node: ${this.node.name}`);const p=u.getShaderVariant({device:this.mesh.device,scene:s,objDefs:o,cameraShaderParams:i,pass:t,sortedLights:n,viewUniformFormat:r,viewBindGroupFormat:a,vertexFormat:(f=this.mesh.vertexBuffer)==null?void 0:f.format});Z.popGpuMarker(this.mesh.device),u.variants.set(c,p),d.shader=p}this._shaderCache.set(c,d)}return y.call(()=>{H0.equals(d.hashes,Lr)||y.errorOnce("Hash collision in the shader cache for mesh instance. This is very unlikely but still possible. Please report this issue.")}),d}set material(t){this.clearShaders();const e=this._material;e&&e.removeMeshInstanceRef(this),this._material=t,t&&(t.addMeshInstanceRef(this),this.transparent=t.transparent,this.updateKey())}get material(){return this._material}_updateShaderDefs(t){t!==this._shaderDefs&&(this._shaderDefs=t,this.clearShaders())}set calculateSortDistance(t){this._calculateSortDistance=t}get calculateSortDistance(){return this._calculateSortDistance}set receiveShadow(t){this._receiveShadow!==t&&(this._receiveShadow=t,this._updateShaderDefs(t?this._shaderDefs&~sc:this._shaderDefs|sc))}get receiveShadow(){return this._receiveShadow}set batching(t){this._updateShaderDefs(t?this._shaderDefs|Ah:this._shaderDefs&~Ah)}get batching(){return(this._shaderDefs&Ah)!==0}set skinInstance(t){this._skinInstance=t,this._updateShaderDefs(t?this._shaderDefs|Ko:this._shaderDefs&~Ko),this._setupSkinUpdate()}get skinInstance(){return this._skinInstance}set morphInstance(t){var s;(s=this._morphInstance)==null||s.destroy(),this._morphInstance=t;let e=this._shaderDefs;e=t&&t.morph.morphPositions?e|Qo:e&~Qo,e=t&&t.morph.morphNormals?e|Jo:e&~Jo,e=t&&t.morph.intRenderFormat?e|el:e&~el,this._updateShaderDefs(e)}get morphInstance(){return this._morphInstance}set screenSpace(t){this._screenSpace!==t&&(this._screenSpace=t,this._updateShaderDefs(t?this._shaderDefs|ic:this._shaderDefs&~ic))}get screenSpace(){return this._screenSpace}set key(t){this._sortKeyForward=t}get key(){return this._sortKeyForward}set mask(t){const e=this._shaderDefs&65535;this._updateShaderDefs(e|t<<16)}get mask(){return this._shaderDefs>>16}set instancingCount(t){this.instancingData&&(this.instancingData.count=t)}get instancingCount(){return this.instancingData?this.instancingData.count:0}destroy(){var e,s,i;const t=this.mesh;t&&(this.mesh=null,t.refCount<1&&t.destroy()),this.setRealtimeLightmap(Qr.lightmapParamNames[0],null),this.setRealtimeLightmap(Qr.lightmapParamNames[1],null),(e=this._skinInstance)==null||e.destroy(),this._skinInstance=null,(s=this.morphInstance)==null||s.destroy(),this.morphInstance=null,this.clearShaders(),this.material=null,(i=this.instancingData)==null||i.destroy()}static _prepareRenderStyleForArray(t,e){if(t){for(let s=0;s<t.length;s++){t[s]._renderStyle=e;const i=t[s].mesh;Cd.has(i)||(Cd.add(i),i.prepareRenderState(e))}Cd.clear()}}_isVisible(t){return this.visible?this.isVisibleFunc?this.isVisibleFunc(t):(Ad.center=this.aabb.center,Ad.radius=this._aabb.halfExtents.length(),t.frustum.containsSphere(Ad)>0):!1}updateKey(){const{material:t}=this;this._sortKeyForward=this._drawBucket<<23|(t.alphaToCoverage||t.alphaTest?4194304:0)|t.id&4194303}setInstancing(t,e=!1){t?(this.instancingData=new kw(t.numVertices),this.instancingData.vertexBuffer=t,t.format.instancing=!0,this.cull=e):(this.instancingData=null,this.cull=!0),this._updateShaderDefs(t?this._shaderDefs|Zo:this._shaderDefs&~Zo)}setIndirect(t,e){this._allocIndirectData(),this.indirectData.map.set((t==null?void 0:t.camera)??null,e),this.mesh.device.mapsToClear.add(this.indirectData.map)}getIndirectMetaData(){var s;this._allocIndirectData();const t=(s=this.mesh)==null?void 0:s.primitive[this.renderStyle],e=this.indirectData.meshMetaData;return e[0]=t.count,e[1]=t.base,e[2]=t.baseVertex,e}_allocIndirectData(){this.indirectData||(this.indirectData=new Uw)}ensureMaterial(t){this.material||(y.warn(`Mesh attached to entity '${this.node.name}' does not have a material, using a default one.`),this.material=$n(t))}clearParameters(){this.parameters={}}getParameters(){return this.parameters}getParameter(t){return this.parameters[t]}setParameter(t,e,s=4294967295){const i=this.parameters[t];i?(i.data=e,i.passFlags=s):this.parameters[t]={scopeId:null,data:e,passFlags:s}}setRealtimeLightmap(t,e){const s=this.getParameter(t);s!==e&&(s&&Vi.decRef(s.data),e?(Vi.incRef(e),this.setParameter(t,e)):this.deleteParameter(t))}deleteParameter(t){this.parameters[t]&&delete this.parameters[t]}setParameters(t,e){const s=this.parameters;for(const i in s){const r=s[i];r.passFlags&e&&(r.scopeId||(r.scopeId=t.scope.resolve(i)),r.scopeId.setValue(r.data))}}setLightmapped(t){t?this.mask=(this.mask|di)&-6:(this.setRealtimeLightmap(Qr.lightmapParamNames[0],null),this.setRealtimeLightmap(Qr.lightmapParamNames[1],null),this._shaderDefs&=-4289,this.mask=(this.mask|gs)&-7)}setCustomAabb(t){t?this._customAabb?this._customAabb.copy(t):this._customAabb=t.clone():(this._customAabb=null,this._aabbVer=-1),this._setupSkinUpdate()}_setupSkinUpdate(){this._skinInstance&&(this._skinInstance._updateBeforeCull=!this._customAabb)}};h(Qr,"lightmapParamNames",["texture_lightMap","texture_dirLightMap"]);let Ge=Qr;const zw=[0,1,3,2,3,1],Vw=[0,1,3,0,3,2],Ym=new _i;function Km(l,t){if(l&&!t||!l&&t)return!1;if(l=l.data,t=t.data,l===t)return!0;if(l instanceof Float32Array&&t instanceof Float32Array){if(l.length!==t.length)return!1;for(let e=0;e<l.length;e++)if(l[e]!==t[e])return!1;return!0}return!1}function Gw(l,t){for(const e in l)if(l.hasOwnProperty(e)&&!Km(l[e],t[e]))return!1;for(const e in t)if(t.hasOwnProperty(e)&&!Km(t[e],l[e]))return!1;return!0}function Pd(l){return l.node.worldTransform.scaleSign}class Hw{constructor(t,e,s){this.device=t,this.rootNode=e,this.scene=s,this._init=!1,this._batchGroups={},this._batchGroupCounter=0,this._batchList=[],this._dirtyGroups=[],this._stats={createTime:0,updateLastFrameTime:0}}destroy(){this.device=null,this.rootNode=null,this.scene=null,this._batchGroups={},this._batchList=[],this._dirtyGroups=[]}addGroup(t,e,s,i,r){if(i===void 0&&(i=this._batchGroupCounter,this._batchGroupCounter++),this._batchGroups[i]){y.error(`Batch group with id ${i} already exists.`);return}const a=new gt(i,t,e,s,r);return this._batchGroups[i]=a,a}removeGroup(t){if(!this._batchGroups[t]){y.error(`Batch group with id ${t} doesn't exist.`);return}const e=[];for(let s=0;s<this._batchList.length;s++)this._batchList[s].batchGroupId===t?this.destroyBatch(this._batchList[s]):e.push(this._batchList[s]);this._batchList=e,this._removeModelsFromBatchGroup(this.rootNode,t),delete this._batchGroups[t]}markGroupDirty(t){this._dirtyGroups.indexOf(t)<0&&this._dirtyGroups.push(t)}getGroupByName(t){const e=this._batchGroups;for(const s in e)if(e.hasOwnProperty(s)&&e[s].name===t)return e[s];return null}getBatches(t){const e=[],s=this._batchList.length;for(let i=0;i<s;i++){const r=this._batchList[i];r.batchGroupId===t&&e.push(r)}return e}_removeModelsFromBatchGroup(t,e){if(t.enabled){t.model&&t.model.batchGroupId===e&&(t.model.batchGroupId=-1),t.render&&t.render.batchGroupId===e&&(t.render.batchGroupId=-1),t.element&&t.element.batchGroupId===e&&(t.element.batchGroupId=-1),t.sprite&&t.sprite.batchGroupId===e&&(t.sprite.batchGroupId=-1);for(let s=0;s<t._children.length;s++)this._removeModelsFromBatchGroup(t._children[s],e)}}insert(t,e,s){const i=this._batchGroups[e];y.assert(i,`Invalid batch ${e} insertion`),i&&i._obj[t].indexOf(s)<0&&(i._obj[t].push(s),this.markGroupDirty(e))}remove(t,e,s){const i=this._batchGroups[e];if(y.assert(i,`Invalid batch ${e} insertion`),i){const r=i._obj[t].indexOf(s);r>=0&&(i._obj[t].splice(r,1),this.markGroupDirty(e))}}_extractRender(t,e,s,i){return t.render&&(e=i[t.render.batchGroupId]=e.concat(t.render.meshInstances),t.render.removeFromLayers()),e}_extractModel(t,e,s,i){return t.model&&t.model.model&&(e=i[t.model.batchGroupId]=e.concat(t.model.meshInstances),t.model.removeModelFromLayers(),t.model._batchGroup=s),e}_extractElement(t,e,s){if(!t.element)return;let i=!1;t.element._text&&t.element._text._model.meshInstances.length>0?(e.push(t.element._text._model.meshInstances[0]),t.element.removeModelFromLayers(t.element._text._model),i=!0):t.element._image&&(e.push(t.element._image._renderable.meshInstance),t.element.removeModelFromLayers(t.element._image._renderable.model),t.element._image._renderable.unmaskMeshInstance&&(e.push(t.element._image._renderable.unmaskMeshInstance),(!t.element._image._renderable.unmaskMeshInstance.stencilFront||!t.element._image._renderable.unmaskMeshInstance.stencilBack)&&(t.element._dirtifyMask(),t.element._onPrerender())),i=!0),i&&(s._ui=!0,t.element._batchGroup=s)}_collectAndRemoveMeshInstances(t,e){for(let s=0;s<e.length;s++){const i=e[s],r=this._batchGroups[i];if(!r)continue;let a=t[i];a||(a=t[i]=[]);for(let n=0;n<r._obj.model.length;n++)a=this._extractModel(r._obj.model[n],a,r,t);for(let n=0;n<r._obj.render.length;n++)a=this._extractRender(r._obj.render[n],a,r,t);for(let n=0;n<r._obj.element.length;n++)this._extractElement(r._obj.element[n],a,r);for(let n=0;n<r._obj.sprite.length;n++){const o=r._obj.sprite[n];o.sprite&&o.sprite._meshInstance&&(r.dynamic||o.sprite.sprite._renderMode===hi)&&(a.push(o.sprite._meshInstance),o.sprite.removeModelFromLayers(),r._sprite=!0,o.sprite._batchGroup=r)}}}generate(t){const e={};t||(t=Object.keys(this._batchGroups));const s=[];for(let o=0;o<this._batchList.length;o++){if(t.indexOf(this._batchList[o].batchGroupId)<0){s.push(this._batchList[o]);continue}this.destroyBatch(this._batchList[o])}if(this._batchList=s,this._collectAndRemoveMeshInstances(e,t),t===this._dirtyGroups)this._dirtyGroups.length=0;else{const o=[];for(let c=0;c<this._dirtyGroups.length;c++)t.indexOf(this._dirtyGroups[c])<0&&o.push(this._dirtyGroups[c]);this._dirtyGroups=o}let i,r,a,n;for(const o in e)if(e.hasOwnProperty(o)){if(i=e[o],a=this._batchGroups[o],!a){y.error(`batch group ${o} not found`);continue}r=this.prepare(i,a.dynamic,a.maxAabbSize,a._ui||a._sprite);for(let c=0;c<r.length;c++)n=this.create(r[c],a.dynamic,parseInt(o,10)),n&&n.addToLayers(this.scene,a.layers)}}prepare(t,e,s=Number.POSITIVE_INFINITY,i){if(t.length===0)return[];const r=s*.5,a=1024,n=4294967295,o=new Me,c=new Me;let d=null,f;const u=[];let p=0;i&&t.sort((g,v)=>g.drawOrder-v.drawOrder);let m=t,_;const S=i?function(g){d?d.add(g.aabb):d=g.aabb.clone(),_.push(g)}:function(g){_.push(g)};for(;m.length>0;){u[p]=[m[0]],_=[];const g=m[0].material,v=m[0].layer,w=m[0]._shaderDefs,x=m[0].parameters,b=m[0].stencilFront;let C=m[0].mesh.vertexBuffer.getNumVertices();const D=m[0].drawOrder;o.copy(m[0].aabb);const T=Pd(m[0]),I=m[0].mesh.vertexBuffer.format.batchingHash,L=m[0].mesh.primitive[0].indexed;d=null;for(let E=1;E<m.length;E++){const F=m[E];if(e&&u[p].length>=a){_=_.concat(m.slice(E));break}if(g!==F.material||v!==F.layer||I!==F.mesh.vertexBuffer.format.batchingHash||L!==F.mesh.primitive[0].indexed||w!==F._shaderDefs||C+F.mesh.vertexBuffer.getNumVertices()>n){S(F);continue}if(c.copy(o),c.add(F.aabb),c.halfExtents.x>r||c.halfExtents.y>r||c.halfExtents.z>r){S(F);continue}if(b&&(!(f=F.stencilFront)||b.func!==f.func||b.zpass!==f.zpass)){S(F);continue}if(T!==Pd(F)){S(F);continue}if(!Gw(x,F.parameters)){S(F);continue}if(i&&d&&d.intersects(F.aabb)&&F.drawOrder!==D){S(F);continue}o.add(F.aabb),C+=F.mesh.vertexBuffer.getNumVertices(),u[p].push(F)}p++,m=_}return u}collectBatchedMeshData(t,e){let s=null,i=0,r=0,a=null;for(let n=0;n<t.length;n++)if(t[n].visible){const o=t[n].mesh,c=o.vertexBuffer.numVertices;if(i+=c,o.primitive[0].indexed)r+=o.primitive[0].count;else{const d=o.primitive[0].type;(d===aa||d===wr)&&o.primitive[0].count===4&&(r+=6)}if(!s){a=t[n].material,s={};const d=o.vertexBuffer.format.elements;for(let f=0;f<d.length;f++){const u=d[f].name;s[u]={numComponents:d[f].numComponents,dataType:d[f].dataType,normalize:d[f].normalize,count:0}}e&&(s[fs]={numComponents:1,dataType:ze,normalize:!1,count:0})}}return{streams:s,batchNumVerts:i,batchNumIndices:r,material:a}}create(t,e,s){const i=pe();this._init||(this.vertexFormats={},this._init=!0);let r=null,a,n,o,c=null;const d=this.collectBatchedMeshData(t,e);if(d.streams){const f=d.streams;let u=d.material;const p=d.batchNumVerts,m=d.batchNumIndices;c=new zm(t,e,s),this._batchList.push(c);let _,S,g,v,w=0,x=0,b;const C=p<=65535?Uint16Array:Uint32Array,D=new C(m);for(a in f)r=f[a],r.typeArrayType=Sn[r.dataType],r.elementByteSize=Ao[r.dataType],r.buffer=new r.typeArrayType(p*r.numComponents);for(let L=0;L<t.length;L++)if(t[L].visible){n=t[L].mesh,o=n.vertexBuffer.numVertices,e||(b=t[L].node.getWorldTransform());for(a in f)if(a!==fs){r=f[a];const E=new r.typeArrayType(r.buffer.buffer,r.elementByteSize*r.count),F=n.getVertexStream(a,E)*r.numComponents;if(r.count+=F,!e&&r.numComponents>=3){if(a===Ae){const k=b.data,H=k[0],G=k[1],W=k[2],R=k[4],B=k[5],V=k[6],O=k[8],M=k[9],P=k[10],N=k[12],U=k[13],z=k[14];let $,X,K;for(let q=0;q<F;q+=r.numComponents)$=E[q],X=E[q+1],K=E[q+2],E[q]=$*H+X*R+K*O+N,E[q+1]=$*G+X*B+K*M+U,E[q+2]=$*W+X*V+K*P+z}else if(a===_s||a===yi){Ym.invertMat4(b).transpose();const[k,H,G,W,R,B,V,O,M]=Ym.data;let P,N,U;for(let z=0;z<F;z+=r.numComponents)P=E[z],N=E[z+1],U=E[z+2],E[z]=P*k+N*W+U*V,E[z+1]=P*H+N*R+U*O,E[z+2]=P*G+N*B+U*M}}}if(e){r=f[fs];for(let E=0;E<o;E++)r.buffer[r.count++]=L}if(n.primitive[0].indexed){_=n.primitive[0].base,S=n.primitive[0].baseVertex||0,g=n.primitive[0].count;const E=n.indexBuffer[0].getFormat();v=new Zh[E](n.indexBuffer[0].storage)}else{S=0;const E=n.primitive[0].type;if(E===aa||E===wr)if(n.primitive[0].count===4)_=0,g=6,v=E===aa?zw:Vw;else{g=0;continue}}for(let E=0;E<g;E++)D[E+x]=v[_+E]+S+w;x+=g,w+=o}n=new Ve(this.device);for(a in f)r=f[a],n.setVertexStream(a,r.buffer,r.numComponents,void 0,r.dataType,r.normalize);D.length>0&&n.setIndices(D),n.update(Xs,!1),e&&(u=u.clone(),u.update());const T=new Ge(n,u,this.rootNode);T.castShadow=c.origMeshInstances[0].castShadow,T.parameters=c.origMeshInstances[0].parameters,T.layer=c.origMeshInstances[0].layer,T._shaderDefs=c.origMeshInstances[0]._shaderDefs,T.batching=!0,T.cull=c.origMeshInstances[0].cull;const I=this._batchGroups[s];if(I&&I._ui&&(T.cull=!1),e){const L=[];for(let E=0;E<c.origMeshInstances.length;E++)L.push(c.origMeshInstances[E].node);T.skinInstance=new Gm(this.device,L,this.rootNode)}T._updateAabb=!1,T.drawOrder=c.origMeshInstances[0].drawOrder,T.stencilFront=c.origMeshInstances[0].stencilFront,T.stencilBack=c.origMeshInstances[0].stencilBack,T.flipFacesFactor=Pd(c.origMeshInstances[0]),T.castShadow=c.origMeshInstances[0].castShadow,c.meshInstance=T,c.updateBoundingBox()}return this._stats.createTime+=pe()-i,c}updateAll(){this._dirtyGroups.length>0&&this.generate(this._dirtyGroups);const t=pe();for(let e=0;e<this._batchList.length;e++)this._batchList[e].dynamic&&this._batchList[e].updateBoundingBox();this._stats.updateLastFrameTime=pe()-t}clone(t,e){const s=new zm(e,t.dynamic,t.batchGroupId);this._batchList.push(s);const i=[];for(let r=0;r<e.length;r++)i.push(e[r].node);return s.meshInstance=new Ge(t.meshInstance.mesh,t.meshInstance.material,t.meshInstance.node),s.meshInstance._updateAabb=!1,s.meshInstance.parameters=e[0].parameters,s.meshInstance.cull=e[0].cull,s.meshInstance.layer=e[0].layer,t.dynamic&&(s.meshInstance.skinInstance=new Gm(this.device,i,this.rootNode)),s.meshInstance.castShadow=t.meshInstance.castShadow,s}destroyBatch(t){t.destroy(this.scene,this._batchGroups[t.batchGroupId].layers)}}const Zm="uSceneColorMap";class Ww extends Ss{constructor(){super(...arguments);h(this,"colorRenderTarget",null);h(this,"source",null)}destroy(){super.destroy(),this.releaseRenderTarget(this.colorRenderTarget)}shouldReallocate(e,s,i){if((e==null?void 0:e.colorBuffer.format)!==i)return!0;const a=(s==null?void 0:s.width)||this.device.width,n=(s==null?void 0:s.height)||this.device.height;return!e||a!==e.width||n!==e.height}allocateRenderTarget(e,s,i,r){const a=new ge(i,{name:Zm,format:r,width:s?s.colorBuffer.width:i.width,height:s?s.colorBuffer.height:i.height,mipmaps:!0,minFilter:ua,magFilter:yt,addressU:me,addressV:me});return e?(e.destroyFrameBuffers(),e._colorBuffer=a,e._colorBuffers=[a]):e=new _t({name:"ColorGrabRT",colorBuffer:a,depth:!1,stencil:!1,autoResolve:!1}),e}releaseRenderTarget(e){e&&(e.destroyTextureBuffers(),e.destroy())}frameUpdate(){const e=this.device,s=this.source,i=(s==null?void 0:s.colorBuffer.format)??this.device.backBufferFormat;this.shouldReallocate(this.colorRenderTarget,s==null?void 0:s.colorBuffer,i)&&(this.releaseRenderTarget(this.colorRenderTarget),this.colorRenderTarget=this.allocateRenderTarget(this.colorRenderTarget,s,e,i));const r=this.colorRenderTarget.colorBuffer;e.scope.resolve(Zm).setValue(r)}execute(){const e=this.device;Z.pushGpuMarker(e,"GRAB-COLOR");const s=this.source,i=this.colorRenderTarget.colorBuffer;e.isWebGPU?(e.copyRenderTarget(s,this.colorRenderTarget,!0,!1),e.mipmapRenderer.generate(this.colorRenderTarget.colorBuffer.impl)):(e.copyRenderTarget(s,this.colorRenderTarget,!0,!1),e.activeTexture(e.maxCombinedTextures-1),e.bindTexture(i),e.gl.generateMipmap(i.impl._glTarget)),Z.popGpuMarker(e)}}const Qm="uSceneDepthMap";class $w extends Ss{constructor(e,s){super(e);h(this,"depthRenderTarget",null);h(this,"camera",null);this.camera=s}destroy(){super.destroy(),this.releaseRenderTarget(this.depthRenderTarget)}shouldReallocate(e,s){const i=(s==null?void 0:s.width)||this.device.width,r=(s==null?void 0:s.height)||this.device.height;return!e||i!==e.width||r!==e.height}allocateRenderTarget(e,s,i,r,a){const n=new ge(i,{name:Qm,format:r,width:s?s.colorBuffer.width:i.width,height:s?s.colorBuffer.height:i.height,mipmaps:!1,minFilter:Te,magFilter:Te,addressU:me,addressV:me});return e?(e.destroyFrameBuffers(),a?e._depthBuffer=n:(e._colorBuffer=n,e._colorBuffers=[n])):e=new _t({name:"DepthGrabRT",colorBuffer:a?null:n,depthBuffer:a?n:null,depth:!a,stencil:i.supportsStencil,autoResolve:!1}),e}releaseRenderTarget(e){e&&(e.destroyTextureBuffers(),e.destroy())}before(){var c,d;const e=this.camera,s=this.device,i=(e==null?void 0:e.renderTarget)??s.backBuffer;let r=!0,a=i.stencil?Fc:Xi;s.isWebGPU&&i.samples>1&&(a=er,r=!1);const n=((c=e.renderTarget)==null?void 0:c.depthBuffer)??((d=e.renderTarget)==null?void 0:d.colorBuffer);this.shouldReallocate(this.depthRenderTarget,n)&&(this.releaseRenderTarget(this.depthRenderTarget),this.depthRenderTarget=this.allocateRenderTarget(this.depthRenderTarget,e.renderTarget,s,a,r));const o=r?this.depthRenderTarget.depthBuffer:this.depthRenderTarget.colorBuffer;s.scope.resolve(Qm).setValue(o)}execute(){const e=this.device;if(Z.pushGpuMarker(e,"GRAB-DEPTH"),e.isWebGL2&&e.renderTarget.samples>1){const s=e.renderTarget.impl._glFrameBuffer,i=this.depthRenderTarget;e.renderTarget=i,e.updateBegin(),this.depthRenderTarget.impl.internalResolve(e,s,i.impl._glFrameBuffer,this.depthRenderTarget,e.gl.DEPTH_BUFFER_BIT)}else e.copyRenderTarget(e.renderTarget,this.depthRenderTarget,!1,!0);Z.popGpuMarker(e)}}class Dy{constructor(){h(this,"_gammaCorrection",bh);h(this,"_toneMapping",Pp);h(this,"_srgbRenderTarget",!1);h(this,"_ssaoEnabled",!1);h(this,"_fog",Hn);h(this,"_sceneDepthMapLinear",!1);h(this,"_hash");h(this,"_defines",new Map);h(this,"_definesDirty",!0)}get hash(){if(this._hash===void 0){const t=`${this.gammaCorrection}_${this.toneMapping}_${this.srgbRenderTarget}_${this.fog}_${this.ssaoEnabled}_${this.sceneDepthMapLinear}`;this._hash=ci(t)}return this._hash}get defines(){const t=this._defines;return this._definesDirty&&(this._definesDirty=!1,t.clear(),this._sceneDepthMapLinear&&t.set("SCENE_DEPTHMAP_LINEAR",!0),t.set("FOG",this._fog.toUpperCase()),t.set("TONEMAP",_y[this._toneMapping]),t.set("GAMMA",tw[this.shaderOutputGamma])),t}markDirty(){this._hash=void 0,this._definesDirty=!0}set fog(t){this._fog!==t&&(this._fog=t,this.markDirty())}get fog(){return this._fog}set ssaoEnabled(t){this._ssaoEnabled!==t&&(this._ssaoEnabled=t,this.markDirty())}get ssaoEnabled(){return this._ssaoEnabled}set gammaCorrection(t){this._gammaCorrectionAssigned=!0,this._gammaCorrection!==t&&(this._gammaCorrection=t,this.markDirty())}get gammaCorrection(){return this._gammaCorrection}set toneMapping(t){this._toneMapping!==t&&(this._toneMapping=t,this.markDirty())}get toneMapping(){return this._toneMapping}set srgbRenderTarget(t){this._srgbRenderTarget!==t&&(this._srgbRenderTarget=t,this.markDirty())}get srgbRenderTarget(){return this._srgbRenderTarget}set sceneDepthMapLinear(t){this._sceneDepthMapLinear!==t&&(this._sceneDepthMapLinear=t,this.markDirty())}get sceneDepthMapLinear(){return this._sceneDepthMapLinear}get shaderOutputGamma(){return this._gammaCorrection===bh&&!this._srgbRenderTarget?bh:Tl}}const Ia=new A,eo=new A,Jm=new A,e_=new ie,Xw=[new A,new A,new A,new A,new A,new A,new A,new A];class bl{constructor(){h(this,"shaderPassInfo",null);h(this,"renderPassColorGrab",null);h(this,"renderPassDepthGrab",null);h(this,"fogParams",null);h(this,"shaderParams",new Dy);h(this,"renderPasses",[]);h(this,"jitter",0);this._aspectRatio=16/9,this._aspectRatioMode=Np,this._calculateProjection=null,this._calculateTransform=null,this._clearColor=new ae(.75,.75,.75,1),this._clearColorBuffer=!0,this._clearDepth=1,this._clearDepthBuffer=!0,this._clearStencil=0,this._clearStencilBuffer=!0,this._cullFaces=!0,this._farClip=1e3,this._flipFaces=!1,this._fov=45,this._frustumCulling=!0,this._horizontalFov=!1,this._layers=[tr,us,Tp,xl,wp],this._layersSet=new Set(this._layers),this._nearClip=.1,this._node=null,this._orthoHeight=10,this._projection=ni,this._rect=new oe(0,0,1,1),this._renderTarget=null,this._scissorRect=new oe(0,0,1,1),this._scissorRectClear=!1,this._aperture=16,this._shutter=1/1e3,this._sensitivity=1e3,this._projMat=new ie,this._projMatDirty=!0,this._projMatSkybox=new ie,this._viewMat=new ie,this._viewMatDirty=!0,this._viewProjMat=new ie,this._viewProjMatDirty=!0,this._shaderMatricesVersion=0,this._viewProjInverse=new ie,this._viewProjCurrent=null,this._viewProjPrevious=new ie,this._jitters=[0,0,0,0],this.frustum=new Mx,this._xr=null,this._xrProperties={horizontalFov:this._horizontalFov,fov:this._fov,aspectRatio:this._aspectRatio,farClip:this._farClip,nearClip:this._nearClip}}destroy(){var t,e;(t=this.renderPassColorGrab)==null||t.destroy(),this.renderPassColorGrab=null,(e=this.renderPassDepthGrab)==null||e.destroy(),this.renderPassDepthGrab=null,this.renderPasses.length=0}_storeShaderMatrices(t,e,s,i){this._shaderMatricesVersion!==i&&(this._shaderMatricesVersion=i,this._viewProjPrevious.copy(this._viewProjCurrent??t),this._viewProjCurrent??(this._viewProjCurrent=new ie),this._viewProjCurrent.copy(t),this._viewProjInverse.invert(t),this._jitters[2]=this._jitters[0],this._jitters[3]=this._jitters[1],this._jitters[0]=e,this._jitters[1]=s)}get fullSizeClearRect(){const t=this._scissorRectClear?this.scissorRect:this._rect;return t.x===0&&t.y===0&&t.z===1&&t.w===1}set aspectRatio(t){this._aspectRatio!==t&&(this._aspectRatio=t,this._projMatDirty=!0)}get aspectRatio(){var t;return(t=this.xr)!=null&&t.active?this._xrProperties.aspectRatio:this._aspectRatio}set aspectRatioMode(t){this._aspectRatioMode!==t&&(this._aspectRatioMode=t,this._projMatDirty=!0)}get aspectRatioMode(){return this._aspectRatioMode}set calculateProjection(t){this._calculateProjection=t,this._projMatDirty=!0}get calculateProjection(){return this._calculateProjection}set calculateTransform(t){this._calculateTransform=t}get calculateTransform(){return this._calculateTransform}set clearColor(t){this._clearColor.copy(t)}get clearColor(){return this._clearColor}set clearColorBuffer(t){this._clearColorBuffer=t}get clearColorBuffer(){return this._clearColorBuffer}set clearDepth(t){this._clearDepth=t}get clearDepth(){return this._clearDepth}set clearDepthBuffer(t){this._clearDepthBuffer=t}get clearDepthBuffer(){return this._clearDepthBuffer}set clearStencil(t){this._clearStencil=t}get clearStencil(){return this._clearStencil}set clearStencilBuffer(t){this._clearStencilBuffer=t}get clearStencilBuffer(){return this._clearStencilBuffer}set cullFaces(t){this._cullFaces=t}get cullFaces(){return this._cullFaces}set farClip(t){this._farClip!==t&&(this._farClip=t,this._projMatDirty=!0)}get farClip(){var t;return(t=this.xr)!=null&&t.active?this._xrProperties.farClip:this._farClip}set flipFaces(t){this._flipFaces=t}get flipFaces(){return this._flipFaces}set fov(t){this._fov!==t&&(this._fov=t,this._projMatDirty=!0)}get fov(){var t;return(t=this.xr)!=null&&t.active?this._xrProperties.fov:this._fov}set frustumCulling(t){this._frustumCulling=t}get frustumCulling(){return this._frustumCulling}set horizontalFov(t){this._horizontalFov!==t&&(this._horizontalFov=t,this._projMatDirty=!0)}get horizontalFov(){var t;return(t=this.xr)!=null&&t.active?this._xrProperties.horizontalFov:this._horizontalFov}set layers(t){this._layers=t.slice(0),this._layersSet=new Set(this._layers)}get layers(){return this._layers}get layersSet(){return this._layersSet}set nearClip(t){this._nearClip!==t&&(this._nearClip=t,this._projMatDirty=!0)}get nearClip(){var t;return(t=this.xr)!=null&&t.active?this._xrProperties.nearClip:this._nearClip}set node(t){this._node=t}get node(){return this._node}set orthoHeight(t){this._orthoHeight!==t&&(this._orthoHeight=t,this._projMatDirty=!0)}get orthoHeight(){return this._orthoHeight}set projection(t){this._projection!==t&&(this._projection=t,this._projMatDirty=!0)}get projection(){return this._projection}get projectionMatrix(){return this._evaluateProjectionMatrix(),this._projMat}set rect(t){this._rect.copy(t)}get rect(){return this._rect}set renderTarget(t){this._renderTarget=t}get renderTarget(){return this._renderTarget}set scissorRect(t){this._scissorRect.copy(t)}get scissorRect(){return this._scissorRect}get viewMatrix(){if(this._viewMatDirty){const t=this._node.getWorldTransform();this._viewMat.copy(t).invert(),this._viewMatDirty=!1}return this._viewMat}set aperture(t){this._aperture=t}get aperture(){return this._aperture}set sensitivity(t){this._sensitivity=t}get sensitivity(){return this._sensitivity}set shutter(t){this._shutter=t}get shutter(){return this._shutter}set xr(t){this._xr!==t&&(this._xr=t,this._projMatDirty=!0)}get xr(){return this._xr}clone(){return new bl().copy(this)}copy(t){return this._aspectRatio=t._aspectRatio,this._farClip=t._farClip,this._fov=t._fov,this._horizontalFov=t._horizontalFov,this._nearClip=t._nearClip,this._xrProperties.aspectRatio=t._xrProperties.aspectRatio,this._xrProperties.farClip=t._xrProperties.farClip,this._xrProperties.fov=t._xrProperties.fov,this._xrProperties.horizontalFov=t._xrProperties.horizontalFov,this._xrProperties.nearClip=t._xrProperties.nearClip,this.aspectRatioMode=t.aspectRatioMode,this.calculateProjection=t.calculateProjection,this.calculateTransform=t.calculateTransform,this.clearColor=t.clearColor,this.clearColorBuffer=t.clearColorBuffer,this.clearDepth=t.clearDepth,this.clearDepthBuffer=t.clearDepthBuffer,this.clearStencil=t.clearStencil,this.clearStencilBuffer=t.clearStencilBuffer,this.cullFaces=t.cullFaces,this.flipFaces=t.flipFaces,this.frustumCulling=t.frustumCulling,this.layers=t.layers,this.orthoHeight=t.orthoHeight,this.projection=t.projection,this.rect=t.rect,this.renderTarget=t.renderTarget,this.scissorRect=t.scissorRect,this.aperture=t.aperture,this.shutter=t.shutter,this.sensitivity=t.sensitivity,this.shaderPassInfo=t.shaderPassInfo,this.jitter=t.jitter,this._projMatDirty=!0,this}_enableRenderPassColorGrab(t,e){var s;e?this.renderPassColorGrab||(this.renderPassColorGrab=new Ww(t)):((s=this.renderPassColorGrab)==null||s.destroy(),this.renderPassColorGrab=null)}_enableRenderPassDepthGrab(t,e,s){var i;s?this.renderPassDepthGrab||(this.renderPassDepthGrab=new $w(t,this)):((i=this.renderPassDepthGrab)==null||i.destroy(),this.renderPassDepthGrab=null)}_updateViewProjMat(){(this._projMatDirty||this._viewMatDirty||this._viewProjMatDirty)&&(this._viewProjMat.mul2(this.projectionMatrix,this.viewMatrix),this._viewProjMatDirty=!1)}worldToScreen(t,e,s,i=new A){this._updateViewProjMat(),this._viewProjMat.transformPoint(t,i);const r=this._viewProjMat.data,a=t.x*r[3]+t.y*r[7]+t.z*r[11]+1*r[15];i.x=(i.x/a+1)*.5,i.y=(1-i.y/a)*.5;const{x:n,y:o,z:c,w:d}=this._rect;return i.x=i.x*c*e+n*e,i.y=i.y*d*s+(1-o-d)*s,i}screenToWorld(t,e,s,i,r,a=new A){const{x:n,y:o,z:c,w:d}=this._rect,f=this.farClip-this.nearClip;if(Ia.set((t-n*i)/(c*i),1-(e-(1-o-d)*r)/(d*r),s/f),Ia.mulScalar(2),Ia.sub(A.ONE),this._projection===ni){ie._getPerspectiveHalfSize(eo,this.fov,this.aspectRatio,this.nearClip,this.horizontalFov),eo.x*=Ia.x,eo.y*=Ia.y;const u=this._node.getWorldTransform();eo.z=-this.nearClip,u.transformPoint(eo,Jm);const p=this._node.getPosition();a.sub2(Jm,p),a.normalize(),a.mulScalar(s),a.add(p)}else this._updateViewProjMat(),e_.copy(this._viewProjMat).invert(),e_.transformPoint(Ia,a);return a}_evaluateProjectionMatrix(){if(this._projMatDirty){if(this._projection===ni)this._projMat.setPerspective(this.fov,this.aspectRatio,this.nearClip,this.farClip,this.horizontalFov),this._projMatSkybox.copy(this._projMat);else{const t=this._orthoHeight,e=t*this.aspectRatio;this._projMat.setOrtho(-e,e,-t,t,this.nearClip,this.farClip),this._projMatSkybox.setPerspective(this.fov,this.aspectRatio,this.nearClip,this.farClip)}this._projMatDirty=!1}}getProjectionMatrixSkybox(){return this._evaluateProjectionMatrix(),this._projMatSkybox}getExposure(){const t=Math.log2(this._aperture*this._aperture/this._shutter*100/this._sensitivity);return 1/(Math.pow(2,t)*1.2)}getScreenSize(t){if(this._projection===ni){const e=this._node.getPosition().distance(t.center);if(e<t.radius)return 1;const s=Math.asin(t.radius/e),i=Math.tan(s),r=Math.tan(this.fov/2*Y.DEG_TO_RAD);return Math.min(i/r,1)}return Y.clamp(t.radius/this._orthoHeight,0,1)}getFrustumCorners(t=this.nearClip,e=this.farClip){const s=this.fov*Math.PI/180;let i,r;this.projection===ni?this.horizontalFov?(i=t*Math.tan(s/2),r=i/this.aspectRatio):(r=t*Math.tan(s/2),i=r*this.aspectRatio):(r=this._orthoHeight,i=r*this.aspectRatio);const a=Xw;return a[0].x=i,a[0].y=-r,a[0].z=-t,a[1].x=i,a[1].y=r,a[1].z=-t,a[2].x=-i,a[2].y=r,a[2].z=-t,a[3].x=-i,a[3].y=-r,a[3].z=-t,this._projection===ni&&(this.horizontalFov?(i=e*Math.tan(s/2),r=i/this.aspectRatio):(r=e*Math.tan(s/2),i=r*this.aspectRatio)),a[4].x=i,a[4].y=-r,a[4].z=-e,a[5].x=i,a[5].y=r,a[5].z=-e,a[6].x=-i,a[6].y=r,a[6].z=-e,a[7].x=-i,a[7].y=-r,a[7].z=-e,a}setXrProperties(t){Object.assign(this._xrProperties,t),this._projMatDirty=!0}}const t_=new ie,s_=new ie,i_=new ie,_r=class _r{static create(t,e,s){const i=new bl;switch(i.node=new De(t),i.aspectRatio=1,i.aspectRatioMode=Ff,i._scissorRectClear=!0,e){case Ke:i.node.setRotation(_r.pointLightRotations[s]),i.fov=90,i.projection=ni;break;case Ze:i.projection=ni;break;case ve:i.projection=yn;break}return i}static evalSpotCookieMatrix(t){let e=_r._spotCookieCamera;e||(e=_r.create("SpotCookieCamera",Ze),_r._spotCookieCamera=e),e.fov=t._outerConeAngle*2;const s=e._node;s.setPosition(t._node.getPosition()),s.setRotation(t._node.getRotation()),s.rotateLocal(-90,0,0),t_.setTRS(s.getPosition(),s.getRotation(),A.ONE).invert(),s_.mul2(e.projectionMatrix,t_);const i=t.cookieMatrix,r=t.atlasViewport;return i_.setViewport(r.x,r.y,r.z,r.w),i.mul2(i_,s_),i}};h(_r,"pointLightRotations",[new ue().setFromEulerAngles(0,90,180),new ue().setFromEulerAngles(0,-90,180),new ue().setFromEulerAngles(90,0,0),new ue().setFromEulerAngles(-90,0,0),new ue().setFromEulerAngles(0,180,180),new ue().setFromEulerAngles(0,0,180)]),h(_r,"_spotCookieCamera",null);let Un=_r;const vs=new A,Rr=new Float32Array(6),qw=new A(-.5,0,0),jw=new A(0,0,.5),at={POSITION_RANGE:0,DIRECTION_FLAGS:1,COLOR_ANGLES_BIAS:2,PROJ_MAT_0:3,ATLAS_VIEWPORT:3,PROJ_MAT_1:4,PROJ_MAT_2:5,PROJ_MAT_3:6,AREA_DATA_WIDTH:7,AREA_DATA_HEIGHT:8,COUNT:9},Yw={LIGHTSHAPE_PUNCTUAL:`${qs}u`,LIGHTSHAPE_RECT:`${ny}u`,LIGHTSHAPE_DISK:`${oy}u`,LIGHTSHAPE_SPHERE:`${ly}u`,LIGHT_COLOR_DIVIDER:`${Eh}.0`},r_=(l,t)=>Object.keys(l).map(e=>`#define {${t}${e}} ${l[e]}`).join(`
`),a_=`

    ${r_(at,"CLUSTER_TEXTURE_")}
    ${r_(Yw,"")}
`;class Kw{constructor(t){h(this,"areaLightsEnabled",!1);this.device=t,be.get(t,Oe).set("lightBufferDefinesPS",a_),be.get(t,it).set("lightBufferDefinesPS",a_),this.cookiesEnabled=!1,this.shadowsEnabled=!1,this.areaLightsEnabled=!1,this.maxLights=255;const e=at.COUNT;this.lightsFloat=new Float32Array(4*e*this.maxLights),this.lightsUint=new Uint32Array(this.lightsFloat.buffer),this.lightsTexture=this.createTexture(this.device,e,this.maxLights,$t,"LightsTexture"),this._lightsTextureId=this.device.scope.resolve("lightsTexture"),this.invMaxColorValue=0,this.invMaxAttenuation=0,this.boundsMin=new A,this.boundsDelta=new A}destroy(){var t;(t=this.lightsTexture)==null||t.destroy(),this.lightsTexture=null}createTexture(t,e,s,i,r){return new ge(t,{name:r,width:e,height:s,mipmaps:!1,format:i,addressU:me,addressV:me,type:Ds,magFilter:Te,minFilter:Te,anisotropy:1})}setBounds(t,e){this.boundsMin.copy(t),this.boundsDelta.copy(e)}uploadTextures(){this.lightsTexture.lock().set(this.lightsFloat),this.lightsTexture.unlock()}updateUniforms(){this._lightsTextureId.setValue(this.lightsTexture)}getSpotDirection(t,e){e._node.getWorldTransform().getY(t).mulScalar(-1),t.normalize()}getLightAreaSizes(t){const e=t._node.getWorldTransform();return e.transformVector(qw,vs),Rr[0]=vs.x,Rr[1]=vs.y,Rr[2]=vs.z,e.transformVector(jw,vs),Rr[3]=vs.x,Rr[4]=vs.y,Rr[5]=vs.z,Rr}addLightData(t,e){const s=t._type===Ze,i=t.atlasViewportAllocated,r=this.cookiesEnabled&&!!t._cookie&&i,a=this.areaLightsEnabled&&t.shape!==qs,n=this.shadowsEnabled&&t.castShadows&&i,o=t._node.getPosition();let c=null,d=null;s?n?c=t.getRenderData(null,0).shadowMatrix:r&&(c=Un.evalSpotCookieMatrix(t)):(n||r)&&(d=t.atlasViewport);const f=this.lightsFloat,u=this.lightsUint,p=e*this.lightsTexture.width*4;f[p+4*at.POSITION_RANGE+0]=o.x,f[p+4*at.POSITION_RANGE+1]=o.y,f[p+4*at.POSITION_RANGE+2]=o.z,f[p+4*at.POSITION_RANGE+3]=t.attenuationEnd;const m=t.clusteredData;if(u[p+4*at.COLOR_ANGLES_BIAS+0]=m[0],u[p+4*at.COLOR_ANGLES_BIAS+1]=m[1],u[p+4*at.COLOR_ANGLES_BIAS+2]=m[2],t.castShadows){const _=t.getRenderData(null,0),S=t._getUniformBiasValues(_),g=ko.float2Half(S.bias),v=ko.float2Half(S.normalBias);u[p+4*at.COLOR_ANGLES_BIAS+3]=g|v<<16}if(s&&(this.getSpotDirection(vs,t),f[p+4*at.DIRECTION_FLAGS+0]=vs.x,f[p+4*at.DIRECTION_FLAGS+1]=vs.y,f[p+4*at.DIRECTION_FLAGS+2]=vs.z),u[p+4*at.DIRECTION_FLAGS+3]=t.getClusteredFlags(n,r),c){const _=c.data;for(let S=0;S<16;S++)f[p+4*at.PROJ_MAT_0+S]=_[S]}if(d&&(f[p+4*at.ATLAS_VIEWPORT+0]=d.x,f[p+4*at.ATLAS_VIEWPORT+1]=d.y,f[p+4*at.ATLAS_VIEWPORT+2]=d.z/3),a){const _=this.getLightAreaSizes(t);f[p+4*at.AREA_DATA_WIDTH+0]=_[0],f[p+4*at.AREA_DATA_WIDTH+1]=_[1],f[p+4*at.AREA_DATA_WIDTH+2]=_[2],f[p+4*at.AREA_DATA_HEIGHT+0]=_[3],f[p+4*at.AREA_DATA_HEIGHT+1]=_[4],f[p+4*at.AREA_DATA_HEIGHT+2]=_[5]}}}const $l=new A,Xl=new A,ql=new A,Dd=new Me,n_=4096;class o_{constructor(){this.light=null,this.min=new A,this.max=new A}}class Nf{constructor(t){h(this,"clusterTexture");this.device=t,this.name="Untitled",this.reportCount=0,this.boundsMin=new A,this.boundsMax=new A,this.boundsDelta=new A,this._cells=new A(1,1,1),this._cellsLimit=new A,this.cells=this._cells,this.maxCellLightCount=4,this._usedLights=[],this._usedLights.push(new o_),this.lightsBuffer=new Kw(t),this.registerUniforms(t)}set maxCellLightCount(t){t!==this._maxCellLightCount&&(this._maxCellLightCount=t,this._cellsDirty=!0)}get maxCellLightCount(){return this._maxCellLightCount}set cells(t){$l.copy(t).floor(),this._cells.equals($l)||(this._cells.copy($l),this._cellsLimit.copy($l).sub(A.ONE),this._cellsDirty=!0)}get cells(){return this._cells}destroy(){this.lightsBuffer.destroy(),this.releaseClusterTexture()}releaseClusterTexture(){this.clusterTexture&&(this.clusterTexture.destroy(),this.clusterTexture=null)}registerUniforms(t){this._clusterSkipId=t.scope.resolve("clusterSkip"),this._clusterMaxCellsId=t.scope.resolve("clusterMaxCells"),this._clusterWorldTextureId=t.scope.resolve("clusterWorldTexture"),this._clusterTextureSizeId=t.scope.resolve("clusterTextureSize"),this._clusterTextureSizeData=new Float32Array(3),this._clusterBoundsMinId=t.scope.resolve("clusterBoundsMin"),this._clusterBoundsMinData=new Float32Array(3),this._clusterBoundsDeltaId=t.scope.resolve("clusterBoundsDelta"),this._clusterBoundsDeltaData=new Float32Array(3),this._clusterCellsCountByBoundsSizeId=t.scope.resolve("clusterCellsCountByBoundsSize"),this._clusterCellsCountByBoundsSizeData=new Float32Array(3),this._clusterCellsDotId=t.scope.resolve("clusterCellsDot"),this._clusterCellsDotData=new Float32Array(3),this._clusterCellsMaxId=t.scope.resolve("clusterCellsMax"),this._clusterCellsMaxData=new Float32Array(3)}updateParams(t){t&&(this.cells=t.cells,this.maxCellLightCount=t.maxLightsPerCell,this.lightsBuffer.cookiesEnabled=t.cookiesEnabled,this.lightsBuffer.shadowsEnabled=t.shadowsEnabled,this.lightsBuffer.areaLightsEnabled=t.areaLightsEnabled)}updateCells(){if(this._cellsDirty){this._cellsDirty=!1;const t=this._cells.x,e=this._cells.y,s=this._cells.z,i=t*e*s,r=this.maxCellLightCount*i;let a=Math.ceil(Math.sqrt(r));a=Y.roundUp(a,this.maxCellLightCount);const n=Math.ceil(r/a);y.assert(a<=n_&&n<=n_,"Clustered lights parameters cause the texture size to be over the limit, please adjust them."),this._clusterCellsMaxData[0]=t,this._clusterCellsMaxData[1]=e,this._clusterCellsMaxData[2]=s,this._clusterCellsDotData[0]=this.maxCellLightCount,this._clusterCellsDotData[1]=t*s*this.maxCellLightCount,this._clusterCellsDotData[2]=t*this.maxCellLightCount,this.clusters=new Uint8ClampedArray(r),this.counts=new Int32Array(i),this._clusterTextureSizeData[0]=a,this._clusterTextureSizeData[1]=1/a,this._clusterTextureSizeData[2]=1/n,this.releaseClusterTexture(),this.clusterTexture=this.lightsBuffer.createTexture(this.device,a,n,Ku,"ClusterTexture")}}uploadTextures(){this.clusterTexture.lock().set(this.clusters),this.clusterTexture.unlock(),this.lightsBuffer.uploadTextures()}updateUniforms(){this._clusterSkipId.setValue(this._usedLights.length>1?0:1),this.lightsBuffer.updateUniforms(),this._clusterWorldTextureId.setValue(this.clusterTexture),this._clusterMaxCellsId.setValue(this.maxCellLightCount);const t=this.boundsDelta;this._clusterCellsCountByBoundsSizeData[0]=this._cells.x/t.x,this._clusterCellsCountByBoundsSizeData[1]=this._cells.y/t.y,this._clusterCellsCountByBoundsSizeData[2]=this._cells.z/t.z,this._clusterCellsCountByBoundsSizeId.setValue(this._clusterCellsCountByBoundsSizeData),this._clusterBoundsMinData[0]=this.boundsMin.x,this._clusterBoundsMinData[1]=this.boundsMin.y,this._clusterBoundsMinData[2]=this.boundsMin.z,this._clusterBoundsDeltaData[0]=t.x,this._clusterBoundsDeltaData[1]=t.y,this._clusterBoundsDeltaData[2]=t.z,this._clusterTextureSizeId.setValue(this._clusterTextureSizeData),this._clusterBoundsMinId.setValue(this._clusterBoundsMinData),this._clusterBoundsDeltaId.setValue(this._clusterBoundsDeltaData),this._clusterCellsDotId.setValue(this._clusterCellsDotData),this._clusterCellsMaxId.setValue(this._clusterCellsMaxData)}evalLightCellMinMax(t,e,s){e.copy(t.min),e.sub(this.boundsMin),e.div(this.boundsDelta),e.mul2(e,this.cells),e.floor(),s.copy(t.max),s.sub(this.boundsMin),s.div(this.boundsDelta),s.mul2(s,this.cells),s.ceil(),e.max(A.ZERO),s.min(this._cellsLimit)}collectLights(t){const e=this.lightsBuffer.maxLights,s=this._usedLights;let i=1;t.forEach(r=>{const a=!!(r.mask&(gs|di)),n=r.type===Ze&&r._outerConeAngle===0;if(r.enabled&&r.type!==ve&&r.visibleThisFrame&&r.intensity>0&&a&&!n)if(i<e){let o;i<s.length?o=s[i]:(o=new o_,s.push(o)),o.light=r,r.getBoundingBox(Dd),o.min.copy(Dd.getMin()),o.max.copy(Dd.getMax()),i++}else y.warnOnce(`Clustered lighting: more than ${e-1} lights in the frame, ignoring some.`)}),s.length=i}evaluateBounds(){const t=this._usedLights,e=this.boundsMin,s=this.boundsMax;if(t.length>1){e.copy(t[1].min),s.copy(t[1].max);for(let i=2;i<t.length;i++)e.min(t[i].min),s.max(t[i].max)}else e.set(0,0,0),s.set(1,1,1);this.boundsDelta.sub2(s,e),this.lightsBuffer.setBounds(e,this.boundsDelta)}updateClusters(t){this.counts.fill(0),this.clusters.fill(0),this.lightsBuffer.areaLightsEnabled=t?t.areaLightsEnabled:!1;const e=this._cells.x,s=this._cells.z,i=this.counts,r=this._maxCellLightCount,a=this.clusters,n=this.maxCellLightCount;let o=!1;const c=this._usedLights;for(let d=1;d<c.length;d++){const f=c[d],u=f.light;this.lightsBuffer.addLightData(u,d),this.evalLightCellMinMax(f,Xl,ql);const p=Xl.x,m=ql.x,_=Xl.y,S=ql.y,g=Xl.z,v=ql.z;for(let w=p;w<=m;w++)for(let x=g;x<=v;x++)for(let b=_;b<=S;b++){const C=w+e*(x+b*s),D=i[C];D<r?(a[n*C+D]=d,i[C]=D+1):o=!0}}o&&this.reportCount<5&&(console.warn(`Too many lights in light cluster ${this.name}, please adjust parameters.${this.reportCount===4?" Giving up on reporting it.":""}`),this.reportCount++)}update(t,e=null){this.updateParams(e),this.updateCells(),this.collectLights(t),this.evaluateBounds(),this.updateClusters(e),this.uploadTextures()}activate(){this.updateUniforms()}}const l_=2.399963229728653,Al={circlePoint(l){const t=Math.sqrt(Math.random()),e=Math.random()*2*Math.PI;l.x=t*Math.cos(e),l.y=t*Math.sin(e)},circlePointDeterministic(l,t,e){const s=t*l_,i=Math.sqrt(t)/Math.sqrt(e);l.x=i*Math.cos(s),l.y=i*Math.sin(s)},spherePointDeterministic(l,t,e,s=0,i=1){s=1-2*s,i=1-2*i;const r=Y.lerp(s,i,t/e),a=Math.sqrt(1-r*r),n=l_*t;l.x=Math.cos(n)*a,l.y=r,l.z=Math.sin(n)*a},radicalInverse(l){let t=(l<<16|l>>>16)>>>0;return t=((t&1431655765)<<1|(t&2863311530)>>>1)>>>0,t=((t&858993459)<<2|(t&3435973836)>>>2)>>>0,t=((t&252645135)<<4|(t&4042322160)>>>4)>>>0,t=((t&16711935)<<8|(t&4278255360)>>>8)>>>0,t*23283064365386963e-26}},Zw={linear:"decodeLinear",srgb:"decodeGamma",rgbm:"decodeRGBM",rgbe:"decodeRGBE",rgbp:"decodeRGBP",xy:"unpackNormalXY",xyz:"unpackNormalXYZ"},Qw={linear:"encodeLinear",srgb:"encodeGamma",rgbm:"encodeRGBM",rgbe:"encodeRGBE",rgbp:"encodeRGBP"};class xr{static decodeFunc(t){return Zw[t]??"decodeGamma"}static encodeFunc(t){return Qw[t]??"encodeGamma"}}const h_=l=>{switch(l){case Pf:return"Cubemap";case e0:return"Octahedral";default:return"Equirect"}},jl=(l,t,e)=>{if(l<=0)t[e+0]=0,t[e+1]=0,t[e+2]=0,t[e+3]=0;else if(l>=1)t[e+0]=255,t[e+1]=0,t[e+2]=0,t[e+3]=0;else{let s=1*l%1,i=255*l%1,r=65025*l%1;const a=16581375*l%1;s-=i/255,i-=r/255,r-=a/255,t[e+0]=Math.min(255,Math.floor(s*256)),t[e+1]=Math.min(255,Math.floor(i*256)),t[e+2]=Math.min(255,Math.floor(r*256)),t[e+3]=Math.min(255,Math.floor(a*256))}},Jw=l=>{const t=l.length,e=Math.min(t,512),s=Math.ceil(t/e),i=new Uint8Array(e*s*4);let r=0;for(let a=0;a<t;a+=4)jl(l[a+0]*.5+.5,i,r+0),jl(l[a+1]*.5+.5,i,r+4),jl(l[a+2]*.5+.5,i,r+8),jl(l[a+3]/8,i,r+12),r+=16;return{width:e,height:s,data:i}},eE=(l,t,e,s)=>{const i=e*2*Math.PI,r=Math.pow(1-t,1/(s+1)),a=Math.sqrt(1-r*r);l.set(Math.cos(i)*a,Math.sin(i)*a,r).normalize()},tE=(l,t,e)=>{const s=e*2*Math.PI,i=Math.sqrt(1-t),r=Math.sqrt(t);l.set(Math.cos(s)*r,Math.sin(s)*r,i).normalize()},sE=(l,t,e,s)=>{const i=e*2*Math.PI,r=Math.sqrt((1-t)/(1+(s*s-1)*t)),a=Math.sqrt(1-r*r);l.set(Math.cos(i)*a,Math.sin(i)*a,r).normalize()},iE=(l,t)=>{const e=l*t,s=t/(1-l*l+e*e);return s*s*(1/Math.PI)},rE=(l,t)=>{const e=new A,s=[];for(let i=0;i<l;++i)eE(e,i/l,Al.radicalInverse(i),t),s.push(e.x,e.y,e.z,0);return s},aE=(l,t)=>{const e=t/l,s=new A,i=[];for(let r=0;r<l;++r){tE(s,r/l,Al.radicalInverse(r));const a=s.z/Math.PI,n=.5*Math.log2(e/a);i.push(s.x,s.y,s.z,n)}return i},nE={16:{2:26,8:20,32:17,128:16,512:16},32:{2:53,8:40,32:34,128:32,512:32},128:{2:214,8:163,32:139,128:130,512:128},1024:{2:1722,8:1310,32:1114,128:1041,512:1025}},oE=(l,t)=>{const e=nE[l];return e&&e[t]||l},lE=(l,t,e)=>{const s=e/l,i=1-Math.log2(t)/11,r=i*i,a=new A,n=new A,o=new A(0,0,1),c=[],d=oE(l,t);for(let f=0;f<d;++f){sE(a,f/d,Al.radicalInverse(f),r);const u=a.z;if(n.set(a.x,a.y,a.z).mulScalar(2*u).sub(o),n.z>0){const p=iE(Math.min(1,u),r)/4+.001,m=.5*Math.log2(s/p);c.push(n.x,n.y,n.z,m)}}for(;c.length<l*4;)c.push(0,0,0,0);return c},hE=(l,t,e)=>{const s=Jw(e);return new ge(l,{name:t,width:s.width,height:s.height,mipmaps:!1,minFilter:Te,magFilter:Te,levels:[s.data]})};class Iy{constructor(t=!0){h(this,"map",new Map);this.destroyContent=t}destroy(){this.destroyContent&&this.map.forEach((t,e)=>{t.destroy()})}get(t,e){if(!this.map.has(t)){const s=e();return this.map.set(t,s),s}return this.map.get(t)}}const cE=new Iy(!1),dE=new jt,kp=(l,t,e)=>dE.get(l,()=>new Iy).get(t,()=>hE(l,t,cE.get(t,e))),fE=(l,t,e)=>{const s=`lambert-samples-${t}-${e}`;return kp(l,s,()=>aE(t,e))},uE=(l,t,e)=>{const s=`phong-samples-${t}-${e}`;return kp(l,s,()=>rE(t,e))},pE=(l,t,e,s)=>{const i=`ggx-samples-${t}-${e}-${s}`;return kp(l,i,()=>lE(t,e,s))};function Ti(l,t,e={}){var T,I;y.assert(l instanceof ge&&t instanceof ge,"source and target must be textures");const s=e.seamPixels??0,i=(((T=e.rect)==null?void 0:T.z)??t.width)-s*2,r=(((I=e.rect)==null?void 0:I.w)??t.height)-s*2;if(i<1||r<1)return!1;const a={none:"reproject",lambert:"prefilterSamplesUnweighted",phong:"prefilterSamplesUnweighted",ggx:"prefilterSamples"},n=e.hasOwnProperty("specularPower")?e.specularPower:1,o=e.hasOwnProperty("face")?e.face:null,c=e.hasOwnProperty("distribution")?e.distribution:n===1?"none":"phong",d=a[c]||"reproject",f=d.startsWith("prefilterSamples"),u=xr.decodeFunc(l.encoding),p=xr.encodeFunc(t.encoding),m=`sample${h_(l.projection)}`,_=`getDirection${h_(t.projection)}`,S=e.hasOwnProperty("numSamples")?e.numSamples:1024,g=`ReprojectShader:${d}_${u}_${p}_${m}_${_}_${S}`,v=l.device;let w=kn(v).getCachedShader(g);if(!w){const L=new Map;f&&L.set("USE_SAMPLES_TEX",""),l.cubemap&&L.set("CUBEMAP_SOURCE",""),L.set("{PROCESS_FUNC}",d),L.set("{DECODE_FUNC}",u),L.set("{ENCODE_FUNC}",p),L.set("{SOURCE_FUNC}",m),L.set("{TARGET_FUNC}",_),L.set("{NUM_SAMPLES}",S),L.set("{NUM_SAMPLES_SQRT}",Math.round(Math.sqrt(S)).toFixed(1));const E=v.isWebGPU,F=be.get(v,E?it:Oe),k=new Map;k.set("decodePS",F.get("decodePS")),k.set("encodePS",F.get("encodePS")),w=Wt.createShader(v,{uniqueName:g,attributes:{vertex_position:Ae},vertexChunk:"reprojectVS",fragmentChunk:"reprojectPS",fragmentIncludes:k,fragmentDefines:L})}Z.pushGpuMarker(v,"ReprojectTexture"),v.setBlendState(ut.NOBLEND);const x=v.scope.resolve(l.cubemap?"sourceCube":"sourceTex");y.assert(x),x.setValue(l);const b=v.scope.resolve("params"),C=v.scope.resolve("uvMod");s>0?C.setValue([(i+s*2)/i,(r+s*2)/r,-s/i,-s/r]):C.setValue([1,1,0,0]);const D=[0,t.width*t.height*(t.cubemap?6:1),l.width*l.height*(l.cubemap?6:1)];if(f){const L=l.width*l.height*(l.cubemap?6:1),E=c==="ggx"?pE(v,S,n,L):c==="lambert"?fE(v,S,L):uE(v,S,n);v.scope.resolve("samplesTex").setValue(E),v.scope.resolve("samplesTexInverseSize").setValue([1/E.width,1/E.height])}for(let L=0;L<(t.cubemap?6:1);L++)if(o===null||L===o){const E=new _t({colorBuffer:t,face:L,depth:!1,flipY:v.isWebGPU});D[0]=L,b.setValue(D),br(v,E,w,e==null?void 0:e.rect),E.destroy()}return Z.popGpuMarker(v),!0}const Id=(l,t=0)=>1+Math.floor(Math.log2(Math.max(l,t))),mE=l=>l.textureHalfFloatRenderable,_E=l=>l.textureFloatRenderable,gE=l=>mE(l)?nt:_E(l)?$t:Fe,SE=l=>Fe,yE=(l,t,e,s)=>new ge(l,{name:`lighting-${t}`,cubemap:!0,width:t,height:t,format:e,type:Go,addressU:me,addressV:me,mipmaps:!1});class My{static generateSkyboxCubemap(t,e){const s=t.device;Z.pushGpuMarker(s,"genSkyboxCubemap");const i=yE(s,e||(t.cubemap?t.width:t.width/4),Fe);return Ti(t,i,{numSamples:1024}),Z.popGpuMarker(s),i}static generateLightingSource(t,e){const s=t.device;Z.pushGpuMarker(s,"genLightingSource");const i=gE(s),r=(e==null?void 0:e.target)||new ge(s,{name:"lighting-source",cubemap:!0,width:(e==null?void 0:e.size)||128,height:(e==null?void 0:e.size)||128,format:i,type:i===Fe?Go:Ds,addressU:me,addressV:me,mipmaps:!0});return Ti(t,r,{numSamples:t.mipmaps?1:1024}),Z.popGpuMarker(s),r}static generateAtlas(t,e){const s=t.device,i=SE();Z.pushGpuMarker(s,"genAtlas");const r=(e==null?void 0:e.target)||new ge(s,{name:"envAtlas",width:(e==null?void 0:e.size)||512,height:(e==null?void 0:e.size)||512,format:i,type:Go,projection:dm,addressU:me,addressV:me,mipmaps:!1});Z.pushGpuMarker(s,"mipmaps");const a=r.width/512,n=new oe(0,0,512*a,256*a),o=Id(256)-Id(4);for(let c=0;c<o;++c)Ti(t,r,{numSamples:1,rect:n,seamPixels:a}),n.x+=n.w,n.y+=n.w,n.z=Math.max(1,Math.floor(n.z*.5)),n.w=Math.max(1,Math.floor(n.w*.5));Z.popGpuMarker(s),Z.pushGpuMarker(s,"reflections"),n.set(0,256*a,256*a,128*a);for(let c=1;c<7;++c)Ti(t,r,{numSamples:(e==null?void 0:e.numReflectionSamples)||1024,distribution:(e==null?void 0:e.distribution)||"ggx",specularPower:Math.max(1,2048>>c*2),rect:n,seamPixels:a}),n.y+=n.w,n.z=Math.max(1,Math.floor(n.z*.5)),n.w=Math.max(1,Math.floor(n.w*.5));return Z.popGpuMarker(s),Z.pushGpuMarker(s,"ambient"),n.set(128*a,384*a,64*a,32*a),Ti(t,r,{numSamples:(e==null?void 0:e.numAmbientSamples)||2048,distribution:"lambert",rect:n,seamPixels:a}),Z.popGpuMarker(s),Z.popGpuMarker(s),r}static generatePrefilteredAtlas(t,e){const s=t[0].device,i=t[0].format,r=t[0].type;Z.pushGpuMarker(s,"genPrefilteredAtlas");const a=(e==null?void 0:e.target)||new ge(s,{name:"envPrefilteredAtlas",width:(e==null?void 0:e.size)||512,height:(e==null?void 0:e.size)||512,format:i,type:r,projection:dm,addressU:me,addressV:me,mipmaps:!1});Z.pushGpuMarker(s,"mipmaps");const n=a.width/512,o=new oe(0,0,512*n,256*n),c=Id(512);for(let d=0;d<c;++d)Ti(t[0],a,{numSamples:1,rect:o,seamPixels:n}),o.x+=o.w,o.y+=o.w,o.z=Math.max(1,Math.floor(o.z*.5)),o.w=Math.max(1,Math.floor(o.w*.5));Z.popGpuMarker(s),Z.pushGpuMarker(s,"reflections"),o.set(0,256*n,256*n,128*n);for(let d=1;d<t.length;++d)Ti(t[d],a,{numSamples:1,rect:o,seamPixels:n}),o.y+=o.w,o.z=Math.max(1,Math.floor(o.z*.5)),o.w=Math.max(1,Math.floor(o.w*.5));return Z.popGpuMarker(s),Z.pushGpuMarker(s,"ambient"),o.set(128*n,384*n,64*n,32*n),e!=null&&e.legacyAmbient?Ti(t[5],a,{numSamples:1,rect:o,seamPixels:n}):Ti(t[0],a,{numSamples:(e==null?void 0:e.numSamples)||2048,distribution:"lambert",rect:o,seamPixels:n}),Z.popGpuMarker(s),Z.popGpuMarker(s),a}}const vE={aoPS:"1.57",clearCoatPS:"1.57",clearCoatGlossPS:"1.60",clearCoatNormalPS:"1.57",diffusePS:"1.57",emissivePS:"1.57",glossPS:"1.60",metalnessPS:"1.57",normalMapPS:"1.57",opacityPS:"1.57",parallaxPS:"1.57",sheenPS:"1.57",sheenGlossPS:"1.60",specularPS:"1.57",specularityFactorPS:"1.57",thicknessPS:"1.57",transmissionPS:"1.57",normalVertexPS:"1.55",aoDiffuseOccPS:"1.62",aoSpecOccPS:"2.6",clusteredLightPS:"1.62",clusteredLightShadowPS:"1.62",combinePS:"1.62",falloffInvSquaredPS:"1.62",falloffLinearPS:"1.62",lightDiffuseLambertPS:"1.62",lightSheenPS:"1.62",lightSpecularAnisoGGXPS:"1.62",lightSpecularBlinnPS:"1.62",ltcPS:"1.62",reflDirPS:"1.62",reflDirAnisoPS:"1.62",reflectionCCPS:"1.62",reflectionCubePS:"2.6",reflectionEnvPS:"2.6",reflectionEnvHQPS:"2.6",reflectionSpherePS:"2.6",reflectionSheenPS:"1.62",shadowCommonPS:"1.62",shadowCoordPS:"1.62",shadowCoordPerspZBufferPS:"1.62",shadowEVSMPS:"1.62",spotPS:"1.62",TBNPS:"1.62",endPS:"1.65",metalnessModulatePS:"1.65",outputAlphaPS:"1.65",outputAlphaPremulPS:"1.65",fresnelSchlickPS:"1.65",iridescenceDiffractionPS:"1.65",lightmapAddPS:"1.65",refractionCubePS:"1.70",refractionDynamicPS:"1.70"},c_={ambientPrefilteredCubePS:"1.51",ambientPrefilteredCubeLodPS:"1.51",dpAtlasQuadPS:"1.51",genParaboloidPS:"1.51",prefilterCubemapPS:"1.51",reflectionDpAtlasPS:"1.51",reflectionPrefilteredCubePS:"1.51",reflectionPrefilteredCubeLodPS:"1.51",refractionPS:"1.56",combineClearCoatPS:"1.56",combineDiffusePS:"1.56",combineDiffuseSpecularPS:"1.56",combineDiffuseSpecularNoReflPS:"1.56",combineDiffuseSpecularNoReflSeparateAmbientPS:"1.56",combineDiffuseSpecularOldPS:"1.56",lightmapSingleVertPS:"1.55",normalMapFastPS:"1.55",specularAaNonePS:"1.55",specularAaToksvigPS:"1.55",specularAaToksvigFastPS:"1.55",skyboxEnvPS:"2.1",skyboxHDRPS:"2.1",shadowVSM8PS:"2.3",fogExpPS:"2.5",fogExp2PS:"2.5",fogLinearPS:"2.5",fogNonePS:"2.5",gamma1_0PS:"2.5",gamma2_2PS:"2.5",storeEVSMPS:"2.6",shadowEVSMnPS:"2.6",shadowVSM_commonPS:"2.6",shadowStandardPS:"2.6",shadowStandardGL2PS:"2.6",startVS:"2.6",endVS:"2.6",baseVS:"2.6",baseNineSlicedVS:"2.6",viewNormalVS:"2.6",lightmapDirAddPS:"2.6",TBNObjectSpacePS:"2.6",TBNderivativePS:"2.6",startPS:"2.6",outputAlphaOpaque:"2.6",outputAlphaPremul:"2.6",cubeMapProjectBoxPS:"2.6",cubeMapProjectNonePS:"2.6",envMultiplyPS:"2.6",envConstPS:"2.6",aoSpecOccConstPS:"2.6",aoSpecOccConstSimplePS:"2.6",aoSpecOccSimplePS:"2.6",ambientConstantPS:"2.6",ambientEnvPS:"2.6",ambientSHPS:"2.6",shadowSampleCoordPS:"2.6",diffuseDetailMapPS:"2.7",normalDetailMapPS:"2.7",normalXYPS:"2.7",normalXYZPS:"2.7",aoDetailMapPS:"2.7",lightmapDirPS:"2.7",lightmapSinglePS:"2.7",tangentBinormalVS:"2.7"},xE=(l,t)=>{const e=l.split(".").map(i=>parseInt(i,10)),s=t.split(".").map(i=>parseInt(i,10));return e[0]<s[0]||e[0]===s[0]&&e[1]<s[1]},TE=(l,t)=>{for(const e of l.keys())if(c_.hasOwnProperty(e)){const s=c_[e];y.warnOnce(`Shader chunk '${e}' was removed in API ${s} and is no longer supported.`)}else{const s=vE[e];s&&(!t||xE(t,s))&&y.warnOnce(`Shader chunk '${e}' is API version ${s}, but the supplied chunk is version ${t||"undefined"}. Please update to the latest API: https://developer.playcanvas.com/user-manual/graphics/shader-chunk-migrations/`)}},Md={vertex_normal:_s,vertex_tangent:yi,vertex_texCoord0:ts,vertex_texCoord1:wa,vertex_color:Ht,vertex_boneWeights:gi,vertex_boneIndices:fs};class wE{constructor(t,e,s=!0){h(this,"varyingsCode","");h(this,"device");h(this,"options");h(this,"shaderLanguage");h(this,"vDefines",new Map);h(this,"fDefines",new Map);h(this,"includes",new Map);h(this,"chunks",null);this.device=t,this.options=e;const i=e.shaderChunks;if(this.shaderLanguage=t.isWebGPU&&s&&(i!=null&&i.useWGSL)?it:Oe,this.attributes={vertex_position:Ae},e.userAttributes)for(const[a,n]of Object.entries(e.userAttributes))this.attributes[n]=a;const r=be.get(t,this.shaderLanguage);if(this.chunks=new Map(r),i){const a=this.shaderLanguage===Oe?i.glsl:i.wgsl;y.call(()=>{TE(a,i.version)}),a.forEach((n,o)=>{for(const c in Md)Md.hasOwnProperty(c)&&n.indexOf(c)>=0&&(this.attributes[c]=Md[c]);this.chunks.set(o,n)})}this.shaderPassInfo=Si.get(this.device).getByIndex(e.pass),this.shadowPass=this.shaderPassInfo.isShadow,this.lighting=e.lights.length>0||e.dirLightMapEnabled||e.clusteredLightingEnabled,this.reflections=e.reflectionSource!==yr,this.needsNormal=this.lighting||this.reflections||e.useSpecular||e.ambientSH||e.useHeights||e.enableGGXSpecular||e.clusteredLightingEnabled&&!this.shadowPass||e.useClearCoatNormals,this.needsNormal=this.needsNormal&&!this.shadowPass,this.needsSceneColor=e.useDynamicRefraction,this.needsScreenSize=e.useDynamicRefraction,this.needsTransforms=e.useDynamicRefraction,this.vshader=null,this.fshader=null}fDefineSet(t,e,s=""){t&&this.fDefines.set(e,s)}generateVertexShader(t,e,s){const{options:i,vDefines:r,attributes:a}=this,n=new Map;if(n.set("vPositionW","vec3"),(i.nineSlicedMode===At||i.nineSlicedMode===Ct)&&r.set("NINESLICED",!0),this.options.linearDepth&&(r.set("LINEAR_DEPTH",!0),n.set("vLinearDepth","float")),this.needsNormal&&r.set("NORMALS",!0),this.options.useInstancing){const f=be.get(this.device,this.shaderLanguage);this.chunks.get("transformInstancingVS")===f.get("transformInstancingVS")&&(a.instance_line1=tp,a.instance_line2=sp,a.instance_line3=ip,a.instance_line4=An)}this.needsNormal&&(a.vertex_normal=_s,n.set("vNormalW","vec3"),i.hasTangents&&(i.useHeights||i.useNormals||i.useClearCoatNormals||i.enableGGXSpecular)?(r.set("TANGENTS",!0),a.vertex_tangent=yi,n.set("vTangentW","vec3"),n.set("vBinormalW","vec3")):i.enableGGXSpecular&&(r.set("GGX_SPECULAR",!0),n.set("vObjectSpaceUpW","vec3")));const o=2;for(let f=0;f<o;f++)t[f]&&(r.set(`UV${f}`,!0),a[`vertex_texCoord${f}`]=`TEXCOORD${f}`),e[f]&&(r.set(`UV${f}_UNMODIFIED`,!0),n.set(`vUv${f}`,"vec2"));let c=0;const d=new Set;s.forEach(f=>{const{id:u,uv:p,name:m}=f,_=u+p*100;if(!d.has(_)){d.add(_),n.set(`vUV${p}_${u}`,"vec2");const S=`texture_${m}MapTransform`;r.set(`{TRANSFORM_NAME_${c}}`,S),r.set(`{TRANSFORM_UV_${c}}`,p),r.set(`{TRANSFORM_ID_${c}}`,u),c++}}),r.set("UV_TRANSFORMS_COUNT",c),i.vertexColors&&(a.vertex_color=Ht,r.set("VERTEX_COLOR",!0),n.set("vVertexColor","vec4")),i.useMsdf&&i.msdfTextAttribute&&(a.vertex_outlineParameters=zo,a.vertex_shadowParameters=Vo,r.set("MSDF",!0)),(i.useMorphPosition||i.useMorphNormal)&&(r.set("MORPHING",!0),i.useMorphTextureBasedInt&&r.set("MORPHING_INT",!0),i.useMorphPosition&&r.set("MORPHING_POSITION",!0),i.useMorphNormal&&r.set("MORPHING_NORMAL",!0),a.morph_vertex_id=An),i.skin&&(a.vertex_boneIndices=fs,i.batch?r.set("BATCH",!0):(a.vertex_boneWeights=gi,r.set("SKIN",!0))),i.useInstancing&&r.set("INSTANCING",!0),i.screenSpace&&r.set("SCREENSPACE",!0),i.pixelSnap&&r.set("PIXELSNAP",!0),n.forEach((f,u)=>{this.varyingsCode+=`#define VARYING_${u.toUpperCase()}
`,this.varyingsCode+=this.shaderLanguage===it?`varying ${u}: ${WS.get(f)};
`:`varying ${f} ${u};
`}),this.includes.set("varyingsVS",this.varyingsCode),this.includes.set("varyingsPS",this.varyingsCode),this.vshader=`
            #include "litMainVS"
        `}_setupLightingDefines(t,e){const s=this.fDefines,i=this.options;if(this.fDefines.set("LIGHT_COUNT",i.lights.length),t&&s.set("AREA_LIGHTS",!0),e&&this.lighting&&(s.set("LIT_CLUSTERED_LIGHTS",!0),i.clusteredLightingCookiesEnabled&&s.set("CLUSTER_COOKIES",!0),i.clusteredLightingAreaLightsEnabled&&s.set("CLUSTER_AREALIGHTS",!0),i.lightMaskDynamic&&s.set("CLUSTER_MESH_DYNAMIC_LIGHTS",!0),i.clusteredLightingShadowsEnabled&&!i.noShadow)){const r=ji.get(i.clusteredLightingShadowType);s.set("CLUSTER_SHADOWS",!0),s.set(`SHADOW_KIND_${r.kind}`,!0),s.set(`CLUSTER_SHADOW_TYPE_${r.kind}`,!0)}for(let r=0;r<i.lights.length;r++){const a=i.lights[r],n=a._type;if(e&&n!==ve)continue;const o=t&&a._shape?a._shape:qs,c=a._shadowType,d=a.castShadows&&!i.noShadow,f=ji.get(c);y.assert(f),s.set(`LIGHT${r}`,!0),s.set(`LIGHT${r}TYPE`,`${Nm[n]}`),s.set(`LIGHT${r}SHADOWTYPE`,`${f.name}`),s.set(`LIGHT${r}SHAPE`,`${qT[o]}`),s.set(`LIGHT${r}FALLOFF`,`${jT[a._falloffMode]}`),a.affectSpecularity&&s.set(`LIGHT${r}AFFECT_SPECULARITY`,!0),a._cookie&&(n===Ze&&!a._cookie._cubemap||n===Ke&&a._cookie._cubemap)&&(s.set(`LIGHT${r}COOKIE`,!0),s.set(`{LIGHT${r}COOKIE_CHANNEL}`,a._cookieChannel),n===Ze&&(a._cookieTransform&&s.set(`LIGHT${r}COOKIE_TRANSFORM`,!0),a._cookieFalloff&&s.set(`LIGHT${r}COOKIE_FALLOFF`,!0))),d&&(s.set(`LIGHT${r}CASTSHADOW`,!0),f.pcf&&s.set(`LIGHT${r}SHADOW_PCF`,!0),a._normalOffsetBias&&!a._isVsm&&s.set(`LIGHT${r}_SHADOW_SAMPLE_NORMAL_OFFSET`,!0),n===ve&&(s.set(`LIGHT${r}_SHADOW_SAMPLE_ORTHO`,!0),a.cascadeBlend>0&&s.set(`LIGHT${r}_SHADOW_CASCADE_BLEND`,!0),a.numCascades>1&&s.set(`LIGHT${r}_SHADOW_CASCADES`,!0)),(f.pcf||f.pcss||this.device.isWebGPU)&&s.set(`LIGHT${r}_SHADOW_SAMPLE_SOURCE_ZBUFFER`,!0),n===Ke&&s.set(`LIGHT${r}_SHADOW_SAMPLE_POINT`,!0)),d&&(s.set(`SHADOW_KIND_${f.kind}`,!0),n===ve&&s.set("SHADOW_DIRECTIONAL",!0))}}prepareForwardPass(t){const{options:e}=this,i=e.clusteredLightingEnabled&&e.clusteredLightingAreaLightsEnabled||e.lights.some(n=>n._shape&&n._shape!==qs),r=!e.lightMapEnabled||e.lightMapWithoutAmbient,a=this.needsNormal&&(e.useNormals||e.useClearCoatNormals||e.enableGGXSpecular&&!e.useHeights);e.useSpecular&&(this.fDefineSet(!0,"LIT_SPECULAR"),this.fDefineSet(this.reflections,"LIT_REFLECTIONS"),this.fDefineSet(e.useClearCoat,"LIT_CLEARCOAT"),this.fDefineSet(e.fresnelModel>0,"LIT_SPECULAR_FRESNEL"),this.fDefineSet(e.useSheen,"LIT_SHEEN"),this.fDefineSet(e.useIridescence,"LIT_IRIDESCENCE")),this.fDefineSet(this.lighting&&e.useSpecular||this.reflections,"LIT_SPECULAR_OR_REFLECTION"),this.fDefineSet(this.needsSceneColor,"LIT_SCENE_COLOR"),this.fDefineSet(this.needsScreenSize,"LIT_SCREEN_SIZE"),this.fDefineSet(this.needsTransforms,"LIT_TRANSFORMS"),this.fDefineSet(this.needsNormal,"LIT_NEEDS_NORMAL"),this.fDefineSet(this.lighting,"LIT_LIGHTING"),this.fDefineSet(e.useMetalness,"LIT_METALNESS"),this.fDefineSet(e.enableGGXSpecular,"LIT_GGX_SPECULAR"),this.fDefineSet(e.useSpecularityFactor,"LIT_SPECULARITY_FACTOR"),this.fDefineSet(e.useCubeMapRotation,"CUBEMAP_ROTATION"),this.fDefineSet(e.occludeSpecularFloat,"LIT_OCCLUDE_SPECULAR_FLOAT"),this.fDefineSet(e.separateAmbient,"LIT_SEPARATE_AMBIENT"),this.fDefineSet(e.twoSidedLighting,"LIT_TWO_SIDED_LIGHTING"),this.fDefineSet(e.lightMapEnabled,"LIT_LIGHTMAP"),this.fDefineSet(e.dirLightMapEnabled,"LIT_DIR_LIGHTMAP"),this.fDefineSet(e.skyboxIntensity>0,"LIT_SKYBOX_INTENSITY"),this.fDefineSet(e.clusteredLightingShadowsEnabled,"LIT_CLUSTERED_SHADOWS"),this.fDefineSet(e.clusteredLightingAreaLightsEnabled,"LIT_CLUSTERED_AREA_LIGHTS"),this.fDefineSet(a,"LIT_TBN"),this.fDefineSet(r,"LIT_ADD_AMBIENT"),this.fDefineSet(e.hasTangents,"LIT_TANGENTS"),this.fDefineSet(e.useNormals,"LIT_USE_NORMALS"),this.fDefineSet(e.useClearCoatNormals,"LIT_USE_CLEARCOAT_NORMALS"),this.fDefineSet(e.useRefraction,"LIT_REFRACTION"),this.fDefineSet(e.useDynamicRefraction,"LIT_DYNAMIC_REFRACTION"),this.fDefineSet(e.dispersion,"LIT_DISPERSION"),this.fDefineSet(e.useHeights,"LIT_HEIGHTS"),this.fDefineSet(e.opacityFadesSpecular,"LIT_OPACITY_FADES_SPECULAR"),this.fDefineSet(e.alphaToCoverage,"LIT_ALPHA_TO_COVERAGE"),this.fDefineSet(e.alphaTest,"LIT_ALPHA_TEST"),this.fDefineSet(e.useMsdf,"LIT_MSDF"),this.fDefineSet(e.ssao,"LIT_SSAO"),this.fDefineSet(e.useAo,"LIT_AO"),this.fDefineSet(e.occludeDirect,"LIT_OCCLUDE_DIRECT"),this.fDefineSet(e.msdfTextAttribute,"LIT_MSDF_TEXT_ATTRIBUTE"),this.fDefineSet(e.diffuseMapEnabled,"LIT_DIFFUSE_MAP"),this.fDefineSet(e.shadowCatcher,"LIT_SHADOW_CATCHER"),this.fDefineSet(!0,"LIT_FRESNEL_MODEL",$T[e.fresnelModel]),this.fDefineSet(!0,"LIT_NONE_SLICE_MODE",aw[e.nineSlicedMode]),this.fDefineSet(!0,"LIT_BLEND_TYPE",ry[e.blendType]),this.fDefineSet(!0,"LIT_CUBEMAP_PROJECTION",ew[e.cubeMapProjection]),this.fDefineSet(!0,"LIT_OCCLUDE_SPECULAR",sw[e.occludeSpecular]),this.fDefineSet(!0,"LIT_REFLECTION_SOURCE",iw[e.reflectionSource]),this.fDefineSet(!0,"LIT_AMBIENT_SOURCE",rw[e.ambientSource]),this.fDefineSet(!0,"{lightingUv}",t??""),this.fDefineSet(!0,"{reflectionDecode}",xr.decodeFunc(e.reflectionEncoding)),this.fDefineSet(!0,"{reflectionCubemapDecode}",xr.decodeFunc(e.reflectionCubemapEncoding)),this.fDefineSet(!0,"{ambientDecode}",xr.decodeFunc(e.ambientEncoding)),this._setupLightingDefines(i,e.clusteredLightingEnabled)}prepareShadowPass(){const{options:t}=this,e=this.shaderPassInfo.lightType,s=this.shaderPassInfo.shadowType,i=ji.get(s);y.assert(i);const r=e===ve||!i.vsm&&e===Ze;this.fDefineSet(r,"PERSPECTIVE_DEPTH"),this.fDefineSet(!0,"LIGHT_TYPE",`${Nm[e]}`),this.fDefineSet(!0,"SHADOW_TYPE",`${i.name}`),this.fDefineSet(t.alphaTest,"LIT_ALPHA_TEST")}generateFragmentShader(t,e,s){const i=this.options;this.includes.set("frontendDeclPS",t??""),this.includes.set("frontendCodePS",e??""),i.pass===Wn||i.pass===wl||(this.shadowPass?this.prepareShadowPass():this.prepareForwardPass(s)),this.fshader=`
            #include "litMainPS"
        `}}class Ly{constructor(){h(this,"hasTangents",!1);h(this,"shaderChunks",null);h(this,"pass",0);h(this,"alphaTest",!1);h(this,"blendType",Cs);h(this,"separateAmbient",!1);h(this,"screenSpace",!1);h(this,"skin",!1);h(this,"batch",!1);h(this,"useInstancing",!1);h(this,"useMorphPosition",!1);h(this,"useMorphNormal",!1);h(this,"useMorphTextureBasedInt",!1);h(this,"nineSlicedMode",0);h(this,"clusteredLightingEnabled",!0);h(this,"clusteredLightingCookiesEnabled",!1);h(this,"clusteredLightingShadowsEnabled",!1);h(this,"clusteredLightingShadowType",0);h(this,"clusteredLightingAreaLightsEnabled",!1);h(this,"vertexColors",!1);h(this,"lightMapEnabled",!1);h(this,"dirLightMapEnabled",!1);h(this,"useHeights",!1);h(this,"useNormals",!1);h(this,"useClearCoatNormals",!1);h(this,"useAo",!1);h(this,"diffuseMapEnabled",!1);h(this,"pixelSnap",!1);h(this,"ambientSH",!1);h(this,"ssao",!1);h(this,"twoSidedLighting",!1);h(this,"occludeDirect",!1);h(this,"occludeSpecular",0);h(this,"occludeSpecularFloat",!1);h(this,"useMsdf",!1);h(this,"msdfTextAttribute",!1);h(this,"alphaToCoverage",!1);h(this,"opacityFadesSpecular",!1);h(this,"opacityDither",_a);h(this,"opacityShadowDither",_a);h(this,"cubeMapProjection",0);h(this,"useSpecular",!1);h(this,"useSpecularityFactor",!1);h(this,"enableGGXSpecular",!1);h(this,"fresnelModel",0);h(this,"useRefraction",!1);h(this,"useClearCoat",!1);h(this,"useSheen",!1);h(this,"useIridescence",!1);h(this,"useMetalness",!1);h(this,"useDynamicRefraction",!1);h(this,"dispersion",!1);h(this,"fog",Hn);h(this,"gamma",Tl);h(this,"toneMap",-1);h(this,"reflectionSource",yr);h(this,"reflectionEncoding",null);h(this,"reflectionCubemapEncoding",null);h(this,"ambientSource","constant");h(this,"ambientEncoding",null);h(this,"skyboxIntensity",1);h(this,"useCubeMapRotation",!1);h(this,"lightMapWithoutAmbient",!1);h(this,"lights",[]);h(this,"noShadow",!1);h(this,"lightMaskDynamic",0);h(this,"userAttributes",{});h(this,"linearDepth",!1);h(this,"shadowCatcher",!1)}}class tl{constructor(){h(this,"defines",new Map);h(this,"forceUv1",!1);h(this,"specularTint",!1);h(this,"metalnessTint",!1);h(this,"glossTint",!1);h(this,"emissiveEncoding","linear");h(this,"lightMapEncoding","linear");h(this,"packedNormal",!1);h(this,"normalDetailPackedNormal",!1);h(this,"clearCoatPackedNormal",!1);h(this,"glossInvert",!1);h(this,"sheenGlossInvert",!1);h(this,"clearCoatGlossInvert",!1);h(this,"useAO",!1);h(this,"litOptions",new Ly)}get pass(){return this.litOptions.pass}}const Ry={generateKey(l){return`lit${Object.keys(l).sort().map(t=>{var e;return t==="shaderChunks"?((e=l.shaderChunks)==null?void 0:e.key)??"":t==="lights"?Ry.generateLightsKey(l):t+l[t]}).join(`
`)}`},generateLightsKey(l){return`lights:${l.lights.map(t=>!l.clusteredLightingEnabled||t._type===ve?`${t.key},`:"").join("")}`}},vn=[],Ld=l=>Object.keys(l).filter(t=>t!=="litOptions").sort();class EE extends ga{constructor(){super(...arguments);h(this,"optionsContext",new tl);h(this,"optionsContextMin",new tl)}generateKey(e){let s;return e===this.optionsContextMin?(this.propsMin||(this.propsMin=Ld(e)),s=this.propsMin):e===this.optionsContext?(this.props||(this.props=Ld(e)),s=this.props):s=Ld(e),`standard:
${ga.definesHash(e.defines)}
${s.map(a=>a+e[a]).join(`
`)}${Ry.generateKey(e.litOptions)}`}_getUvSourceExpression(e,s,i){const r=i[e],a=i[s],n=i.litOptions.pass===Ea;let o;return n&&i.litOptions.nineSlicedMode===At||n&&i.litOptions.nineSlicedMode===Ct?o="nineSlicedUv":(r===0?o=`vUv${a}`:o=`vUV${a}_${r}`,i.heightMap&&e!=="heightMapTransform"&&(o+=" + dUvOffset")),o}_validateMapChunk(e,s,i){y.call(()=>{const r=i.get(s).replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm,"$1"),a=[],n=(o,c)=>{r.includes(o)&&a.push(`  ${o} -> ${c}`)};[["$UV",`{STD_${e}_TEXTURE_UV}`],["$CH",`{STD_${e}_TEXTURE_CHANNEL}`],["$SAMPLER",`{STD_${e}_TEXTURE_NAME}`],["$DECODE",`{STD_${e}_TEXTURE_DECODE}`],["$VC",`{STD_${e}_VERTEX_CHANNEL}`],["$DETAILMODE",`{STD_${e}_DETAILMODE}`],["unpackNormal(",`{STD_${e}_TEXTURE_DECODE}(`]].forEach(([o,c])=>n(o,c)),[["MAPFLOAT",`STD_${e}_CONSTANT`],["MAPCOLOR",`STD_${e}_CONSTANT`],["MAPVERTEX",`STD_${e}_VERTEX`],["MAPTEXTURE",`STD_${e}_TEXTURE`],["MAPINVERT",`STD_${e}_INVERT`]].forEach(([o,c])=>n(o,c)),r.includes("$texture2DSAMPLE")&&n("$texture2DSAMPLE","(Macro no longer supported - remove/refactor)"),a.length>0&&y.errorOnce(`Shader chunk ${s} is in no longer compatible format. Please make these replacements to bring it to the current version:
${a.join(`
`)}`,{code:r})})}_addMapDefines(e,s,i,r,a,n,o=null){const c=`${s}Map`,d=s.toUpperCase(),f=`${c}Uv`,u=`${c}Identifier`,p=`${c}Transform`,m=`${c}Channel`,_=`${s}VertexColorChannel`,S=`${s}Tint`,g=`${s}VertexColor`,v=`${s}Mode`,w=`${s}Invert`,x=r[S],b=r[g],C=r[c],D=r[u],T=r[v],I=a.get(i);if(y.assert(I,`Shader chunk ${i} not found.`),y.call(()=>{I&&this._validateMapChunk(d,i,a)}),C){e.set(`STD_${d}_TEXTURE`,"");const L=this._getUvSourceExpression(p,f,r);e.set(`{STD_${d}_TEXTURE_UV}`,L),e.set(`{STD_${d}_TEXTURE_CHANNEL}`,r[m]);const E=`{STD_${d}_TEXTURE_NAME}`;if(I.includes(E)){let F=`texture_${c}`;const k=n[D];k?F=k:(n[D]=F,e.set(`STD_${d}_TEXTURE_ALLOCATE`,"")),e.set(E,F)}if(o){const F=r[m]==="aaa"?"passThrough":xr.decodeFunc(o);e.set(`{STD_${d}_TEXTURE_DECODE}`,F)}}b&&(e.set(`STD_${d}_VERTEX`,""),e.set(`{STD_${d}_VERTEX_CHANNEL}`,r[_])),T&&e.set(`{STD_${d}_DETAILMODE}`,T),x&&e.set(`STD_${d}_CONSTANT`,""),r[w]&&e.set(`STD_${d}_INVERT`,"")}_correctChannel(e,s,i){if(i[e]>0){if(i[e]<s.length)return s.substring(0,i[e]);if(i[e]>s.length){let r=s;const a=r.charAt(r.length-1),n=i[e]-r.length;for(let o=0;o<n;o++)r+=a;return r}return s}}createVertexShader(e,s){const i=[],r=[],a=[];for(const o in vn){const c=`${o}Map`;if(s[`${o}VertexColor`]){const d=`${o}VertexColorChannel`;s[d]=this._correctChannel(o,s[d],vn)}if(s[c]){const d=`${c}Channel`,f=`${c}Transform`,u=`${c}Uv`;s[u]=Math.min(s[u],1),s[d]=this._correctChannel(o,s[d],vn);const p=s[u];i[p]=!0,r[p]=r[p]||s[c]&&!s[f],s[f]&&a.push({name:o,id:s[f],uv:s[u]})}}s.forceUv1&&(i[1]=!0,r[1]=r[1]!==void 0?r[1]:!0),e.generateVertexShader(i,r,a)}prepareFragmentDefines(e,s,i){const r=(a,n,o="")=>{a&&s.set(n,o)};r(e.lightMap,"STD_LIGHTMAP",""),r(e.lightVertexColor,"STD_LIGHT_VERTEX_COLOR",""),r(e.dirLightMap&&e.litOptions.useSpecular,"STD_LIGHTMAP_DIR",""),r(e.heightMap,"STD_HEIGHT_MAP",""),r(e.useSpecularColor,"STD_SPECULAR_COLOR",""),r(e.aoMap||e.aoVertexColor||e.useAO,"STD_AO",""),r(!0,"STD_OPACITY_DITHER",mw[i.isForward?e.litOptions.opacityDither:e.litOptions.opacityShadowDither])}createShaderDefinition(e,s){const i=Si.get(e).getByIndex(s.litOptions.pass),r=i.isForward,a=new wE(e,s.litOptions);this.createVertexShader(a,s);const n={};s.litOptions.fresnelModel=s.litOptions.fresnelModel===0?xp:s.litOptions.fresnelModel;const o=a.fDefines;this.prepareFragmentDefines(s,o,i);let c="";if(r){if(s.heightMap&&this._addMapDefines(o,"height","parallaxPS",s,a.chunks,n),(s.litOptions.blendType!==Cs||s.litOptions.alphaTest||s.litOptions.alphaToCoverage||s.litOptions.opacityDither!==_a)&&this._addMapDefines(o,"opacity","opacityPS",s,a.chunks,n),a.needsNormal){if((s.normalMap||s.clearCoatNormalMap)&&!s.litOptions.hasTangents){const p=s.normalMap?"normalMap":"clearCoatNormalMap";c=this._getUvSourceExpression(`${p}Transform`,`${p}Uv`,s)}this._addMapDefines(o,"normalDetail","normalMapPS",s,a.chunks,n,s.normalDetailPackedNormal?"xy":"xyz"),this._addMapDefines(o,"normal","normalMapPS",s,a.chunks,n,s.packedNormal?"xy":"xyz")}s.diffuseDetail&&this._addMapDefines(o,"diffuseDetail","diffusePS",s,a.chunks,n,s.diffuseDetailEncoding),this._addMapDefines(o,"diffuse","diffusePS",s,a.chunks,n,s.diffuseEncoding),s.litOptions.useRefraction&&(this._addMapDefines(o,"refraction","transmissionPS",s,a.chunks,n),this._addMapDefines(o,"thickness","thicknessPS",s,a.chunks,n)),s.litOptions.useIridescence&&(this._addMapDefines(o,"iridescence","iridescencePS",s,a.chunks,n),this._addMapDefines(o,"iridescenceThickness","iridescenceThicknessPS",s,a.chunks,n)),(a.lighting&&s.litOptions.useSpecular||a.reflections)&&(s.litOptions.useSheen&&(this._addMapDefines(o,"sheen","sheenPS",s,a.chunks,n,s.sheenEncoding),this._addMapDefines(o,"sheenGloss","sheenGlossPS",s,a.chunks,n)),s.litOptions.useMetalness&&(this._addMapDefines(o,"metalness","metalnessPS",s,a.chunks,n),this._addMapDefines(o,"ior","iorPS",s,a.chunks,n)),s.litOptions.useSpecularityFactor&&this._addMapDefines(o,"specularityFactor","specularityFactorPS",s,a.chunks,n),s.useSpecularColor&&this._addMapDefines(o,"specular","specularPS",s,a.chunks,n,s.specularEncoding),this._addMapDefines(o,"gloss","glossPS",s,a.chunks,n)),s.aoDetail&&this._addMapDefines(o,"aoDetail","aoPS",s,a.chunks,n),(s.aoMap||s.aoVertexColor||s.useAO)&&this._addMapDefines(o,"ao","aoPS",s,a.chunks,n),this._addMapDefines(o,"emissive","emissivePS",s,a.chunks,n,s.emissiveEncoding),s.litOptions.useClearCoat&&(this._addMapDefines(o,"clearCoat","clearCoatPS",s,a.chunks,n),this._addMapDefines(o,"clearCoatGloss","clearCoatGlossPS",s,a.chunks,n),this._addMapDefines(o,"clearCoatNormal","clearCoatNormalPS",s,a.chunks,n,s.clearCoatPackedNormal?"xy":"xyz")),s.litOptions.enableGGXSpecular&&this._addMapDefines(o,"anisotropy","anisotropyPS",s,a.chunks,n),(s.lightMap||s.lightVertexColor)&&this._addMapDefines(o,"light","lightmapPS",s,a.chunks,n,s.lightMapEncoding)}else{const p=s.litOptions.opacityShadowDither;(s.litOptions.alphaTest||p)&&this._addMapDefines(o,"opacity","opacityPS",s,a.chunks,n)}a.generateFragmentShader(a.chunks.get("stdDeclarationPS"),a.chunks.get("stdFrontEndPS"),c);const d=rc.merge(a.chunks,a.includes),f=a.vDefines;s.defines.forEach((p,m)=>f.set(m,p)),s.defines.forEach((p,m)=>o.set(m,p));const u=Zt.createDefinition(e,{name:"StandardShader",attributes:a.attributes,shaderLanguage:a.shaderLanguage,vertexCode:a.vshader,fragmentCode:a.fshader,vertexIncludes:d,fragmentIncludes:d,fragmentDefines:o,vertexDefines:f});return a.shaderPassInfo.isForward&&(u.tag=CS),u}}const Rd=new EE,es=[];es[pp]={src:Rt,dst:Rt,op:Ox};es[Cs]={src:Rt,dst:Iu,op:ds};es[Ks]={src:Cc,dst:Pc,op:ds,alphaSrc:Rt};es[Nn]={src:Rt,dst:Pc,op:ds};es[mp]={src:Rt,dst:Rt,op:ds};es[id]={src:Cc,dst:Rt,op:ds};es[gp]={src:lS,dst:Lx,op:ds};es[Sp]={src:Rx,dst:Rt,op:ds};es[_p]={src:lS,dst:Iu,op:ds};es[yp]={src:Rt,dst:Rt,op:Fx};es[vp]={src:Rt,dst:Rt,op:Nx};let bE=0;class sr{constructor(){h(this,"meshInstances",[]);h(this,"name","Untitled");h(this,"userId","");h(this,"id",bE++);h(this,"variants",new Map);h(this,"defines",new Map);h(this,"_definesDirty",!1);h(this,"parameters",{});h(this,"alphaTest",0);h(this,"alphaToCoverage",!1);h(this,"_blendState",new ut);h(this,"_depthState",new qt);h(this,"cull",fa);h(this,"stencilFront",null);h(this,"stencilBack",null);h(this,"_shaderChunks",null);h(this,"_oldChunks",{});h(this,"_dirtyShader",!0);h(this,"_shaderVersion",0);h(this,"_scene",null);h(this,"dirty",!0);new.target===sr&&y.error("Material class cannot be instantiated, use ShaderMaterial instead")}get hasShaderChunks(){return this._shaderChunks!=null}get shaderChunks(){return this._shaderChunks||(this._shaderChunks=new be),this._shaderChunks}getShaderChunks(t=Oe){const e=this.shaderChunks;return t===Oe?e.glsl:e.wgsl}set shaderChunksVersion(t){this.shaderChunks.version=t}get shaderChunksVersion(){return this.shaderChunks.version}set chunks(t){y.deprecated('Material.chunks has been removed, please use Material.getShaderChunks instead. For example: material.getShaderChunks(pc.SHADERLANGUAGE_GLSL).set("chunkName", "chunkCode")'),this._oldChunks=t}get chunks(){return y.deprecated('Material.chunks has been removed, please use Material.getShaderChunks instead. For example: material.getShaderChunks(pc.SHADERLANGUAGE_GLSL).set("chunkName", "chunkCode")'),Object.assign(this._oldChunks,Object.fromEntries(this.shaderChunks.glsl)),this._oldChunks}set depthBias(t){this._depthState.depthBias=t}get depthBias(){return this._depthState.depthBias}set slopeDepthBias(t){this._depthState.depthBiasSlope=t}get slopeDepthBias(){return this._depthState.depthBiasSlope}set redWrite(t){this._blendState.redWrite=t}get redWrite(){return this._blendState.redWrite}set greenWrite(t){this._blendState.greenWrite=t}get greenWrite(){return this._blendState.greenWrite}set blueWrite(t){this._blendState.blueWrite=t}get blueWrite(){return this._blendState.blueWrite}set alphaWrite(t){this._blendState.alphaWrite=t}get alphaWrite(){return this._blendState.alphaWrite}get transparent(){return this._blendState.blend}_updateTransparency(){const t=this.transparent,e=this.meshInstances;for(let s=0;s<e.length;s++)e[s].transparent=t}set blendState(t){this._blendState.copy(t),this._updateTransparency()}get blendState(){return this._blendState}set blendType(t){const e=es[t];y.assert(e,`Unknown blend mode ${t}`),this._blendState.setColorBlend(e.op,e.src,e.dst),this._blendState.setAlphaBlend(e.alphaOp??e.op,e.alphaSrc??e.src,e.alphaDst??e.dst);const s=t!==Cs;this._blendState.blend!==s&&(this._blendState.blend=s,this._updateTransparency()),this._updateMeshInstanceKeys()}get blendType(){if(!this.transparent)return Cs;const{colorOp:t,colorSrcFactor:e,colorDstFactor:s,alphaOp:i,alphaSrcFactor:r,alphaDstFactor:a}=this._blendState;for(let n=0;n<es.length;n++){const o=es[n];if(o.src===e&&o.dst===s&&o.op===t&&o.src===r&&o.dst===a&&o.op===i)return n}return Ks}set depthState(t){this._depthState.copy(t)}get depthState(){return this._depthState}set depthTest(t){this._depthState.test=t}get depthTest(){return this._depthState.test}set depthFunc(t){this._depthState.func=t}get depthFunc(){return this._depthState.func}set depthWrite(t){this._depthState.write=t}get depthWrite(){return this._depthState.write}copy(t){var e,s;this.name=t.name,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this._blendState.copy(t._blendState),this._depthState.copy(t._depthState),this.cull=t.cull,this.stencilFront=(e=t.stencilFront)==null?void 0:e.clone(),t.stencilBack&&(this.stencilBack=t.stencilFront===t.stencilBack?this.stencilFront:t.stencilBack.clone()),this.clearParameters();for(const i in t.parameters)t.parameters.hasOwnProperty(i)&&this._setParameterSimple(i,t.parameters[i].data);return this.defines.clear(),t.defines.forEach((i,r)=>this.defines.set(r,i)),this._shaderChunks=t.hasShaderChunks?new be:null,(s=this._shaderChunks)==null||s.copy(t._shaderChunks),this}clone(){return new this.constructor().copy(this)}_updateMeshInstanceKeys(){const t=this.meshInstances;for(let e=0;e<t.length;e++)t[e].updateKey()}updateUniforms(t,e){this._dirtyShader&&this.clearVariants()}getShaderVariant(t){y.assert(!1,"Not implemented")}update(){var t,e;if(Object.keys(this._oldChunks).length>0)for(const[s,i]of Object.entries(this._oldChunks))this.shaderChunks.glsl.set(s,i),delete this._oldChunks[s];(this._definesDirty||(t=this._shaderChunks)!=null&&t.isDirty())&&(this._definesDirty=!1,(e=this._shaderChunks)==null||e.resetDirty(),this.clearVariants()),this.dirty=!0}clearParameters(){this.parameters={}}getParameters(){return this.parameters}clearVariants(){this.variants.clear();const t=this.meshInstances,e=t.length;for(let s=0;s<e;s++)t[s].clearShaders()}getParameter(t){return this.parameters[t]}_setParameterSimple(t,e){y.call(()=>{e===void 0&&y.warnOnce(`Material#setParameter: Attempting to set undefined data for parameter "${t}", this is likely not expected.`,this)});const s=this.parameters[t];s?s.data=e:this.parameters[t]={scopeId:null,data:e}}setParameter(t,e){if(e===void 0&&typeof t=="object"){const s=t;if(s.length){for(let i=0;i<s.length;i++)this.setParameter(s[i]);return}t=s.name,e=s.value}this._setParameterSimple(t,e)}deleteParameter(t){this.parameters[t]&&delete this.parameters[t]}setParameters(t,e){const s=this.parameters;e===void 0&&(e=s);for(const i in e){const r=s[i];r&&(r.scopeId||(r.scopeId=t.scope.resolve(i)),r.scopeId.setValue(r.data))}}setDefine(t,e){let s=!1;const{defines:i}=this;e!==void 0&&e!==!1?(s=!i.has(t)||i.get(t)!==e,i.set(t,e)):(s=i.has(t),i.delete(t)),this._definesDirty||(this._definesDirty=s)}getDefine(t){return this.defines.has(t)}destroy(){this.variants.clear();for(let t=0;t<this.meshInstances.length;t++){const e=this.meshInstances[t];if(e.clearShaders(),e._material=null,e.mesh){const s=$n(e.mesh.device);this!==s&&(e.material=s)}else y.warn("pc.Material: MeshInstance.mesh is null, default material cannot be assigned to the MeshInstance")}this.meshInstances.length=0}addMeshInstanceRef(t){this.meshInstances.push(t)}removeMeshInstanceRef(t){const e=this.meshInstances,s=e.indexOf(t);s!==-1&&e.splice(s,1)}}class Gs{static update(t,e,s,i,r,a,n){Gs.updateSharedOptions(t,e,s,r,a),Gs.updateMaterialOptions(t,e),Gs.updateEnvOptions(t,e,s,i),Gs.updateLightingOptions(t,e,s,r,n)}static updateSharedOptions(t,e,s,i,r){t.shaderChunks=e.shaderChunks,t.pass=r,t.alphaTest=e.alphaTest>0,t.blendType=e.blendType,t.screenSpace=i&&(i&ic)!==0,t.skin=i&&(i&Ko)!==0,t.useInstancing=i&&(i&Zo)!==0,t.useMorphPosition=i&&(i&Qo)!==0,t.useMorphNormal=i&&(i&Jo)!==0,t.useMorphTextureBasedInt=i&&(i&el)!==0,t.hasTangents=i&&(i&Rp)!==0,t.nineSlicedMode=e.nineSlicedMode||hi,e.useLighting&&s.clusteredLightingEnabled?(t.clusteredLightingEnabled=!0,t.clusteredLightingCookiesEnabled=s.lighting.cookiesEnabled,t.clusteredLightingShadowsEnabled=s.lighting.shadowsEnabled,t.clusteredLightingShadowType=s.lighting.shadowType,t.clusteredLightingAreaLightsEnabled=s.lighting.areaLightsEnabled):(t.clusteredLightingEnabled=!1,t.clusteredLightingCookiesEnabled=!1,t.clusteredLightingShadowsEnabled=!1,t.clusteredLightingAreaLightsEnabled=!1)}static updateMaterialOptions(t,e){t.separateAmbient=!1,t.pixelSnap=e.pixelSnap,t.ambientSH=e.ambientSH,t.twoSidedLighting=e.twoSidedLighting,t.occludeDirect=e.occludeDirect,t.occludeSpecular=e.occludeSpecular,t.occludeSpecularFloat=e.occludeSpecularIntensity!==1,t.useMsdf=!1,t.msdfTextAttribute=!1,t.alphaToCoverage=e.alphaToCoverage,t.opacityFadesSpecular=e.opacityFadesSpecular,t.opacityDither=e.opacityDither,t.cubeMapProjection=Cp,t.useSpecular=e.hasSpecular,t.useSpecularityFactor=e.hasSpecularityFactor,t.enableGGXSpecular=e.ggxSpecular,t.fresnelModel=e.fresnelModel,t.useRefraction=e.hasRefraction,t.useClearCoat=e.hasClearCoat,t.useSheen=e.hasSheen,t.useIridescence=e.hasIrridescence,t.useMetalness=e.hasMetalness,t.useDynamicRefraction=e.dynamicRefraction,t.dispersion=e.dispersion>0,t.vertexColors=!1,t.lightMapEnabled=e.hasLighting,t.dirLightMapEnabled=e.dirLightMap,t.useHeights=e.hasHeights,t.useNormals=e.hasNormals,t.useClearCoatNormals=e.hasClearCoatNormals,t.useAo=e.hasAo,t.diffuseMapEnabled=e.hasDiffuseMap}static updateEnvOptions(t,e,s,i){t.fog=e.useFog?i.fog:Hn,t.gamma=i.shaderOutputGamma,t.toneMap=e.useTonemap?i.toneMapping:my,e.useSkybox&&s.envAtlas&&s.skybox?(t.reflectionSource=ec,t.reflectionEncoding=s.envAtlas.encoding,t.reflectionCubemapEncoding=s.skybox.encoding):e.useSkybox&&s.envAtlas?(t.reflectionSource=Jh,t.reflectionEncoding=s.envAtlas.encoding):e.useSkybox&&s.skybox?(t.reflectionSource=tc,t.reflectionEncoding=s.skybox.encoding):(t.reflectionSource=yr,t.reflectionEncoding=null),e.ambientSH?(t.ambientSource=Dp,t.ambientEncoding=null):t.reflectionSource!==yr&&s.envAtlas?(t.ambientSource=Ip,t.ambientEncoding=s.envAtlas.encoding):(t.ambientSource=Mp,t.ambientEncoding=null);const r=t.reflectionSource!==yr;t.skyboxIntensity=r,t.useCubeMapRotation=r&&s._skyboxRotationShaderInclude}static updateLightingOptions(t,e,s,i,r){if(t.lightMapWithoutAmbient=!1,e.useLighting){const a=[],n=i?i>>16:gs;t.lightMaskDynamic=!!(n&gs),t.lightMapWithoutAmbient=!1,r&&(Gs.collectLights(ve,r[ve],a,n),s.clusteredLightingEnabled||(Gs.collectLights(Ke,r[Ke],a,n),Gs.collectLights(Ze,r[Ze],a,n))),t.lights=a}else t.lights=[];(t.lights.length===0&&!s.clusteredLightingEnabled||(i&sc)!==0)&&(t.noShadow=!0)}static collectLights(t,e,s,i){for(let r=0;r<e.length;r++){const a=e[r];a.enabled&&a.mask&i&&s.push(a)}}}const d_=(l,t)=>{if(l.length!==t.length)return!1;for(let e=0;e<l.length;++e)if(l[e]!==t[e])return!1;return!0},AE=l=>l.r!==1||l.g!==1||l.b!==1,CE=l=>l.r!==0||l.g!==0||l.b!==0;class PE{constructor(){this._mapXForms=null}updateMinRef(t,e,s,i,r,a){this._updateSharedOptions(t,e,s,i,r),this._updateMinOptions(t,s,r),this._updateUVOptions(t,s,i,!0)}updateRef(t,e,s,i,r,a,n){this._updateSharedOptions(t,e,i,r,a),this._updateEnvOptions(t,i,e,s),this._updateMaterialOptions(t,i,e),t.litOptions.hasTangents=r&&(r&Rp)!==0,this._updateLightOptions(t,e,i,r,n),this._updateUVOptions(t,i,r,!1,s)}_updateSharedOptions(t,e,s,i,r){t.forceUv1=s.forceUv1,s.userAttributes&&(t.litOptions.userAttributes=Object.fromEntries(s.userAttributes.entries())),t.litOptions.shaderChunks=s.shaderChunks,t.litOptions.pass=r,t.litOptions.alphaTest=s.alphaTest>0,t.litOptions.blendType=s.blendType,t.litOptions.screenSpace=i&&(i&ic)!==0,t.litOptions.skin=i&&(i&Ko)!==0,t.litOptions.batch=i&&(i&Ah)!==0,t.litOptions.useInstancing=i&&(i&Zo)!==0,t.litOptions.useMorphPosition=i&&(i&Qo)!==0,t.litOptions.useMorphNormal=i&&(i&Jo)!==0,t.litOptions.useMorphTextureBasedInt=i&&(i&el)!==0,t.litOptions.nineSlicedMode=s.nineSlicedMode||0,e.clusteredLightingEnabled&&s.useLighting?(t.litOptions.clusteredLightingEnabled=!0,t.litOptions.clusteredLightingCookiesEnabled=e.lighting.cookiesEnabled,t.litOptions.clusteredLightingShadowsEnabled=e.lighting.shadowsEnabled,t.litOptions.clusteredLightingShadowType=e.lighting.shadowType,t.litOptions.clusteredLightingAreaLightsEnabled=e.lighting.areaLightsEnabled):(t.litOptions.clusteredLightingEnabled=!1,t.litOptions.clusteredLightingCookiesEnabled=!1,t.litOptions.clusteredLightingShadowsEnabled=!1,t.litOptions.clusteredLightingAreaLightsEnabled=!1)}_updateUVOptions(t,e,s,i,r){let a=!1,n=!1,o=!1;s&&(a=(s&Lp)!==0,n=(s&vy)!==0,o=(s&xy)!==0),t.litOptions.vertexColors=!1,this._mapXForms=[];const c={};for(const d in vn)this._updateTexOptions(t,e,d,a,n,o,i,c);this._mapXForms=null,t.litOptions.ssao=r==null?void 0:r.ssaoEnabled,t.useAO=t.litOptions.ssao,t.litOptions.lightMapEnabled=t.lightMap,t.litOptions.dirLightMapEnabled=t.dirLightMap,t.litOptions.useHeights=t.heightMap,t.litOptions.useNormals=t.normalMap,t.litOptions.useClearCoatNormals=t.clearCoatNormalMap,t.litOptions.useAo=t.aoMap||t.aoVertexColor||t.litOptions.ssao,t.litOptions.diffuseMapEnabled=t.diffuseMap}_updateTexOptions(t,e,s,i,r,a,n,o){const c=s==="opacity";if(!n||c){const d=`${s}Map`,f=`${s}VertexColor`,u=`${s}VertexColorChannel`,p=`${d}Channel`,m=`${d}Transform`,_=`${d}Uv`,S=`${d}Identifier`;if(s!=="light"&&(t[d]=!1,t[S]=void 0,t[p]="",t[m]=0,t[_]=0),t[f]=!1,t[u]="",c&&e.blendType===Cs&&e.alphaTest===0&&!e.alphaToCoverage&&e.opacityDither===_a)return;if(s!=="height"&&e[f]&&a&&(t[f]=e[f],t[u]=e[u],t.litOptions.vertexColors=!0),e[d]){let g=!0;if(e[_]===0&&!i&&(g=!1),e[_]===1&&!r&&(g=!1),g){const v=e[d].id;let w=o[v];w===void 0&&(o[v]=s,w=s),t[d]=!!e[d],t[S]=w,t[m]=this._getMapTransformID(e.getUniform(m),e[_]),t[p]=e[p],t[_]=e[_]}}}}_updateMinOptions(t,e,s){const i=s===wl;t.litOptions.opacityShadowDither=i?e.opacityDither:e.opacityShadowDither,t.litOptions.linearDepth=i,t.litOptions.lights=[]}_updateMaterialOptions(t,e,s){var d,f,u,p,m,_;const i=!!(e.useMetalness||e.specularMap||e.sphereMap||e.cubeMap||CE(e.specular)||e.specularityFactor>0&&e.useMetalness||e.enableGGXSpecular||e.clearCoat>0),r=!e.useMetalness||e.useMetalnessSpecularColor,a=i&&(e.specularTint||!e.specularMap&&!e.specularVertexColor)&&AE(e.specular),n=i&&e.useMetalnessSpecularColor&&(e.specularityFactorTint||e.specularityFactor<1&&!e.specularityFactorMap),o=S=>S?S.format===cl||S.type===Ho:!1,c=(S,g)=>Math.abs(S-g)<1e-4;t.specularTint=a,t.specularityFactorTint=n,t.metalnessTint=e.useMetalness&&e.metalness<1,t.glossTint=!0,t.diffuseEncoding=(d=e.diffuseMap)==null?void 0:d.encoding,t.diffuseDetailEncoding=(f=e.diffuseDetailMap)==null?void 0:f.encoding,t.emissiveEncoding=(u=e.emissiveMap)==null?void 0:u.encoding,t.lightMapEncoding=(p=e.lightMap)==null?void 0:p.encoding,t.packedNormal=o(e.normalMap),t.refractionTint=c(e.refraction,1),t.refractionIndexTint=c(e.refractionIndex,1/1.5),t.thicknessTint=e.useDynamicRefraction&&e.thickness!==1,t.specularEncoding=(m=e.specularMap)==null?void 0:m.encoding,t.sheenEncoding=(_=e.sheenMap)==null?void 0:_.encoding,t.aoMapUv=e.aoUvSet,t.aoDetail=!!e.aoDetailMap,t.diffuseDetail=!!e.diffuseDetailMap,t.normalDetail=!!e.normalMap,t.normalDetailPackedNormal=o(e.normalDetailMap),t.diffuseDetailMode=e.diffuseDetailMode,t.aoDetailMode=e.aoDetailMode,t.clearCoatGloss=!!e.clearCoatGloss,t.clearCoatPackedNormal=o(e.clearCoatNormalMap),t.iorTint=c(e.refractionIndex,1/1.5),s.forcePassThroughSpecular&&(t.specularEncoding="linear",t.sheenEncoding="linear"),t.iridescenceTint=e.iridescence!==1,t.glossInvert=e.glossInvert,t.sheenGlossInvert=e.sheenGlossInvert,t.clearCoatGlossInvert=e.clearCoatGlossInvert,t.useSpecularColor=r,t.litOptions.separateAmbient=!1,t.litOptions.pixelSnap=e.pixelSnap,t.litOptions.ambientSH=!!e.ambientSH,t.litOptions.twoSidedLighting=e.twoSidedLighting,t.litOptions.occludeSpecular=e.occludeSpecular,t.litOptions.occludeSpecularFloat=e.occludeSpecularIntensity!==1,t.litOptions.useMsdf=!!e.msdfMap,t.litOptions.msdfTextAttribute=!!e.msdfTextAttribute,t.litOptions.alphaToCoverage=e.alphaToCoverage,t.litOptions.opacityFadesSpecular=e.opacityFadesSpecular,t.litOptions.opacityDither=e.opacityDither,t.litOptions.cubeMapProjection=e.cubeMapProjection,t.litOptions.occludeDirect=e.occludeDirect,t.litOptions.useSpecular=i,t.litOptions.useSpecularityFactor=(n||!!e.specularityFactorMap)&&e.useMetalnessSpecularColor,t.litOptions.enableGGXSpecular=e.enableGGXSpecular,t.litOptions.fresnelModel=e.fresnelModel,t.litOptions.useRefraction=(e.refraction||!!e.refractionMap)&&(e.useDynamicRefraction||t.litOptions.reflectionSource!==yr),t.litOptions.useClearCoat=!!e.clearCoat,t.litOptions.useSheen=e.useSheen,t.litOptions.useIridescence=e.useIridescence&&e.iridescence!==0,t.litOptions.useMetalness=e.useMetalness,t.litOptions.useDynamicRefraction=e.useDynamicRefraction,t.litOptions.dispersion=e.dispersion>0,t.litOptions.shadowCatcher=e.shadowCatcher}_updateEnvOptions(t,e,s,i){t.litOptions.fog=e.useFog?i.fog:Hn,t.litOptions.gamma=i.shaderOutputGamma,t.litOptions.toneMap=e.useTonemap?i.toneMapping:my;let r=!1;if(e.envAtlas&&e.cubeMap?(t.litOptions.reflectionSource=ec,t.litOptions.reflectionEncoding=e.envAtlas.encoding,t.litOptions.reflectionCubemapEncoding=e.cubeMap.encoding):e.envAtlas?(t.litOptions.reflectionSource=Jh,t.litOptions.reflectionEncoding=e.envAtlas.encoding):e.cubeMap?(t.litOptions.reflectionSource=tc,t.litOptions.reflectionEncoding=e.cubeMap.encoding):e.sphereMap?(t.litOptions.reflectionSource=yy,t.litOptions.reflectionEncoding=e.sphereMap.encoding):e.useSkybox&&s.envAtlas&&s.skybox?(t.litOptions.reflectionSource=ec,t.litOptions.reflectionEncoding=s.envAtlas.encoding,t.litOptions.reflectionCubemapEncoding=s.skybox.encoding,r=!0):e.useSkybox&&s.envAtlas?(t.litOptions.reflectionSource=Jh,t.litOptions.reflectionEncoding=s.envAtlas.encoding,r=!0):e.useSkybox&&s.skybox?(t.litOptions.reflectionSource=tc,t.litOptions.reflectionEncoding=s.skybox.encoding,r=!0):(t.litOptions.reflectionSource=yr,t.litOptions.reflectionEncoding=null),e.ambientSH)t.litOptions.ambientSource=Dp,t.litOptions.ambientEncoding=null;else{const a=e.envAtlas||(e.useSkybox&&s.envAtlas?s.envAtlas:null);a&&!e.sphereMap?(t.litOptions.ambientSource=Ip,t.litOptions.ambientEncoding=a.encoding):(t.litOptions.ambientSource=Mp,t.litOptions.ambientEncoding=null)}t.litOptions.skyboxIntensity=r,t.litOptions.useCubeMapRotation=r&&s._skyboxRotationShaderInclude}_updateLightOptions(t,e,s,i,r){if(t.lightMap=!1,t.lightMapChannel="",t.lightMapUv=0,t.lightMapTransform=0,t.litOptions.lightMapWithoutAmbient=!1,t.dirLightMap=!1,i&&(t.litOptions.noShadow=(i&sc)!==0,(i&Of)!==0&&(t.lightMapEncoding=e.lightmapPixelFormat===Fe?"rgbm":"linear",t.lightMap=!0,t.lightMapChannel="rgb",t.lightMapUv=1,t.lightMapTransform=0,t.litOptions.lightMapWithoutAmbient=!s.lightMap,(i&Ty)!==0&&(t.dirLightMap=!0),(i&wy)!==0&&(t.litOptions.lightMapWithoutAmbient=!1))),s.useLighting){const a=[],n=i?i>>16:gs;t.litOptions.lightMaskDynamic=!!(n&gs),r&&(Gs.collectLights(ve,r[ve],a,n),e.clusteredLightingEnabled||(Gs.collectLights(Ke,r[Ke],a,n),Gs.collectLights(Ze,r[Ze],a,n))),t.litOptions.lights=a}else t.litOptions.lights=[];t.litOptions.lights.length===0&&!e.clusteredLightingEnabled&&(t.litOptions.noShadow=!0)}_getMapTransformID(t,e){if(!t)return 0;let s=this._mapXForms[e];s||(s=[],this._mapXForms[e]=s);for(let i=0;i<s.length;i++)if(d_(s[i][0].value,t[0].value)&&d_(s[i][1].value,t[1].value))return i+1;return s.push(t)}}function rt(l,t=!0,e=!0){const s={};return s[`${l}Map`]="texture",s[`${l}MapTiling`]="vec2",s[`${l}MapOffset`]="vec2",s[`${l}MapRotation`]="number",s[`${l}MapUv`]="number",t&&(s[`${l}MapChannel`]="string",e&&(s[`${l}VertexColor`]="boolean",s[`${l}VertexColorChannel`]="string")),s}const Bn={name:"string",chunks:"chunks",mappingFormat:"string",_engine:"boolean",ambient:"rgb",...rt("ao"),...rt("aoDetail",!0,!1),aoDetailMode:"string",aoIntensity:"number",diffuse:"rgb",...rt("diffuse"),...rt("diffuseDetail",!0,!1),diffuseDetailMode:"string",specular:"rgb",specularTint:"boolean",...rt("specular"),occludeSpecular:"enum:occludeSpecular",specularityFactor:"number",specularityFactorTint:"boolean",...rt("specularityFactor"),useMetalness:"boolean",metalness:"number",enableGGXSpecular:"boolean",metalnessTint:"boolean",...rt("metalness"),useMetalnessSpecularColor:"boolean",anisotropyIntensity:"number",anisotropyRotation:"number",...rt("anisotropy"),shininess:"number",gloss:"number",glossInvert:"boolean",...rt("gloss"),clearCoat:"number",...rt("clearCoat"),clearCoatGloss:"number",clearCoatGlossInvert:"boolean",...rt("clearCoatGloss"),clearCoatBumpiness:"number",...rt("clearCoatNormal",!1),useSheen:"boolean",sheen:"rgb",...rt("sheen"),sheenGloss:"number",sheenGlossInvert:"boolean",...rt("sheenGloss"),fresnelModel:"number",emissive:"rgb",...rt("emissive"),emissiveIntensity:"number",...rt("normal",!1),bumpiness:"number",...rt("normalDetail",!1),normalDetailMapBumpiness:"number",...rt("height",!0,!1),heightMapFactor:"number",alphaToCoverage:"boolean",alphaTest:"number",alphaFade:"number",opacity:"number",...rt("opacity"),opacityFadesSpecular:"boolean",opacityDither:"string",opacityShadowDither:"string",reflectivity:"number",refraction:"number",refractionTint:"boolean",...rt("refraction"),refractionIndex:"number",dispersion:"number",thickness:"number",thicknessTint:"boolean",...rt("thickness"),attenuation:"rgb",attenuationDistance:"number",useDynamicRefraction:"boolean",sphereMap:"texture",cubeMap:"cubemap",cubeMapProjection:"number",cubeMapProjectionBox:"boundingbox",useIridescence:"boolean",iridescence:"number",iridescenceTint:"boolean",...rt("iridescence"),iridescenceThicknessTint:"boolean",iridescenceThicknessMin:"number",iridescenceThicknessMax:"number",iridescenceRefractionIndex:"number",...rt("iridescenceThickness"),...rt("light"),depthTest:"boolean",depthFunc:"enum:depthFunc",depthWrite:"boolean",depthBias:"number",slopeDepthBias:"number",cull:"enum:cull",blendType:"enum:blendType",useFog:"boolean",useLighting:"boolean",useSkybox:"boolean",useTonemap:"boolean",envAtlas:"texture",twoSidedLighting:"boolean",shadowCatcher:"boolean"},nd=[];for(const l in Bn)Bn[l]==="texture"&&nd.push(l);const Up=[];for(const l in Bn)Bn[l]==="cubemap"&&Up.push(l);const DE={aoMapVertexColor:"boolean",diffuseMapTint:"boolean",diffuseMapVertexColor:"boolean",emissiveMapTint:"boolean",emissiveMapVertexColor:"boolean",glossMapVertexColor:"boolean",metalnessMapVertexColor:"boolean",opacityMapVertexColor:"boolean",specularAntialias:"boolean",specularMapTint:"boolean",specularMapVertexColor:"boolean",ambientTint:"boolean",emissiveTint:"boolean",diffuseTint:"boolean",sheenTint:"boolean",conserveEnergy:"boolean",useGamma:"boolean",useGammaTonemap:"boolean",sheenGlossTint:"boolean",anisotropy:"boolean"},Dh={},Oy={};let to=new Set;const Yl=new ae;class kt extends sr{constructor(){super();h(this,"userAttributes",new Map);h(this,"onUpdateShader");this._assetReferences={},this._activeParams=new Set,this._activeLightingParams=new Set,this.shaderOptBuilder=new PE,this.reset()}reset(){Object.keys(Dh).forEach(e=>{this[`_${e}`]=Dh[e].value()}),this._uniformCache={}}copy(e){return super.copy(e),Object.keys(Dh).forEach(s=>{this[s]=e[s]}),this.userAttributes=new Map(e.userAttributes),this}setAttribute(e,s){this.userAttributes.set(s,e)}_setParameter(e,s){to.add(e),this.setParameter(e,s)}_setParameters(e){e.forEach(s=>{this._setParameter(s.name,s.value)})}_processParameters(e){const s=this[e];s.forEach(i=>{to.has(i)||delete this.parameters[i]}),this[e]=to,to=s,to.clear()}_updateMap(e){const s=`${e}Map`,i=this[s];if(i){this._setParameter(`texture_${s}`,i);const r=`${s}Transform`,a=this.getUniform(r);a&&this._setParameters(a)}}_allocUniform(e,s){let i=this._uniformCache[e];return i||(i=s(),this._uniformCache[e]=i),i}getUniform(e,s,i){return Oy[e](this,s,i)}updateUniforms(e,s){const i=r=>this.getUniform(r,e,s);this._setParameter("material_ambient",i("ambient")),this._setParameter("material_diffuse",i("diffuse")),this._setParameter("material_aoIntensity",this.aoIntensity),this.useMetalness?((!this.metalnessMap||this.metalness<1)&&this._setParameter("material_metalness",this.metalness),(!this.specularMap||this.specularTint)&&this._setParameter("material_specular",i("specular")),(!this.specularityFactorMap||this.specularityFactorTint)&&this._setParameter("material_specularityFactor",this.specularityFactor),this._setParameter("material_sheen",i("sheen")),this._setParameter("material_sheenGloss",this.sheenGloss),this._setParameter("material_refractionIndex",this.refractionIndex)):(!this.specularMap||this.specularTint)&&this._setParameter("material_specular",i("specular")),this.enableGGXSpecular&&(this._setParameter("material_anisotropyIntensity",this.anisotropyIntensity),this._setParameter("material_anisotropyRotation",[Math.cos(this.anisotropyRotation*Y.DEG_TO_RAD),Math.sin(this.anisotropyRotation*Y.DEG_TO_RAD)])),this.clearCoat>0&&(this._setParameter("material_clearCoat",this.clearCoat),this._setParameter("material_clearCoatGloss",this.clearCoatGloss),this._setParameter("material_clearCoatBumpiness",this.clearCoatBumpiness)),this._setParameter("material_gloss",this.gloss),y.call(()=>{this.emissiveMap&&this.emissive.r===0&&this.emissive.g===0&&this.emissive.b===0&&y.warnOnce(`Emissive map is set but emissive color is black, making the map invisible. Set emissive color to white to make the map visible. Rendering [${Z.toString()}]`,this)}),this._setParameter("material_emissive",i("emissive")),this._setParameter("material_emissiveIntensity",this.emissiveIntensity),this.refraction>0&&this._setParameter("material_refraction",this.refraction),this.dispersion>0&&this._setParameter("material_dispersion",this.dispersion),this.useDynamicRefraction&&(this._setParameter("material_thickness",this.thickness),this._setParameter("material_attenuation",i("attenuation")),this._setParameter("material_invAttenuationDistance",this.attenuationDistance===0?0:1/this.attenuationDistance)),this.useIridescence&&(this._setParameter("material_iridescence",this.iridescence),this._setParameter("material_iridescenceRefractionIndex",this.iridescenceRefractionIndex),this._setParameter("material_iridescenceThicknessMin",this.iridescenceThicknessMin),this._setParameter("material_iridescenceThicknessMax",this.iridescenceThicknessMax)),this._setParameter("material_opacity",this.opacity),this.opacityFadesSpecular===!1&&this._setParameter("material_alphaFade",this.alphaFade),this.occludeSpecular&&this._setParameter("material_occludeSpecularIntensity",this.occludeSpecularIntensity),this.cubeMapProjection===py&&this._setParameter(i("cubeMapProjectionBox"));for(const r in vn)this._updateMap(r);this.ambientSH&&this._setParameter("ambientSH[0]",this.ambientSH),this.normalMap&&this._setParameter("material_bumpiness",this.bumpiness),this.normalMap&&this.normalDetailMap&&this._setParameter("material_normalDetailMapBumpiness",this.normalDetailMapBumpiness),this.heightMap&&this._setParameter("material_heightMapFactor",i("heightMapFactor")),this.envAtlas&&this.cubeMap?(this._setParameter("texture_envAtlas",this.envAtlas),this._setParameter("texture_cubeMap",this.cubeMap)):this.envAtlas?this._setParameter("texture_envAtlas",this.envAtlas):this.cubeMap?this._setParameter("texture_cubeMap",this.cubeMap):this.sphereMap&&this._setParameter("texture_sphereMap",this.sphereMap),this._setParameter("material_reflectivity",this.reflectivity),this._processParameters("_activeParams"),super.updateUniforms(e,s)}updateEnvUniforms(e,s){!(this.envAtlas||this.cubeMap||this.sphereMap)&&this.useSkybox&&(s.envAtlas&&s.skybox?(this._setParameter("texture_envAtlas",s.envAtlas),this._setParameter("texture_cubeMap",s.skybox)):s.envAtlas?this._setParameter("texture_envAtlas",s.envAtlas):s.skybox&&this._setParameter("texture_cubeMap",s.skybox)),this._processParameters("_activeLightingParams")}getShaderVariant(e){const{device:s,scene:i,pass:r,objDefs:a,sortedLights:n,cameraShaderParams:o}=e;this.updateEnvUniforms(s,i);const c=Si.get(s).getByIndex(r),d=r===Wn||r===wl||c.isShadow;let f=d?Rd.optionsContextMin:Rd.optionsContext;f.defines=Wt.getCoreDefines(this,e),d?this.shaderOptBuilder.updateMinRef(f,i,this,a,r,n):this.shaderOptBuilder.updateRef(f,i,o,this,a,r,n),this.useFog||f.defines.set("FOG","NONE"),f.defines.set("TONEMAP",_y[f.litOptions.toneMap]),this.onUpdateShader&&(f=this.onUpdateShader(f));const u=new ad(e.viewUniformFormat,e.viewBindGroupFormat,e.vertexFormat),p=kn(s);p.register("standard",Rd);const m=p.getProgram("standard",f,u,this.userId);return this._dirtyShader=!1,m}destroy(){for(const e in this._assetReferences)this._assetReferences[e]._unbind();this._assetReferences=null,super.destroy()}}h(kt,"TEXTURE_PARAMETERS",nd),h(kt,"CUBEMAP_PARAMETERS",Up);const od=(l,t)=>{Oy[l]=t},Bp=(l,t,e,s)=>{Object.defineProperty(kt.prototype,l,{get:s||function(){return this[`_${l}`]},set:e}),Dh[l]={value:t}},IE=l=>{const t=`_${l.name}`,e=l.dirtyShaderFunc||(()=>!0),s=function(i){const r=this[t];r!==i&&(this._dirtyShader=this._dirtyShader||e(r,i),this[t]=i)};Bp(l.name,()=>l.defaultValue,s,l.getterFunc)},ME=l=>{const t=`_${l.name}`,e=l.dirtyShaderFunc||(()=>!0),s=function(i){const r=this[t];r.equals(i)||(this._dirtyShader=this._dirtyShader||e(r,i),this[t]=r.copy(i))};Bp(l.name,()=>l.defaultValue.clone(),s,l.getterFunc)},Es=l=>l.defaultValue&&l.defaultValue.clone?ME(l):IE(l);function et(l,t="rgb",e=!0,s=0){vn[l]=t.length||-1,Es({name:`${l}Map`,defaultValue:null,dirtyShaderFunc:(o,c)=>!!o!=!!c||o&&(o.type!==c.type||o.format!==c.format)}),Es({name:`${l}MapTiling`,defaultValue:new J(1,1)}),Es({name:`${l}MapOffset`,defaultValue:new J(0,0)}),Es({name:`${l}MapRotation`,defaultValue:0}),Es({name:`${l}MapUv`,defaultValue:s}),t&&(Es({name:`${l}MapChannel`,defaultValue:t}),e&&(Es({name:`${l}VertexColor`,defaultValue:!1}),Es({name:`${l}VertexColorChannel`,defaultValue:t})));const i=`${l}MapTiling`,r=`${l}MapOffset`,a=`${l}MapRotation`,n=`${l}MapTransform`;od(n,(o,c,d)=>{const f=o[i],u=o[r],p=o[a];if(f.x===1&&f.y===1&&u.x===0&&u.y===0&&p===0)return null;const m=o._allocUniform(n,()=>[{name:`texture_${n}0`,value:new Float32Array(3)},{name:`texture_${n}1`,value:new Float32Array(3)}]),_=Math.cos(p*Y.DEG_TO_RAD),S=Math.sin(p*Y.DEG_TO_RAD),g=m[0].value;g[0]=_*f.x,g[1]=-S*f.y,g[2]=u.x;const v=m[1].value;return v[0]=S*f.x,v[1]=_*f.y,v[2]=1-f.y-u.y,m})}function Ma(l,t){Es({name:l,defaultValue:t,getterFunc:function(){return this._dirtyShader=!0,this[`_${l}`]}}),od(l,(e,s,i)=>{const r=e._allocUniform(l,()=>new Float32Array(3)),a=e[l];return Yl.linear(a),r[0]=Yl.r,r[1]=Yl.g,r[2]=Yl.b,r})}function Be(l,t,e){Es({name:l,defaultValue:t,dirtyShaderFunc:(s,i)=>(s===0||s===1)!=(i===0||i===1)}),od(l,e)}function so(l,t){Es({name:l,defaultValue:null,dirtyShaderFunc:(e,s)=>!!e==!!s}),od(l,t)}function Ne(l,t){Es({name:l,defaultValue:t})}function LE(){Ma("ambient",new ae(1,1,1)),Ma("diffuse",new ae(1,1,1)),Ma("specular",new ae(0,0,0)),Ma("emissive",new ae(0,0,0)),Ma("sheen",new ae(1,1,1)),Ma("attenuation",new ae(1,1,1)),Be("emissiveIntensity",1),Be("specularityFactor",1),Be("sheenGloss",0),Be("gloss",.25),Be("aoIntensity",1),Be("heightMapFactor",1,(s,i,r)=>s.heightMapFactor*.025),Be("opacity",1),Be("alphaFade",1),Be("alphaTest",0),Be("bumpiness",1),Be("normalDetailMapBumpiness",1),Be("reflectivity",1),Be("occludeSpecularIntensity",1),Be("refraction",0),Be("refractionIndex",1/1.5),Be("dispersion",0),Be("thickness",0),Be("attenuationDistance",0),Be("metalness",1),Be("anisotropyIntensity",0),Be("anisotropyRotation",0),Be("clearCoat",0),Be("clearCoatGloss",1),Be("clearCoatBumpiness",1),Be("aoUvSet",0,null),Be("iridescence",0),Be("iridescenceRefractionIndex",1/1.5),Be("iridescenceThicknessMin",0),Be("iridescenceThicknessMax",0),so("ambientSH"),so("cubeMapProjectionBox",(s,i,r)=>{const a=s._allocUniform("cubeMapProjectionBox",()=>[{name:"envBoxMin",value:new Float32Array(3)},{name:"envBoxMax",value:new Float32Array(3)}]),n=s.cubeMapProjectionBox.getMin(),o=a[0].value;o[0]=n.x,o[1]=n.y,o[2]=n.z;const c=s.cubeMapProjectionBox.getMax(),d=a[1].value;return d[0]=c.x,d[1]=c.y,d[2]=c.z,a}),Ne("specularTint",!1),Ne("specularityFactorTint",!1),Ne("useMetalness",!1),Ne("useMetalnessSpecularColor",!1),Ne("useSheen",!1),Ne("enableGGXSpecular",!1),Ne("occludeDirect",!1),Ne("opacityFadesSpecular",!0),Ne("occludeSpecular",rd),Ne("fresnelModel",xp),Ne("useDynamicRefraction",!1),Ne("cubeMapProjection",Cp),Ne("useFog",!0),Ne("useLighting",!0),Ne("useTonemap",!0),Ne("useSkybox",!0),Ne("forceUv1",!1),Ne("pixelSnap",!1),Ne("twoSidedLighting",!1),Ne("nineSlicedMode",void 0),Ne("msdfTextAttribute",!1),Ne("useIridescence",!1),Ne("glossInvert",!1),Ne("sheenGlossInvert",!1),Ne("clearCoatGlossInvert",!1),Ne("opacityDither",_a),Ne("opacityShadowDither",_a),Ne("shadowCatcher",!1),et("diffuse"),et("specular"),et("emissive"),et("thickness","g"),et("specularityFactor","g"),et("normal",""),et("metalness","g"),et("gloss","g"),et("opacity","a"),et("refraction","g"),et("height","g",!1),et("ao","g"),et("light","rgb",!0,1),et("msdf",""),et("diffuseDetail","rgb",!1),et("normalDetail",""),et("aoDetail","g",!1),et("clearCoat","g"),et("clearCoatGloss","g"),et("clearCoatNormal",""),et("sheen","rgb"),et("sheenGloss","g"),et("iridescence","g"),et("iridescenceThickness","g"),et("anisotropy",""),Ne("diffuseDetailMode",km),Ne("aoDetailMode",km),so("cubeMap"),so("sphereMap"),so("envAtlas");const l=function(){return this._prefilteredCubemaps},t=function(s){const i=this._prefilteredCubemaps;s=s||[];let r=!1,a=!0;for(let n=0;n<6;++n){const o=s[n]||null;i[n]!==o&&(i[n]=o,r=!0),a=a&&!!i[n]}r&&(a?this.envAtlas=My.generatePrefilteredAtlas(i,{target:this.envAtlas}):this.envAtlas&&(this.envAtlas.destroy(),this.envAtlas=null),this._dirtyShader=!0)},e=[null,null,null,null,null,null];Bp("prefilteredCubemaps",()=>e.slice(),t,l)}LE();const Mt=class Mt{static render(t,e){const s=e.device,i=t.cells,r=t.lightsBuffer,a=r.boundsMin,n=r.boundsDelta,o=a.clone().add(n),c=r.boundsDelta.clone().div(i),d=Mt.gridPositions,f=Mt.gridColors,u=new ae(.3,.3,.3),p=(E,F,k,H,G,W,R,B,V)=>{for(let O=0;O<=E;O++)for(let M=0;M<=F;M++){const P=k+O*H,N=G+M*W;V===0?d.push(P,R,N,P,B,N):V===1?d.push(P,N,R,P,N,B):V===2&&d.push(R,P,N,B,P,N)}};if(p(i.x,i.z,a.x,c.x,a.z,c.z,a.y,o.y,0),p(i.x,i.y,a.x,c.x,a.y,c.y,a.z,o.z,1),p(i.y,i.z,a.y,c.y,a.z,c.z,a.x,o.x,2),d.length){const E=d.length/3;if(E!==f.length/4){f.length=0;for(let F=0;F<E;F++)f.push(u.r,u.g,u.b,u.a)}e.drawLineArrays(d,f),d.length=0}let m=Mt.mesh;m||(m=new Ve(s),m.clear(!0,!0),Mt.mesh=m);const _=[],S=[],g=[],v=t._cells.x,w=t._cells.z,x=t.counts,b=t._maxCellLightCount,C=new A,D=new A,T=new A,I=n.clone().div(i);let L=0;for(let E=0;E<i.x;E++)for(let F=0;F<i.z;F++)for(let k=0;k<i.y;k++){const H=E+v*(F+k*w),G=x[H];if(G>0){C.x=a.x+I.x*E,C.y=a.y+I.y*k,C.z=a.z+I.z*F,D.add2(C,I),_.push(C.x,C.y,D.z),_.push(D.x,C.y,D.z),_.push(D.x,D.y,D.z),_.push(C.x,D.y,D.z),_.push(D.x,C.y,C.z),_.push(C.x,C.y,C.z),_.push(C.x,D.y,C.z),_.push(D.x,D.y,C.z),T.lerp(Mt.colorLow,Mt.colorHigh,G/b).round();for(let W=0;W<8;W++)S.push(T.x,T.y,T.z,1);g.push(L*8+0,L*8+1,L*8+3),g.push(L*8+3,L*8+1,L*8+2),g.push(L*8+4,L*8+5,L*8+7),g.push(L*8+7,L*8+5,L*8+6),g.push(L*8+3,L*8+2,L*8+6),g.push(L*8+2,L*8+7,L*8+6),g.push(L*8+1,L*8+0,L*8+4),g.push(L*8+0,L*8+5,L*8+4),g.push(L*8+1,L*8+4,L*8+2),g.push(L*8+4,L*8+7,L*8+2),g.push(L*8+5,L*8+0,L*8+6),g.push(L*8+0,L*8+3,L*8+6),L++}}if(L){if(m.setPositions(_),m.setNormals(new Float32Array(_.length)),m.setColors32(S),m.setIndices(g),m.update(Xs,!1),!Mt.meshInstance){const F=new kt;F.useLighting=!1,F.emissive=new ae(1,1,1),F.emissiveVertexColor=!0,F.blendType=id,F.depthWrite=!1,F.update();const k=new De("WorldClustersDebug");k.worldTransform=ie.IDENTITY,k._dirtyWorld=k._dirtyNormal=!1,Mt.meshInstance=new Ge(m,F,k),Mt.meshInstance.cull=!1}const E=Mt.meshInstance;e.immediate.drawMesh(E.material,E.node.worldTransform,null,E,e.defaultDrawLayer)}}};h(Mt,"gridPositions",[]),h(Mt,"gridColors",[]),h(Mt,"mesh",null),h(Mt,"meshInstance",null),h(Mt,"colorLow",new A(1,1,1)),h(Mt,"colorHigh",new A(40,0,0));let kf=Mt;const RE="muPIHORMLNDCz4DxVR/ZvYfAUVEFR47KRIC4nwAAAAAP7WxlhD6Ci+2HCe7BF8jRAPZwdH2UPpI5PdLCJdkvG4UTaNDJ/0crAzne71GCrb4kbdMjjCEGzdX6fNxDMLJq5xkeoIVTdfiZkodEeArmZmp/FQzFjD4x8iOW7Dg64n+3mWqyEwLxXT8zoJXfbw8QJKDCaarUYyTlMzNFHbgUe9IQV7g4YOgtSKpIFZJ0qERm7u4PpmiF89ktHWCywaGmD6h+hfh2/Zd8KYlKqqo4Cem4T42bT/Z9FpCQF1hhSjfBzZ5XFn/y3jegWC6u86KuELRundQS/1Rp+XuKKGIgRv3CvP5y749yqLlFO495JOT3+f2CXgd71npU0/KjjpkZucbJ5m78IVyuSrSozc9jgBUhDrz0hFsyb7LFUH9//wJbBgLdNWJZObfKxrNt8TliLA9w9sXFv6g26iXpf6r/BqcAusj/QzGBZuoUGeEtw8BCXCZ3jUiw4hvM18ZVqlUD3C40LAFXW6FRjuAZGRNstb0/qVk4skwyT+MHrvRorI4rKHVMWZmKyAkzL/78u/9pMQuX14pZN50b2PHn6fRxeaCQLsfT4dpvIkWWFuFVENZIh+8xgR6lU+85W0PPdAu1j99kcCG40JBQa4JMyRzq6qriOBLtqF87vpCJan0WEduVr/mOYkS00urVA0mA6M3031+GmGmW48PaJDYOEIb3bIXWPaLoAOEinX1TN3+/vwhG6nqJu0TdHpedS7QsGZIoxH3nQYYjQP1jmbahlbNngw5ogsGk1y50XZyUmQBY+/JBJ3Unu4dApm+WmPwHPU9gLb+4mHh4BiY6M86pq+WeTyWdI3s0CXPEtHGXZ8zMZgUoyRomBi1VdazzuN+WOmQ9Pa0Z0tlNopUi8AJ4x2Xn4mmOKEbXLxlbVsWu8XhuDGYFOGCRVdSqDPXrHU5SDdUlti3k5///SBwzTMwK3L4a1H7w4lnpEas6////AfX8asyIBfeFXVJ3tgvxQ/blZuUKyIODIfr/UzdWNu7pciLBpdZRZ4pIfZ1R6szq+XNxkGG///8EZFpu7VHAhFWqHEOrB9unw+YQa5o8/9IR/V5/zq+986rJSyfgJKt2u9hxU1wzyQWPjJGvzG9+eWWxGFOHVKqI4jBQALwZZswesnvZ2UmmkEXdiRpz8B+oWE7PY70ZTMndisYSXg2TqoI+3y9BxbnY2Y4EfbdcRhAvG59NqDENNYbxKvK5HJfPG5M+Wi2AcpLVJrD6caiEOzgSoVNSgQK8fm2M3zGcF4xtClv/8Hs9oD7C3jitTATYNQxmKqKf1LhIxzf1bmfiNn7UKFmcJu4sLqVLwxGSue3taBEyknkw5hXTsUCvqmmL/f8n/w0giR7Hu/9EHvpkz3yuu64TioMkzdTJ30i0+hFnQqW1+v9mMwq+z9qGX0UFu9MomvVG2xod6vc12AAAAACq7sGa5qptFR0jF3nQt/D+7PibKYahaxP3hEixPbGi9nwNf2LAa7LkEZRKxzXeCD64Xpii5n+8Kpg8eHIv7AWXZltgMoGltmoJ0XGdOCL8WkzphvR9N2o3ARSZ42l5e5Pe4B58MCRlP3EKv+mcloknH+fto5BWsmEutW6KvjOVsznFCktkSczVk4aGvj9VXlRcLeDoKG8RkBgdcNG2bf8HUL4MT2DM+ar7NImJhKpxakX4Vk0CnP+/XNhl5UsP0lXgeZXPoDBMSW5An+DXlTCO5FQGwSPYwHLKYVIimEdAoVe49rQLaaNcye5LxU2/c5TijTgJtD5eQQIe1snxauj5jZsxJBUJdoP/zqpjqv8qBruoPsVsP8N44PCUW5Dd0DzqjSS/Dl5mI9cn1w2ndN/0KAEm1QAAAACwu6KM/083IBbH5bPa/9oHUwcU8I9v3j6/v18QYammrf+P6VL///8BrpuM3fOLCxaLNOFNF1zPbPYTP65ni6njft4eVcyrVXRQFrs52tr35StiSp55edVDCBC0H5rIfac6nzUwxQSt7y15QoKb+5zebEQUmVbrPjXuUa19Ey7sqXMiSUKHaw72PJKDdrutJoQr3u6lEYJ8K0MakWKj9zjTFi4X94TsKYco0GrLeB60M6D8M/80rhXUW8iMequg8y5F838WI0+gp3GBN5Kj/xIOxTWQuUaPV/LwvARr1VH93BFgGZR1MFW0Ua30GbYmdnAgo9VWy8SQtpDUgGE2r2zq2eTEMCL7sMKmE1hchVhuF/TCq9iXKEm86kzOf3Rp9ZnCxbpDUj+FKNxVyXe6pVZkRXv/m95SnB/EB8aME29N85MtAcDoXWlor8De2Q5Dg1tar+8wgiZufbMam81j//ASUohoR/zSh2KG4bvT6mkIPz6C5/98DC3LaWlaEZ1zA5JORZRu6J/a0GY285sEYzw71YqOT1ihAG0z5SDt1xNiDQWZdFpndArp6xWhqSDkRb4kSJEHb9liPvw7uLV/6i5MVf//A9Qjr8xkAEUh+KDI+zdtJ68d6MBOktg1iyp/SCq8O9f5pbamn1VVVQPRTWqNBvhQKa07s6P0lc9Luu/3gw4HeyOUfz8MxMwV4UQhua+t9cr4bz/nIB2wnDSK1K7I94M+s6C84htaX/CNlMQUSs2KJO+yaebfTbkNX5yWcqEJevo0vbKUiETuFXiL019A3E+lmsyZMwXrXLLiQAZ5t9+jI3JobhJTMiDH5ZOQ+8Jau5555NMjHSscP9qCVaa40doh+1a3Ukf6jqBmLddgh79/fwTfCyqiuldNkUoy+nUp+4nerwg0OjtGv2x485PJOJvUEokNhYIdWjpx7BWk0VZGWOp3jSFTJ2bnu6KCduZtG/UcBC9RZ3W/jMSfSMw4Etr/DoD/XYP2V5Ovw+YoM3F5g2dGLdvuG6ZkVGLE6Dk5Zr+sdSyGliJP1y2OFf/KFO0RWO+3gsGhesTnfZVpTd8/HwgO216gwaqo+vY3TljfJWowY+i0p0Os4SLn/1wLqDHMlszggmT/D8MRFzs+pLv6LNJSsNZ/r41mWi/rF6ZcKp/yzJdK0VU44hskq3RGpgO6mIpJDsf/mZkFrz0yYOMLbuaj/wp1v7JMFM5eqvBhmTd7U8frQAtHtys4zgpjZmzUhOVTfNNLifElGXADlqHGKrkBT/nYwX8ZRm3RjvyPvjKyEqEGKUpVnvOGx+NKPHiWM//ZDpDVGvvrjmk8RPF/wiYZD3+Us8YCXjrVOfjdd1UPAfjLp8jgSn4me7DPTpz1Ggy9XL80guFO7ECT10AvILKfD18Qx+KY/f8aRqu0oOO8hfKRFZa9PUJwCsp6VdZz6LFkm2b9Pl2LIifCwzRy7TpdG2uAtOxP2OemY26bJMa9ZGSLIRlMsgpDpnDJwd0oa5pQ13x1hrHf52HpulUWonGWsfXZbSQYKu9bnEN76ciQih0opN3deDVrbrxorfVlnCmL1R9zq3ePGWIv21c7pW8kEiFTM5JX8dAw867s/60cf79/BH+MDFCZBHlz1L+qGOJf/1txhhmrf3//As+RIJwevDb+fgNXVeHw67QptZegayhrEwr5Gy+EPo1RLaMtPbqOZYoVzXzwzjMFWZxyUG9YUIf6////AQWy84iAygLk9COtXt92+0mT/xg0zMzMBeLkb8y9SL2TDXgSX422hDgpGNLJyuPioA+YJ91G8znrpNqHkwYyscaJDEc9Vc+j4cXle3hvcd2JqDQH2lBZxDn6mUTs0b75raMvbs727codX01Anj8f3wir9P2xQaQ22v/TxCMglKDFoTjaP01XTLgxnTvPv02JgEUrW6UDgOnobFpLdvKdlypgIzPcq14fgXU5tvVW0FEs7VRlsG1IyA69fN4n+awHhT34cE+xUvdj86C8LgAsFheTjI9Ht9EyYAAAAAAVBVKRx2wLgUTI0/2QfyJo2riRw3JDqzEShmx/Lifo6mRkQVbS7X53t+EvKxcXogtdts31e9MRHdcHgsA8rt4/mt2unlzQ/wsU8Gu7+W6Oj7eD8EQdDp5XlCsVaS/AV/t5ZpPOHR3rGpyAJe9IPV+xMrBL1Oz/8MQhFs31h0N1cVnq371uqIJYHyafKH1jteAK3VpMXBcuC+yt0ZeKyRUY4QhdrJJ4tJ1wg3Hu6kDsbovxupTMkGdRrm8oZSoYPbJ+PwH/xotgTdkA1205vUEfnqkI04T/fnnd1fiZW5AwNcggd7fi4j5zasmcntZexIxqFZQMzMJpfndmI5jn17cgn5EV5t9XN0C///8Q9wlJpMGXdoiaMTG2sVyHQsn8mWRISCLNG777S0OuDRP2GlLcJ2UeOg7Fo8hTNPeJ//iTJhyqxhKRUntdXOihq2wfKfH///8B0GGrwT+fSOQRdctKxjjGCSS11d6BlQ9BDfE0J6Z25FaNTKGpFKNCMr2G/041KpWwBLVe1k08vncseQbKZdXi8x1t9XA45U/Wd43D9wAh3Tal0aiLVzGPusOZ1F+W3TWoqlX/A95+dNef11TsuGful+ctGssldk3fqpfqh+43XTxL42+leSHoF/dWHYGX6maqUEuLX7UB+r/6Llr4LKocbVIeu+hB9QTPfz9fCP8RyWmX4SmbhMFsNtCijV7lVcwejLKlvl0GfCndnWV7/39VBrtTRuUx92oke3GBgKkC5fdGK0YvNK+xenKaDmsHDjNFUM3NMz3ZiXXFuLgojosPVCDEl2W5BjX3Ms+j0GSqACHmh0+RPWyuNm/Qe8vFf9AW7N1uRaxWirrUytqEJnJ4/Flm8hSoiZ2NQBsS6w/yQlC4gCaFo8q4nyY6AFdo4hiwhBXzbNKKvZvktCjSCukRR/BbYVbNwZi2Yh3hGodEacLW8qijiWJODf0P2bhfaiPspPT4lYJBgi/KfcFwCfvyUIgkJOv///8CG/JEepRBLaMFE+2TgrqsJXOVOWHt6g/bFwVLLMVBsMR50dis/39/AlBX+/rMTJkUQrnlxpR2iu0Tp8tATkRYGmDIrcAiRP8PjoWIlb7/0ecTdSCE9Y58+a+n/FovJQTVF4F2jAxMZhTgrM/KVS5BQu6bVbkWY5HXnxRshks3urDdW4RkWp4M4TeLmFK5KF/uHkkiO5Kv96RioH984v/CSDBnG+BwlnU9B+o7Y+0X0Nob+0pLsStxjvPXMy2eCpzhOWV4XbObBHN4UE2sLQ/DIqXhOzxVf38GlTi6aG7EnePO7TRJm9yOfUUcqq1I2iQHrVDqn3TUNRi/lMw8KbMW/3/nqCz/Ef8PoW5Qxcz2yHR/f78EPB2Stbd+ZFmfNTUYILzsb9YNhpaHcaymYrBiNHmFE3Y4ccYJ25Prqm7zHobGHED8/93ZNlWro9vcKivGZs31UiK1k5zjUhexUgbqJb+fUTjxce/7Zly8a5KMC1fX5nfjPgibdvzbXV1jRT2asXvmSAusaLdq1TSIJ8fXINk5AtT34EWPAsfP9IFQqM5K11O6saoHJA==";let Gi=null;const Fy=()=>{if(!Gi){const l=atob(RE);Gi=Uint8Array.from(l,t=>t.charCodeAt(0))}},OE=()=>(Fy(),Gi);class FE{constructor(t=0){h(this,"seed",0);this.seed=t*4,Fy()}_next(){this.seed=(this.seed+4)%Gi.length}value(){return this._next(),Gi[this.seed]/255}vec4(t=new oe){return this._next(),t.set(Gi[this.seed],Gi[this.seed+1],Gi[this.seed+2],Gi[this.seed+3]).mulScalar(1/255)}}const NE=[new A(-1,0,0),new A(1,0,0),new A(0,-1,0),new A(0,1,0),new A(0,0,-1),new A(0,0,1)];class kE{constructor(){h(this,"colors",new Float32Array(18))}update(t,e){const s=this.colors,{r:i,g:r,b:a}=t;for(let n=0;n<6;n++)s[n*3]=i,s[n*3+1]=r,s[n*3+2]=a;for(let n=0;n<e.length;n++){const o=e[n];if(o._type===ve)for(let c=0;c<6;c++){const d=Math.max(NE[c].dot(o._direction),0)*o._intensity,f=o._color;s[c*3]+=f.r*d,s[c*3+1]+=f.g*d,s[c*3+2]+=f.b*d}}}}const UE=(l,t,e,s)=>{const i=new ge(l,{name:`${t}${e}`,width:e,height:e,format:Fe,addressU:St,addressV:St,type:Ds,magFilter:Te,minFilter:Te,anisotropy:1,mipmaps:!1});return i.lock().set(s),i.unlock(),i},BE=new jt,zE=l=>BE.get(l,()=>{const t=OE(),e=Math.sqrt(t.length/4);return UE(l,"BlueNoise",e,t)});class Sa{constructor(t,e){this.texture=t,this.cached=!1,this.renderTargets=e}destroy(){this.texture&&(this.texture.destroy(),this.texture=null);const t=this.renderTargets;for(let e=0;e<t.length;e++)t[e].destroy();this.renderTargets.length=0}static create(t,e){let s=null;return e._type===Ke?s=this.createCubemap(t,e._shadowResolution,e._shadowType):s=this.create2dMap(t,e._shadowResolution,e._shadowType),s}static createAtlas(t,e,s){const i=this.create2dMap(t,e,s),r=i.renderTargets,a=r[0];for(let n=0;n<5;n++)r.push(a);return i}static create2dMap(t,e,s){var d;const i=ji.get(s);y.assert(i);let r=i.format;r===er&&!t.textureFloatRenderable&&t.textureHalfFloatRenderable&&(r=zc);const a=(d=Ft.get(r))==null?void 0:d.name;let n=yt;s===bp&&(n=t.extTextureFloatLinear?yt:Te),s===Yo&&(n=Te);const o=new ge(t,{profilerHint:Cf,format:r,width:e,height:e,mipmaps:!1,minFilter:n,magFilter:n,addressU:me,addressV:me,name:`ShadowMap2D_${a}`});let c=null;return i!=null&&i.pcf?(o.compareOnRead=!0,o.compareFunc=Hh,c=new _t({depthBuffer:o})):c=new _t({colorBuffer:o,depth:!0}),t.isWebGPU&&(c.flipY=!0),new Sa(o,[c])}static createCubemap(t,e,s){var d;const i=ji.get(s);y.assert(i);const r=(d=Ft.get(i.format))==null?void 0:d.name,a=s===Yo,n=a?Te:yt,o=new ge(t,{profilerHint:Cf,format:i==null?void 0:i.format,width:e,height:e,cubemap:!0,mipmaps:!1,minFilter:n,magFilter:n,addressU:me,addressV:me,name:`ShadowMapCube_${r}`});a||(o.compareOnRead=!0,o.compareFunc=Hh);const c=[];for(let f=0;f<6;f++)a?c.push(new _t({colorBuffer:o,face:f,depth:!0})):c.push(new _t({depthBuffer:o,face:f}));return new Sa(o,c)}}const VE=[],GE=[],wi=new oe,Od=new oe;class Fd{constructor(t){this.size=Math.floor(t.w*1024),this.used=!1,this.lightId=-1,this.rect=t}}class HE{constructor(t){this.device=t,this.version=1,this.shadowAtlasResolution=2048,this.shadowAtlas=null,this.shadowEdgePixels=3,this.cookieAtlasResolution=4,this.cookieAtlas=new ge(this.device,{name:"CookieAtlas",width:this.cookieAtlasResolution,height:this.cookieAtlasResolution,format:ms,cubemap:!1,mipmaps:!1,minFilter:Te,magFilter:Te,addressU:me,addressV:me}),this.cookieRenderTarget=new _t({colorBuffer:this.cookieAtlas,depth:!1,flipY:!0}),this.slots=[],this.atlasSplit=[],this.cubeSlotsOffsets=[new J(0,0),new J(0,1),new J(1,0),new J(1,1),new J(2,0),new J(2,1)],this.scissorVec=new oe,this.allocateShadowAtlas(1),this.allocateCookieAtlas(1),this.allocateUniforms()}destroy(){this.destroyShadowAtlas(),this.destroyCookieAtlas()}destroyShadowAtlas(){var t;(t=this.shadowAtlas)==null||t.destroy(),this.shadowAtlas=null}destroyCookieAtlas(){var t,e;(t=this.cookieAtlas)==null||t.destroy(),this.cookieAtlas=null,(e=this.cookieRenderTarget)==null||e.destroy(),this.cookieRenderTarget=null}allocateShadowAtlas(t,e=Hs){var r;const s=(r=this.shadowAtlas)==null?void 0:r.texture.format,i=ji.get(e).format;if(!this.shadowAtlas||this.shadowAtlas.texture.width!==t||s!==i){this.version++,this.destroyShadowAtlas(),this.shadowAtlas=Sa.createAtlas(this.device,t,e),this.shadowAtlas.cached=!0;const a=4/this.shadowAtlasResolution;this.scissorVec.set(a,a,-2*a,-2*a)}}allocateCookieAtlas(t){this.cookieAtlas.width!==t&&(this.cookieRenderTarget.resize(t,t),this.version++)}allocateUniforms(){this._shadowAtlasTextureId=this.device.scope.resolve("shadowAtlasTexture"),this._shadowAtlasParamsId=this.device.scope.resolve("shadowAtlasParams"),this._shadowAtlasParams=new Float32Array(2),this._cookieAtlasTextureId=this.device.scope.resolve("cookieAtlasTexture")}updateUniforms(){const e=this.shadowAtlas.renderTargets[0].depthBuffer;this._shadowAtlasTextureId.setValue(e),this._shadowAtlasParams[0]=this.shadowAtlasResolution,this._shadowAtlasParams[1]=this.shadowEdgePixels,this._shadowAtlasParamsId.setValue(this._shadowAtlasParams),this._cookieAtlasTextureId.setValue(this.cookieAtlas)}subdivide(t,e){let s=e.atlasSplit;if(!s){const r=Math.ceil(Math.sqrt(t));s=GE,s[0]=r,s.length=1}if(!((r,a)=>r.length===a.length&&r.every((n,o)=>n===a[o]))(s,this.atlasSplit)){this.version++,this.slots.length=0,this.atlasSplit.length=0,this.atlasSplit.push(...s);const r=this.atlasSplit[0];if(r>1){const a=1/r;for(let n=0;n<r;n++)for(let o=0;o<r;o++){const c=new oe(n*a,o*a,a,a),d=this.atlasSplit[1+n*r+o];if(d>1)for(let f=0;f<d;f++)for(let u=0;u<d;u++){const p=a/d,m=new oe(c.x+f*p,c.y+u*p,p,p);this.slots.push(new Fd(m))}else this.slots.push(new Fd(c))}}else this.slots.push(new Fd(new oe(0,0,1,1)));this.slots.sort((a,n)=>n.size-a.size)}}collectLights(t,e){const s=e.cookiesEnabled,i=e.shadowsEnabled;let r=!1,a=!1;const n=VE;return n.length=0,(s||i)&&(c=>{for(let d=0;d<c.length;d++){const f=c[d];if(f.visibleThisFrame){const u=i&&f.castShadows,p=s&&!!f.cookie;r||(r=u),a||(a=p),(u||p)&&n.push(f)}}})(t),n.sort((c,d)=>d.maxScreenSize-c.maxScreenSize),r&&this.allocateShadowAtlas(this.shadowAtlasResolution,e.shadowType),a&&this.allocateCookieAtlas(this.cookieAtlasResolution),(r||a)&&this.subdivide(n.length,e),n}setupSlot(t,e){t.atlasViewport.copy(e);const s=t.numShadowFaces;for(let i=0;i<s;i++)if(t.castShadows||t._cookie){if(wi.copy(e),Od.copy(e),t._type===Ze&&wi.add(this.scissorVec),t._type===Ke){const r=wi.z/3,a=this.cubeSlotsOffsets[i];wi.x+=r*a.x,wi.y+=r*a.y,wi.z=r,wi.w=r,Od.copy(wi)}if(t.castShadows){const r=t.getRenderData(null,i);r.shadowViewport.copy(wi),r.shadowScissor.copy(Od)}}}assignSlot(t,e,s){t.atlasViewportAllocated=!0;const i=this.slots[e];i.lightId=t.id,i.used=!0,s&&(t.atlasSlotUpdated=!0,t.atlasVersion=this.version,t.atlasSlotIndex=e)}update(t,e){this.shadowAtlasResolution=e.shadowAtlasResolution,this.cookieAtlasResolution=e.cookieAtlasResolution;const s=this.collectLights(t,e);if(s.length>0){const i=this.slots;for(let n=0;n<i.length;n++)i[n].used=!1;const r=Math.min(s.length,i.length);for(let n=0;n<r;n++){const o=s[n];o.castShadows&&(o._shadowMap=this.shadowAtlas);const c=i[o.atlasSlotIndex];if(o.atlasVersion===this.version&&o.id===(c==null?void 0:c.lightId)){const d=i[o.atlasSlotIndex];d.size===i[n].size&&!d.used&&this.assignSlot(o,o.atlasSlotIndex,!1)}}let a=0;for(let n=0;n<r;n++){for(;a<i.length&&i[a].used;)a++;const o=s[n];o.atlasViewportAllocated||this.assignSlot(o,a,!0);const c=i[o.atlasSlotIndex];this.setupSlot(o,c.rect)}}this.updateUniforms()}}class WE{constructor(){this.cache=new Map}destroy(){this.clear(),this.cache=null}clear(){this.cache.forEach(t=>{t.forEach(e=>{e.destroy()})}),this.cache.clear()}getKey(t){const e=t._type===Ke,s=t._shadowType,i=t._shadowResolution;return`${e}-${s}-${i}`}get(t,e){const s=this.getKey(e),i=this.cache.get(s);if(i&&i.length)return i.pop();const r=Sa.create(t,e);return r.cached=!0,r}add(t,e){const s=this.getKey(t),i=this.cache.get(s);i?i.push(e):this.cache.set(s,[e])}}class $E extends Ss{constructor(t,e,s,i,r){super(t),Ta.setName(this,`${this.name}-${s._node.name}`),this.requiresCubemaps=!1,this.shadowRenderer=e,this.light=s,this.face=i,this.applyVsm=r,this.shadowCamera=e.prepareFace(s,null,i),e.setupRenderPass(this,this.shadowCamera,!0)}execute(){this.shadowRenderer.renderFace(this.light,null,this.face,!1)}after(){this.applyVsm&&this.shadowRenderer.renderVsm(this.light,this.shadowCamera)}}class XE{constructor(t,e){h(this,"shadowLights",[]);h(this,"renderer");h(this,"shadowRenderer");h(this,"device");this.renderer=t,this.shadowRenderer=e,this.device=t.device}cull(t,e,s=null){const i=this.renderer.scene.clusteredLightingEnabled;t.visibleThisFrame=!0,i||t._shadowMap||(t._shadowMap=Sa.create(this.device,t));const r=t._type,a=r===Ze?1:6;for(let n=0;n<a;n++){const o=t.getRenderData(null,n),c=o.shadowCamera;c.nearClip=t.attenuationEnd/1e3,c.farClip=t.attenuationEnd;const d=c._node,f=t._node;if(d.setPosition(f.getPosition()),r===Ze)c.fov=t._outerConeAngle*2,d.setRotation(f.getRotation()),d.rotateLocal(-90,0,0);else if(r===Ke)if(i){const m=2/(this.shadowRenderer.lightTextureAtlas.shadowAtlasResolution*t.atlasViewport.z/3)*this.shadowRenderer.lightTextureAtlas.shadowEdgePixels;c.fov=Math.atan(1+m)*Y.RAD_TO_DEG*2}else c.fov=90;this.renderer.updateCameraFrustum(c),this.shadowRenderer.cullShadowCasters(e,t,o.visibleCasters,c,s)}}prepareLights(t,e){let s;for(let i=0;i<e.length;i++){const r=e[i];if(this.shadowRenderer.needsShadowRendering(r)&&r.atlasViewportAllocated){t.push(r);for(let a=0;a<r.numShadowFaces;a++)s=this.shadowRenderer.prepareFace(r,null,a)}}return s}buildNonClusteredRenderPasses(t,e){for(let s=0;s<e.length;s++){const i=e[s];if(this.shadowRenderer.needsShadowRendering(i)){const r=i._type===Ze,a=i.numShadowFaces;for(let n=0;n<a;n++){const o=new $E(this.device,this.shadowRenderer,i,n,r);t.addRenderPass(o)}}}}}class qE extends Ss{constructor(t,e,s,i,r){super(t),Ta.setName(this,`${this.name}-${s._node.name}`),this.shadowRenderer=e,this.light=s,this.camera=i,this.allCascadesRendering=r}execute(){const{light:t,camera:e,shadowRenderer:s,allCascadesRendering:i}=this,r=t.numShadowFaces,a=t.shadowUpdateOverrides;for(let n=0;n<r;n++)(a==null?void 0:a[n])!==Ps&&s.renderFace(t,e,n,!i),(a==null?void 0:a[n])===vr&&(a[n]=Ps)}after(){this.shadowRenderer.renderVsm(this.light,this.camera)}}const Kl=new Me,Ei=new A,f_=new ie,Xe=[new A,new A,new A,new A,new A,new A,new A,new A],Nd={min:0,max:0};function jE(l,t,e){Xe[0].x=Xe[1].x=Xe[2].x=Xe[3].x=t.x,Xe[1].y=Xe[3].y=Xe[7].y=Xe[5].y=t.y,Xe[2].z=Xe[3].z=Xe[6].z=Xe[7].z=t.z,Xe[4].x=Xe[5].x=Xe[6].x=Xe[7].x=e.x,Xe[0].y=Xe[2].y=Xe[4].y=Xe[6].y=e.y,Xe[0].z=Xe[1].z=Xe[4].z=Xe[5].z=e.z;let s=9999999999,i=-9999999999;for(let r=0;r<8;++r){l.transformPoint(Xe[r],Xe[r]);const a=Xe[r].z;a<s&&(s=a),a>i&&(i=a)}return Nd.min=s,Nd.max=i,Nd}class YE{constructor(t,e){h(this,"renderer");h(this,"shadowRenderer");h(this,"device");this.renderer=t,this.shadowRenderer=e,this.device=t.device}cull(t,e,s,i=null){t.visibleThisFrame=!0,t._shadowMap||(t._shadowMap=Sa.create(this.device,t));const r=s._nearClip;this.generateSplitDistances(t,r,Math.min(s._farClip,t.shadowDistance));const a=t.shadowUpdateOverrides;for(let n=0;n<t.numCascades&&(a==null?void 0:a[n])!==Ps;n++){const o=t.getRenderData(s,n),c=o.shadowCamera;c.renderTarget=t._shadowMap.renderTargets[0],o.shadowViewport.copy(t.cascades[n]),o.shadowScissor.copy(t.cascades[n]);const d=c._node,f=t._node;d.setPosition(f.getPosition()),d.setRotation(f.getRotation()),d.rotateLocal(-90,0,0);const u=n===0?r:t._shadowCascadeDistances[n-1],p=t._shadowCascadeDistances[n],m=s.getFrustumCorners(u,p);Ei.set(0,0,0);const _=s.node.getWorldTransform();for(let W=0;W<8;W++)_.transformPoint(m[W],m[W]),Ei.add(m[W]);Ei.mulScalar(1/8);let S=0;for(let W=0;W<8;W++){const R=m[W].sub(Ei).length();R>S&&(S=R)}const g=d.right,v=d.up,w=d.forward,x=.25*t._shadowResolution/S,b=Math.ceil(Ei.dot(v)*x)/x,C=Math.ceil(Ei.dot(g)*x)/x,D=v.mulScalar(b),T=g.mulScalar(C),I=Ei.dot(w),L=w.mulScalar(I);Ei.add2(D,T).add(L),d.setPosition(Ei),d.translateLocal(0,0,1e6),c.nearClip=.01,c.farClip=2e6,c.orthoHeight=S,this.renderer.updateCameraFrustum(c),this.shadowRenderer.cullShadowCasters(e,t,o.visibleCasters,c,i);const E=1<<n,F=o.visibleCasters,k=F.length;let H=0;for(let W=0;W<k;W++){const R=F[W];R.shadowCascadeMask&E&&(F[H++]=R,H===1?Kl.copy(R.aabb):Kl.add(R.aabb))}k!==H&&(F.length=H),f_.copy(d.getWorldTransform()).invert();const G=jE(f_,Kl.getMin(),Kl.getMax());d.translateLocal(0,0,G.max+.1),c.farClip=G.max-G.min+.2,o.projectionCompensation=S}}generateSplitDistances(t,e,s){t._shadowCascadeDistances.fill(s);for(let i=1;i<t.numCascades;i++){const r=i/t.numCascades,a=e+(s-e)*r,n=e*(s/e)**r,o=Y.lerp(a,n,t.cascadeDistribution);t._shadowCascadeDistances[i-1]=o}}getLightRenderPass(t,e){y.assert(t&&t._type===ve);let s=null;if(this.shadowRenderer.needsShadowRendering(t)){const i=t.numShadowFaces,r=t.shadowUpdateOverrides;let a=!0,n;for(let o=0;o<i;o++)(r==null?void 0:r[o])===Ps&&(a=!1),n=this.shadowRenderer.prepareFace(t,e,o);s=new qE(this.device,this.shadowRenderer,t,e,a),this.shadowRenderer.setupRenderPass(s,n,a)}return s}}const kd=new Set,u_=new ie,p_=new ie,Or=new Float32Array(2),io=new oe(1,1,0,0),m_=new ie;function KE(l,t){return Math.exp(-(l*l)/(2*t*t))}function ZE(l){const t=(l-1)/6,e=(l-1)*.5,s=new Array(l);let i=0;for(let r=0;r<l;++r)s[r]=KE(r-e,t),i+=s[r];for(let r=0;r<l;++r)s[r]/=i;return s}class Ny{constructor(t,e){h(this,"shadowPassCache",[]);this.device=t.device,this.renderer=t,this.lightTextureAtlas=e;const s=this.device.scope;this.sourceId=s.resolve("source"),this.pixelOffsetId=s.resolve("pixelOffset"),this.weightId=s.resolve("weight[0]"),this.blurVsmShader=[{},{}],this.blurVsmWeights={},this.shadowMapLightRadiusId=s.resolve("light_radius"),this.viewUniformFormat=null,this.viewBindGroupFormat=null,this.blendStateWrite=new ut,this.blendStateNoWrite=new ut,this.blendStateNoWrite.setColorWrite(!1,!1,!1,!1)}static createShadowCamera(t,e,s){const i=Un.create("ShadowCamera",e,s),r=ji.get(t);y.assert(r);const a=(r==null?void 0:r.vsm)??!1,n=(r==null?void 0:r.pcf)??!1;return a?i.clearColor=new ae(0,0,0,0):i.clearColor=new ae(1,1,1,1),i.clearDepthBuffer=!0,i.clearStencilBuffer=!1,i.clearColorBuffer=!n,i}_cullShadowCastersInternal(t,e,s){const i=t.length;for(let r=0;r<i;r++){const a=t[r];a.castShadow&&(!a.cull||a._isVisible(s))&&(a.visibleThisFrame=!0,e.push(a))}}cullShadowCasters(t,e,s,i,r){var a,n;if((a=this.renderer.scene)==null||a.fire(Ey,i),s.length=0,r)this._cullShadowCastersInternal(r,s,i);else{const o=t.layerList,c=o.length;for(let d=0;d<c;d++){const f=o[d];f._lightsSet.has(e)&&(kd.has(f)||(kd.add(f),this._cullShadowCastersInternal(f.shadowCasters,s,i)))}kd.clear()}s.sort(this.sortCompareShader),(n=this.renderer.scene)==null||n.fire(by,i)}sortCompareShader(t,e){const s=t._sortKeyShadow,i=e._sortKeyShadow;return s===i?e.mesh.id-t.mesh.id:i-s}setupRenderState(t,e){const i=this.renderer.scene.clusteredLightingEnabled?e._isPcf:e._isPcf&&e._type!==Ke;t.setBlendState(i?this.blendStateNoWrite:this.blendStateWrite),t.setDepthState(e.shadowDepthState),t.setStencilState(null,null)}dispatchUniforms(t,e,s,i){const r=e._node;t._type!==ve&&(this.renderer.dispatchViewPos(r.getPosition()),this.shadowMapLightRadiusId.setValue(t.attenuationEnd)),u_.setTRS(r.getPosition(),r.getRotation(),A.ONE).invert(),p_.mul2(e.projectionMatrix,u_);const a=s.shadowViewport;e.rect=a,e.scissorRect=s.shadowScissor,m_.setViewport(a.x,a.y,a.z,a.w),s.shadowMatrix.mul2(m_,p_),t._type===ve&&t._shadowMatrixPalette.set(s.shadowMatrix.data,i*16)}getShadowPass(t){var r;const e=t._type,s=t._shadowType;let i=(r=this.shadowPassCache[e])==null?void 0:r[s];if(!i){const a=`ShadowPass_${e}_${s}`;i=Si.get(this.device).allocate(a,{isShadow:!0,lightType:e,shadowType:s}),this.shadowPassCache[e]||(this.shadowPassCache[e]=[]),this.shadowPassCache[e][s]=i}return i.index}submitCasters(t,e,s){var u;const i=this.device,r=this.renderer,a=r.scene,n=1<<Fp,o=this.getShadowPass(e),c=s.shaderParams,d=s.renderTarget.flipY?-1:1,f=t.length;for(let p=0;p<f;p++){const m=t[p],_=m.mesh,S=m.instancingData;if(S&&S.count<=0)continue;m.ensureMaterial(i);const g=m.material;Z.pushGpuMarker(i,`Node: ${m.node.name}, Material: ${g.name}`),r.setBaseConstants(i,g),r.setSkinning(i,m),g.dirty&&(g.updateUniforms(i,a),g.dirty=!1),r.setupCullMode(!0,d,m),g.setParameters(i),m.setParameters(i,n);const v=m.getShaderInstance(o,0,a,c,this.viewUniformFormat,this.viewBindGroupFormat),w=v.shader;if(y.assert(w,`no shader for pass ${o}`,g),w.failed)continue;m._sortKeyShadow=w.id,i.setShader(w),r.setVertexBuffers(i,_),r.setMorphing(i,m.morphInstance),S&&i.setVertexBuffer(S.vertexBuffer),r.setMeshInstanceMatrices(m),r.setupMeshUniformBuffers(v);const x=m.renderStyle,b=(u=m.indirectData)==null?void 0:u.get(s);i.draw(_.primitive[x],_.indexBuffer[x],S==null?void 0:S.count,b),r._shadowDrawCalls++,S&&r._instancedDrawCalls++,Z.popGpuMarker(i)}}needsShadowRendering(t){const e=t.enabled&&t.castShadows&&t.shadowUpdateMode!==Ps&&t.visibleThisFrame;return t.shadowUpdateMode===vr&&(t.shadowUpdateMode=Ps),e&&(this.renderer._shadowMapUpdates+=t.numShadowFaces),e}getLightRenderData(t,e,s){return t.getRenderData(t._type===ve?e:null,s)}setupRenderPass(t,e,s){const i=e.renderTarget;t.init(i),t.depthStencilOps.clearDepthValue=1,t.depthStencilOps.clearDepth=s,i.depthBuffer?t.depthStencilOps.storeDepth=!0:(t.colorOps.clearValue.copy(e.clearColor),t.colorOps.clear=s,t.depthStencilOps.storeDepth=!1),t.requiresCubemaps=!1}prepareFace(t,e,s){const i=t._type,a=this.getLightRenderData(t,e,s).shadowCamera,n=i===ve?0:s;return a.renderTarget=t._shadowMap.renderTargets[n],a}renderFace(t,e,s,i,r=!0){const a=this.device,n=pe();Z.pushGpuMarker(a,`SHADOW ${t._node.name} FACE ${s}`);const o=this.getLightRenderData(t,e,s),c=o.shadowCamera;this.dispatchUniforms(t,c,o,s);const d=c.renderTarget,f=this.renderer;f.setCameraUniforms(c,d),a.supportsUniformBuffers&&f.setupViewUniformBuffers(o.viewBindGroups,this.viewUniformFormat,this.viewBindGroupFormat,null),r?(f.setupViewport(c,d),i&&f.clear(c)):f.clearView(c,d,!0,!1),this.setupRenderState(a,t),this.submitCasters(o.visibleCasters,t,c),Z.popGpuMarker(a),f._shadowMapTime+=pe()-n}render(t,e,s=!0){if(this.needsShadowRendering(t)){const i=t.numShadowFaces;for(let r=0;r<i;r++)this.prepareFace(t,e,r),this.renderFace(t,e,r,!0,s);this.renderVsm(t,e)}}renderVsm(t,e){t._isVsm&&t._vsmBlurSize>1&&(!this.renderer.scene.clusteredLightingEnabled||t._type===ve)&&this.applyVsmBlur(t,e)}getVsmBlurShader(t,e){const s=this.blurVsmShader;let i=s[t][e];if(!i){this.blurVsmWeights[e]=ZE(e);const r=new Map;r.set("{SAMPLES}",e),t===1&&r.set("GAUSS",""),i=Wt.createShader(this.device,{uniqueName:`blurVsm${t}${e}`,attributes:{vertex_position:Ae},vertexChunk:"fullscreenQuadVS",fragmentChunk:"blurVSMPS",fragmentDefines:r}),s[t][e]=i}return i}applyVsmBlur(t,e){const s=this.device;Z.pushGpuMarker(s,`VSM ${t._node.name}`),s.setBlendState(ut.NOBLEND);const a=t.getRenderData(t._type===ve?e:null,0).shadowCamera.renderTarget,n=this.renderer.shadowMapCache.get(s,t),o=n.renderTargets[0],c=t.vsmBlurMode,d=t._vsmBlurSize,f=this.getVsmBlurShader(c,d);io.z=t._shadowResolution-2,io.w=io.z,this.sourceId.setValue(a.colorBuffer),Or[0]=1/t._shadowResolution,Or[1]=0,this.pixelOffsetId.setValue(Or),c===Ap&&this.weightId.setValue(this.blurVsmWeights[d]),br(s,o,f,null,io),this.sourceId.setValue(o.colorBuffer),Or[1]=Or[0],Or[0]=0,this.pixelOffsetId.setValue(Or),br(s,a,f,null,io),this.renderer.shadowMapCache.add(t,n),Z.popGpuMarker(s)}initViewBindGroupFormat(){this.device.supportsUniformBuffers&&!this.viewUniformFormat&&(this.viewUniformFormat=new YS(this.device,[new ct("matrix_viewProjection",li)]),this.viewBindGroupFormat=new $S(this.device,[new hp(lp,op|OS)]))}frameUpdate(){this.initViewBindGroupFormat()}}const Zl=[];class QE{constructor(t){h(this,"_empty",null);h(this,"_allocated",[]);h(this,"_clusters",new Map);this.device=t}destroy(){this._empty&&(this._empty.destroy(),this._empty=null),this._allocated.forEach(t=>{t.destroy()}),this._allocated.length=0}get count(){return this._allocated.length}get empty(){if(!this._empty){const t=new Nf(this.device);t.name="ClusterEmpty",t.update([]),this._empty=t}return this._empty}assign(t){const e=this.empty;Zl.push(...this._allocated),this._allocated.length=0,this._clusters.clear();const s=t.length;for(let i=0;i<s;i++){const a=t[i].renderActions;if(a){const n=a.length;for(let o=0;o<n;o++){const c=a[o];c.lightClusters=null;const d=c.layer;if(d.hasClusteredLights&&d.meshInstances.length){const f=d.getLightIdHash(),u=this._clusters.get(f);let p=u==null?void 0:u.lightClusters;p||(p=Zl.pop()??new Nf(this.device),Ta.setName(p,`Cluster-${this._allocated.length}`),this._allocated.push(p),this._clusters.set(f,c)),c.lightClusters=p}c.lightClusters||(c.lightClusters=e)}}}Zl.forEach(i=>i.destroy()),Zl.length=0}update(t,e){this.assign(t),this._clusters.forEach(s=>{const i=s.layer;s.lightClusters.update(i.clusteredLightsSet,e)})}}const nr=new oe,Ud=[];class zp extends Ss{constructor(e,s){super(e);h(this,"_quadRenderer2D",null);h(this,"_quadRendererCube",null);h(this,"_filteredLights",[]);h(this,"_forceCopy",!1);h(this,"_evtDeviceRestored",null);this._cubeSlotsOffsets=s,this.requiresCubemaps=!1,this.blitTextureId=e.scope.resolve("blitTexture"),this.invViewProjId=e.scope.resolve("invViewProj"),this._evtDeviceRestored=e.on("devicerestored",this.onDeviceRestored,this)}destroy(){var e,s,i;(e=this._quadRenderer2D)==null||e.destroy(),this._quadRenderer2D=null,(s=this._quadRendererCube)==null||s.destroy(),this._quadRendererCube=null,(i=this._evtDeviceRestored)==null||i.off(),this._evtDeviceRestored=null}static create(e,s){y.assert(e);const i=new zp(e.device,s);return i.init(e),i.colorOps.clear=!1,i.depthStencilOps.clearDepth=!1,i}onDeviceRestored(){this._forceCopy=!0}update(e){const s=this._filteredLights;this.filter(e,s),this.executeEnabled=s.length>0}filter(e,s){for(let i=0;i<e.length;i++){const r=e[i];r._type!==ve&&r.atlasViewportAllocated&&(!r.atlasSlotUpdated&&!this._forceCopy||r.enabled&&r.cookie&&r.visibleThisFrame&&s.push(r))}this._forceCopy=!1}initInvViewProjMatrices(){if(!Ud.length)for(let e=0;e<6;e++){const s=Un.create(null,Ke,e),i=s.projectionMatrix,r=s.node.getLocalTransform().clone().invert();Ud[e]=new ie().mul2(i,r).invert()}}get quadRenderer2D(){if(!this._quadRenderer2D){const e=Wt.createShader(this.device,{uniqueName:"cookieRenderer2d",attributes:{vertex_position:Ae},vertexChunk:"cookieBlitVS",fragmentChunk:"cookieBlit2DPS"});this._quadRenderer2D=new ac(e)}return this._quadRenderer2D}get quadRendererCube(){if(!this._quadRendererCube){const e=Wt.createShader(this.device,{uniqueName:"cookieRendererCube",attributes:{vertex_position:Ae},vertexChunk:"cookieBlitVS",fragmentChunk:"cookieBlitCubePS"});this._quadRendererCube=new ac(e)}return this._quadRendererCube}execute(){const e=this.device;e.setBlendState(ut.NOBLEND),e.setCullMode(wt),e.setDepthState(qt.NODEPTH),e.setStencilState();const s=this.renderTarget.colorBuffer.width,i=this._cubeSlotsOffsets,r=this._filteredLights;for(let a=0;a<r.length;a++){const n=r[a];Z.pushGpuMarker(this.device,`COOKIE ${n._node.name}`);const o=n.numShadowFaces,c=o>1?this.quadRendererCube:this.quadRenderer2D;o>1&&this.initInvViewProjMatrices(),this.blitTextureId.setValue(n.cookie);for(let d=0;d<o;d++){if(nr.copy(n.atlasViewport),o>1){const f=nr.z/3,u=i[d];nr.x+=f*u.x,nr.y+=f*u.y,nr.z=f,nr.w=f,this.invViewProjId.setValue(Ud[d].data)}nr.mulScalar(s),c.render(nr)}Z.popGpuMarker(e)}r.length=0}}class JE extends Ss{constructor(t,e,s){super(t),this.requiresCubemaps=!1,this.shadowRenderer=e,this.shadowRendererLocal=s}update(t){const e=this.shadowRendererLocal.shadowLights,s=this.shadowRendererLocal.prepareLights(e,t),i=e.length;this.enabled=i>0,i&&this.shadowRenderer.setupRenderPass(this,s,!1)}execute(){const t=this.shadowRendererLocal.shadowLights,e=t.length;for(let s=0;s<e;s++){const i=t[s];for(let r=0;r<i.numShadowFaces;r++)this.shadowRenderer.renderFace(i,null,r,!0)}t.length=0}}class eb extends Ss{constructor(t,e,s,i,r){super(t),this.renderer=e,this.frameGraph=null,this.cookiesRenderPass=zp.create(r.cookieRenderTarget,r.cubeSlotsOffsets),this.beforePasses.push(this.cookiesRenderPass),this.shadowRenderPass=new JE(t,s,i),this.beforePasses.push(this.shadowRenderPass)}update(t,e,s,i,r){this.frameGraph=t,this.cookiesRenderPass.enabled=s,s&&this.cookiesRenderPass.update(i),this.shadowRenderPass.enabled=e,e&&this.shadowRenderPass.update(r)}destroy(){this.cookiesRenderPass.destroy(),this.cookiesRenderPass=null}execute(){const t=pe(),{renderer:e}=this,{scene:s}=e;e.worldClustersAllocator.update(this.frameGraph.renderPasses,s.lighting),e._lightClustersTime+=pe()-t,e._lightClusters=e.worldClustersAllocator.count}}let Bd=0;const or=new ie,lr=new ie,La=new ie,__=new _i,zd=new Pu,g_=new ie().setScale(1,-1,1),Vd=new Set,Gd=new Set,Hd=new XS,S_=new ie().set([1,0,0,0,0,1,0,0,0,0,.5,0,0,0,.5,1]),y_=[new J(.5,.333333),new J(.25,.666667),new J(.75,.111111),new J(.125,.444444),new J(.625,.777778),new J(.375,.222222),new J(.875,.555556),new J(.0625,.888889),new J(.5625,.037037),new J(.3125,.37037),new J(.8125,.703704),new J(.1875,.148148),new J(.6875,.481481),new J(.4375,.814815),new J(.9375,.259259),new J(.03125,.592593)],tb=new ie,sb=new ie,ib=new ie,rb=new ie,ab=new ie,nb=new ie,Ra=new Set,Wd=[],$d=[];class ob{constructor(t){h(this,"clustersDebugRendered",!1);h(this,"processingMeshInstances",new Set);h(this,"worldClustersAllocator");h(this,"lights",[]);h(this,"localLights",[]);h(this,"cameraDirShadowLights",new Map);h(this,"dirLightShadows",new Map);h(this,"blueNoise",new FE(123));this.device=t,this.scene=null,this.worldClustersAllocator=new QE(t),this.lightTextureAtlas=new HE(t),this.shadowMapCache=new WE,this.shadowRenderer=new Ny(this,this.lightTextureAtlas),this._shadowRendererLocal=new XE(this,this.shadowRenderer),this._shadowRendererDirectional=new YE(this,this.shadowRenderer),this._renderPassUpdateClustered=new eb(this.device,this,this.shadowRenderer,this._shadowRendererLocal,this.lightTextureAtlas),this.viewUniformFormat=null,this.viewBindGroupFormat=null,this._skinTime=0,this._morphTime=0,this._cullTime=0,this._shadowMapTime=0,this._lightClustersTime=0,this._layerCompositionUpdateTime=0,this._shadowDrawCalls=0,this._skinDrawCalls=0,this._instancedDrawCalls=0,this._shadowMapUpdates=0,this._numDrawCallsCulled=0,this._camerasRendered=0,this._lightClusters=0;const e=t.scope;this.boneTextureId=e.resolve("texture_poseMap"),this.modelMatrixId=e.resolve("matrix_model"),this.normalMatrixId=e.resolve("matrix_normal"),this.viewInvId=e.resolve("matrix_viewInverse"),this.viewPos=new Float32Array(3),this.viewPosId=e.resolve("view_position"),this.projId=e.resolve("matrix_projection"),this.projSkyboxId=e.resolve("matrix_projectionSkybox"),this.viewId=e.resolve("matrix_view"),this.viewId3=e.resolve("matrix_view3"),this.viewProjId=e.resolve("matrix_viewProjection"),this.flipYId=e.resolve("projectionFlipY"),this.tbnBasis=e.resolve("tbnBasis"),this.nearClipId=e.resolve("camera_near"),this.farClipId=e.resolve("camera_far"),this.cameraParams=new Float32Array(4),this.cameraParamsId=e.resolve("camera_params"),this.viewIndexId=e.resolve("view_index"),this.viewIndexId.setValue(0),this.blueNoiseJitterVersion=0,this.blueNoiseJitterVec=new oe,this.blueNoiseJitterData=new Float32Array(4),this.blueNoiseJitterId=e.resolve("blueNoiseJitter"),this.blueNoiseTextureId=e.resolve("blueNoiseTex32"),this.alphaTestId=e.resolve("alpha_ref"),this.opacityMapId=e.resolve("texture_opacityMap"),this.exposureId=e.resolve("exposure"),this.twoSidedLightingNegScaleFactorId=e.resolve("twoSidedLightingNegScaleFactor"),this.twoSidedLightingNegScaleFactorId.setValue(0),this.morphPositionTex=e.resolve("morphPositionTex"),this.morphNormalTex=e.resolve("morphNormalTex"),this.morphTexParams=e.resolve("morph_tex_params"),this.lightCube=new kE,this.constantLightCube=e.resolve("lightCube[0]")}destroy(){this.shadowRenderer=null,this._shadowRendererLocal=null,this._shadowRendererDirectional=null,this.shadowMapCache.destroy(),this.shadowMapCache=null,this._renderPassUpdateClustered.destroy(),this._renderPassUpdateClustered=null,this.lightTextureAtlas.destroy(),this.lightTextureAtlas=null}setupViewport(t,e){const s=this.device,i=e?e.width:s.width,r=e?e.height:s.height,a=t.rect;let n=Math.floor(a.x*i),o=Math.floor(a.y*r),c=Math.floor(a.z*i),d=Math.floor(a.w*r);if(s.setViewport(n,o,c,d),t._scissorRectClear){const f=t.scissorRect;n=Math.floor(f.x*i),o=Math.floor(f.y*r),c=Math.floor(f.z*i),d=Math.floor(f.w*r)}s.setScissor(n,o,c,d)}setCameraUniforms(t,e){var n,o;const s=e==null?void 0:e.flipY;let i=null;if(t.xr&&t.xr.session){const c=((o=(n=t._node)==null?void 0:n.parent)==null?void 0:o.getWorldTransform())||null;i=t.xr.views.list;for(let f=0;f<i.length;f++){const u=i[f];u.updateTransforms(c),t.frustum.setFromMat4(u.projViewOffMat)}}else{let c=t.projectionMatrix;t.calculateProjection&&t.calculateProjection(c,Gl);let d=t.getProjectionMatrixSkybox();s&&(c=tb.mul2(g_,c),d=sb.mul2(g_,d)),this.device.isWebGPU&&(c=ib.mul2(S_,c),d=rb.mul2(S_,d));const{jitter:f}=t;let u=0,p=0;if(f>0){const _=e?e.width:this.device.width,S=e?e.height:this.device.height,g=y_[this.device.renderVersion%y_.length];u=f*(g.x*2-1)/_,p=f*(g.y*2-1)/S,c=ab.copy(c),c.data[8]=u,c.data[9]=p,d=nb.copy(d),d.data[8]=u,d.data[9]=p,this.blueNoiseJitterVersion!==this.device.renderVersion&&(this.blueNoiseJitterVersion=this.device.renderVersion,this.blueNoise.vec4(this.blueNoiseJitterVec))}const m=f>0?this.blueNoiseJitterVec:oe.ZERO;if(this.blueNoiseJitterData[0]=m.x,this.blueNoiseJitterData[1]=m.y,this.blueNoiseJitterData[2]=m.z,this.blueNoiseJitterData[3]=m.w,this.blueNoiseJitterId.setValue(this.blueNoiseJitterData),this.projId.setValue(c.data),this.projSkyboxId.setValue(d.data),t.calculateTransform)t.calculateTransform(lr,Gl);else{const _=t._node.getPosition(),S=t._node.getRotation();lr.setTRS(_,S,A.ONE)}this.viewInvId.setValue(lr.data),La.copy(lr).invert(),this.viewId.setValue(La.data),__.setFromMat4(La),this.viewId3.setValue(__.data),or.mul2(c,La),this.viewProjId.setValue(or.data),t._storeShaderMatrices(or,u,p,this.device.renderVersion),this.flipYId.setValue(s?-1:1),this.dispatchViewPos(t._node.getPosition()),t.frustum.setFromMat4(or)}this.tbnBasis.setValue(s?-1:1);const r=t._nearClip,a=t._farClip;return this.nearClipId.setValue(r),this.farClipId.setValue(a),this.cameraParams[0]=1/a,this.cameraParams[1]=a,this.cameraParams[2]=r,this.cameraParams[3]=t.projection===yn?1:0,this.cameraParamsId.setValue(this.cameraParams),this.exposureId.setValue(this.scene.physicalUnits?t.getExposure():this.scene.exposure),i}clear(t,e,s,i){const r=(e??t._clearColorBuffer?Uo:0)|(s??t._clearDepthBuffer?Bo:0)|(i??t._clearStencilBuffer?Gh:0);if(r){const a=this.device;Z.pushGpuMarker(a,"CLEAR"),a.clear({color:[t._clearColor.r,t._clearColor.g,t._clearColor.b,t._clearColor.a],depth:t._clearDepth,stencil:t._clearStencil,flags:r}),Z.popGpuMarker(a)}}setCamera(t,e,s,i=null){this.setCameraUniforms(t,e),this.clearView(t,e,s,!1)}clearView(t,e,s,i){const r=this.device;if(Z.pushGpuMarker(r,"CLEAR-VIEW"),r.setRenderTarget(e),r.updateBegin(),i&&(r.setColorWrite(!0,!0,!0,!0),r.setDepthWrite(!0)),this.setupViewport(t,e),s){const a=t._clearOptions;r.clear(a||{color:[t._clearColor.r,t._clearColor.g,t._clearColor.b,t._clearColor.a],depth:t._clearDepth,flags:(t._clearColorBuffer?Uo:0)|(t._clearDepthBuffer?Bo:0)|(t._clearStencilBuffer?Gh:0),stencil:t._clearStencil})}Z.popGpuMarker(r)}setupCullMode(t,e,s){const i=s.material;let r=wt;if(t){let a=1;(i.cull===bo||i.cull===fa)&&(a=e*s.flipFacesFactor*s.node.worldScaleSign),a<0?r=i.cull===bo?fa:bo:r=i.cull}this.device.setCullMode(r),r===wt&&i.cull===wt&&this.twoSidedLightingNegScaleFactorId.setValue(s.node.worldScaleSign)}updateCameraFrustum(t){if(t.xr&&t.xr.views.list.length){const s=t.xr.views.list[0];or.mul2(s.projMat,s.viewOffMat),t.frustum.setFromMat4(or);return}const e=t.projectionMatrix;if(t.calculateProjection&&t.calculateProjection(e,Gl),t.calculateTransform)t.calculateTransform(lr,Gl);else{const s=t._node.getPosition(),i=t._node.getRotation();lr.setTRS(s,i,A.ONE),this.viewInvId.setValue(lr.data)}La.copy(lr).invert(),or.mul2(e,La),t.frustum.setFromMat4(or)}setBaseConstants(t,e){t.setCullMode(e.cull),e.opacityMap&&this.opacityMapId.setValue(e.opacityMap),(e.opacityMap||e.alphaTest>0)&&this.alphaTestId.setValue(e.alphaTest)}updateCpuSkinMatrices(t){Bd++;const e=t.length;if(e===0)return;const s=pe();for(let i=0;i<e;i++){const r=t[i].skinInstance;r&&(r.updateMatrices(t[i].node,Bd),r._dirty=!0)}this._skinTime+=pe()-s}updateGpuSkinMatrices(t){const e=pe();for(const s of t){const i=s.skinInstance;i&&i._dirty&&(i.updateMatrixPalette(s.node,Bd),i._dirty=!1)}this._skinTime+=pe()-e}updateMorphing(t){const e=pe();for(const s of t){const i=s.morphInstance;i&&i._dirty&&i.update()}this._morphTime+=pe()-e}updateGSplats(t){var e;for(const s of t)(e=s.gsplatInstance)==null||e.update()}gpuUpdate(t){this.updateGpuSkinMatrices(t),this.updateMorphing(t),this.updateGSplats(t)}setVertexBuffers(t,e){t.setVertexBuffer(e.vertexBuffer)}setMorphing(t,e){e&&(e.prepareRendering(t),t.setVertexBuffer(e.morph.vertexBufferIds),this.morphPositionTex.setValue(e.texturePositions),this.morphNormalTex.setValue(e.textureNormals),this.morphTexParams.setValue(e._textureParams))}setSkinning(t,e){const s=e.skinInstance;if(s){this._skinDrawCalls++;const i=s.boneTexture;this.boneTextureId.setValue(i)}}dispatchViewPos(t){const e=this.viewPos;e[0]=t.x,e[1]=t.y,e[2]=t.z,this.viewPosId.setValue(e)}initViewBindGroupFormat(t){if(this.device.supportsUniformBuffers&&!this.viewUniformFormat){const e=[new ct("matrix_view",li),new ct("matrix_viewInverse",li),new ct("matrix_projection",li),new ct("matrix_projectionSkybox",li),new ct("matrix_viewProjection",li),new ct("matrix_view3",Pn),new ct("cubeMapRotationMatrix",Pn),new ct("view_position",cs),new ct("skyboxIntensity",Ws),new ct("exposure",Ws),new ct("textureBias",Ws),new ct("view_index",Ws)];t&&e.push(new ct("clusterCellsCountByBoundsSize",cs),new ct("clusterTextureSize",cs),new ct("clusterBoundsMin",cs),new ct("clusterBoundsDelta",cs),new ct("clusterCellsDot",cs),new ct("clusterCellsMax",cs),new ct("shadowAtlasParams",ma),new ct("clusterMaxCells",pa),new ct("clusterSkip",Ws)),this.viewUniformFormat=new YS(this.device,e);const s=[new hp(lp,op|OS)];this.viewBindGroupFormat=new $S(this.device,s)}}setupViewUniforms(t,e){this.projId.setValue(t.projMat.data),this.projSkyboxId.setValue(t.projMat.data),this.viewId.setValue(t.viewOffMat.data),this.viewInvId.setValue(t.viewInvOffMat.data),this.viewId3.setValue(t.viewMat3.data),this.viewProjId.setValue(t.projViewOffMat.data),this.viewPosId.setValue(t.positionData),this.viewIndexId.setValue(e)}setupViewUniformBuffers(t,e,s,i){y.assert(Array.isArray(t),"viewBindGroups must be an array");const{device:r}=this,a=(i==null?void 0:i.length)??1;for(;t.length<a;){const n=new fp(r,e,!1),o=new cp(r,s,n);Ta.setName(o,`ViewBindGroup_${o.id}`),t.push(o)}if(i)for(let n=0;n<a;n++){const o=i[n];this.setupViewUniforms(o,n);const c=t[n];c.defaultUniformBuffer.update(),c.update()}else{const n=t[0];n.defaultUniformBuffer.update(),n.update()}i||r.setBindGroup(jo,t[0])}setupMeshUniformBuffers(t){const e=this.device;if(e.supportsUniformBuffers){const s=t.getBindGroup(e);s.update(),e.setBindGroup(HS,s),t.getUniformBuffer(e).update(Hd),e.setBindGroup(Df,Hd.bindGroup,Hd.offsets)}}setMeshInstanceMatrices(t,e=!1){const s=t.node.worldTransform;this.modelMatrixId.setValue(s.data),e&&this.normalMatrixId.setValue(t.node.normalMatrix.data)}cull(t,e,s){const i=pe(),r=s.opaque;r.length=0;const a=s.transparent;a.length=0;const n=t.frustumCulling,o=e.length;for(let c=0;c<o;c++){const d=e[c];d.visible&&(!n||!d.cull||d._isVisible(t))&&(d.visibleThisFrame=!0,(d.transparent?a:r).push(d),(d.skinInstance||d.morphInstance||d.gsplatInstance)&&(this.processingMeshInstances.add(d),d.gsplatInstance&&d.gsplatInstance.cameras.push(t)))}this._cullTime+=pe()-i,this._numDrawCallsCulled+=n?o:0}collectLights(t){this.lights.length=0,this.localLights.length=0;const e=this.scene._stats;e.dynamicLights=0,e.bakedLights=0;const s=t.layerList.length;for(let i=0;i<s;i++){const r=t.layerList[i];if(!Gd.has(r)){Gd.add(r);const a=r._lights;for(let n=0;n<a.length;n++){const o=a[n];Vd.has(o)||(Vd.add(o),this.lights.push(o),o._type!==ve&&this.localLights.push(o),(o.mask&gs||o.mask&di)&&e.dynamicLights++,o.mask&fi&&e.bakedLights++)}}}e.lights=this.lights.length,Vd.clear(),Gd.clear()}cullLights(t,e){const s=this.scene.clusteredLightingEnabled,i=this.scene.physicalUnits;for(let r=0;r<e.length;r++){const a=e[r];if(a.enabled)if(a._type!==ve)if(a.getBoundingSphere(zd),t.frustum.containsSphere(zd)){a.visibleThisFrame=!0,a.usePhysicalUnits=i;const n=t.getScreenSize(zd);a.maxScreenSize=Math.max(a.maxScreenSize,n)}else s||a.castShadows&&!a.shadowMap&&(a.visibleThisFrame=!0);else a.usePhysicalUnits=this.scene.physicalUnits}}cullShadowmaps(t){const e=this.scene.clusteredLightingEnabled;for(let i=0;i<this.localLights.length;i++){const r=this.localLights[i];r._type!==ve&&(e?r.atlasSlotUpdated&&r.shadowUpdateMode===Ps&&(r.shadowUpdateMode=vr):r.shadowUpdateMode===Ps&&r.castShadows&&(r.getRenderData(null,0).shadowCamera.renderTarget||(r.shadowUpdateMode=vr)),r.visibleThisFrame&&r.castShadows&&r.shadowUpdateMode!==Ps&&this._shadowRendererLocal.cull(r,t))}this.cameraDirShadowLights.clear();const s=t.cameras;for(let i=0;i<s.length;i++){const r=s[i];if(r.enabled){const a=r.camera;let n;const o=a.layers;for(let c=0;c<o.length;c++){const d=t.getLayerById(o[c]);if(d){const f=d.splitLights[ve];for(let u=0;u<f.length;u++){const p=f[u];p.castShadows&&!Ra.has(p)&&(Ra.add(p),n=n??[],n.push(p),this._shadowRendererDirectional.cull(p,t,a))}}}n&&this.cameraDirShadowLights.set(a,n),Ra.clear()}}}cullComposition(t){const e=pe(),{scene:s}=this;this.processingMeshInstances.clear();const i=t.cameras.length;this._camerasRendered+=i;for(let r=0;r<i;r++){const a=t.cameras[r];s==null||s.fire(Ey,a);const n=a.renderTarget;a.frameUpdate(n),this.updateCameraFrustum(a.camera);const o=a.layers;for(let c=0;c<o.length;c++){const d=t.getLayerById(o[c]);if(d&&d.enabled){this.cullLights(a.camera,d._lights);const f=d.getCulledInstances(a.camera);this.cull(a.camera,d.meshInstances,f)}}s==null||s.fire(by,a)}s.clusteredLightingEnabled&&this.updateLightTextureAtlas(),this.cullShadowmaps(t),s==null||s.fire(vw),this._cullTime+=pe()-e}updateShaders(t,e){const s=t.length;for(let i=0;i<s;i++){const r=t[i].material;if(r&&!Ra.has(r)&&(Ra.add(r),r.getShaderVariant!==sr.prototype.getShaderVariant)){if(e&&(!r.useLighting||r.emitter&&!r.emitter.lighting))continue;r.clearVariants()}}Ra.clear()}updateFrameUniforms(){this.blueNoiseTextureId.setValue(zE(this.device))}beginFrame(t){const e=this.scene,s=e.updateShaders||this.device._shadersDirty;let i=0;const r=t.layerList,a=r.length;for(let c=0;c<a;c++){const f=r[c].meshInstances,u=f.length;i+=u;for(let p=0;p<u;p++){const m=f[p];m.visibleThisFrame=!1,s&&Wd.push(m),m.skinInstance&&$d.push(m)}}if(e._stats.meshInstances=i,s){const c=!e.updateShaders||!this.device._shadersDirty;this.updateShaders(Wd,c),e.updateShaders=!1,this.device._shadersDirty=!1,e._shaderVersion++}this.updateFrameUniforms(),this.updateCpuSkinMatrices($d),Wd.length=0,$d.length=0;const n=this.lights,o=n.length;for(let c=0;c<o;c++)n[c].beginFrame()}updateLightTextureAtlas(){this.lightTextureAtlas.update(this.localLights,this.scene.lighting)}updateLayerComposition(t){const e=pe(),s=t.layerList.length,r=this.scene._shaderVersion;for(let a=0;a<s;a++){const n=t.layerList[a];n._shaderVersion=r,n._skipRenderCounter=0,n._forwardDrawCalls=0,n._shadowDrawCalls=0,n._renderTime=0}t._update(),this._layerCompositionUpdateTime+=pe()-e}frameUpdate(){this.clustersDebugRendered=!1,this.initViewBindGroupFormat(this.scene.clusteredLightingEnabled),this.dirLightShadows.clear()}}class ky{constructor(){h(this,"camera",null);this.layer=null,this.transparent=!1,this.renderTarget=null,this.lightClusters=null,this.clearColor=!1,this.clearDepth=!1,this.clearStencil=!1,this.triggerPostprocess=!1,this.firstCameraUse=!1,this.lastCameraUse=!1,this.viewBindGroups=[],this.useCameraPasses=!1}destroy(){this.viewBindGroups.forEach(t=>{t.defaultUniformBuffer.destroy(),t.destroy()}),this.viewBindGroups.length=0}setupClears(t,e){this.clearColor=(t==null?void 0:t.clearColorBuffer)||e.clearColorBuffer,this.clearDepth=(t==null?void 0:t.clearDepthBuffer)||e.clearDepthBuffer,this.clearStencil=(t==null?void 0:t.clearStencilBuffer)||e.clearStencilBuffer}}class lb extends Ss{constructor(e,s,i,r){super(e);h(this,"layerComposition");h(this,"scene");h(this,"renderer");h(this,"renderActions",[]);h(this,"gammaCorrection");h(this,"toneMapping");h(this,"noDepthClear",!1);this.layerComposition=s,this.scene=i,this.renderer=r}get rendersAnything(){return this.renderActions.length>0}addRenderAction(e){this.renderActions.push(e)}addLayer(e,s,i,r=!0){y.assert(e),y.assert(this.renderTarget!==void 0,"Render pass needs to be initialized before adding layers"),y.assert(e.camera.layersSet.has(s.id),`Camera ${e.entity.name} does not render layer ${s.name}.`);const a=new ky;if(a.renderTarget=this.renderTarget,a.camera=e,a.layer=s,a.transparent=i,r){const n=this.renderActions.length===0;a.setupClears(n?e:void 0,s)}this.addRenderAction(a)}addLayers(e,s,i,r,a,n=!0){const{layerList:o,subLayerList:c}=e;let d=r,f=i;for(;f<o.length;){const u=o[f],p=c[f];if(s.camera.layersSet.has(u.id)&&(this.addLayer(s,u,p,d),d=!1),f++,u.id===a&&p===n)break}return f}updateDirectionalShadows(){const{renderer:e,renderActions:s}=this;for(let i=0;i<s.length;i++){const n=s[i].camera.camera,o=this.renderer.cameraDirShadowLights.get(n);if(o)for(let c=0;c<o.length;c++){const d=o[c];if(e.dirLightShadows.get(d)!==n){e.dirLightShadows.set(d,n);const f=e._shadowRendererDirectional.getLightRenderPass(d,n);f&&this.beforePasses.push(f)}}}}updateClears(){const e=this.renderActions[0];if(e){const i=e.camera.camera,r=i.fullSizeClearRect;this.setClearColor(r&&e.clearColor?i.clearColor:void 0),this.setClearDepth(r&&e.clearDepth&&!this.noDepthClear?i.clearDepth:void 0),this.setClearStencil(r&&e.clearStencil?i.clearStencil:void 0)}}frameUpdate(){super.frameUpdate(),this.updateDirectionalShadows(),this.updateClears()}before(){const{renderActions:e}=this;for(let s=0;s<e.length;s++){const i=e[s];i.firstCameraUse&&this.scene.fire(_w,i.camera)}}execute(){const{layerComposition:e,renderActions:s}=this;for(let i=0;i<s.length;i++){const r=s[i],a=r.layer;y.call(()=>{e.getLayerByName(a.name)||y.warnOnce(`Layer ${a.name} is not found in the scene and will not be rendered. Your render pass setup might need to be updated.`)}),e.isEnabled(a,r.transparent)&&this.renderRenderAction(r,i===0)}}after(){for(let e=0;e<this.renderActions.length;e++){const s=this.renderActions[e];s.lastCameraUse&&this.scene.fire(gw,s.camera)}this.beforePasses.length=0}renderRenderAction(e,s){var f;const{renderer:i,scene:r}=this,a=i.device,{layer:n,transparent:o,camera:c}=e;Z.pushGpuMarker(this.device,`Camera: ${c?c.entity.name:"Unnamed"}, Layer: ${n.name}(${o?"TRANSP":"OPAQUE"})`);const d=pe();if(c){const u=c.gammaCorrection,p=c.toneMapping;this.gammaCorrection!==void 0&&(c.gammaCorrection=this.gammaCorrection),this.toneMapping!==void 0&&(c.toneMapping=this.toneMapping),r.fire(Sw,c,n,o);const m={lightClusters:e.lightClusters},_=((f=c.camera.shaderPassInfo)==null?void 0:f.index)??Ea;(!s||!c.camera.fullSizeClearRect)&&(m.clearColor=e.clearColor,m.clearDepth=e.clearDepth,m.clearStencil=e.clearStencil);const S=e.renderTarget??a.backBuffer;i.renderForwardLayer(c.camera,S,n,o,_,e.viewBindGroups,m),a.setBlendState(ut.NOBLEND),a.setStencilState(null,null),a.setAlphaToCoverage(!1),r.fire(yw,c,n,o),this.gammaCorrection!==void 0&&(c.gammaCorrection=u),this.toneMapping!==void 0&&(c.toneMapping=p)}Z.popGpuMarker(this.device),n._renderTime+=pe()-d}log(e,s){if(super.log(e,s),mi.get(rn)){const{layerComposition:i}=this;this.renderActions.forEach((r,a)=>{const n=r.layer,o=n.enabled&&i.isEnabled(n,r.transparent),c=r.camera;y.trace(rn,`    ${a}:${` Cam: ${c?c.entity.name:"-"}`.padEnd(22," ")}${` Lay: ${n.name}`.padEnd(22," ")}${r.transparent?" TRANSP":" OPAQUE"}${o?" ENABLED":" DISABLED"}${` Meshes: ${n.meshInstances.length}`.padEnd(5," ")}`)})}}}class hb extends Ss{constructor(t,e,s){super(t),this.renderer=e,this.renderAction=s,this.requiresCubemaps=!1}execute(){const t=this.renderAction,e=t.camera;y.assert(t.triggerPostprocess&&e.onPostprocessing),e.onPostprocessing()}}const cb=[[],[],[]],hr=new ae,Fr={drawCalls:[],shaderInstances:[],isNewMaterial:[],lightMaskChanged:[],clear:function(){this.drawCalls.length=0,this.shaderInstances.length=0,this.isNewMaterial.length=0,this.lightMaskChanged.length=0}};function db(l){const t=[];for(let e=0;e<l;++e){const s=Math.sqrt(e+.5)/Math.sqrt(l);t.push(s)}return t}function fb(l){const t=[];for(let e=0;e<l;e++){const s=e/l,i=Math.sqrt(s*s);t.push(i)}return t}const ki=class ki extends ob{constructor(t){super(t);const e=this.device;this._forwardDrawCalls=0,this._materialSwitches=0,this._depthMapTime=0,this._forwardTime=0,this._sortTime=0;const s=e.scope;this.fogColorId=s.resolve("fog_color"),this.fogStartId=s.resolve("fog_start"),this.fogEndId=s.resolve("fog_end"),this.fogDensityId=s.resolve("fog_density"),this.ambientId=s.resolve("light_globalAmbient"),this.skyboxIntensityId=s.resolve("skyboxIntensity"),this.cubeMapRotationMatrixId=s.resolve("cubeMapRotationMatrix"),this.pcssDiskSamplesId=s.resolve("pcssDiskSamples[0]"),this.pcssSphereSamplesId=s.resolve("pcssSphereSamples[0]"),this.lightColorId=[],this.lightDir=[],this.lightDirId=[],this.lightShadowMapId=[],this.lightShadowMatrixId=[],this.lightShadowParamsId=[],this.lightShadowIntensity=[],this.lightRadiusId=[],this.lightPos=[],this.lightPosId=[],this.lightWidth=[],this.lightWidthId=[],this.lightHeight=[],this.lightHeightId=[],this.lightInAngleId=[],this.lightOutAngleId=[],this.lightCookieId=[],this.lightCookieIntId=[],this.lightCookieMatrixId=[],this.lightCookieOffsetId=[],this.lightShadowSearchAreaId=[],this.lightCameraParamsId=[],this.lightSoftShadowParamsId=[],this.shadowMatrixPaletteId=[],this.shadowCascadeDistancesId=[],this.shadowCascadeCountId=[],this.shadowCascadeBlendId=[],this.screenSizeId=s.resolve("uScreenSize"),this._screenSize=new Float32Array(4),this.fogColor=new Float32Array(3),this.ambientColor=new Float32Array(3),this.pcssDiskSamples=db(16),this.pcssSphereSamples=fb(16)}destroy(){super.destroy()}dispatchGlobalLights(t){const e=this.ambientColor;if(hr.linear(t.ambientLight),e[0]=hr.r,e[1]=hr.g,e[2]=hr.b,t.physicalUnits)for(let s=0;s<3;s++)e[s]*=t.ambientLuminance;this.ambientId.setValue(e),this.skyboxIntensityId.setValue(t.physicalUnits?t.skyboxLuminance:t.skyboxIntensity),this.cubeMapRotationMatrixId.setValue(t._skyboxRotationMat3.data)}_resolveLight(t,e){const s=`light${e}`;this.lightColorId[e]=t.resolve(`${s}_color`),this.lightDir[e]=new Float32Array(3),this.lightDirId[e]=t.resolve(`${s}_direction`),this.lightShadowMapId[e]=t.resolve(`${s}_shadowMap`),this.lightShadowMatrixId[e]=t.resolve(`${s}_shadowMatrix`),this.lightShadowParamsId[e]=t.resolve(`${s}_shadowParams`),this.lightShadowIntensity[e]=t.resolve(`${s}_shadowIntensity`),this.lightShadowSearchAreaId[e]=t.resolve(`${s}_shadowSearchArea`),this.lightRadiusId[e]=t.resolve(`${s}_radius`),this.lightPos[e]=new Float32Array(3),this.lightPosId[e]=t.resolve(`${s}_position`),this.lightWidth[e]=new Float32Array(3),this.lightWidthId[e]=t.resolve(`${s}_halfWidth`),this.lightHeight[e]=new Float32Array(3),this.lightHeightId[e]=t.resolve(`${s}_halfHeight`),this.lightInAngleId[e]=t.resolve(`${s}_innerConeAngle`),this.lightOutAngleId[e]=t.resolve(`${s}_outerConeAngle`),this.lightCookieId[e]=t.resolve(`${s}_cookie`),this.lightCookieIntId[e]=t.resolve(`${s}_cookieIntensity`),this.lightCookieMatrixId[e]=t.resolve(`${s}_cookieMatrix`),this.lightCookieOffsetId[e]=t.resolve(`${s}_cookieOffset`),this.lightCameraParamsId[e]=t.resolve(`${s}_cameraParams`),this.lightSoftShadowParamsId[e]=t.resolve(`${s}_softShadowParams`),this.shadowMatrixPaletteId[e]=t.resolve(`${s}_shadowMatrixPalette[0]`),this.shadowCascadeDistancesId[e]=t.resolve(`${s}_shadowCascadeDistances`),this.shadowCascadeCountId[e]=t.resolve(`${s}_shadowCascadeCount`),this.shadowCascadeBlendId[e]=t.resolve(`${s}_shadowCascadeBlend`)}setLTCDirectionalLight(t,e,s,i,r){this.lightPos[e][0]=i.x-s.x*r,this.lightPos[e][1]=i.y-s.y*r,this.lightPos[e][2]=i.z-s.z*r,this.lightPosId[e].setValue(this.lightPos[e]);const a=t.transformVector(new A(-.5,0,0));this.lightWidth[e][0]=a.x*r,this.lightWidth[e][1]=a.y*r,this.lightWidth[e][2]=a.z*r,this.lightWidthId[e].setValue(this.lightWidth[e]);const n=t.transformVector(new A(0,0,.5));this.lightHeight[e][0]=n.x*r,this.lightHeight[e][1]=n.y*r,this.lightHeight[e][2]=n.z*r,this.lightHeightId[e].setValue(this.lightHeight[e])}dispatchDirectLights(t,e,s){let i=0;const r=this.device.scope;for(let a=0;a<t.length;a++){if(!(t[a].mask&e))continue;const n=t[a],o=n._node.getWorldTransform();if(this.lightColorId[i]||this._resolveLight(r,i),this.lightColorId[i].setValue(n._colorLinear),o.getY(n._direction).mulScalar(-1),n._direction.normalize(),this.lightDir[i][0]=n._direction.x,this.lightDir[i][1]=n._direction.y,this.lightDir[i][2]=n._direction.z,this.lightDirId[i].setValue(this.lightDir[i]),n.shape!==qs&&this.setLTCDirectionalLight(o,i,n._direction,s._node.getPosition(),s.farClip),n.castShadows){const c=n.getRenderData(s,0),d=n._getUniformBiasValues(c);this.lightShadowMapId[i].setValue(c.shadowBuffer),this.lightShadowMatrixId[i].setValue(c.shadowMatrix.data),this.shadowMatrixPaletteId[i].setValue(n._shadowMatrixPalette),this.shadowCascadeDistancesId[i].setValue(n._shadowCascadeDistances),this.shadowCascadeCountId[i].setValue(n.numCascades),this.shadowCascadeBlendId[i].setValue(1-n.cascadeBlend),this.lightShadowIntensity[i].setValue(n.shadowIntensity),this.lightSoftShadowParamsId[i].setValue(n._softShadowParams),c.shadowCamera.renderTarget&&this.lightShadowSearchAreaId[i].setValue(n.penumbraSize/c.shadowCamera.renderTarget.width*c.projectionCompensation);const u=n._shadowCameraParams;u.length=4,u[0]=0,u[1]=c.shadowCamera._farClip,u[2]=c.shadowCamera._nearClip,u[3]=1,this.lightCameraParamsId[i].setValue(u);const p=n._shadowRenderParams;p.length=4,p[0]=n._shadowResolution,p[1]=d.normalBias,p[2]=d.bias,p[3]=0,this.lightShadowParamsId[i].setValue(p)}i++}return i}setLTCPositionalLight(t,e){const s=t.transformVector(new A(-.5,0,0));this.lightWidth[e][0]=s.x,this.lightWidth[e][1]=s.y,this.lightWidth[e][2]=s.z,this.lightWidthId[e].setValue(this.lightWidth[e]);const i=t.transformVector(new A(0,0,.5));this.lightHeight[e][0]=i.x,this.lightHeight[e][1]=i.y,this.lightHeight[e][2]=i.z,this.lightHeightId[e].setValue(this.lightHeight[e])}dispatchOmniLight(t,e,s){const i=e._node.getWorldTransform();if(this.lightColorId[s]||this._resolveLight(t,s),this.lightRadiusId[s].setValue(e.attenuationEnd),this.lightColorId[s].setValue(e._colorLinear),i.getTranslation(e._position),this.lightPos[s][0]=e._position.x,this.lightPos[s][1]=e._position.y,this.lightPos[s][2]=e._position.z,this.lightPosId[s].setValue(this.lightPos[s]),e.shape!==qs&&this.setLTCPositionalLight(i,s),e.castShadows){const r=e.getRenderData(null,0);this.lightShadowMapId[s].setValue(r.shadowBuffer);const a=e._getUniformBiasValues(r),n=e._shadowRenderParams;n.length=4,n[0]=e._shadowResolution,n[1]=a.normalBias,n[2]=a.bias,n[3]=1/e.attenuationEnd,this.lightShadowParamsId[s].setValue(n),this.lightShadowIntensity[s].setValue(e.shadowIntensity);const o=e.penumbraSize/r.shadowCamera.renderTarget.width;this.lightShadowSearchAreaId[s].setValue(o);const c=e._shadowCameraParams;c.length=4,c[0]=0,c[1]=r.shadowCamera._farClip,c[2]=r.shadowCamera._nearClip,c[3]=0,this.lightCameraParamsId[s].setValue(c)}e._cookie&&(this.lightCookieId[s].setValue(e._cookie),this.lightShadowMatrixId[s].setValue(i.data),this.lightCookieIntId[s].setValue(e.cookieIntensity))}dispatchSpotLight(t,e,s){const i=e._node.getWorldTransform();if(this.lightColorId[s]||this._resolveLight(t,s),this.lightInAngleId[s].setValue(e._innerConeAngleCos),this.lightOutAngleId[s].setValue(e._outerConeAngleCos),this.lightRadiusId[s].setValue(e.attenuationEnd),this.lightColorId[s].setValue(e._colorLinear),i.getTranslation(e._position),this.lightPos[s][0]=e._position.x,this.lightPos[s][1]=e._position.y,this.lightPos[s][2]=e._position.z,this.lightPosId[s].setValue(this.lightPos[s]),e.shape!==qs&&this.setLTCPositionalLight(i,s),i.getY(e._direction).mulScalar(-1),e._direction.normalize(),this.lightDir[s][0]=e._direction.x,this.lightDir[s][1]=e._direction.y,this.lightDir[s][2]=e._direction.z,this.lightDirId[s].setValue(this.lightDir[s]),e.castShadows){const r=e.getRenderData(null,0);this.lightShadowMapId[s].setValue(r.shadowBuffer),this.lightShadowMatrixId[s].setValue(r.shadowMatrix.data);const a=e._getUniformBiasValues(r),n=e._shadowRenderParams;n.length=4,n[0]=e._shadowResolution,n[1]=a.normalBias,n[2]=a.bias,n[3]=1/e.attenuationEnd,this.lightShadowParamsId[s].setValue(n),this.lightShadowIntensity[s].setValue(e.shadowIntensity);const o=e.penumbraSize/r.shadowCamera.renderTarget.width,c=r.shadowCamera._fov*Math.PI/180,d=1/Math.tan(c/2);this.lightShadowSearchAreaId[s].setValue(o*d);const f=e._shadowCameraParams;f.length=4,f[0]=0,f[1]=r.shadowCamera._farClip,f[2]=r.shadowCamera._nearClip,f[3]=0,this.lightCameraParamsId[s].setValue(f)}if(e._cookie){if(!e.castShadows){const r=Un.evalSpotCookieMatrix(e);this.lightShadowMatrixId[s].setValue(r.data)}this.lightCookieId[s].setValue(e._cookie),this.lightCookieIntId[s].setValue(e.cookieIntensity),e._cookieTransform&&(e._cookieTransformUniform[0]=e._cookieTransform.x,e._cookieTransformUniform[1]=e._cookieTransform.y,e._cookieTransformUniform[2]=e._cookieTransform.z,e._cookieTransformUniform[3]=e._cookieTransform.w,this.lightCookieMatrixId[s].setValue(e._cookieTransformUniform),e._cookieOffsetUniform[0]=e._cookieOffset.x,e._cookieOffsetUniform[1]=e._cookieOffset.y,this.lightCookieOffsetId[s].setValue(e._cookieOffsetUniform))}}dispatchLocalLights(t,e,s){let i=s;const r=this.device.scope,a=t[Ke],n=a.length;for(let d=0;d<n;d++){const f=a[d];f.mask&e&&(this.dispatchOmniLight(r,f,i),i++)}const o=t[Ze],c=o.length;for(let d=0;d<c;d++){const f=o[d];f.mask&e&&(this.dispatchSpotLight(r,f,i),i++)}}renderForwardPrepareMaterials(t,e,s,i,r,a){const n=t.fogParams??this.scene.fog,o=t.shaderParams;o.fog=n.type,o.srgbRenderTarget=(e==null?void 0:e.isColorBufferSrgb(0))??!1;const c=(v,w,x,b)=>{Fr.drawCalls.push(v),Fr.shaderInstances.push(w),Fr.isNewMaterial.push(x),Fr.lightMaskChanged.push(b)};Fr.clear();const d=this.device,f=this.scene,u=f.clusteredLightingEnabled,p=(r==null?void 0:r.getLightHash(u))??0;let m=null,_,S;const g=s.length;for(let v=0;v<g;v++){const w=s[v];if(t===ki.skipRenderCamera){if(ki._skipRenderCounter>=ki.skipRenderAfter)continue;ki._skipRenderCounter++}if(r){if(r._skipRenderCounter>=r.skipRenderAfter)continue;r._skipRenderCounter++}const x=w.instancingData;if(x&&x.count<=0)continue;w.ensureMaterial(d);const b=w.material,C=w._shaderDefs,D=w.mask;b&&b===m&&C!==_&&(m=null),b!==m&&(this._materialSwitches++,b._scene=f,b.dirty&&(Z.pushGpuMarker(d,`Node: ${w.node.name}, Material: ${b.name}`),b.updateUniforms(d,f),b.dirty=!1,Z.popGpuMarker(d)));const T=w.getShaderInstance(a,p,f,o,this.viewUniformFormat,this.viewBindGroupFormat,i);c(w,T,b!==m,!m||D!==S),m=b,_=C,S=D}return Fr}renderForwardInternal(t,e,s,i,r,a,n){var _,S;const o=this.device,c=this.scene,d=1<<i,f=a?-1:1,u=c.clusteredLightingEnabled,p=(_=t.xr)!=null&&_.session&&t.xr.views.list.length?t.xr.views.list:null,m=e.drawCalls.length;for(let g=0;g<m;g++){const v=e.drawCalls[g],w=e.isNewMaterial[g],x=e.lightMaskChanged[g],b=e.shaderInstances[g],C=v.material,D=v.mask;if(b.shader.failed)continue;if(w){if(o.setShader(b.shader,!1),C.setParameters(o),x){const W=this.dispatchDirectLights(s[ve],D,t);u||this.dispatchLocalLights(s,D,W)}this.alphaTestId.setValue(C.alphaTest),o.setBlendState(C.blendState),o.setDepthState(C.depthState),o.setAlphaToCoverage(C.alphaToCoverage)}Z.pushGpuMarker(o,`Node: ${v.node.name}, Material: ${C.name}`),this.setupCullMode(t._cullFaces,f,v);const T=v.stencilFront??C.stencilFront,I=v.stencilBack??C.stencilBack;o.setStencilState(T,I),v.setParameters(o,d),o.scope.resolve("meshInstanceId").setValue(v.id);const L=v.mesh;this.setVertexBuffers(o,L),this.setMorphing(o,v.morphInstance),this.setSkinning(o,v);const E=v.instancingData;E&&o.setVertexBuffer(E.vertexBuffer),this.setMeshInstanceMatrices(v,!0),this.setupMeshUniformBuffers(b);const F=v.renderStyle,k=L.indexBuffer[F];r==null||r(v,g);const H=(S=v.indirectData)==null?void 0:S.get(t);if(p)for(let G=0;G<p.length;G++){const W=p[G];if(o.setViewport(W.viewport.x,W.viewport.y,W.viewport.z,W.viewport.w),o.supportsUniformBuffers){const V=n[G];o.setBindGroup(jo,V)}else this.setupViewUniforms(W,G);const R=G===0,B=G===p.length-1;o.draw(L.primitive[F],k,E==null?void 0:E.count,H,R,B),this._forwardDrawCalls++,v.instancingData&&this._instancedDrawCalls++}else o.draw(L.primitive[F],k,E==null?void 0:E.count,H),this._forwardDrawCalls++,v.instancingData&&this._instancedDrawCalls++;g<m-1&&!e.isNewMaterial[g+1]&&C.setParameters(o,v.parameters),Z.popGpuMarker(o)}}renderForward(t,e,s,i,r,a,n,o,c){const d=pe(),f=this.renderForwardPrepareMaterials(t,e,s,i,n,r);this.renderForwardInternal(t,f,i,r,a,o,c),Fr.clear(),this._forwardTime+=pe()-d}renderForwardLayer(t,e,s,i,r,a,n={}){const{scene:o,device:c}=this,d=o.clusteredLightingEnabled;this.setupViewport(t,e);let f,u;if(s){const x=pe();s.sortVisible(t,i),this._sortTime+=pe()-x;const b=s.getCulledInstances(t);f=i?b.transparent:b.opaque,o.immediate.onPreRenderLayer(s,f,i),s.requiresLightCube&&(this.lightCube.update(o.ambientLight,s._lights),this.constantLightCube.setValue(this.lightCube.colors)),u=s.splitLights}else f=n.meshInstances,u=n.splitLights??cb;if(y.assert(f,"Either layer or options.meshInstances must be provided"),d){const x=n.lightClusters??this.worldClustersAllocator.empty;x.activate(),s&&!this.clustersDebugRendered&&o.lighting.debugLayer===s.id&&(this.clustersDebugRendered=!0,kf.render(x,this.scene))}o._activeCamera=t;const p=t.fogParams??this.scene.fog;this.setFogConstants(p);const m=this.setCameraUniforms(t,e);c.supportsUniformBuffers&&this.setupViewUniformBuffers(a,this.viewUniformFormat,this.viewBindGroupFormat,m);const _=n.clearColor??!1,S=n.clearDepth??!1,g=n.clearStencil??!1;(_||S||g)&&this.clear(t,_,S,g);const v=!!(t._flipFaces^(e==null?void 0:e.flipY)),w=this._forwardDrawCalls;this.renderForward(t,e,f,u,r,null,s,v,a),s&&(s._forwardDrawCalls+=this._forwardDrawCalls-w)}setFogConstants(t){if(t.type!==Hn){hr.linear(t.color);const e=this.fogColor;e[0]=hr.r,e[1]=hr.g,e[2]=hr.b,this.fogColorId.setValue(e),t.type===HT?(this.fogStartId.setValue(t.start),this.fogEndId.setValue(t.end)):this.fogDensityId.setValue(t.density)}}setSceneConstants(){const t=this.scene;this.dispatchGlobalLights(t);const e=this.device;this._screenSize[0]=e.width,this._screenSize[1]=e.height,this._screenSize[2]=1/e.width,this._screenSize[3]=1/e.height,this.screenSizeId.setValue(this._screenSize),this.pcssDiskSamplesId.setValue(this.pcssDiskSamples),this.pcssSphereSamplesId.setValue(this.pcssSphereSamples)}buildFrameGraph(t,e){const s=this.scene;if(t.reset(),s.clusteredLightingEnabled){const{shadowsEnabled:o,cookiesEnabled:c}=s.lighting;this._renderPassUpdateClustered.update(t,o,c,this.lights,this.localLights),t.addRenderPass(this._renderPassUpdateClustered)}else this._shadowRendererLocal.buildNonClusteredRenderPasses(t,this.localLights);let i=0,r=!0,a=null;const n=e._renderActions;for(let o=i;o<n.length;o++){const c=n[o],{layer:d,camera:f}=c;if(c.useCameraPasses)y.call(()=>{f.postEffects.effects.length>0&&y.warnOnce(`Camera '${f.entity.name}' uses render passes, which are not compatible with post-effects scripts. Rendering of the post-effects is ignored, but they should not be attached to the camera.`)}),f.camera.renderPasses.forEach(u=>{t.addRenderPass(u)});else{const u=d.id===us,p=u&&(f.renderSceneColorMap||f.renderSceneDepthMap);r&&(r=!1,i=o,a=c.renderTarget);const m=n[o+1],S=(m?!m.useCameraPasses&&m.layer.id===us:!1)&&(f.renderSceneColorMap||f.renderSceneDepthMap),g=m?m.firstCameraUse&&this.cameraDirShadowLights.has(m.camera.camera):!1;if(!m||m.renderTarget!==a||g||S||p){if(u&&i===o||this.addMainRenderPass(t,e,a,i,o),u){if(f.renderSceneColorMap){const w=f.camera.renderPassColorGrab;w.source=f.renderTarget,t.addRenderPass(w)}f.renderSceneDepthMap&&t.addRenderPass(f.camera.renderPassDepthGrab)}if(c.triggerPostprocess&&(f!=null&&f.onPostprocessing)){const w=new hb(this.device,this,c);t.addRenderPass(w)}r=!0}}}}addMainRenderPass(t,e,s,i,r){const a=new lb(this.device,e,this.scene,this);a.init(s);const n=e._renderActions;for(let o=i;o<=r;o++)a.addRenderAction(n[o]);t.addRenderPass(a)}update(t){this.frameUpdate(),this.shadowRenderer.frameUpdate(),this.scene._updateSkyMesh(),this.updateLayerComposition(t),this.collectLights(t),this.beginFrame(t),this.setSceneConstants(),this.cullComposition(t),this.gpuUpdate(this.processingMeshInstances)}};h(ki,"skipRenderCamera",null),h(ki,"_skipRenderCounter",0),h(ki,"skipRenderAfter",0);let sl=ki,Xd=0;const ro=[],Ql=new Set;function ub(l,t){return l.drawOrder-t.drawOrder}function pb(l,t){const e=l._sortKeyForward,s=t._sortKeyForward;return e===s?t.mesh.id-l.mesh.id:s-e}function mb(l,t){return t._sortKeyDynamic-l._sortKeyDynamic}function _b(l,t){return l._sortKeyDynamic-t._sortKeyDynamic}const gb=[null,ub,pb,mb,_b];class Sb{constructor(){h(this,"opaque",[]);h(this,"transparent",[])}}class Lt{constructor(t={}){h(this,"meshInstances",[]);h(this,"meshInstancesSet",new Set);h(this,"shadowCasters",[]);h(this,"shadowCastersSet",new Set);h(this,"_visibleInstances",new WeakMap);h(this,"_lights",[]);h(this,"_lightsSet",new Set);h(this,"_clusteredLightsSet",new Set);h(this,"_splitLights",[[],[],[]]);h(this,"_splitLightsDirty",!0);h(this,"requiresLightCube",!1);h(this,"cameras",[]);h(this,"camerasSet",new Set);h(this,"_dirtyComposition",!1);t.id!==void 0?(this.id=t.id,Xd=Math.max(this.id+1,Xd)):this.id=Xd++,this.name=t.name,this._enabled=t.enabled??!0,this._refCounter=this._enabled?1:0,this.opaqueSortMode=t.opaqueSortMode??ow,this.transparentSortMode=t.transparentSortMode??Um,t.renderTarget&&(this.renderTarget=t.renderTarget),this._clearColorBuffer=!!t.clearColorBuffer,this._clearDepthBuffer=!!t.clearDepthBuffer,this._clearStencilBuffer=!!t.clearStencilBuffer,this.onEnable=t.onEnable,this.onDisable=t.onDisable,this._enabled&&this.onEnable&&this.onEnable(),this.customSortCallback=null,this.customCalculateSortValues=null,this._lightHash=0,this._lightHashDirty=!1,this._lightIdHash=0,this._lightIdHashDirty=!1,this.skipRenderAfter=Number.MAX_VALUE,this._skipRenderCounter=0,this._renderTime=0,this._forwardDrawCalls=0,this._shadowDrawCalls=0,this._shaderVersion=-1}set enabled(t){t!==this._enabled&&(this._dirtyComposition=!0,this._enabled=t,t?(this.incrementCounter(),this.onEnable&&this.onEnable()):(this.decrementCounter(),this.onDisable&&this.onDisable()))}get enabled(){return this._enabled}set clearColorBuffer(t){this._clearColorBuffer=t,this._dirtyComposition=!0}get clearColorBuffer(){return this._clearColorBuffer}set clearDepthBuffer(t){this._clearDepthBuffer=t,this._dirtyComposition=!0}get clearDepthBuffer(){return this._clearDepthBuffer}set clearStencilBuffer(t){this._clearStencilBuffer=t,this._dirtyComposition=!0}get clearStencilBuffer(){return this._clearStencilBuffer}get hasClusteredLights(){return this._clusteredLightsSet.size>0}get clusteredLightsSet(){return this._clusteredLightsSet}incrementCounter(){this._refCounter===0&&(this._enabled=!0,this.onEnable&&this.onEnable()),this._refCounter++}decrementCounter(){if(this._refCounter===1)this._enabled=!1,this.onDisable&&this.onDisable();else if(this._refCounter===0){y.warn("Trying to decrement layer counter below 0");return}this._refCounter--}addMeshInstances(t,e){const s=this.meshInstances,i=this.meshInstancesSet;for(let r=0;r<t.length;r++){const a=t[r];i.has(a)||(s.push(a),i.add(a),Ql.add(a.material))}if(e||this.addShadowCasters(t),Ql.size>0){const r=this._shaderVersion;Ql.forEach(a=>{r>=0&&a._shaderVersion!==r&&(a.getShaderVariant!==sr.prototype.getShaderVariant&&a.clearVariants(),a._shaderVersion=r)}),Ql.clear()}}removeMeshInstances(t,e){const s=this.meshInstances,i=this.meshInstancesSet;for(let r=0;r<t.length;r++){const a=t[r];if(i.has(a)){i.delete(a);const n=s.indexOf(a);n>=0&&s.splice(n,1)}}e||this.removeShadowCasters(t)}addShadowCasters(t){const e=this.shadowCasters,s=this.shadowCastersSet;for(let i=0;i<t.length;i++){const r=t[i];r.castShadow&&!s.has(r)&&(s.add(r),e.push(r))}}removeShadowCasters(t){const e=this.shadowCasters,s=this.shadowCastersSet;for(let i=0;i<t.length;i++){const r=t[i];if(s.has(r)){s.delete(r);const a=e.indexOf(r);a>=0&&e.splice(a,1)}}}clearMeshInstances(t=!1){this.meshInstances.length=0,this.meshInstancesSet.clear(),t||(this.shadowCasters.length=0,this.shadowCastersSet.clear())}markLightsDirty(){this._lightHashDirty=!0,this._lightIdHashDirty=!0,this._splitLightsDirty=!0}hasLight(t){return this._lightsSet.has(t)}addLight(t){const e=t.light;this._lightsSet.has(e)||(this._lightsSet.add(e),this._lights.push(e),this.markLightsDirty()),e.type!==ve&&this._clusteredLightsSet.add(e)}removeLight(t){const e=t.light;this._lightsSet.has(e)&&(this._lightsSet.delete(e),this._lights.splice(this._lights.indexOf(e),1),this.markLightsDirty()),e.type!==ve&&this._clusteredLightsSet.delete(e)}clearLights(){this._lightsSet.forEach(t=>t.removeLayer(this)),this._lightsSet.clear(),this._clusteredLightsSet.clear(),this._lights.length=0,this.markLightsDirty()}get splitLights(){if(this._splitLightsDirty){this._splitLightsDirty=!1;const t=this._splitLights;for(let s=0;s<t.length;s++)t[s].length=0;const e=this._lights;for(let s=0;s<e.length;s++){const i=e[s];i.enabled&&t[i._type].push(i)}for(let s=0;s<t.length;s++)t[s].sort((i,r)=>i.key-r.key)}return this._splitLights}evaluateLightHash(t,e,s){let i=0;const r=this._lights;for(let a=0;a<r.length;a++){const n=r[a].type!==ve;(t&&n||e&&!n)&&ro.push(s?r[a].id:r[a].key)}return ro.length>0&&(ro.sort(),i=jS(ro),ro.length=0),i}getLightHash(t){return this._lightHashDirty&&(this._lightHashDirty=!1,this._lightHash=this.evaluateLightHash(!t,!0,!1)),this._lightHash}getLightIdHash(){return this._lightIdHashDirty&&(this._lightIdHashDirty=!1,this._lightIdHash=this.evaluateLightHash(!0,!1,!0)),this._lightIdHash}addCamera(t){this.camerasSet.has(t.camera)||(this.camerasSet.add(t.camera),this.cameras.push(t),this._dirtyComposition=!0)}removeCamera(t){if(this.camerasSet.has(t.camera)){this.camerasSet.delete(t.camera);const e=this.cameras.indexOf(t);this.cameras.splice(e,1),this._dirtyComposition=!0}}clearCameras(){this.cameras.length=0,this.camerasSet.clear(),this._dirtyComposition=!0}_calculateSortDistances(t,e,s){const i=t.length,{x:r,y:a,z:n}=e,{x:o,y:c,z:d}=s;for(let f=0;f<i;f++){const u=t[f];let p;if(u.calculateSortDistance)p=u.calculateSortDistance(u,e,s);else{const _=u.aabb.center;p=(_.x-r)*o+(_.y-a)*c+(_.z-n)*d}const m=u._drawBucket*1e9;u._sortKeyDynamic=m+p}}getCulledInstances(t){let e=this._visibleInstances.get(t);return e||(e=new Sb,this._visibleInstances.set(t,e)),e}sortVisible(t,e){const s=e?this.transparentSortMode:this.opaqueSortMode;if(s===Ph)return;const i=this.getCulledInstances(t),r=e?i.transparent:i.opaque,a=t.node;if(s===hw){const n=a.getPosition(),o=a.forward;this.customCalculateSortValues&&this.customCalculateSortValues(r,r.length,n,o),this.customSortCallback&&r.sort(this.customSortCallback)}else{if(s===Um||s===lw){const n=a.getPosition(),o=a.forward;this._calculateSortDistances(r,n,o)}r.sort(gb[s])}}}const yb=(l,t)=>l.priority-t.priority,il=l=>l.sort(yb);class Uf extends Se{constructor(e="Untitled"){super();h(this,"layerList",[]);h(this,"layerIdMap",new Map);h(this,"layerNameMap",new Map);h(this,"layerOpaqueIndexMap",new Map);h(this,"layerTransparentIndexMap",new Map);h(this,"subLayerList",[]);h(this,"subLayerEnabled",[]);h(this,"cameras",[]);h(this,"_renderActions",[]);h(this,"_dirty",!1);this.name=e,this._opaqueOrder={},this._transparentOrder={}}destroy(){this.destroyRenderActions()}destroyRenderActions(){this._renderActions.forEach(e=>e.destroy()),this._renderActions.length=0}markDirty(){this._dirty=!0}_update(){const e=this.layerList.length;if(!this._dirty){for(let s=0;s<e;s++)if(this.layerList[s]._dirtyComposition){this._dirty=!0;break}}if(this._dirty){this._dirty=!1,this.cameras.length=0;for(let i=0;i<e;i++){const r=this.layerList[i];r._dirtyComposition=!1;for(let a=0;a<r.cameras.length;a++){const n=r.cameras[a];this.cameras.indexOf(n)<0&&this.cameras.push(n)}}this.cameras.length>1&&il(this.cameras);let s=0;this.destroyRenderActions();for(let i=0;i<this.cameras.length;i++){const r=this.cameras[i];if(r.camera.renderPasses.length>0){this.addDummyRenderAction(s,r),s++;continue}let a=!0;const n=s;let o=null,c=!1;for(let d=0;d<e;d++){const f=this.layerList[d];if(f.enabled&&this.subLayerEnabled[d]&&f.cameras.length>0&&r.layers.indexOf(f.id)>=0){!c&&f.id===r.disablePostEffectsLayer&&(c=!0,o&&(o.triggerPostprocess=!0));const p=this.subLayerList[d];o=this.addRenderAction(s,f,p,r,a,c),s++,a=!1}}n<s&&(o.lastCameraUse=!0),!c&&o&&(o.triggerPostprocess=!0),r.renderTarget&&r.postEffectsEnabled&&this.propagateRenderTarget(n-1,r)}this._logRenderActions()}}getNextRenderAction(e){y.assert(this._renderActions.length===e);const s=new ky;return this._renderActions.push(s),s}addDummyRenderAction(e,s){const i=this.getNextRenderAction(e);i.camera=s,i.useCameraPasses=!0}addRenderAction(e,s,i,r,a,n){let o=s.id!==us?r.renderTarget:null,c=!1;const d=this._renderActions;for(let m=e-1;m>=0;m--)if(d[m].camera===r&&d[m].renderTarget===o){c=!0;break}n&&r.postEffectsEnabled&&(o=null);const f=this.getNextRenderAction(e);f.triggerPostprocess=!1,f.layer=s,f.transparent=i,f.camera=r,f.renderTarget=o,f.firstCameraUse=a,f.lastCameraUse=!1;const u=a||!c,p=s.clearColorBuffer||s.clearDepthBuffer||s.clearStencilBuffer;return(u||p)&&f.setupClears(u?r:void 0,s),f}propagateRenderTarget(e,s){for(let i=e;i>=0;i--){const r=this._renderActions[i],a=r.layer;if(r.renderTarget&&a.id!==us)break;if(a.id===us)continue;if(r.useCameraPasses)break;const n=r==null?void 0:r.camera.camera;if(n&&(!s.camera.rect.equals(n.rect)||!s.camera.scissorRect.equals(n.scissorRect)))break;r.renderTarget=s.renderTarget}}_logRenderActions(){if(mi.get(Il)){y.trace(Il,`Render Actions for composition: ${this.name}`);for(let e=0;e<this._renderActions.length;e++){const s=this._renderActions[e],i=s.camera;if(s.useCameraPasses)y.trace(Il,`${e}CustomPasses Cam: ${i?i.entity.name:"-"}`);else{const r=s.layer,a=r.enabled&&this.isEnabled(r,s.transparent),n=(s.clearColor?"Color ":"..... ")+(s.clearDepth?"Depth ":"..... ")+(s.clearStencil?"Stencil":".......");y.trace(Il,`${e+` Cam: ${i?i.entity.name:"-"}`.padEnd(22," ")+` Lay: ${r.name}`.padEnd(22," ")+(s.transparent?" TRANSP":" OPAQUE")+(a?" ENABLED ":" DISABLED")+` RT: ${s.renderTarget?s.renderTarget.name:"-"}`.padEnd(30," ")} Clear: ${n}${s.firstCameraUse?" CAM-FIRST":""}${s.lastCameraUse?" CAM-LAST":""}${s.triggerPostprocess?" POSTPROCESS":""}`)}}}}_isLayerAdded(e){const s=this.layerIdMap.get(e.id)===e;return y.assert(!s,`Layer is already added: ${e.name}`),s}_isSublayerAdded(e,s){return(s?this.layerTransparentIndexMap:this.layerOpaqueIndexMap).get(e)!==void 0?(y.error(`Sublayer ${e.name}, transparent: ${s} is already added.`),!0):!1}push(e){this._isLayerAdded(e)||(this.layerList.push(e),this.layerList.push(e),this._opaqueOrder[e.id]=this.subLayerList.push(!1)-1,this._transparentOrder[e.id]=this.subLayerList.push(!0)-1,this.subLayerEnabled.push(!0),this.subLayerEnabled.push(!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e))}insert(e,s){if(this._isLayerAdded(e))return;this.layerList.splice(s,0,e,e),this.subLayerList.splice(s,0,!1,!0);const i=this.layerList.length;this._updateOpaqueOrder(s,i-1),this._updateTransparentOrder(s,i-1),this.subLayerEnabled.splice(s,0,!0,!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e)}remove(e){let s=this.layerList.indexOf(e);for(delete this._opaqueOrder[s],delete this._transparentOrder[s];s>=0;)this.layerList.splice(s,1),this.subLayerList.splice(s,1),this.subLayerEnabled.splice(s,1),s=this.layerList.indexOf(e),this._dirty=!0,this.fire("remove",e);const i=this.layerList.length;this._updateOpaqueOrder(0,i-1),this._updateTransparentOrder(0,i-1),this._updateLayerMaps()}pushOpaque(e){this._isSublayerAdded(e,!1)||(this.layerList.push(e),this._opaqueOrder[e.id]=this.subLayerList.push(!1)-1,this.subLayerEnabled.push(!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e))}insertOpaque(e,s){if(this._isSublayerAdded(e,!1))return;this.layerList.splice(s,0,e),this.subLayerList.splice(s,0,!1);const i=this.subLayerList.length;this._updateOpaqueOrder(s,i-1),this.subLayerEnabled.splice(s,0,!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e)}removeOpaque(e){for(let s=0,i=this.layerList.length;s<i;s++)if(this.layerList[s]===e&&!this.subLayerList[s]){this.layerList.splice(s,1),this.subLayerList.splice(s,1),i--,this._updateOpaqueOrder(s,i-1),this.subLayerEnabled.splice(s,1),this._dirty=!0,this.layerList.indexOf(e)<0&&this.fire("remove",e);break}this._updateLayerMaps()}pushTransparent(e){this._isSublayerAdded(e,!0)||(this.layerList.push(e),this._transparentOrder[e.id]=this.subLayerList.push(!0)-1,this.subLayerEnabled.push(!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e))}insertTransparent(e,s){if(this._isSublayerAdded(e,!0))return;this.layerList.splice(s,0,e),this.subLayerList.splice(s,0,!0);const i=this.subLayerList.length;this._updateTransparentOrder(s,i-1),this.subLayerEnabled.splice(s,0,!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e)}removeTransparent(e){for(let s=0,i=this.layerList.length;s<i;s++)if(this.layerList[s]===e&&this.subLayerList[s]){this.layerList.splice(s,1),this.subLayerList.splice(s,1),i--,this._updateTransparentOrder(s,i-1),this.subLayerEnabled.splice(s,1),this._dirty=!0,this.layerList.indexOf(e)<0&&this.fire("remove",e);break}this._updateLayerMaps()}getOpaqueIndex(e){return this.layerOpaqueIndexMap.get(e)??-1}getTransparentIndex(e){return this.layerTransparentIndexMap.get(e)??-1}isEnabled(e,s){if(e.enabled){const i=s?this.getTransparentIndex(e):this.getOpaqueIndex(e);if(i>=0)return this.subLayerEnabled[i]}return!1}_updateLayerMaps(){this.layerIdMap.clear(),this.layerNameMap.clear(),this.layerOpaqueIndexMap.clear(),this.layerTransparentIndexMap.clear();for(let e=0;e<this.layerList.length;e++){const s=this.layerList[e];this.layerIdMap.set(s.id,s),this.layerNameMap.set(s.name,s),(this.subLayerList[e]?this.layerTransparentIndexMap:this.layerOpaqueIndexMap).set(s,e)}}getLayerById(e){return this.layerIdMap.get(e)??null}getLayerByName(e){return this.layerNameMap.get(e)??null}_updateOpaqueOrder(e,s){for(let i=e;i<=s;i++)this.subLayerList[i]===!1&&(this._opaqueOrder[this.layerList[i].id]=i)}_updateTransparentOrder(e,s){for(let i=e;i<=s;i++)this.subLayerList[i]===!0&&(this._transparentOrder[this.layerList[i].id]=i)}_sortLayersDescending(e,s,i){let r=-1,a=-1;for(let n=0,o=e.length;n<o;n++){const c=e[n];i.hasOwnProperty(c)&&(r=Math.max(r,i[c]))}for(let n=0,o=s.length;n<o;n++){const c=s[n];i.hasOwnProperty(c)&&(a=Math.max(a,i[c]))}return r===-1&&a!==-1?1:a===-1&&r!==-1?-1:a-r}sortTransparentLayers(e,s){return this._sortLayersDescending(e,s,this._transparentOrder)}sortOpaqueLayers(e,s){return this._sortLayersDescending(e,s,this._opaqueOrder)}}const Jl=new A,bi={bias:0,normalBias:0},ao=new ae,qd={r:0,g:1,b:2,a:3},Bf={directional:ve,omni:Ke,point:Ke,spot:Ze},vb=[[new oe(0,0,1,1)],[new oe(0,0,.5,.5),new oe(0,.5,.5,.5)],[new oe(0,0,.5,.5),new oe(0,.5,.5,.5),new oe(.5,0,.5,.5)],[new oe(0,0,.5,.5),new oe(0,.5,.5,.5),new oe(.5,0,.5,.5),new oe(.5,.5,.5,.5)]],xb={rrr:1,ggg:2,bbb:4,aaa:8,rgb:7};let Tb=0;class wb{constructor(t,e,s){this.light=s,this.camera=t,this.shadowCamera=Ny.createShadowCamera(s._shadowType,s._type,e),this.shadowMatrix=new ie,this.shadowViewport=new oe(0,0,1,1),this.shadowScissor=new oe(0,0,1,1),this.projectionCompensation=0,this.face=e,this.visibleCasters=[],this.viewBindGroups=[]}destroy(){this.viewBindGroups.forEach(t=>{t.defaultUniformBuffer.destroy(),t.destroy()}),this.viewBindGroups.length=0}get shadowBuffer(){const t=this.shadowCamera.renderTarget;return t?this.light._isPcf?t.depthBuffer:t.colorBuffer:null}}class rl{constructor(t,e){h(this,"layers",new Set);h(this,"clusteredLighting");h(this,"shadowDepthState",qt.DEFAULT.clone());h(this,"clusteredFlags",0);h(this,"clusteredData",new Uint32Array(3));h(this,"clusteredData16",new Uint16Array(this.clusteredData.buffer));h(this,"_evtDeviceRestored",null);this.device=t,this.clusteredLighting=e,this.id=Tb++,this._evtDeviceRestored=t.on("devicerestored",this.onDeviceRestored,this),this._type=ve,this._color=new ae(.8,.8,.8),this._intensity=1,this._affectSpecularity=!0,this._luminance=0,this._castShadows=!1,this._enabled=!1,this._mask=gs,this.isStatic=!1,this.key=0,this.bakeDir=!0,this.bakeNumSamples=1,this.bakeArea=0,this.attenuationStart=10,this.attenuationEnd=10,this._falloffMode=Ep,this._shadowType=Hs,this._vsmBlurSize=11,this.vsmBlurMode=Ap,this.vsmBias=.01*.25,this._cookie=null,this.cookieIntensity=1,this._cookieFalloff=!0,this._cookieChannel="rgb",this._cookieTransform=null,this._cookieTransformUniform=new Float32Array(4),this._cookieOffset=null,this._cookieOffsetUniform=new Float32Array(2),this._cookieTransformSet=!1,this._cookieOffsetSet=!1,this._innerConeAngle=40,this._outerConeAngle=45,this.cascades=null,this._shadowMatrixPalette=null,this._shadowCascadeDistances=null,this.numCascades=1,this._cascadeBlend=0,this.cascadeDistribution=.5,this._shape=qs,this._colorLinear=new Float32Array(3),this._updateLinearColor(),this._position=new A(0,0,0),this._direction=new A(0,0,0),this._innerConeAngleCos=Math.cos(this._innerConeAngle*Math.PI/180),this._updateOuterAngle(this._outerConeAngle),this._usePhysicalUnits=void 0,this._shadowMap=null,this._shadowRenderParams=[],this._shadowCameraParams=[],this.shadowDistance=40,this._shadowResolution=1024,this._shadowBias=-5e-4,this._shadowIntensity=1,this._normalOffsetBias=0,this.shadowUpdateMode=Op,this.shadowUpdateOverrides=null,this._isVsm=!1,this._isPcf=!0,this._softShadowParams=new Float32Array(4),this.shadowSamples=16,this.shadowBlockerSamples=16,this.penumbraSize=1,this.penumbraFalloff=1,this._cookieMatrix=null,this._atlasViewport=null,this.atlasViewportAllocated=!1,this.atlasVersion=0,this.atlasSlotIndex=0,this.atlasSlotUpdated=!1,this._node=null,this._renderData=[],this.visibleThisFrame=!1,this.maxScreenSize=0,this._updateShadowBias()}destroy(){var t;(t=this._evtDeviceRestored)==null||t.off(),this._evtDeviceRestored=null,this._destroyShadowMap(),this.releaseRenderData(),this._renderData=null}onDeviceRestored(){this.shadowUpdateMode===Ps&&(this.shadowUpdateMode=vr)}releaseRenderData(){if(this._renderData){for(let t=0;t<this._renderData.length;t++)this._renderData[t].destroy();this._renderData.length=0}}addLayer(t){this.layers.add(t)}removeLayer(t){this.layers.delete(t)}set shadowSamples(t){this._softShadowParams[0]=t}get shadowSamples(){return this._softShadowParams[0]}set shadowBlockerSamples(t){this._softShadowParams[1]=t}get shadowBlockerSamples(){return this._softShadowParams[1]}set shadowBias(t){this._shadowBias!==t&&(this._shadowBias=t,this._updateShadowBias())}get shadowBias(){return this._shadowBias}set numCascades(t){(!this.cascades||this.numCascades!==t)&&(this.cascades=vb[t-1],this._shadowMatrixPalette=new Float32Array(64),this._shadowCascadeDistances=new Float32Array(4),this._destroyShadowMap(),this.updateKey())}get numCascades(){return this.cascades.length}set cascadeBlend(t){this._cascadeBlend!==t&&(this._cascadeBlend=t,this.updateKey())}get cascadeBlend(){return this._cascadeBlend}set shadowMap(t){this._shadowMap!==t&&(this._destroyShadowMap(),this._shadowMap=t)}get shadowMap(){return this._shadowMap}set mask(t){this._mask!==t&&(this._mask=t,this.updateKey(),this.updateClusteredFlags())}get mask(){return this._mask}get numShadowFaces(){const t=this._type;return t===ve?this.numCascades:t===Ke?6:1}set type(t){if(this._type===t)return;this._type=t,this._destroyShadowMap(),this._updateShadowBias(),this.updateKey(),this.updateClusteredFlags();const e=this._shadowType;this._shadowType=null,this.shadowUpdateOverrides=null,this.shadowType=e}get type(){return this._type}set shape(t){if(this._shape===t)return;this._shape=t,this._destroyShadowMap(),this.updateKey(),this.updateClusteredFlags();const e=this._shadowType;this._shadowType=null,this.shadowType=e}get shape(){return this._shape}set usePhysicalUnits(t){this._usePhysicalUnits!==t&&(this._usePhysicalUnits=t,this._updateLinearColor())}get usePhysicalUnits(){return this._usePhysicalUnits}set shadowType(t){if(this._shadowType===t)return;let e=ji.get(t);e||(t=Hs);const s=this.device;t===Yo&&!s.textureFloatRenderable&&!s.textureHalfFloatRenderable&&(t=Hs),this._type===Ke&&t!==cy&&t!==Hs&&t!==dy&&t!==fy&&t!==Yo&&(t=Hs),t===bp&&(!s.textureFloatRenderable||!s.textureFloatFilterable)&&(t=Lf),t===Lf&&!s.textureHalfFloatRenderable&&(t=Hs),e=ji.get(t),this._isVsm=(e==null?void 0:e.vsm)??!1,this._isPcf=(e==null?void 0:e.pcf)??!1,this._shadowType=t,this._destroyShadowMap(),this.updateKey()}get shadowType(){return this._shadowType}set enabled(t){this._enabled!==t&&(this._enabled=t,this.layersDirty())}get enabled(){return this._enabled}set castShadows(t){this._castShadows!==t&&(this._castShadows=t,this._destroyShadowMap(),this.layersDirty(),this.updateKey())}get castShadows(){return this._castShadows&&this._mask!==fi&&this._mask!==0}set shadowIntensity(t){this._shadowIntensity!==t&&(this._shadowIntensity=t,this.updateKey())}get shadowIntensity(){return this._shadowIntensity}get bakeShadows(){return this._castShadows&&this._mask===fi}set shadowResolution(t){this._shadowResolution!==t&&(this._type===Ke?t=Math.min(t,this.device.maxCubeMapSize):t=Math.min(t,this.device.maxTextureSize),this._shadowResolution=t,this._destroyShadowMap())}get shadowResolution(){return this._shadowResolution}set vsmBlurSize(t){this._vsmBlurSize!==t&&(t%2===0&&t++,this._vsmBlurSize=t)}get vsmBlurSize(){return this._vsmBlurSize}set normalOffsetBias(t){if(this._normalOffsetBias!==t){const e=!this._normalOffsetBias&&t||this._normalOffsetBias&&!t;this._normalOffsetBias=t,e&&this.updateKey()}}get normalOffsetBias(){return this._normalOffsetBias}set falloffMode(t){this._falloffMode!==t&&(this._falloffMode=t,this.updateKey(),this.updateClusteredFlags())}get falloffMode(){return this._falloffMode}set innerConeAngle(t){this._innerConeAngle!==t&&(this._innerConeAngle=t,this._innerConeAngleCos=Math.cos(t*Math.PI/180),this.updateClusterData(!1,!0),this._usePhysicalUnits&&this._updateLinearColor())}get innerConeAngle(){return this._innerConeAngle}set outerConeAngle(t){this._outerConeAngle!==t&&(this._outerConeAngle=t,this._updateOuterAngle(t),this._usePhysicalUnits&&this._updateLinearColor())}get outerConeAngle(){return this._outerConeAngle}set penumbraSize(t){this._penumbraSize=t,this._softShadowParams[2]=t}get penumbraSize(){return this._penumbraSize}set penumbraFalloff(t){this._softShadowParams[3]=t}get penumbraFalloff(){return this._softShadowParams[3]}_updateOuterAngle(t){const e=t*Math.PI/180;this._outerConeAngleCos=Math.cos(e),this._outerConeAngleSin=Math.sin(e),this.updateClusterData(!1,!0)}set intensity(t){this._intensity!==t&&(this._intensity=t,this._updateLinearColor())}get intensity(){return this._intensity}set affectSpecularity(t){this._type===ve&&(this._affectSpecularity=t,this.updateKey())}get affectSpecularity(){return this._affectSpecularity}set luminance(t){this._luminance!==t&&(this._luminance=t,this._updateLinearColor())}get luminance(){return this._luminance}get cookieMatrix(){return this._cookieMatrix||(this._cookieMatrix=new ie),this._cookieMatrix}get atlasViewport(){return this._atlasViewport||(this._atlasViewport=new oe(0,0,1,1)),this._atlasViewport}set cookie(t){this._cookie!==t&&(this._cookie=t,this.updateKey())}get cookie(){return this._cookie}set cookieFalloff(t){this._cookieFalloff!==t&&(this._cookieFalloff=t,this.updateKey())}get cookieFalloff(){return this._cookieFalloff}set cookieChannel(t){if(this._cookieChannel!==t){if(t.length<3){const e=t.charAt(t.length-1),s=3-t.length;for(let i=0;i<s;i++)t+=e}this._cookieChannel=t,this.updateKey(),this.updateClusteredFlags()}}get cookieChannel(){return this._cookieChannel}set cookieTransform(t){this._cookieTransform!==t&&(this._cookieTransform=t,this._cookieTransformSet=!!t,t&&!this._cookieOffset&&(this.cookieOffset=new J,this._cookieOffsetSet=!1),this.updateKey())}get cookieTransform(){return this._cookieTransform}set cookieOffset(t){if(this._cookieOffset===t)return;!!(this._cookieTransformSet||t)&&!t&&this._cookieOffset?this._cookieOffset.set(0,0):this._cookieOffset=t,this._cookieOffsetSet=!!t,t&&!this._cookieTransform&&(this.cookieTransform=new oe(1,1,0,0),this._cookieTransformSet=!1),this.updateKey()}get cookieOffset(){return this._cookieOffset}beginFrame(){this.visibleThisFrame=this._type===ve&&this._enabled,this.maxScreenSize=0,this.atlasViewportAllocated=!1,this.atlasSlotUpdated=!1}_destroyShadowMap(){if(this.releaseRenderData(),this._shadowMap&&(this._shadowMap.cached||this._shadowMap.destroy(),this._shadowMap=null),this.shadowUpdateMode===Ps&&(this.shadowUpdateMode=vr),this.shadowUpdateOverrides)for(let t=0;t<this.shadowUpdateOverrides.length;t++)this.shadowUpdateOverrides[t]===Ps&&(this.shadowUpdateOverrides[t]=vr)}getRenderData(t,e){for(let i=0;i<this._renderData.length;i++){const r=this._renderData[i];if(r.camera===t&&r.face===e)return r}const s=new wb(t,e,this);return this._renderData.push(s),s}clone(){const t=new rl(this.device,this.clusteredLighting);return t.type=this._type,t.setColor(this._color),t.intensity=this._intensity,t.affectSpecularity=this._affectSpecularity,t.luminance=this._luminance,t.castShadows=this.castShadows,t._enabled=this._enabled,t.attenuationStart=this.attenuationStart,t.attenuationEnd=this.attenuationEnd,t.falloffMode=this._falloffMode,t.shadowType=this._shadowType,t.vsmBlurSize=this._vsmBlurSize,t.vsmBlurMode=this.vsmBlurMode,t.vsmBias=this.vsmBias,t.shadowUpdateMode=this.shadowUpdateMode,t.mask=this.mask,this.shadowUpdateOverrides&&(t.shadowUpdateOverrides=this.shadowUpdateOverrides.slice()),t.innerConeAngle=this._innerConeAngle,t.outerConeAngle=this._outerConeAngle,t.numCascades=this.numCascades,t.cascadeDistribution=this.cascadeDistribution,t.cascadeBlend=this._cascadeBlend,t.shape=this._shape,t.shadowDepthState.copy(this.shadowDepthState),t.shadowBias=this.shadowBias,t.normalOffsetBias=this._normalOffsetBias,t.shadowResolution=this._shadowResolution,t.shadowDistance=this.shadowDistance,t.shadowIntensity=this.shadowIntensity,t.shadowSamples=this.shadowSamples,t.shadowBlockerSamples=this.shadowBlockerSamples,t.penumbraSize=this.penumbraSize,t.penumbraFalloff=this.penumbraFalloff,t}static getLightUnitConversion(t,e=Math.PI/4,s=0){switch(t){case Ze:{const i=Math.cos(e),r=Math.cos(s);return 2*Math.PI*(1-r+(r-i)/2)}case Ke:return 4*Math.PI;case ve:return 1}}_getUniformBiasValues(t){const e=t.shadowCamera._farClip;switch(this._type){case Ke:bi.bias=this.shadowBias,bi.normalBias=this._normalOffsetBias;break;case Ze:this._isVsm?bi.bias=-1e-5*20:bi.bias=this.shadowBias*20,bi.normalBias=this._isVsm?this.vsmBias/(this.attenuationEnd/7):this._normalOffsetBias;break;case ve:this._isVsm?bi.bias=-1e-5*20:bi.bias=this.shadowBias/e*100,bi.normalBias=this._isVsm?this.vsmBias/(e/7):this._normalOffsetBias;break}return bi}getColor(){return this._color}getBoundingSphere(t){if(this._type===Ze){const e=this.attenuationEnd,s=this._outerConeAngle,i=this._outerConeAngleCos,r=this._node;Jl.copy(r.up),s>45?(t.radius=e*this._outerConeAngleSin,Jl.mulScalar(-e*i)):(t.radius=e/(2*i),Jl.mulScalar(-t.radius)),t.center.add2(r.getPosition(),Jl)}else this._type===Ke&&(t.center=this._node.getPosition(),t.radius=this.attenuationEnd)}getBoundingBox(t){if(this._type===Ze){const e=this.attenuationEnd,s=this._outerConeAngle,i=this._node,r=Math.abs(Math.sin(s*Y.DEG_TO_RAD)*e);t.center.set(0,-e*.5,0),t.halfExtents.set(r,e*.5,r),t.setFromTransformedAabb(t,i.getWorldTransform(),!0)}else this._type===Ke&&(t.center.copy(this._node.getPosition()),t.halfExtents.set(this.attenuationEnd,this.attenuationEnd,this.attenuationEnd))}_updateShadowBias(){if(this._type===Ke&&!this.clusteredLighting)this.shadowDepthState.depthBias=0,this.shadowDepthState.depthBiasSlope=0;else{const t=this.shadowBias*-1e3;this.shadowDepthState.depthBias=t,this.shadowDepthState.depthBiasSlope=t}}_updateLinearColor(){let t=this._intensity;this._usePhysicalUnits&&(t=this._luminance/rl.getLightUnitConversion(this._type,this._outerConeAngle*Y.DEG_TO_RAD,this._innerConeAngle*Y.DEG_TO_RAD));const e=this._color,s=this._colorLinear;t>=1?ao.linear(e).mulScalar(t):ao.copy(e).mulScalar(t).linear(),s[0]=ao.r,s[1]=ao.g,s[2]=ao.b,this.updateClusterData(!0)}setColor(){arguments.length===1?this._color.set(arguments[0].r,arguments[0].g,arguments[0].b):arguments.length===3&&this._color.set(arguments[0],arguments[1],arguments[2]),this._updateLinearColor()}layersDirty(){this.layers.forEach(t=>{t.hasLight(this)&&t.markLightsDirty()})}updateKey(){let t=this._type<<29|this._shadowType<<25|this._falloffMode<<23|(this._normalOffsetBias!==0?1:0)<<22|(this._cookie?1:0)<<21|(this._cookieFalloff?1:0)<<20|qd[this._cookieChannel.charAt(0)]<<18|(this._cookieTransform?1:0)<<12|this._shape<<10|(this.numCascades>0?1:0)<<9|(this._cascadeBlend>0?1:0)<<8|(this.affectSpecularity?1:0)<<7|this.mask<<6|(this._castShadows?1:0)<<3;this._cookieChannel.length===3&&(t|=qd[this._cookieChannel.charAt(1)]<<16,t|=qd[this._cookieChannel.charAt(2)]<<14),t!==this.key&&this.layersDirty(),this.key=t}updateClusteredFlags(){const t=!!(this.mask&gs),e=!!(this.mask&di);this.clusteredFlags=(this.type===Ze?1:0)<<30|(this._shape&3)<<28|(this._falloffMode&1)<<27|(xb[this._cookieChannel]??0)<<23|(t?1:0)<<22|(e?1:0)<<21}getClusteredFlags(t,e){return this.clusteredFlags|((t?Math.floor(this.shadowIntensity*255):0)&255)<<0|((e?Math.floor(this.cookieIntensity*255):0)&255)<<8}updateClusterData(t,e){const{clusteredData16:s}=this,i=ko.float2Half;t&&(s[0]=i(Y.clamp(this._colorLinear[0]/Eh,0,65504)),s[1]=i(Y.clamp(this._colorLinear[1]/Eh,0,65504)),s[2]=i(Y.clamp(this._colorLinear[2]/Eh,0,65504))),e&&(s[4]=i(this._innerConeAngleCos),s[5]=i(this._outerConeAngleCos))}}class Uy{constructor(t,e,s){h(this,"_areaLightsEnabled",!1);h(this,"_cells",new A(10,3,10));h(this,"_maxLightsPerCell",255);h(this,"_shadowsEnabled",!0);h(this,"_shadowType",Hs);h(this,"_shadowAtlasResolution",2048);h(this,"_cookiesEnabled",!1);h(this,"_cookieAtlasResolution",2048);h(this,"debugLayer");h(this,"atlasSplit",null);this._supportsAreaLights=t,this._maxTextureSize=e,this._dirtyLightsFnc=s}applySettings(t){this.shadowsEnabled=t.lightingShadowsEnabled??this.shadowsEnabled,this.cookiesEnabled=t.lightingCookiesEnabled??this.cookiesEnabled,this.areaLightsEnabled=t.lightingAreaLightsEnabled??this.areaLightsEnabled,this.shadowAtlasResolution=t.lightingShadowAtlasResolution??this.shadowAtlasResolution,this.cookieAtlasResolution=t.lightingCookieAtlasResolution??this.cookieAtlasResolution,this.maxLightsPerCell=t.lightingMaxLightsPerCell??this.maxLightsPerCell,this.shadowType=t.lightingShadowType??this.shadowType,t.lightingCells&&(this.cells=new A(t.lightingCells))}set cells(t){this._cells.copy(t)}get cells(){return this._cells}set maxLightsPerCell(t){this._maxLightsPerCell=Y.clamp(t,1,255)}get maxLightsPerCell(){return this._maxLightsPerCell}set cookieAtlasResolution(t){this._cookieAtlasResolution=Y.clamp(t,32,this._maxTextureSize)}get cookieAtlasResolution(){return this._cookieAtlasResolution}set shadowAtlasResolution(t){this._shadowAtlasResolution=Y.clamp(t,32,this._maxTextureSize)}get shadowAtlasResolution(){return this._shadowAtlasResolution}set shadowType(t){this._shadowType!==t&&(this._shadowType=t,this._dirtyLightsFnc())}get shadowType(){return this._shadowType}set cookiesEnabled(t){this._cookiesEnabled!==t&&(this._cookiesEnabled=t,this._dirtyLightsFnc())}get cookiesEnabled(){return this._cookiesEnabled}set areaLightsEnabled(t){this._supportsAreaLights&&this._areaLightsEnabled!==t&&(this._areaLightsEnabled=t,this._dirtyLightsFnc())}get areaLightsEnabled(){return this._areaLightsEnabled}set shadowsEnabled(t){this._shadowsEnabled!==t&&(this._shadowsEnabled=t,this._dirtyLightsFnc())}get shadowsEnabled(){return this._shadowsEnabled}}class ya{constructor(t){this.morph=t,t.incRefCount(),this.device=t.device;const e=t._targets.length;this.shader=this._createShader(e),this._weights=[],this._weightMap=new Map;for(let a=0;a<t._targets.length;a++){const n=t._targets[a];n.name&&this._weightMap.set(n.name,a),this.setWeight(a,n.defaultWeight)}this._shaderMorphWeights=new Float32Array(e),this._shaderMorphIndex=new Uint32Array(e);const s=(a,n)=>(this[n]=t._createTexture(a,t._renderTextureFormat),new _t({colorBuffer:this[n],depth:!1}));t.morphPositions&&(this.rtPositions=s("MorphRTPos","texturePositions")),t.morphNormals&&(this.rtNormals=s("MorphRTNrm","textureNormals")),this._textureParams=new Float32Array([t.morphTextureWidth,t.morphTextureHeight]);const i=t.aabb.halfExtents;this._aabbSize=new Float32Array([i.x*4,i.y*4,i.z*4]);const r=t.aabb.getMin();this._aabbMin=new Float32Array([r.x*2,r.y*2,r.z*2]),this._aabbNrmSize=new Float32Array([2,2,2]),this._aabbNrmMin=new Float32Array([-1,-1,-1]),this.aabbSizeId=this.device.scope.resolve("aabbSize"),this.aabbMinId=this.device.scope.resolve("aabbMin"),this.morphTextureId=this.device.scope.resolve("morphTexture"),this.morphFactor=this.device.scope.resolve("morphFactor[0]"),this.morphIndex=this.device.scope.resolve("morphIndex[0]"),this.countId=this.device.scope.resolve("count"),this.zeroTextures=!1}destroy(){var e,s,i,r;this.shader=null;const t=this.morph;t&&(this.morph=null,t.decRefCount(),t.refCount<1&&t.destroy()),(e=this.rtPositions)==null||e.destroy(),this.rtPositions=null,(s=this.texturePositions)==null||s.destroy(),this.texturePositions=null,(i=this.rtNormals)==null||i.destroy(),this.rtNormals=null,(r=this.textureNormals)==null||r.destroy(),this.textureNormals=null}clone(){return new ya(this.morph)}_getWeightIndex(t){if(typeof t=="string"){const e=this._weightMap.get(t);return e===void 0&&y.errorOnce(`Cannot find morph target with name: ${t}.`),e}return t}getWeight(t){const e=this._getWeightIndex(t);return this._weights[e]}setWeight(t,e){const s=this._getWeightIndex(t);y.assert(s>=0&&s<this.morph._targets.length),this._weights[s]=e,this._dirty=!0}_createShader(t){const e=new Map;e.set("{MORPH_TEXTURE_MAX_COUNT}",t),this.morph.intRenderFormat&&e.set("MORPH_INT","");const s=this.morph.intRenderFormat?"uvec4":"vec4";return Wt.createShader(this.device,{uniqueName:`TextureMorphShader_${t}-${this.morph.intRenderFormat?"int":"float"}`,attributes:{vertex_position:Ae},vertexChunk:"morphVS",fragmentChunk:"morphPS",fragmentDefines:e,fragmentOutputTypes:[s]})}_updateTextureRenderTarget(t,e,s){const{morph:i,device:r}=this;this.setAabbUniforms(s),this.morphTextureId.setValue(s?i.targetsTexturePositions:i.targetsTextureNormals),r.setBlendState(ut.NOBLEND),this.countId.setValue(e),this.morphFactor.setValue(this._shaderMorphWeights),this.morphIndex.setValue(this._shaderMorphIndex),br(r,t,this.shader)}_updateTextureMorph(t){const e=this.device;Z.pushGpuMarker(e,"MorphUpdate"),(t>0||!this.zeroTextures)&&(this.rtPositions&&this._updateTextureRenderTarget(this.rtPositions,t,!0),this.rtNormals&&this._updateTextureRenderTarget(this.rtNormals,t,!1),this.zeroTextures=t===0),Z.popGpuMarker(e)}setAabbUniforms(t=!0){this.aabbSizeId.setValue(t?this._aabbSize:this._aabbNrmSize),this.aabbMinId.setValue(t?this._aabbMin:this._aabbNrmMin)}prepareRendering(t){this.setAabbUniforms()}update(){this._dirty=!1;const t=this.morph._targets,e=1e-5,s=this._shaderMorphWeights,i=this._shaderMorphIndex;let r=0;for(let a=0;a<t.length;a++)Math.abs(this.getWeight(a))>e&&(s[r]=this.getWeight(a),i[r]=a,r++);this._updateTextureMorph(r)}}class ir{constructor(){h(this,"graph",null);h(this,"meshInstances",[]);h(this,"skinInstances",[]);h(this,"morphInstances",[]);this.cameras=[],this.lights=[],this._shadersVersion=0,this._immutable=!1}getGraph(){return this.graph}setGraph(t){this.graph=t}getCameras(){return this.cameras}setCameras(t){this.cameras=t}getLights(){return this.lights}setLights(t){this.lights=t}getMaterials(){const t=[];for(let e=0;e<this.meshInstances.length;e++){const s=this.meshInstances[e];t.indexOf(s.material)===-1&&t.push(s.material)}return t}clone(){const t=[],e=[],s=function(c){const d=c.clone();t.push(c),e.push(d);for(let f=0;f<c._children.length;f++)d.addChild(s(c._children[f]));return d},i=s(this.graph),r=[],a=[],n=[];for(let c=0;c<this.skinInstances.length;c++){const d=this.skinInstances[c].skin,f=new El(d),u=[];for(let p=0;p<d.boneNames.length;p++){const m=d.boneNames[p],_=i.findByName(m);u.push(_)}f.bones=u,a.push(f)}for(let c=0;c<this.morphInstances.length;c++){const d=this.morphInstances[c].morph,f=new ya(d);n.push(f)}for(let c=0;c<this.meshInstances.length;c++){const d=this.meshInstances[c],f=t.indexOf(d.node),u=new Ge(d.mesh,d.material,e[f]);if(d.skinInstance){const p=this.skinInstances.indexOf(d.skinInstance);u.skinInstance=a[p]}if(d.morphInstance){const p=this.morphInstances.indexOf(d.morphInstance);u.morphInstance=n[p]}r.push(u)}const o=new ir;return o.graph=i,o.meshInstances=r,o.skinInstances=a,o.morphInstances=n,o.getGraph().syncHierarchy(),o}destroy(){const t=this.meshInstances;for(let e=0;e<t.length;e++)t[e].destroy();this.meshInstances.length=0}generateWireframe(){Ge._prepareRenderStyleForArray(this.meshInstances,Wr)}}class Vp extends sd{constructor(e,s,{preferHighPrecision:i=!1}={}){super();h(this,"_aabb");h(this,"preferHighPrecision");y.assert(s,"Morph constructor takes a GraphicsDevice as a parameter, and it was not provided."),this.device=s;const r=s;this.preferHighPrecision=i,y.assert(e.every(o=>!o.used),"A specified target has already been used to create a Morph, use its clone instead."),this._targets=e.slice();const a=r.textureHalfFloatRenderable?nt:void 0,n=r.textureFloatRenderable?$t:void 0;this._renderTextureFormat=this.preferHighPrecision?n??a:a??n,this._renderTextureFormat=this._renderTextureFormat??Bc,this.intRenderFormat=nn(this._renderTextureFormat),this._textureFormat=this.preferHighPrecision?$t:nt,this._init(),this._updateMorphFlags()}destroy(){var e,s,i;(e=this.vertexBufferIds)==null||e.destroy(),this.vertexBufferIds=null,(s=this.targetsTexturePositions)==null||s.destroy(),this.targetsTexturePositions=null,(i=this.targetsTextureNormals)==null||i.destroy(),this.targetsTextureNormals=null}get aabb(){if(!this._aabb){const e=new A,s=new A;for(let i=0;i<this._targets.length;i++){const r=this._targets[i].aabb;e.min(r.getMin()),s.max(r.getMax())}this._aabb=new Me,this._aabb.setMinMax(e,s)}return this._aabb}get morphPositions(){return this._morphPositions}get morphNormals(){return this._morphNormals}_init(){this._initTextureBased();for(let e=0;e<this._targets.length;e++)this._targets[e]._postInit()}_findSparseSet(e,s,i){let r=1;const a=e[0].length;for(let n=0;n<a;n+=3){let o=!1;for(let c=0;c<e.length;c++){const d=e[c];if(d[n]!==0||d[n+1]!==0||d[n+2]!==0){o=!0;break}}o?(s.push(r),i.push(n/3),r++):s.push(0)}return r}_initTextureBased(){const e=[],s=[],i=this._targets;for(let g=0;g<i.length;g++){const v=i[g];v.options.deltaPositions&&(e.push(v.options.deltaPositions),s.push(!0)),v.options.deltaNormals&&(e.push(v.options.deltaNormals),s.push(!1))}const r=[],a=[],n=this._findSparseSet(e,r,a),o=this.device.maxTextureSize;let c=Math.ceil(Math.sqrt(n));c=Math.min(c,o);const d=Math.ceil(n/c);if(d>o){y.warnOnce(`Morph target data is too large to fit into a texture array. Required texture size: ${c}x${d}, max texture size: ${o}x${o}.`);return}this.morphTextureWidth=c,this.morphTextureHeight=d;let f=!1;const u=ko.float2Half;this._textureFormat===nt&&(f=!0);const p=[],m=[],_=c*d*4;for(let g=0;g<e.length;g++){const v=e[g],w=this._textureFormat===nt?new Uint16Array(_):new Float32Array(_);if((s[g]?p:m).push(w),f)for(let x=0;x<a.length;x++){const b=a[x]*3,C=x*4+4;w[C]=u(v[b]),w[C+1]=u(v[b+1]),w[C+2]=u(v[b+2])}else for(let x=0;x<a.length;x++){const b=a[x]*3,C=x*4+4;w[C]=v[b],w[C+1]=v[b+1],w[C+2]=v[b+2]}}p.length>0&&(this.targetsTexturePositions=this._createTexture("MorphPositionsTexture",this._textureFormat,i.length,[p]),this.targetsTexturePositions.upload()),m.length>0&&(this.targetsTextureNormals=this._createTexture("MorphNormalsTexture",this._textureFormat,i.length,[m]),this.targetsTextureNormals.upload());const S=[{semantic:An,components:1,type:Wo,asInt:!0}];return this.vertexBufferIds=new Is(this.device,new Nt(this.device,S,r.length),r.length,{data:new Uint32Array(r)}),!0}get targets(){return this._targets}_updateMorphFlags(){this._morphPositions=!1,this._morphNormals=!1;for(let e=0;e<this._targets.length;e++){const s=this._targets[e];s.morphPositions&&(this._morphPositions=!0),s.morphNormals&&(this._morphNormals=!0)}}_createTexture(e,s,i,r){return new ge(this.device,{levels:r,arrayLength:i,width:this.morphTextureWidth,height:this.morphTextureHeight,format:s,cubemap:!1,mipmaps:!1,minFilter:Te,magFilter:Te,addressU:me,addressV:me,name:e})}}class ld{constructor(t){h(this,"used",!1);y.assert(arguments.length===1),this.options=t,this._name=t.name,this._defaultWeight=t.defaultWeight||0,this._aabb=t.aabb,this.deltaPositions=t.deltaPositions,this.morphPositions=!!t.deltaPositions,this.morphNormals=!!t.deltaNormals}get name(){return this._name}get defaultWeight(){return this._defaultWeight}get aabb(){return this._aabb||(this._aabb=new Me,this.deltaPositions&&this._aabb.compute(this.deltaPositions)),this._aabb}clone(){return y.assert(this.options,"MorphTarget cannot be cloned, was it created with a preserveData option?"),new ld(this.options)}_postInit(){this.options.preserveData||(this.options=null),this.used=!0}}let Ai,v_=1;const de=4,jd=new ie,Yd=new ie,ti=new A,tt=new A,Os=new A,Oa=new A,as=new A,mt=new A,Fa=new A,Na=new A,no=new A,x_=new A,Bt=new A,eh=new A,Nr=new A;function hn(l){return l-Math.floor(l)}function Eb(l){return Math.max(Math.min(l,1),0)}function Kd(l,t){return l-t*Math.floor(l/t)}function bb(l){let t=hn(l),e=hn(255*l),s=hn(65025*l),i=hn(160581375*l);return t-=e/255,e-=s/255,s-=i/255,i-=i/255,[t,e,s,i]}function th(l){let t=hn(l),e=hn(255*l);return t-=e/255,e-=e/255,[t,e]}class Ab{constructor(t){this._emitter=t}calcSpawnPosition(t,e,s,i,r){const a=this._emitter,n=Math.random(),o=Math.random(),c=Math.random(),d=Math.random();if(a.useCpu&&(t[r*de+0+a.numParticlesPot*2*de]=n,t[r*de+1+a.numParticlesPot*2*de]=o,t[r*de+2+a.numParticlesPot*2*de]=c),tt.x=n-.5,tt.y=o-.5,tt.z=c-.5,a.emitterShape===ai){const p=Math.max(Math.abs(tt.x),Math.max(Math.abs(tt.y),Math.abs(tt.z))),m=p+(.5-p)*s[0],_=p+(.5-p)*s[1],S=p+(.5-p)*s[2];tt.x=m*(p===Math.abs(tt.x)?Math.sign(tt.x):2*tt.x),tt.y=_*(p===Math.abs(tt.y)?Math.sign(tt.y):2*tt.y),tt.z=S*(p===Math.abs(tt.z)?Math.sign(tt.z):2*tt.z),a.localSpace?ti.copy(e.transformPoint(tt)):ti.copy(i).add(e.transformPoint(tt))}else{tt.normalize();const p=a.emitterRadius===0?0:a.emitterRadiusInner/a.emitterRadius,m=d*(1-p)+p;a.localSpace?ti.copy(tt.mulScalar(m*a.emitterRadius)):ti.copy(i).add(tt.mulScalar(m*a.emitterRadius))}let u=-Y.lerp(a.rate,a.rate2,n)*r;if(a.pack8){const p=(ti.x-a.worldBounds.center.x)/a.worldBoundsSize.x+.5,m=(ti.y-a.worldBounds.center.y)/a.worldBoundsSize.y+.5,_=(ti.z-a.worldBounds.center.z)/a.worldBoundsSize.z+.5;let S=Y.lerp(a.startAngle*Y.DEG_TO_RAD,a.startAngle2*Y.DEG_TO_RAD,n);S=S%(Math.PI*2)/(Math.PI*2);const g=th(p);t[r*de]=g[0],t[r*de+1]=g[1];const v=th(m);t[r*de+2]=v[0],t[r*de+3]=v[1];const w=th(_);t[r*de+0+a.numParticlesPot*de]=w[0],t[r*de+1+a.numParticlesPot*de]=w[1];const x=th(S);t[r*de+2+a.numParticlesPot*de]=x[0],t[r*de+3+a.numParticlesPot*de]=x[1];const b=1;t[r*de+3+a.numParticlesPot*de*2]=b;const C=Math.max(a.lifetime,(a.numParticles-1)*Math.max(a.rate,a.rate2)),D=a.lifetime+1;u=(u+C)/(C+D);const T=bb(u);t[r*de+0+a.numParticlesPot*de*3]=T[0],t[r*de+1+a.numParticlesPot*de*3]=T[1],t[r*de+2+a.numParticlesPot*de*3]=T[2],t[r*de+3+a.numParticlesPot*de*3]=T[3]}else t[r*de]=ti.x,t[r*de+1]=ti.y,t[r*de+2]=ti.z,t[r*de+3]=Y.lerp(a.startAngle*Y.DEG_TO_RAD,a.startAngle2*Y.DEG_TO_RAD,n),t[r*de+3+a.numParticlesPot*de]=u}update(t,e,s,i,r,a,n,o){let c,d,f;const u=this._emitter;if(u.meshInstance.node){const I=u.meshInstance.node.worldTransform;for(let L=0;L<12;L++)jd.data[L]=I.data[L];Yd.copy(jd),Yd.invert(),Ai=u.meshInstance.node.localScale,v_=Math.max(Math.max(Ai.x,Ai.y),Ai.z)}a=u.meshInstance.node===null||u.localSpace?A.ZERO:u.meshInstance.node.getPosition();const p=u.camera?u.camera._node.getPosition():A.ZERO,m=u.useMesh?17:15;let _,S,g,v,w,x,b,C,D;const T=u.precision-1;for(let I=0;I<u.numParticles;I++){const L=Math.floor(u.vbCPU[I*u.numParticleVerts*(u.useMesh?6:4)+3]),E=s[L*de+0+u.numParticlesPot*2*de];Os.x=E,Os.y=s[L*de+1+u.numParticlesPot*2*de],Os.z=s[L*de+2+u.numParticlesPot*2*de];const F=u.rate+(u.rate2-u.rate)*E,k=u.lifetime;let H=s[L*de+3+u.numParticlesPot*de]+n;const G=Eb(H/k);let W=0,R=0;const B=0;(H-n<=0||H>=k)&&this.calcSpawnPosition(s,i,r,a,L);let O=H>0&&H<k;O&&(f=G*T,_=Math.floor(f),S=Math.ceil(f),f%=1,c=u.qRotSpeed[_],d=u.qRotSpeed[S],g=c+(d-c)*f,c=u.qRotSpeed2[_],d=u.qRotSpeed2[S],v=c+(d-c)*f,c=u.qScale[_],d=u.qScale[S],W=c+(d-c)*f,c=u.qScale2[_],d=u.qScale2[S],w=c+(d-c)*f,c=u.qAlpha[_],d=u.qAlpha[S],x=c+(d-c)*f,c=u.qAlpha2[_],d=u.qAlpha2[S],b=c+(d-c)*f,c=u.qRadialSpeed[_],d=u.qRadialSpeed[S],C=c+(d-c)*f,c=u.qRadialSpeed2[_],d=u.qRadialSpeed2[S],D=c+(d-c)*f,C+=(D-C)*(E*100%1),Oa.x=s[L*de],Oa.y=s[L*de+1],Oa.z=s[L*de+2],u.localSpace?no.copy(Oa):no.copy(Oa).sub(a),no.normalize().mulScalar(C),_*=3,S*=3,c=u.qLocalVelocity[_],d=u.qLocalVelocity[S],mt.x=c+(d-c)*f,c=u.qLocalVelocity[_+1],d=u.qLocalVelocity[S+1],mt.y=c+(d-c)*f,c=u.qLocalVelocity[_+2],d=u.qLocalVelocity[S+2],mt.z=c+(d-c)*f,c=u.qLocalVelocity2[_],d=u.qLocalVelocity2[S],Na.x=c+(d-c)*f,c=u.qLocalVelocity2[_+1],d=u.qLocalVelocity2[S+1],Na.y=c+(d-c)*f,c=u.qLocalVelocity2[_+2],d=u.qLocalVelocity2[S+2],Na.z=c+(d-c)*f,c=u.qVelocity[_],d=u.qVelocity[S],as.x=c+(d-c)*f,c=u.qVelocity[_+1],d=u.qVelocity[S+1],as.y=c+(d-c)*f,c=u.qVelocity[_+2],d=u.qVelocity[S+2],as.z=c+(d-c)*f,c=u.qVelocity2[_],d=u.qVelocity2[S],Fa.x=c+(d-c)*f,c=u.qVelocity2[_+1],d=u.qVelocity2[S+1],Fa.y=c+(d-c)*f,c=u.qVelocity2[_+2],d=u.qVelocity2[S+2],Fa.z=c+(d-c)*f,mt.x+=(Na.x-mt.x)*Os.x,mt.y+=(Na.y-mt.y)*Os.y,mt.z+=(Na.z-mt.z)*Os.z,u.initialVelocity>0&&(u.emitterShape===QT?(tt.copy(Os).mulScalar(2).sub(A.ONE).normalize(),mt.add(tt.mulScalar(u.initialVelocity))):mt.add(A.FORWARD.mulScalar(u.initialVelocity))),as.x+=(Fa.x-as.x)*Os.x,as.y+=(Fa.y-as.y)*Os.y,as.z+=(Fa.z-as.z)*Os.z,g+=(v-g)*Os.y,W=(W+(w-W)*(E*1e4%1))*v_,R=(b-x)*(E*1e3%1),u.meshInstance.node&&(u.localSpace?(mt.x/=Ai.x,mt.y/=Ai.y,mt.z/=Ai.z):jd.transformPoint(mt,mt)),u.localSpace?(Yd.transformPoint(as,as),mt.add(as).add(no)):(mt.add(as.mul(Ai)),mt.add(no.mul(Ai))),eh.copy(mt),x_.copy(Oa).add(mt.mulScalar(n)),Bt.copy(x_),s[L*de]=Bt.x,s[L*de+1]=Bt.y,s[L*de+2]=Bt.z,s[L*de+3]+=g*n,u.wrap&&u.wrapBounds&&(u.localSpace||Bt.sub(a),Bt.x=Kd(Bt.x,u.wrapBounds.x)-u.wrapBounds.x*.5,Bt.y=Kd(Bt.y,u.wrapBounds.y)-u.wrapBounds.y*.5,Bt.z=Kd(Bt.z,u.wrapBounds.z)-u.wrapBounds.z*.5,u.localSpace||Bt.add(a)),u.sort>0&&(u.sort===1?(Nr.copy(Bt).sub(p),u.particleDistance[L]=-(Nr.x*Nr.x+Nr.y*Nr.y+Nr.z*Nr.z)):u.sort===2?u.particleDistance[L]=H:u.sort===3&&(u.particleDistance[L]=-H))),o?H<0&&(s[L*de+3+u.numParticlesPot*2*de]=-1):(H>=k&&(H-=Math.max(k,(u.numParticles-1)*F),s[L*de+3+u.numParticlesPot*2*de]=u.loop?1:-1),H<0&&u.loop&&(s[L*de+3+u.numParticlesPot*2*de]=1)),s[L*de+3+u.numParticlesPot*2*de]<0&&(O=!1),s[L*de+3+u.numParticlesPot*de]=H;for(let M=0;M<u.numParticleVerts;M++){const P=(I*u.numParticleVerts+M)*(u.useMesh?6:4);let N=u.vbCPU[P],U=u.vbCPU[P+1],z=u.vbCPU[P+2];O||(N=U=z=0);const $=I*u.numParticleVerts*m+M*m;t[$]=Bt.x,t[$+1]=Bt.y,t[$+2]=Bt.z,t[$+3]=G,t[$+4]=u.alignToMotion?B:s[L*de+3],t[$+5]=W,t[$+6]=R,t[$+7]=eh.x,t[$+8]=N,t[$+9]=U,t[$+10]=z,t[$+11]=eh.y,t[$+12]=L,t[$+13]=eh.z,t[$+14]=u.vbCPU[P+3],u.useMesh&&(t[$+15]=u.vbCPU[P+4],t[$+16]=u.vbCPU[P+5])}}if(u.sort>Rf&&u.camera){const I=u.useMesh?6:4,L=u.particleDistance;for(let E=0;E<u.numParticles;E++)e[E][0]=E,e[E][1]=L[Math.floor(u.vbCPU[E*u.numParticleVerts*I+3])];u.vbOld.set(u.vbCPU),e.sort((E,F)=>E[1]-F[1]);for(let E=0;E<u.numParticles;E++){const F=e[E][0]*u.numParticleVerts*I,k=E*u.numParticleVerts*I;for(let H=0;H<u.numParticleVerts*I;H++)u.vbCPU[k+H]=u.vbOld[F+H]}}}}const T_=new _i,w_=new _i,E_=new _i;class Cb{constructor(t,e){this._emitter=t,this.frameRandomUniform=new Float32Array(3),this.emitterPosUniform=new Float32Array(3),this.emitterScaleUniform=new Float32Array([1,1,1]),this.worldBoundsMulUniform=new Float32Array(3),this.worldBoundsAddUniform=new Float32Array(3),this.inBoundsSizeUniform=new Float32Array(3),this.inBoundsCenterUniform=new Float32Array(3),this.constantParticleTexIN=e.scope.resolve("particleTexIN"),this.constantParticleTexOUT=e.scope.resolve("particleTexOUT"),this.constantEmitterPos=e.scope.resolve("emitterPos"),this.constantEmitterScale=e.scope.resolve("emitterScale"),this.constantSpawnBounds=e.scope.resolve("spawnBounds"),this.constantSpawnPosInnerRatio=e.scope.resolve("spawnPosInnerRatio"),this.constantSpawnBoundsSphere=e.scope.resolve("spawnBoundsSphere"),this.constantSpawnBoundsSphereInnerRatio=e.scope.resolve("spawnBoundsSphereInnerRatio"),this.constantInitialVelocity=e.scope.resolve("initialVelocity"),this.constantFrameRandom=e.scope.resolve("frameRandom"),this.constantDelta=e.scope.resolve("delta"),this.constantRate=e.scope.resolve("rate"),this.constantRateDiv=e.scope.resolve("rateDiv"),this.constantLifetime=e.scope.resolve("lifetime"),this.constantGraphSampleSize=e.scope.resolve("graphSampleSize"),this.constantGraphNumSamples=e.scope.resolve("graphNumSamples"),this.constantInternalTex0=e.scope.resolve("internalTex0"),this.constantInternalTex1=e.scope.resolve("internalTex1"),this.constantInternalTex2=e.scope.resolve("internalTex2"),this.constantInternalTex3=e.scope.resolve("internalTex3"),this.constantEmitterMatrix=e.scope.resolve("emitterMatrix"),this.constantEmitterMatrixInv=e.scope.resolve("emitterMatrixInv"),this.constantNumParticles=e.scope.resolve("numParticles"),this.constantNumParticlesPot=e.scope.resolve("numParticlesPot"),this.constantLocalVelocityDivMult=e.scope.resolve("localVelocityDivMult"),this.constantVelocityDivMult=e.scope.resolve("velocityDivMult"),this.constantRotSpeedDivMult=e.scope.resolve("rotSpeedDivMult"),this.constantSeed=e.scope.resolve("seed"),this.constantStartAngle=e.scope.resolve("startAngle"),this.constantStartAngle2=e.scope.resolve("startAngle2"),this.constantOutBoundsMul=e.scope.resolve("outBoundsMul"),this.constantOutBoundsAdd=e.scope.resolve("outBoundsAdd"),this.constantInBoundsSize=e.scope.resolve("inBoundsSize"),this.constantInBoundsCenter=e.scope.resolve("inBoundsCenter"),this.constantMaxVel=e.scope.resolve("maxVel"),this.constantFaceTangent=e.scope.resolve("faceTangent"),this.constantFaceBinorm=e.scope.resolve("faceBinorm")}_setInputBounds(){this.inBoundsSizeUniform[0]=this._emitter.prevWorldBoundsSize.x,this.inBoundsSizeUniform[1]=this._emitter.prevWorldBoundsSize.y,this.inBoundsSizeUniform[2]=this._emitter.prevWorldBoundsSize.z,this.constantInBoundsSize.setValue(this.inBoundsSizeUniform),this.inBoundsCenterUniform[0]=this._emitter.prevWorldBoundsCenter.x,this.inBoundsCenterUniform[1]=this._emitter.prevWorldBoundsCenter.y,this.inBoundsCenterUniform[2]=this._emitter.prevWorldBoundsCenter.z,this.constantInBoundsCenter.setValue(this.inBoundsCenterUniform)}randomize(){this.frameRandomUniform[0]=Math.random(),this.frameRandomUniform[1]=Math.random(),this.frameRandomUniform[2]=Math.random()}update(t,e,s,i,r){Z.pushGpuMarker(t,"ParticleGPU");const a=this._emitter;t.setBlendState(ut.NOBLEND),t.setDepthState(qt.NODEPTH),t.setCullMode(wt),this.randomize(),this.constantGraphSampleSize.setValue(1/a.precision),this.constantGraphNumSamples.setValue(a.precision),this.constantNumParticles.setValue(a.numParticles),this.constantNumParticlesPot.setValue(a.numParticlesPot),this.constantInternalTex0.setValue(a.internalTex0),this.constantInternalTex1.setValue(a.internalTex1),this.constantInternalTex2.setValue(a.internalTex2),this.constantInternalTex3.setValue(a.internalTex3);const n=a.meshInstance.node,o=n===null?A.ONE:n.localScale;if(a.pack8){this.worldBoundsMulUniform[0]=a.worldBoundsMul.x,this.worldBoundsMulUniform[1]=a.worldBoundsMul.y,this.worldBoundsMulUniform[2]=a.worldBoundsMul.z,this.constantOutBoundsMul.setValue(this.worldBoundsMulUniform),this.worldBoundsAddUniform[0]=a.worldBoundsAdd.x,this.worldBoundsAddUniform[1]=a.worldBoundsAdd.y,this.worldBoundsAddUniform[2]=a.worldBoundsAdd.z,this.constantOutBoundsAdd.setValue(this.worldBoundsAddUniform),this._setInputBounds();let p=a.maxVel*Math.max(Math.max(o.x,o.y),o.z);p=Math.max(p,1),this.constantMaxVel.setValue(p)}const c=n===null||a.localSpace?A.ZERO:n.getPosition(),d=n===null?ie.IDENTITY:n.getWorldTransform();a.emitterShape===ai?(T_.setFromMat4(e),this.constantSpawnBounds.setValue(T_.data),this.constantSpawnPosInnerRatio.setValue(s)):(this.constantSpawnBoundsSphere.setValue(a.emitterRadius),this.constantSpawnBoundsSphereInnerRatio.setValue(a.emitterRadius===0?0:a.emitterRadiusInner/a.emitterRadius)),this.constantInitialVelocity.setValue(a.initialVelocity),w_.setFromMat4(d),E_.invertMat4(d),this.emitterPosUniform[0]=c.x,this.emitterPosUniform[1]=c.y,this.emitterPosUniform[2]=c.z,this.constantEmitterPos.setValue(this.emitterPosUniform),this.constantFrameRandom.setValue(this.frameRandomUniform),this.constantDelta.setValue(i),this.constantRate.setValue(a.rate),this.constantRateDiv.setValue(a.rate2-a.rate),this.constantStartAngle.setValue(a.startAngle*Y.DEG_TO_RAD),this.constantStartAngle2.setValue(a.startAngle2*Y.DEG_TO_RAD),this.constantSeed.setValue(a.seed),this.constantLifetime.setValue(a.lifetime),this.emitterScaleUniform[0]=o.x,this.emitterScaleUniform[1]=o.y,this.emitterScaleUniform[2]=o.z,this.constantEmitterScale.setValue(this.emitterScaleUniform),this.constantEmitterMatrix.setValue(w_.data),this.constantEmitterMatrixInv.setValue(E_.data),this.constantLocalVelocityDivMult.setValue(a.localVelocityUMax),this.constantVelocityDivMult.setValue(a.velocityUMax),this.constantRotSpeedDivMult.setValue(a.rotSpeedUMax[0]);let f=a.swapTex?a.particleTexOUT:a.particleTexIN;f=a.beenReset?a.particleTexStart:f;const u=a.swapTex?a.particleTexIN:a.particleTexOUT;this.constantParticleTexIN.setValue(f),br(t,a.swapTex?a.rtParticleTexIN:a.rtParticleTexOUT,r?a.shaderParticleUpdateOnStop:a.loop?a.shaderParticleUpdateRespawn:a.shaderParticleUpdateNoRespawn),a.material.setParameter("particleTexOUT",f),a.material.setParameter("particleTexIN",u),a.beenReset=!1,a.swapTex=!a.swapTex,a.prevWorldBoundsSize.copy(a.worldBoundsSize),a.prevWorldBoundsCenter.copy(a.worldBounds.center),a.pack8&&this._setInputBounds(),Z.popGpuMarker(t)}}const b_=["NONE","VERTEX","MAP"];class Pb extends ga{generateKey(t){let s=`particle_${ga.definesHash(t.defines)}_`;for(const i in t)t.hasOwnProperty(i)&&(s+=t[i]);return s}createVertexDefines(t,e){const s=new Map(t.defines);return t.mesh&&s.set("USE_MESH",""),t.meshUv&&s.set("USE_MESH_UV",""),t.localSpace&&s.set("LOCAL_SPACE",""),t.screenSpace&&s.set("SCREEN_SPACE",""),t.animTex&&s.set("ANIMTEX",""),t.soft>0&&s.set("SOFT",""),t.stretch>0&&s.set("STRETCH",""),t.customFace&&s.set("CUSTOM_FACE",""),t.pack8&&s.set("PACK8",""),t.localSpace&&s.set("LOCAL_SPACE",""),t.animTexLoop&&s.set("ANIMTEX_LOOP",""),t.wrap&&s.set("WRAP",""),t.alignToMotion&&s.set("ALIGN_TO_MOTION",""),s.set("NORMAL",b_[t.normal]),e.particle_vertexData=Ae,t.mesh&&t.meshUv&&(e.particle_uv=ts),t.useCpu&&(e.particle_vertexData2=Xh,e.particle_vertexData3=Qu,e.particle_vertexData4=Ju,e.particle_vertexData5=ep),s}createFragmentDefines(t){const e=new Map(t.defines);return t.soft>0&&e.set("SOFT",""),t.halflambert&&e.set("HALF_LAMBERT",""),e.set("NORMAL",b_[t.normal]),e.set("BLEND",ry[t.blend]),e}createShaderDefinition(t,e){const s=t.isWebGPU?it:Oe,i=be.get(t,s),r={},a=this.createVertexDefines(e,r),n=this.createFragmentDefines(e),o=`PARTICLE_${e.useCpu?"CPU":"GPU"}
`;a.set(o,""),n.set(o,"");const c=new Map(i);return Zt.createDefinition(t,{name:"ParticleShader",shaderLanguage:s,attributes:r,vertexCode:i.get("particle_shaderVS"),fragmentCode:i.get("particle_shaderPS"),fragmentDefines:n,fragmentIncludes:c,vertexIncludes:c,vertexDefines:a})}}const Db=new Pb;class Ib extends sr{constructor(e){super();h(this,"emitter",null);this.emitter=e,y.assert(e)}getShaderVariant(e){const{device:s,scene:i,cameraShaderParams:r,objDefs:a}=e,{emitter:n}=this,o={defines:Wt.getCoreDefines(this,e),pass:Ea,useCpu:this.emitter.useCpu,normal:n.lighting?n.normalMap!==null?2:1:0,halflambert:this.emitter.halfLambert,stretch:this.emitter.stretch,alignToMotion:this.emitter.alignToMotion,soft:this.emitter.depthSoftening,mesh:this.emitter.useMesh,meshUv:a&Lp,gamma:(r==null?void 0:r.shaderOutputGamma)??Tl,toneMap:(r==null?void 0:r.toneMapping)??Pp,fog:i&&!this.emitter.noFog?i.fog.type:"none",wrap:this.emitter.wrap&&this.emitter.wrapBounds,localSpace:this.emitter.localSpace,screenSpace:n.inTools?!1:this.emitter.screenSpace,blend:this.emitter.blendType,animTex:this.emitter._isAnimated(),animTexLoop:this.emitter.animLoop,pack8:this.emitter.pack8,customFace:this.emitter.orientation!==Qh},c=new ad(e.viewUniformFormat,e.viewBindGroupFormat,e.vertexFormat),d=kn(s);return d.register("particle",Db),d.getProgram("particle",o,c,this.userId)}}const A_=[[-1,-1],[1,-1],[1,1],[-1,1]];function xs(l,t,e,s,i=$t,r,a){let n=Te;a&&(i===Fe||i===ms)&&(n=yt);const o=new ge(l,{width:t,height:e,format:i,cubemap:!1,mipmaps:!1,minFilter:n,magFilter:n,addressU:me,addressV:me,name:"ParticleSystemTexture"}),c=o.lock();if(i===Fe||i===ms){const d=new Uint8Array(s.length);for(let f=0;f<s.length;f++)d[f]=s[f]*r*255;s=d}return c.set(s),o.unlock(),o}function C_(l){return Math.max(Math.min(l,1),0)}const P_=new $s([0,0,1,0]),D_=new $s([0,1,1,1]),I_=new ra([0,0,1,0],[0,0,1,0],[0,0,1,0]),Mb=new ra([0,1,1,1],[0,1,1,1],[0,1,1,1]);let Ci=2;const sh=4,Pi=new Float32Array(3),kr=new ie,M_=new A,ih=new A,rh=new A;let zf,Ih;function fe(l,t){Ih[l]!==void 0&&Ih[l]!==null?zf[l]=Ih[l]:zf[l]=t}function By(l,t,e){return(l*255<<16|t*255<<8|e*255)/(1<<24)}function L_(l,t){const e=l.length/3,s=new Array(e*4);for(let i=0;i<e;i++)s[i*4]=l[i*3],s[i*4+1]=l[i*3+1],s[i*4+2]=l[i*3+2],s[i*4+3]=By(t[i*3],t[i*3+1],t[i*3+2]);return s}function Lb(l,t){const e=new Array(t.length*4);for(let s=0;s<t.length;s++)e[s*4]=l[s*3],e[s*4+1]=l[s*3+1],e[s*4+2]=l[s*3+2],e[s*4+3]=t[s];return e}function Rb(l,t,e,s,i){const r=new Array(l.length*4);for(let a=0;a<l.length;a++)r[a*4]=l[a],r[a*4+1]=t[a],r[a*4+2]=0,r[a*4+3]=By(e[a],s[a],i[a]);return r}function Ob(l,t){const e=new Array(l.length*4);for(let s=0;s<l.length;s++)e[s*4]=l[s],e[s*4+1]=t[s],e[s*4+2]=0,e[s*4+3]=0;return e}function Fb(l){const t=Math.max(l.rate,l.rate2)*l.numParticles+l.lifetime;return Date.now()+t*1e3}function Nb(l,t){const e=new Float32Array(l.length);for(let s=0;s<l.length;s++)e[s]=l[s]-t[s];return e}function $r(l,t){const e=t.length,s=l.length/e;for(let i=0;i<s;i++)for(let r=0;r<e;r++){const a=Math.abs(l[i*e+r]);t[r]=Math.max(t[r],a)}}function kb(l,t){const e=t.length,s=l.length/e;for(let i=0;i<s;i++)for(let r=0;r<e;r++)l[i*e+r]/=t[r]===0?1:t[r],l[i*e+r]*=.5,l[i*e+r]+=.5}function Ur(l,t,e){const s=Nb(t,l);return $r(s,e),kb(s,e),s}const Ub=new jt;class Bb{constructor(t,e){h(this,"material",null);h(this,"internalTex0",null);h(this,"internalTex1",null);h(this,"internalTex2",null);h(this,"colorParam",null);this.graphicsDevice=t;const s=t,i=32;this.precision=i,this._addTimeTime=0,zf=this,Ih=e,fe("numParticles",1),this.numParticles>t.maxTextureSize&&(y.warn(`WARNING: can't create more than ${t.maxTextureSize} particles on this device.`),this.numParticles=t.maxTextureSize),fe("rate",1),fe("rate2",this.rate),fe("lifetime",50),fe("emitterExtents",new A(0,0,0)),fe("emitterExtentsInner",new A(0,0,0)),fe("emitterRadius",0),fe("emitterRadiusInner",0),fe("emitterShape",ai),fe("initialVelocity",1),fe("wrap",!1),fe("localSpace",!1),fe("screenSpace",!1),fe("wrapBounds",null),fe("colorMap",this.defaultParamTexture),fe("normalMap",null),fe("loop",!0),fe("preWarm",!1),fe("sort",Rf),fe("mode",uy),fe("scene",null),fe("lighting",!1),fe("halfLambert",!1),fe("intensity",1),fe("stretch",0),fe("alignToMotion",!1),fe("depthSoftening",0),fe("mesh",null),fe("particleNormal",new A(0,1,0)),fe("orientation",Qh),fe("depthWrite",!1),fe("noFog",!1),fe("blendType",Ks),fe("node",null),fe("startAngle",0),fe("startAngle2",this.startAngle),fe("animTilesX",1),fe("animTilesY",1),fe("animStartFrame",0),fe("animNumFrames",1),fe("animNumAnimations",1),fe("animIndex",0),fe("randomizeAnimIndex",!1),fe("animSpeed",1),fe("animLoop",!0),this._gpuUpdater=new Cb(this,s),this._cpuUpdater=new Ab(this),this.emitterPosUniform=new Float32Array(3),this.wrapBoundsUniform=new Float32Array(3),this.emitterScaleUniform=new Float32Array([1,1,1]),fe("colorGraph",Mb),fe("colorGraph2",this.colorGraph),fe("scaleGraph",D_),fe("scaleGraph2",this.scaleGraph),fe("alphaGraph",D_),fe("alphaGraph2",this.alphaGraph),fe("localVelocityGraph",I_),fe("localVelocityGraph2",this.localVelocityGraph),fe("velocityGraph",I_),fe("velocityGraph2",this.velocityGraph),fe("rotationSpeedGraph",P_),fe("rotationSpeedGraph2",this.rotationSpeedGraph),fe("radialSpeedGraph",P_),fe("radialSpeedGraph2",this.radialSpeedGraph),this.animTilesParams=new Float32Array(2),this.animParams=new Float32Array(4),this.animIndexParams=new Float32Array(2),this.vbToSort=null,this.vbOld=null,this.particleDistance=null,this.camera=null,this.swapTex=!1,this.useMesh=!0,this.useCpu=!t.supportsGpuParticles,this.pack8=!0,this.localBounds=new Me,this.worldBoundsNoTrail=new Me,this.worldBoundsTrail=[new Me,new Me],this.worldBounds=new Me,this.worldBoundsSize=new A,this.prevWorldBoundsSize=new A,this.prevWorldBoundsCenter=new A,this.prevEmitterExtents=this.emitterExtents,this.prevEmitterRadius=this.emitterRadius,this.worldBoundsMul=new A,this.worldBoundsAdd=new A,this.timeToSwitchBounds=0,this.shaderParticleUpdateRespawn=null,this.shaderParticleUpdateNoRespawn=null,this.shaderParticleUpdateOnStop=null,this.numParticleVerts=0,this.numParticleIndices=0,this.material=null,this.meshInstance=null,this.drawOrder=0,this.seed=Math.random(),this.fixedTimeStep=1/60,this.maxSubSteps=10,this.simTime=0,this.simTimeTotal=0,this.beenReset=!1,this._layer=null,this.rebuild()}get defaultParamTexture(){return y.assert(this.graphicsDevice),Ub.get(this.graphicsDevice,()=>{const s=new Float32Array(1024);for(let r=0;r<16;r++)for(let a=0;a<16;a++){const n=a+1-8.5,o=r+1-8.5,c=C_(1-C_(Math.sqrt(n*n+o*o)/16)-.5),d=r*16+a;s[d*4]=1,s[d*4+1]=1,s[d*4+2]=1,s[d*4+3]=c}const i=xs(this.graphicsDevice,16,16,s,ms,1,!0);return i.minFilter=yt,i.magFilter=yt,i})}onChangeCamera(){this.resetMaterial()}calculateBoundsMad(){this.worldBoundsMul.x=1/this.worldBoundsSize.x,this.worldBoundsMul.y=1/this.worldBoundsSize.y,this.worldBoundsMul.z=1/this.worldBoundsSize.z,this.worldBoundsAdd.copy(this.worldBounds.center).mul(this.worldBoundsMul).mulScalar(-1),this.worldBoundsAdd.x+=.5,this.worldBoundsAdd.y+=.5,this.worldBoundsAdd.z+=.5}calculateWorldBounds(){if(!this.node)return;if(this.prevWorldBoundsSize.copy(this.worldBoundsSize),this.prevWorldBoundsCenter.copy(this.worldBounds.center),!this.useCpu){let s=!1;this.emitterShape===ai?s=!this.emitterExtents.equals(this.prevEmitterExtents):s=this.emitterRadius!==this.prevEmitterRadius,s&&this.calculateLocalBounds()}const t=this.node.getWorldTransform();this.localSpace?this.worldBoundsNoTrail.copy(this.localBounds):this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds,t),this.worldBoundsTrail[0].add(this.worldBoundsNoTrail),this.worldBoundsTrail[1].add(this.worldBoundsNoTrail);const e=this.simTimeTotal;e>=this.timeToSwitchBounds&&(this.worldBoundsTrail[0].copy(this.worldBoundsTrail[1]),this.worldBoundsTrail[1].copy(this.worldBoundsNoTrail),this.timeToSwitchBounds=e+this.lifetime),this.worldBounds.copy(this.worldBoundsTrail[0]),this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),this.localSpace?(this.meshInstance.aabb.setFromTransformedAabb(this.worldBounds,t),this.meshInstance.mesh.aabb.setFromTransformedAabb(this.worldBounds,t)):(this.meshInstance.aabb.copy(this.worldBounds),this.meshInstance.mesh.aabb.copy(this.worldBounds)),this.meshInstance._aabbVer=1-this.meshInstance._aabbVer,this.pack8&&this.calculateBoundsMad()}resetWorldBounds(){this.node&&(this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds,this.localSpace?ie.IDENTITY:this.node.getWorldTransform()),this.worldBoundsTrail[0].copy(this.worldBoundsNoTrail),this.worldBoundsTrail[1].copy(this.worldBoundsNoTrail),this.worldBounds.copy(this.worldBoundsTrail[0]),this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),this.prevWorldBoundsSize.copy(this.worldBoundsSize),this.prevWorldBoundsCenter.copy(this.worldBounds.center),this.simTimeTotal=0,this.timeToSwitchBounds=0)}calculateLocalBounds(){let t=Number.MAX_VALUE,e=Number.MAX_VALUE,s=Number.MAX_VALUE,i=-Number.MAX_VALUE,r=-Number.MAX_VALUE,a=-Number.MAX_VALUE,n=0,o=0;const c=this.lifetime/this.precision,d=[this.qVelocity,this.qVelocity2],f=[this.qLocalVelocity,this.qLocalVelocity2],u=[0,0],p=[0,0],m=[0,0],_=[0,0],S=[0,0];let g,v,w;for(let b=0;b<this.precision+1;b++){const C=Math.min(b,this.precision-1);for(let D=0;D<2;D++)g=f[D][C*3+0]*c+u[D],v=f[D][C*3+1]*c+p[D],w=f[D][C*3+2]*c+m[D],t=Math.min(g,t),e=Math.min(v,e),s=Math.min(w,s),i=Math.max(g,i),r=Math.max(v,r),a=Math.max(w,a),u[D]=g,p[D]=v,m[D]=w;for(let D=0;D<2;D++)S[D]+=c*Math.sqrt(d[D][C*3+0]*d[D][C*3+0]+d[D][C*3+1]*d[D][C*3+1]+d[D][C*3+2]*d[D][C*3+2]);_[0]+=this.qRadialSpeed[C]*c,_[1]+=this.qRadialSpeed2[C]*c,n=Math.max(n,Math.max(Math.abs(_[0]),Math.abs(_[1]))),o=Math.max(o,this.qScale[C])}this.emitterShape===ai?(g=this.emitterExtents.x*.5,v=this.emitterExtents.y*.5,w=this.emitterExtents.z*.5):(g=this.emitterRadius,v=this.emitterRadius,w=this.emitterRadius);const x=Math.max(S[0],S[1]);ih.x=t-o-g-n-x,ih.y=e-o-v-n-x,ih.z=s-o-w-n-x,rh.x=i+o+g+n+x,rh.y=r+o+v+n+x,rh.z=a+o+w+n+x,this.localBounds.setMinMax(ih,rh)}rebuild(){const t=this.graphicsDevice;this.colorMap===null&&(this.colorMap=this.defaultParamTexture),this.spawnBounds=this.emitterShape===ai?this.emitterExtents:this.emitterRadius,this.useCpu=this.useCpu||this.sort>Rf||t.maxVertexTextures<=1||t.fragmentUniformsCount<64||t.forceCpuParticles,this._destroyResources(),this.pack8=(this.pack8||!t.textureFloatRenderable)&&!this.useCpu,Ci=this.useCpu||this.pack8?4:2,this.useMesh=!!this.mesh,this.numParticlesPot=Y.nextPowerOfTwo(this.numParticles),this.rebuildGraphs(),this.calculateLocalBounds(),this.resetWorldBounds(),this.node&&(this.worldBounds.setFromTransformedAabb(this.localBounds,this.localSpace?ie.IDENTITY:this.node.getWorldTransform()),this.worldBoundsTrail[0].copy(this.worldBounds),this.worldBoundsTrail[1].copy(this.worldBounds),this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),this.prevWorldBoundsSize.copy(this.worldBoundsSize),this.prevWorldBoundsCenter.copy(this.worldBounds.center),this.pack8&&this.calculateBoundsMad()),this.vbToSort=new Array(this.numParticles);for(let d=0;d<this.numParticles;d++)this.vbToSort[d]=[0,0];this.particleDistance=new Float32Array(this.numParticles),this._gpuUpdater.randomize(),this.particleTex=new Float32Array(this.numParticlesPot*Ci*sh);const e=this.node===null||this.localSpace?A.ZERO:this.node.getPosition();this.emitterShape===ai&&(this.node===null||this.localSpace?kr.setTRS(A.ZERO,ue.IDENTITY,this.spawnBounds):kr.setTRS(A.ZERO,this.node.getRotation(),M_.copy(this.spawnBounds).mul(this.node.localScale)),Pi[0]=this.emitterExtents.x!==0?this.emitterExtentsInner.x/this.emitterExtents.x:0,Pi[1]=this.emitterExtents.y!==0?this.emitterExtentsInner.y/this.emitterExtents.y:0,Pi[2]=this.emitterExtents.z!==0?this.emitterExtentsInner.z/this.emitterExtents.z:0);for(let d=0;d<this.numParticles;d++)this._cpuUpdater.calcSpawnPosition(this.particleTex,kr,Pi,e,d),this.useCpu&&(this.particleTex[d*sh+3+this.numParticlesPot*2*sh]=1);this.particleTexStart=new Float32Array(this.numParticlesPot*Ci*sh);for(let d=0;d<this.particleTexStart.length;d++)this.particleTexStart[d]=this.particleTex[d];this.useCpu||(this.pack8?(this.particleTexIN=xs(t,this.numParticlesPot,Ci,this.particleTex,Fe,1,!1),this.particleTexOUT=xs(t,this.numParticlesPot,Ci,this.particleTex,Fe,1,!1),this.particleTexStart=xs(t,this.numParticlesPot,Ci,this.particleTexStart,Fe,1,!1)):(this.particleTexIN=xs(t,this.numParticlesPot,Ci,this.particleTex),this.particleTexOUT=xs(t,this.numParticlesPot,Ci,this.particleTex),this.particleTexStart=xs(t,this.numParticlesPot,Ci,this.particleTexStart)),this.rtParticleTexIN=new _t({colorBuffer:this.particleTexIN,depth:!1}),this.rtParticleTexOUT=new _t({colorBuffer:this.particleTexOUT,depth:!1}),this.swapTex=!1);const s=new Map;this.localSpace&&s.set("LOCAL_SPACE",""),this.pack8&&s.set("PACK8",""),this.emitterShape===ai&&s.set("EMITTERSHAPE_BOX","");const i=`Shape:${this.emitterShape}-Pack:${this.pack8}-Local:${this.localSpace}`,r=be.get(t,t.isWebGPU?it:Oe),a=new Map(r),n={attributes:{vertex_position:Ae},vertexChunk:"fullscreenQuadVS",fragmentChunk:"particle_simulationPS",fragmentDefines:s,fragmentIncludes:a};n.uniqueName=`ParticleUpdateRespawn-${i}`,s.set("RESPAWN",""),this.shaderParticleUpdateRespawn=Wt.createShader(t,n),s.delete("RESPAWN"),n.uniqueName=`ParticleUpdateNoRespawn-${i}`,s.set("NO_RESPAWN",""),this.shaderParticleUpdateNoRespawn=Wt.createShader(t,n),s.delete("NO_RESPAWN"),n.uniqueName=`ParticleUpdateStop-${i}`,s.set("ON_STOP",""),this.shaderParticleUpdateOnStop=Wt.createShader(t,n),this.numParticleVerts=this.useMesh?this.mesh.vertexBuffer.numVertices:4,this.numParticleIndices=this.useMesh?this.mesh.indexBuffer[0].numIndices:6,this._allocate(this.numParticles);const o=new Ve(t);o.vertexBuffer=this.vertexBuffer,o.indexBuffer[0]=this.indexBuffer,o.primitive[0].type=Xs,o.primitive[0].base=0,o.primitive[0].count=this.numParticles*this.numParticleIndices,o.primitive[0].indexed=!0,this.material=this._createMaterial(),this.resetMaterial();const c=this.meshInstance?this.meshInstance.visible:!0;this.meshInstance=new Ge(o,this.material,this.node),this.meshInstance.pick=!1,this.meshInstance.updateKey(),this.meshInstance.cull=!0,this.localSpace?this.meshInstance.aabb.setFromTransformedAabb(this.worldBounds,this.node.getWorldTransform()):this.meshInstance.aabb.copy(this.worldBounds),this.meshInstance._updateAabb=!1,this.meshInstance.visible=c,this._setMaterialTextures(),this.resetTime(),this.addTime(0,!1),this.preWarm&&this.prewarm(this.lifetime)}_isAnimated(){return this.animNumFrames>=1&&(this.animTilesX>1||this.animTilesY>1)&&(this.colorMap&&this.colorMap!==this.defaultParamTexture||this.normalMap)}rebuildGraphs(){const t=this.precision,e=this.graphicsDevice;this.qLocalVelocity=this.localVelocityGraph.quantize(t),this.qVelocity=this.velocityGraph.quantize(t),this.qColor=this.colorGraph.quantizeClamped(t,0,1),this.qRotSpeed=this.rotationSpeedGraph.quantize(t),this.qScale=this.scaleGraph.quantize(t),this.qAlpha=this.alphaGraph.quantize(t),this.qRadialSpeed=this.radialSpeedGraph.quantize(t),this.qLocalVelocity2=this.localVelocityGraph2.quantize(t),this.qVelocity2=this.velocityGraph2.quantize(t),this.qColor2=this.colorGraph2.quantizeClamped(t,0,1),this.qRotSpeed2=this.rotationSpeedGraph2.quantize(t),this.qScale2=this.scaleGraph2.quantize(t),this.qAlpha2=this.alphaGraph2.quantize(t),this.qRadialSpeed2=this.radialSpeedGraph2.quantize(t);for(let s=0;s<t;s++)this.qRotSpeed[s]*=Y.DEG_TO_RAD,this.qRotSpeed2[s]*=Y.DEG_TO_RAD;if(this.localVelocityUMax=new Float32Array(3),this.velocityUMax=new Float32Array(3),this.colorUMax=new Float32Array(3),this.rotSpeedUMax=[0],this.scaleUMax=[0],this.alphaUMax=[0],this.radialSpeedUMax=[0],this.qLocalVelocityDiv=Ur(this.qLocalVelocity,this.qLocalVelocity2,this.localVelocityUMax),this.qVelocityDiv=Ur(this.qVelocity,this.qVelocity2,this.velocityUMax),this.qColorDiv=Ur(this.qColor,this.qColor2,this.colorUMax),this.qRotSpeedDiv=Ur(this.qRotSpeed,this.qRotSpeed2,this.rotSpeedUMax),this.qScaleDiv=Ur(this.qScale,this.qScale2,this.scaleUMax),this.qAlphaDiv=Ur(this.qAlpha,this.qAlpha2,this.alphaUMax),this.qRadialSpeedDiv=Ur(this.qRadialSpeed,this.qRadialSpeed2,this.radialSpeedUMax),this.pack8){const s=[0,0,0];$r(this.qVelocity,s);const i=[0,0,0];$r(this.qVelocity2,i);const r=[0,0,0];$r(this.qLocalVelocity,r);const a=[0,0,0];$r(this.qLocalVelocity2,a);const n=[0];$r(this.qRadialSpeed,n);const o=[0];$r(this.qRadialSpeed2,o);let c=Math.max(s[0],i[0]);c=Math.max(c,s[1]),c=Math.max(c,i[1]),c=Math.max(c,s[2]),c=Math.max(c,i[2]);let d=Math.max(r[0],a[0]);d=Math.max(d,r[1]),d=Math.max(d,a[1]),d=Math.max(d,r[2]),d=Math.max(d,a[2]);const f=Math.max(n[0],o[0]);this.maxVel=c+d+f}this.useCpu||(this.internalTex0=xs(e,t,1,L_(this.qLocalVelocity,this.qLocalVelocityDiv)),this.internalTex1=xs(e,t,1,L_(this.qVelocity,this.qVelocityDiv)),this.internalTex2=xs(e,t,1,Rb(this.qRotSpeed,this.qScale,this.qScaleDiv,this.qRotSpeedDiv,this.qAlphaDiv)),this.internalTex3=xs(e,t,1,Ob(this.qRadialSpeed,this.qRadialSpeedDiv))),this.colorParam=xs(e,t,1,Lb(this.qColor,this.qAlpha),ms,1,!0)}_setMaterialTextures(){this.colorMap&&(y.call(()=>{wS(this.colorMap.format)&&y.warnOnce(`ParticleEmitter: colorMap texture [${this.colorMap.name}] is not using sRGB format. Please correct it for the correct rendering.`,this.colorMap)}),this.material.setParameter("colorMap",this.colorMap),this.lighting&&this.normalMap&&this.material.setParameter("normalMap",this.normalMap))}_createMaterial(){const t=new Ib(this);return t.name=`EmitterMaterial:${this.node.name}`,t.cull=wt,t.alphaWrite=!1,t.blendType=this.blendType,t.depthWrite=this.depthWrite,t}resetMaterial(){const t=this.material;t.setParameter("stretch",this.stretch),this._isAnimated()&&(t.setParameter("animTexTilesParams",this.animTilesParams),t.setParameter("animTexParams",this.animParams),t.setParameter("animTexIndexParams",this.animIndexParams)),t.setParameter("colorMult",this.intensity),this.useCpu||(t.setParameter("internalTex0",this.internalTex0),t.setParameter("internalTex1",this.internalTex1),t.setParameter("internalTex2",this.internalTex2),t.setParameter("internalTex3",this.internalTex3)),t.setParameter("colorParam",this.colorParam),t.setParameter("numParticles",this.numParticles),t.setParameter("numParticlesPot",this.numParticlesPot),t.setParameter("lifetime",this.lifetime),t.setParameter("rate",this.rate),t.setParameter("rateDiv",this.rate2-this.rate),t.setParameter("seed",this.seed),t.setParameter("scaleDivMult",this.scaleUMax[0]),t.setParameter("alphaDivMult",this.alphaUMax[0]),t.setParameter("radialSpeedDivMult",this.radialSpeedUMax[0]),t.setParameter("graphNumSamples",this.precision),t.setParameter("graphSampleSize",1/this.precision),t.setParameter("emitterScale",new Float32Array([1,1,1])),this.pack8&&(this._gpuUpdater._setInputBounds(),t.setParameter("inBoundsSize",this._gpuUpdater.inBoundsSizeUniform),t.setParameter("inBoundsCenter",this._gpuUpdater.inBoundsCenterUniform),t.setParameter("maxVel",this.maxVel)),this.wrap&&this.wrapBounds&&(this.wrapBoundsUniform[0]=this.wrapBounds.x,this.wrapBoundsUniform[1]=this.wrapBounds.y,this.wrapBoundsUniform[2]=this.wrapBounds.z,t.setParameter("wrapBounds",this.wrapBoundsUniform)),this._setMaterialTextures(),this.depthSoftening>0&&t.setParameter("softening",1/(this.depthSoftening*this.depthSoftening*100)),this.stretch>0&&(t.cull=wt),this._compParticleFaceParams()}_compParticleFaceParams(){let t,e;if(this.orientation===Qh)t=new Float32Array([1,0,0]),e=new Float32Array([0,0,1]);else{let s;this.orientation===JT?s=this.particleNormal.normalize():s=(this.node===null?ie.IDENTITY:this.node.getWorldTransform()).transformVector(this.particleNormal).normalize();const i=new A(1,0,0);Math.abs(i.dot(s))===1&&i.set(0,0,1);const r=new A().cross(s,i).normalize();i.cross(r,s).normalize(),t=new Float32Array([i.x,i.y,i.z]),e=new Float32Array([r.x,r.y,r.z])}this.material.setParameter("faceTangent",t),this.material.setParameter("faceBinorm",e)}getVertexInfo(){const t=[];return this.useCpu?t.push({semantic:Af,components:4,type:ze},{semantic:Xh,components:4,type:ze},{semantic:Qu,components:4,type:ze},{semantic:Ju,components:1,type:ze},{semantic:ep,components:this.useMesh?4:2,type:ze}):(t.push({semantic:Af,components:4,type:ze}),this.useMesh&&t.push({semantic:Xh,components:2,type:ze})),t}_allocate(t){const e=t*this.numParticleVerts,s=t*this.numParticleIndices;if(this.vertexBuffer===void 0||this.vertexBuffer.getNumVertices()!==e){const i=this.getVertexInfo(),r=new Nt(this.graphicsDevice,i);this.vertexBuffer=new Is(this.graphicsDevice,r,e,{usage:Vh}),this.indexBuffer=new Er(this.graphicsDevice,Tr,s);const a=new Float32Array(this.vertexBuffer.lock());let n,o,c;if(this.useMesh){n=new Float32Array(this.mesh.vertexBuffer.lock()),o=n.length/this.mesh.vertexBuffer.numVertices;for(let u=0;u<this.mesh.vertexBuffer.format.elements.length;u++)if(this.mesh.vertexBuffer.format.elements[u].name===ts){c=this.mesh.vertexBuffer.format.elements[u].offset/4;break}}for(let u=0;u<e;u++){const p=Math.floor(u/this.numParticleVerts);if(this.useMesh){const m=u%this.numParticleVerts;a[u*6]=n[m*o],a[u*6+1]=n[m*o+1],a[u*6+2]=n[m*o+2],a[u*6+3]=p,a[u*6+4]=n[m*o+c+0],a[u*6+5]=1-n[m*o+c+1]}else{const m=u%4;a[u*4]=A_[m][0],a[u*4+1]=A_[m][1],a[u*4+2]=0,a[u*4+3]=p}}this.useCpu&&(this.vbCPU=new Float32Array(a),this.vbOld=new Float32Array(this.vbCPU.length)),this.vertexBuffer.unlock(),this.useMesh&&this.mesh.vertexBuffer.unlock();let d=0;const f=new Uint32Array(this.indexBuffer.lock());if(this.useMesh){const u=this.mesh.indexBuffer[0];n=new Zh[u.format](u.lock())}for(let u=0;u<t;u++)if(this.useMesh)for(let p=0;p<this.numParticleIndices;p++)f[u*this.numParticleIndices+p]=n[p]+u*this.numParticleVerts;else{const p=u*4;f[d++]=p,f[d++]=p+1,f[d++]=p+2,f[d++]=p,f[d++]=p+2,f[d++]=p+3}this.indexBuffer.unlock(),this.useMesh&&this.mesh.indexBuffer[0].unlock()}}reset(){if(this.beenReset=!0,this.seed=Math.random(),this.material.setParameter("seed",this.seed),this.useCpu)for(let e=0;e<this.particleTexStart.length;e++)this.particleTex[e]=this.particleTexStart[e];else this._setMaterialTextures();this.resetWorldBounds(),this.resetTime();const t=this.loop;this.loop=!0,this.addTime(0,!1),this.loop=t,this.preWarm&&this.prewarm(this.lifetime)}prewarm(t){const e=t/this.lifetime,s=Math.min(Math.floor(e*this.precision),this.precision),i=t/s;for(let r=0;r<s;r++)this.addTime(i,!1)}resetTime(){this.endTime=Fb(this)}finishFrame(){this.useCpu&&this.vertexBuffer.unlock()}addTime(t,e){const s=this.graphicsDevice,i=pe();if(this.simTimeTotal+=t,this.calculateWorldBounds(),this._isAnimated()){const n=this.animTilesParams;n[0]=1/this.animTilesX,n[1]=1/this.animTilesY;const o=this.animParams;o[0]=this.animStartFrame,o[1]=this.animNumFrames*this.animSpeed,o[2]=this.animNumFrames-1,o[3]=this.animNumAnimations-1;const c=this.animIndexParams;c[0]=this.animIndex,c[1]=this.randomizeAnimIndex}this.scene&&this.camera!==this.scene._activeCamera&&(this.camera=this.scene._activeCamera,this.onChangeCamera()),this.emitterShape===ai&&(Pi[0]=this.emitterExtents.x!==0?this.emitterExtentsInner.x/this.emitterExtents.x:0,Pi[1]=this.emitterExtents.y!==0?this.emitterExtentsInner.y/this.emitterExtents.y:0,Pi[2]=this.emitterExtents.z!==0?this.emitterExtentsInner.z/this.emitterExtents.z:0,this.meshInstance.node===null?kr.setTRS(A.ZERO,ue.IDENTITY,this.emitterExtents):kr.setTRS(A.ZERO,this.meshInstance.node.getRotation(),M_.copy(this.emitterExtents).mul(this.meshInstance.node.localScale)));let r;const a=this.meshInstance.node===null?A.ONE:this.meshInstance.node.localScale;if(this.emitterScaleUniform[0]=a.x,this.emitterScaleUniform[1]=a.y,this.emitterScaleUniform[2]=a.z,this.material.setParameter("emitterScale",this.emitterScaleUniform),this.localSpace&&this.meshInstance.node&&(r=this.meshInstance.node.getPosition(),this.emitterPosUniform[0]=r.x,this.emitterPosUniform[1]=r.y,this.emitterPosUniform[2]=r.z,this.material.setParameter("emitterPos",this.emitterPosUniform)),this._compParticleFaceParams(),!this.useCpu)this._gpuUpdater.update(s,kr,Pi,t,e);else{const n=new Float32Array(this.vertexBuffer.lock());this._cpuUpdater.update(n,this.vbToSort,this.particleTex,kr,Pi,r,t,e)}this.loop||Date.now()>this.endTime&&(this.onFinished&&this.onFinished(),this.meshInstance.visible=!1),this.meshInstance&&(this.meshInstance.drawOrder=this.drawOrder),this._addTimeTime+=pe()-i}_destroyResources(){var t,e,s,i,r,a,n,o,c,d,f,u;(t=this.particleTexIN)==null||t.destroy(),this.particleTexIN=null,(e=this.particleTexOUT)==null||e.destroy(),this.particleTexOUT=null,this.particleTexStart&&this.particleTexStart.destroy&&(this.particleTexStart.destroy(),this.particleTexStart=null),(s=this.rtParticleTexIN)==null||s.destroy(),this.rtParticleTexIN=null,(i=this.rtParticleTexOUT)==null||i.destroy(),this.rtParticleTexOUT=null,(r=this.internalTex0)==null||r.destroy(),this.internalTex0=null,(a=this.internalTex1)==null||a.destroy(),this.internalTex1=null,(n=this.internalTex2)==null||n.destroy(),this.internalTex2=null,(o=this.internalTex3)==null||o.destroy(),this.internalTex3=null,(c=this.colorParam)==null||c.destroy(),this.colorParam=null,(d=this.vertexBuffer)==null||d.destroy(),this.vertexBuffer=void 0,(f=this.indexBuffer)==null||f.destroy(),this.indexBuffer=void 0,(u=this.material)==null||u.destroy(),this.material=null}destroy(){this.camera=null,this._destroyResources()}}class zb extends ga{generateKey(t){var d;const e=t.shaderDesc,s=e.vertexGLSL?ci(e.vertexGLSL):0,i=e.fragmentGLSL?ci(e.fragmentGLSL):0,r=e.vertexWGSL?ci(e.vertexWGSL):0,a=e.fragmentWGSL?ci(e.fragmentWGSL):0,n=ga.definesHash(t.defines),o=((d=t.shaderChunks)==null?void 0:d.key)??"";let c=`${e.uniqueName}_${n}_${s}_${i}_${r}_${a}_${o}`;return t.skin&&(c+="_skin"),t.useInstancing&&(c+="_inst"),t.useMorphPosition&&(c+="_morphp"),t.useMorphNormal&&(c+="_morphn"),t.useMorphTextureBasedInt&&(c+="_morphi"),c}createAttributesDefinition(t,e){const s=e.shaderDesc.attributes,i=s?{...s}:void 0;e.skin&&(i.vertex_boneWeights=gi,i.vertex_boneIndices=fs),(e.useMorphPosition||e.useMorphNormal)&&(i.morph_vertex_id=An),t.attributes=i}createVertexDefinition(t,e,s,i){const r=e.shaderDesc,a=new Map(s);a.set("transformInstancingVS","");const n=new Map(e.defines);e.skin&&n.set("SKIN",!0),e.useInstancing&&n.set("INSTANCING",!0),(e.useMorphPosition||e.useMorphNormal)&&(n.set("MORPHING",!0),e.useMorphTextureBasedInt&&n.set("MORPHING_INT",!0),e.useMorphPosition&&n.set("MORPHING_POSITION",!0),e.useMorphNormal&&n.set("MORPHING_NORMAL",!0)),t.vertexCode=i?r.vertexWGSL:r.vertexGLSL,t.vertexIncludes=a,t.vertexDefines=n}createFragmentDefinition(t,e,s,i){const r=e.shaderDesc,a=new Map(s),n=new Map(e.defines);t.fragmentCode=i?r.fragmentWGSL:r.fragmentGLSL,t.fragmentIncludes=a,t.fragmentDefines=n}createShaderDefinition(t,e){var o;const s=e.shaderDesc,i=t.isWebGPU&&!!s.vertexWGSL&&!!s.fragmentWGSL&&(((o=e.shaderChunks)==null?void 0:o.useWGSL)??!0),r={name:`ShaderMaterial-${s.uniqueName}`,shaderLanguage:i?it:Oe,fragmentOutputTypes:s.fragmentOutputTypes,meshUniformBufferFormat:s.meshUniformBufferFormat,meshBindGroupFormat:s.meshBindGroupFormat},a=i?it:Oe,n=rc.merge(be.get(t,a),e.shaderChunks[a]);return this.createAttributesDefinition(r,e),this.createVertexDefinition(r,e,n,i),this.createFragmentDefinition(r,e,n,i),Zt.createDefinition(t,r)}}const Vb=new zb;class zn extends sr{constructor(e){super();h(this,"_shaderDesc");this.shaderDesc=e}set shaderDesc(e){if(this._shaderDesc=void 0,e&&(this._shaderDesc={uniqueName:e.uniqueName,attributes:e.attributes,fragmentOutputTypes:e.fragmentOutputTypes,vertexGLSL:e.vertexGLSL,fragmentGLSL:e.fragmentGLSL,vertexWGSL:e.vertexWGSL,fragmentWGSL:e.fragmentWGSL},e.vertexCode||e.fragmentCode||e.shaderLanguage)){y.deprecated(`ShaderMaterial [${e.uniqueName}]: vertexCode, fragmentCode and shaderLanguage properties of ShaderDesc is deprecated. Use vertexGLSL, fragmentGLSL, vertexWGSL or fragmentWGSL instead.`);const s=e.shaderLanguage??Oe;s===Oe?(this._shaderDesc.vertexGLSL=e.vertexCode,this._shaderDesc.fragmentGLSL=e.fragmentCode):s===it&&(this._shaderDesc.vertexWGSL=e.vertexCode,this._shaderDesc.fragmentWGSL=e.fragmentCode)}this.clearVariants()}get shaderDesc(){return this._shaderDesc}copy(e){return super.copy(e),this.shaderDesc=e.shaderDesc,this}getShaderVariant(e){const{objDefs:s}=e,i={defines:Wt.getCoreDefines(this,e),skin:(s&Ko)!==0,useInstancing:(s&Zo)!==0,useMorphPosition:(s&Qo)!==0,useMorphNormal:(s&Jo)!==0,useMorphTextureBasedInt:(s&el)!==0,pass:e.pass,gamma:e.cameraShaderParams.shaderOutputGamma,toneMapping:e.cameraShaderParams.toneMapping,fog:e.cameraShaderParams.fog,shaderDesc:this.shaderDesc,shaderChunks:this.shaderChunks},r=new ad(e.viewUniformFormat,e.viewBindGroupFormat,e.vertexFormat),a=kn(e.device);return a.register("shader-material",Vb),a.getProgram("shader-material",i,r,this.userId)}}const zy=(l,t)=>{const e=t.length/3,s=l.length/3,i=new A,r=new A,a=new A,n=new A,o=new A,c=new A,d=[];for(let f=0;f<l.length;f++)d[f]=0;for(let f=0;f<e;f++){const u=t[f*3],p=t[f*3+1],m=t[f*3+2];i.set(l[u*3],l[u*3+1],l[u*3+2]),r.set(l[p*3],l[p*3+1],l[p*3+2]),a.set(l[m*3],l[m*3+1],l[m*3+2]),n.sub2(r,i),o.sub2(a,i),c.cross(n,o).normalize(),d[u*3]+=c.x,d[u*3+1]+=c.y,d[u*3+2]+=c.z,d[p*3]+=c.x,d[p*3+1]+=c.y,d[p*3+2]+=c.z,d[m*3]+=c.x,d[m*3+1]+=c.y,d[m*3+2]+=c.z}for(let f=0;f<s;f++){const u=d[f*3],p=d[f*3+1],m=d[f*3+2],_=1/Math.sqrt(u*u+p*p+m*m);d[f*3]*=_,d[f*3+1]*=_,d[f*3+2]*=_}return d},Pr=(l,t,e,s)=>{const i=s.length/3,r=l.length/3,a=new A,n=new A,o=new A,c=new J,d=new J,f=new J,u=new A,p=new A,m=new Float32Array(r*3),_=new Float32Array(r*3),S=[];for(let b=0;b<i;b++){const C=s[b*3],D=s[b*3+1],T=s[b*3+2];a.set(l[C*3],l[C*3+1],l[C*3+2]),n.set(l[D*3],l[D*3+1],l[D*3+2]),o.set(l[T*3],l[T*3+1],l[T*3+2]),c.set(e[C*2],e[C*2+1]),d.set(e[D*2],e[D*2+1]),f.set(e[T*2],e[T*2+1]);const I=n.x-a.x,L=o.x-a.x,E=n.y-a.y,F=o.y-a.y,k=n.z-a.z,H=o.z-a.z,G=d.x-c.x,W=f.x-c.x,R=d.y-c.y,B=f.y-c.y,V=G*B-W*R;if(V===0)u.set(0,1,0),p.set(1,0,0);else{const O=1/V;u.set((B*I-R*L)*O,(B*E-R*F)*O,(B*k-R*H)*O),p.set((G*L-W*I)*O,(G*F-W*E)*O,(G*H-W*k)*O)}m[C*3+0]+=u.x,m[C*3+1]+=u.y,m[C*3+2]+=u.z,m[D*3+0]+=u.x,m[D*3+1]+=u.y,m[D*3+2]+=u.z,m[T*3+0]+=u.x,m[T*3+1]+=u.y,m[T*3+2]+=u.z,_[C*3+0]+=p.x,_[C*3+1]+=p.y,_[C*3+2]+=p.z,_[D*3+0]+=p.x,_[D*3+1]+=p.y,_[D*3+2]+=p.z,_[T*3+0]+=p.x,_[T*3+1]+=p.y,_[T*3+2]+=p.z}const g=new A,v=new A,w=new A,x=new A;for(let b=0;b<r;b++){w.set(t[b*3],t[b*3+1],t[b*3+2]),g.set(m[b*3],m[b*3+1],m[b*3+2]),v.set(_[b*3],_[b*3+1],_[b*3+2]);const C=w.dot(g);x.copy(w).mulScalar(C),x.sub2(g,x).normalize(),S[b*4]=x.x,S[b*4+1]=x.y,S[b*4+2]=x.z,x.cross(w,g),S[b*4+3]=x.dot(v)<0?-1:1}return S};class va{constructor(){h(this,"positions");h(this,"normals");h(this,"colors");h(this,"uvs");h(this,"uvs1");h(this,"blendIndices");h(this,"blendWeights");h(this,"tangents");h(this,"indices")}calculateNormals(){y.assert(this.positions,"Geometry must have positions set"),y.assert(this.indices,"Geometry must have indices set"),this.normals=zy(this.positions,this.indices)}calculateTangents(){y.assert(this.positions,"Geometry must have positions set"),y.assert(this.normals,"Geometry must have normals set"),y.assert(this.uvs,"Geometry must have uvs set"),y.assert(this.indices,"Geometry must have indices set"),this.tangents=Pr(this.positions,this.normals,this.uvs,this.indices)}}const Vf=4/64,R_=1-Vf*2;class Gf extends va{constructor(t={}){super();const e=t.halfExtents??new A(.5,.5,.5),s=t.widthSegments??1,i=t.lengthSegments??1,r=t.heightSegments??1,a=t.yOffset??0,n=-e.y+a,o=e.y+a,c=[new A(-e.x,n,e.z),new A(e.x,n,e.z),new A(e.x,o,e.z),new A(-e.x,o,e.z),new A(e.x,n,-e.z),new A(-e.x,n,-e.z),new A(-e.x,o,-e.z),new A(e.x,o,-e.z)],d=[[0,1,3],[4,5,7],[3,2,6],[1,0,4],[1,4,2],[5,0,6]],f=[[0,0,1],[0,0,-1],[0,1,0],[0,-1,0],[1,0,0],[-1,0,0]],u={FRONT:0,BACK:1,TOP:2,BOTTOM:3,RIGHT:4,LEFT:5},p=[],m=[],_=[],S=[];let g=0;const v=(w,x,b)=>{const C=new A,D=new A,T=new A,I=new A;for(let L=0;L<=x;L++)for(let E=0;E<=b;E++){C.lerp(c[d[w][0]],c[d[w][1]],L/x),D.lerp(c[d[w][0]],c[d[w][2]],E/b),T.sub2(D,c[d[w][0]]),I.add2(C,T);let F=L/x,k=E/b;p.push(I.x,I.y,I.z),m.push(f[w][0],f[w][1],f[w][2]),_.push(F,1-k),F=F*R_+Vf,k=k*R_+Vf,F/=3,k/=3,F+=w%3/3,k+=Math.floor(w/3)/3,L<x&&E<b&&(S.push(g+b+1,g+1,g),S.push(g+b+1,g+b+2,g+1)),g++}};v(u.FRONT,s,r),v(u.BACK,s,r),v(u.TOP,s,i),v(u.BOTTOM,s,i),v(u.RIGHT,i,r),v(u.LEFT,i,r),this.positions=p,this.normals=m,this.uvs=_,this.uvs1=_,this.indices=S,t.calculateTangents&&(this.tangents=Pr(p,m,_,S))}}class Gp extends va{constructor(t={}){super();const e=t.radius??.5,s=t.latitudeBands??16,i=t.longitudeBands??16,r=[],a=[],n=[],o=[];for(let c=0;c<=s;c++){const d=c*Math.PI/s,f=Math.sin(d),u=Math.cos(d);for(let p=0;p<=i;p++){const m=p*2*Math.PI/i-Math.PI/2,_=Math.sin(m),g=Math.cos(m)*f,v=u,w=_*f,x=1-p/i,b=1-c/s;r.push(g*e,v*e,w*e),a.push(g,v,w),n.push(x,1-b)}}for(let c=0;c<s;++c)for(let d=0;d<i;++d){const f=c*(i+1)+d,u=f+i+1;o.push(f+1,u,f),o.push(f+1,u+1,u)}this.positions=r,this.normals=a,this.uvs=n,this.uvs1=n,this.indices=o,t.calculateTangents&&(this.tangents=Pr(r,a,n,o))}}class Gb extends Gp{constructor(t={}){const s=t.latitudeBands??16,i=t.longitudeBands??16;super({radius:.5,latitudeBands:s,longitudeBands:i});const r=.1,a=.95,n=a*a,o=this.positions;for(let c=0;c<o.length;c+=3){const d=o[c]/.5;let f=o[c+1]/.5;const u=o[c+2]/.5;f<0&&(f*=.3,d*d+u*u<n&&(f=-r)),f+=r,f*=.5,o[c+1]=f}}}class Io{static create(t,e){switch(e){case cw:return Io.box(t);case dw:return Io.dome(t)}return y.assert(e===Do,`Unsupported sky geometry type ${e}`),Io.infinite(t)}static infinite(t){return Ve.fromGeometry(t,new Gf(t))}static box(t){return Ve.fromGeometry(t,new Gf({yOffset:.5}))}static dome(t){const e=new Gb({latitudeBands:50,longitudeBands:50});return e.normals=void 0,e.uvs=void 0,Ve.fromGeometry(t,e)}}class Hb{constructor(t,e,s,i,r){h(this,"meshInstance",null);h(this,"_depthWrite",!1);const a=new zn({uniqueName:"SkyMaterial",vertexGLSL:be.get(t,Oe).get("skyboxVS"),fragmentGLSL:be.get(t,Oe).get("skyboxPS"),vertexWGSL:be.get(t,it).get("skyboxVS"),fragmentWGSL:be.get(t,it).get("skyboxPS"),attributes:{aPosition:Ae}});a.setDefine("{SKYBOX_DECODE_FNC}",xr.decodeFunc(i.encoding)),r!==Do&&a.setDefine("SKYMESH",""),i.cubemap&&a.setDefine("SKY_CUBEMAP",""),a.setParameter("skyboxHighlightMultiplier",e.skyboxHighlightMultiplier),i.cubemap?a.setParameter("texture_cubeMap",i):(a.setParameter("texture_envAtlas",i),a.setParameter("mipLevel",e.skyboxMip)),a.cull=bo,a.depthWrite=this._depthWrite;const n=e.layers.getLayerById(Tp);if(n){const o=Io.create(t,r),c=new Ge(o,a,s);this.meshInstance=c,c.cull=!1,c.pick=!1,n.addMeshInstances([c]),this.skyLayer=n}}destroy(){this.meshInstance&&(this.skyLayer&&this.skyLayer.removeMeshInstances([this.meshInstance]),this.meshInstance.destroy(),this.meshInstance=null)}set depthWrite(t){this._depthWrite=t,this.meshInstance&&(this.meshInstance.material.depthWrite=t)}get depthWrite(){return this._depthWrite}}class Wb{constructor(t){h(this,"_type",Do);h(this,"_center",new A(0,1,0));h(this,"skyMesh",null);h(this,"_depthWrite",!1);h(this,"node",new De("SkyMeshNode"));this.device=t.device,this.scene=t,this.center=new A(0,1,0),this.centerArray=new Float32Array(3),this.projectedSkydomeCenterId=this.device.scope.resolve("projectedSkydomeCenter")}applySettings(t){this.type=t.skyType??Do,this.node.setLocalPosition(new A(t.skyMeshPosition??[0,0,0])),this.node.setLocalEulerAngles(new A(t.skyMeshRotation??[0,0,0])),this.node.setLocalScale(new A(t.skyMeshScale??[1,1,1])),t.skyCenter&&(this._center=new A(t.skyCenter))}set type(t){this._type!==t&&(this._type=t,this.scene.updateShaders=!0,this.updateSkyMesh())}get type(){return this._type}set center(t){this._center.copy(t)}get center(){return this._center}set depthWrite(t){this._depthWrite!==t&&(this._depthWrite=t,this.skyMesh&&(this.skyMesh.depthWrite=t))}get depthWrite(){return this._depthWrite}updateSkyMesh(){const t=this.scene._getSkyboxTex();t&&(this.resetSkyMesh(),this.skyMesh=new Hb(this.device,this.scene,this.node,t,this.type),this.skyMesh.depthWrite=this._depthWrite,this.scene.fire("set:skybox",t))}resetSkyMesh(){var t;(t=this.skyMesh)==null||t.destroy(),this.skyMesh=null}update(){if(this.type!==Do){const{center:t,centerArray:e}=this,s=new A;this.node.getWorldTransform().transformPoint(t,s),e[0]=s.x,e[1]=s.y,e[2]=s.z,this.projectedSkydomeCenterId.setValue(e)}}}const nc=new De;nc.worldTransform=ie.IDENTITY;nc._dirtyWorld=nc._dirtyNormal=!1;class $b{constructor(t,e,s){this.material=e,this.layer=s,this.positions=[],this.colors=[],this.mesh=new Ve(t),this.meshInstance=null}addLines(t,e){const s=this.positions,i=t.length;for(let a=0;a<i;a++){const n=t[a];s.push(n.x,n.y,n.z)}const r=this.colors;if(e.length)for(let a=0;a<i;a++){const n=e[a];r.push(n.r,n.g,n.b,n.a)}else for(let a=0;a<i;a++)r.push(e.r,e.g,e.b,e.a)}addLinesArrays(t,e){const s=this.positions;for(let r=0;r<t.length;r+=3)s.push(t[r],t[r+1],t[r+2]);const i=this.colors;if(e.length)for(let r=0;r<e.length;r+=4)i.push(e[r],e[r+1],e[r+2],e[r+3]);else{const r=t.length/3;for(let a=0;a<r;a++)i.push(e.r,e.g,e.b,e.a)}}onPreRender(t,e){this.positions.length>0&&this.material.transparent===e&&(this.mesh.setPositions(this.positions),this.mesh.setColors(this.colors),this.mesh.update(Hc,!1),this.meshInstance||(this.meshInstance=new Ge(this.mesh,this.material,nc)),t.push(this.meshInstance))}clear(){this.positions.length=0,this.colors.length=0}}class Xb{constructor(t){this.device=t,this.map=new Map}getBatch(t,e){let s=this.map.get(t);return s||(s=new $b(this.device,t,e),this.map.set(t,s)),s}onPreRender(t,e){this.map.forEach(s=>{s.onPreRender(t,e)})}clear(){this.map.forEach(t=>t.clear())}}const Ts=[],ka=new A;class qb{constructor(t){h(this,"shaderDescs",new Map);this.device=t,this.quadMesh=null,this.textureShader=null,this.depthTextureShader=null,this.cubeLocalPos=null,this.cubeWorldPos=null,this.batchesMap=new Map,this.allBatches=new Set,this.updatedLayers=new Set,this._materialDepth=null,this._materialNoDepth=null,this.layerMeshInstances=new Map}createMaterial(t){const e=new zn({uniqueName:"ImmediateLine",vertexGLSL:be.get(this.device,Oe).get("immediateLineVS"),fragmentGLSL:be.get(this.device,Oe).get("immediateLinePS"),vertexWGSL:be.get(this.device,it).get("immediateLineVS"),fragmentWGSL:be.get(this.device,it).get("immediateLinePS"),attributes:{vertex_position:Ae,vertex_color:Ht}});return e.blendType=Ks,e.depthTest=t,e.update(),e}get materialDepth(){return this._materialDepth||(this._materialDepth=this.createMaterial(!0)),this._materialDepth}get materialNoDepth(){return this._materialNoDepth||(this._materialNoDepth=this.createMaterial(!1)),this._materialNoDepth}getBatch(t,e){let s=this.batchesMap.get(t);s||(s=new Xb(this.device),this.batchesMap.set(t,s)),this.allBatches.add(s);const i=e?this.materialDepth:this.materialNoDepth;return s.getBatch(i,t)}getShaderDesc(t,e,s){return this.shaderDescs.has(t)||this.shaderDescs.set(t,{uniqueName:`DebugShader:${t}`,vertexGLSL:`
                    attribute vec2 vertex_position;
                    uniform mat4 matrix_model;
                    varying vec2 uv0;
                    void main(void) {
                        gl_Position = matrix_model * vec4(vertex_position, 0, 1);
                        uv0 = vertex_position.xy + 0.5;
                    }
                `,vertexWGSL:`
                    attribute vertex_position: vec2f;
                    uniform matrix_model: mat4x4f;
                    varying uv0: vec2f;
                    @vertex fn vertexMain(input: VertexInput) -> VertexOutput {
                        var output: VertexOutput;
                        output.position = uniform.matrix_model * vec4f(input.vertex_position, 0.0, 1.0);
                        output.uv0 = input.vertex_position.xy + vec2f(0.5);
                        return output;
                    }
                `,fragmentGLSL:e,fragmentWGSL:s,attributes:{vertex_position:Ae}}),this.shaderDescs.get(t)}getTextureShaderDesc(t){const e=xr.decodeFunc(t);return this.getShaderDesc(`textureShader-${t}`,`
            #include "gammaPS"
            varying vec2 uv0;
            uniform sampler2D colorMap;
            void main (void) {
                vec3 linearColor = ${e}(texture2D(colorMap, uv0));
                gl_FragColor = vec4(gammaCorrectOutput(linearColor), 1);
            }
        `,`
            #include "gammaPS"
            varying uv0: vec2f;
            var colorMap: texture_2d<f32>;
            var colorMapSampler: sampler;
            @fragment fn fragmentMain(input : FragmentInput) -> FragmentOutput {
                var output: FragmentOutput;
                let sampledTex = textureSample(colorMap, colorMapSampler, input.uv0);
                let linearColor: vec3f = ${e}(sampledTex);
                output.color = vec4f(gammaCorrectOutput(linearColor), 1.0);
                return output;
            }
        `)}getUnfilterableTextureShaderDesc(){return this.getShaderDesc("textureShaderUnfilterable",`
            varying vec2 uv0;
            uniform highp sampler2D colorMap;
            void main (void) {
                ivec2 uv = ivec2(uv0 * textureSize(colorMap, 0));
                gl_FragColor = vec4(texelFetch(colorMap, uv, 0).xyz, 1);
            }
        `,`

            varying uv0: vec2f;
            var colorMap: texture_2d<uff>;
            @fragment fn fragmentMain(input : FragmentInput) -> FragmentOutput {
                var output: FragmentOutput;
                let uv : vec2<i32> = vec2<i32>(input.uv0 * vec2f(textureDimensions(colorMap, 0)));
                let fetchedColor : vec4f = textureLoad(colorMap, uv, 0);
                output.color = vec4f(fetchedColor.xyz, 1.0);
                return output;
            }
        `)}getDepthTextureShaderDesc(){return this.getShaderDesc("depthTextureShader",`
            #include "screenDepthPS"
            #include "gammaPS"
            varying vec2 uv0;
            void main() {
                float depth = getLinearScreenDepth(getImageEffectUV(uv0)) * camera_params.x;
                gl_FragColor = vec4(gammaCorrectOutput(vec3(depth)), 1.0);
            }
        `,`
            #include "screenDepthPS"
            #include "gammaPS"
            varying uv0: vec2f;
            @fragment fn fragmentMain(input: FragmentInput) -> FragmentOutput {
                var output: FragmentOutput;
                let depth: f32 = getLinearScreenDepth(getImageEffectUV(input.uv0)) * uniform.camera_params.x;
                output.color = vec4f(gammaCorrectOutput(vec3f(depth)), 1.0);
                return output;
            }
        `)}getQuadMesh(){return this.quadMesh||(this.quadMesh=new Ve(this.device),this.quadMesh.setPositions([-.5,-.5,0,.5,-.5,0,-.5,.5,0,.5,.5,0]),this.quadMesh.update(wr)),this.quadMesh}drawMesh(t,e,s,i,r){if(!i){const n=this.getGraphNode(e);i=new Ge(s,t,n)}let a=this.layerMeshInstances.get(r);a||(a=[],this.layerMeshInstances.set(r,a)),a.push(i)}drawWireAlignedBox(t,e,s,i,r,a){if(a){const o=(c,d,f)=>{ka.set(c,d,f),a.transformPoint(ka,ka),Ts.push(ka.x,ka.y,ka.z)};o(t.x,t.y,t.z),o(t.x,e.y,t.z),o(t.x,e.y,t.z),o(e.x,e.y,t.z),o(e.x,e.y,t.z),o(e.x,t.y,t.z),o(e.x,t.y,t.z),o(t.x,t.y,t.z),o(t.x,t.y,e.z),o(t.x,e.y,e.z),o(t.x,e.y,e.z),o(e.x,e.y,e.z),o(e.x,e.y,e.z),o(e.x,t.y,e.z),o(e.x,t.y,e.z),o(t.x,t.y,e.z),o(t.x,t.y,t.z),o(t.x,t.y,e.z),o(t.x,e.y,t.z),o(t.x,e.y,e.z),o(e.x,e.y,t.z),o(e.x,e.y,e.z),o(e.x,t.y,t.z),o(e.x,t.y,e.z)}else Ts.push(t.x,t.y,t.z,t.x,e.y,t.z,t.x,e.y,t.z,e.x,e.y,t.z,e.x,e.y,t.z,e.x,t.y,t.z,e.x,t.y,t.z,t.x,t.y,t.z,t.x,t.y,e.z,t.x,e.y,e.z,t.x,e.y,e.z,e.x,e.y,e.z,e.x,e.y,e.z,e.x,t.y,e.z,e.x,t.y,e.z,t.x,t.y,e.z,t.x,t.y,t.z,t.x,t.y,e.z,t.x,e.y,t.z,t.x,e.y,e.z,e.x,e.y,t.z,e.x,e.y,e.z,e.x,t.y,t.z,e.x,t.y,e.z);this.getBatch(r,i).addLinesArrays(Ts,s),Ts.length=0}drawWireSphere(t,e,s,i,r,a){const n=2*Math.PI/i;let o=0;for(let d=0;d<i;d++){const f=Math.sin(o),u=Math.cos(o);o+=n;const p=Math.sin(o),m=Math.cos(o);Ts.push(t.x+e*f,t.y,t.z+e*u),Ts.push(t.x+e*p,t.y,t.z+e*m),Ts.push(t.x+e*f,t.y+e*u,t.z),Ts.push(t.x+e*p,t.y+e*m,t.z),Ts.push(t.x,t.y+e*f,t.z+e*u),Ts.push(t.x,t.y+e*p,t.z+e*m)}this.getBatch(a,r).addLinesArrays(Ts,s),Ts.length=0}getGraphNode(t){const e=new De("ImmediateDebug");return e.worldTransform=t,e._dirtyWorld=e._dirtyNormal=!1,e}onPreRenderLayer(t,e,s){if(this.batchesMap.forEach((i,r)=>{r===t&&i.onPreRender(e,s)}),!this.updatedLayers.has(t)){this.updatedLayers.add(t);const i=this.layerMeshInstances.get(t);if(i){for(let r=0;r<i.length;r++)e.push(i[r]);i.length=0}}}onPostRender(){this.allBatches.forEach(t=>t.clear()),this.allBatches.clear(),this.updatedLayers.clear()}}class jb{constructor(){h(this,"type",Hn);h(this,"color",new ae(0,0,0));h(this,"density",0);h(this,"start",1);h(this,"end",1e3)}}class Tt extends Se{constructor(e){super();h(this,"ambientBake",!1);h(this,"ambientBakeOcclusionBrightness",0);h(this,"ambientBakeOcclusionContrast",0);h(this,"ambientLight",new ae(0,0,0));h(this,"ambientLuminance",0);h(this,"exposure",1);h(this,"lightmapSizeMultiplier",1);h(this,"lightmapMaxResolution",2048);h(this,"lightmapMode",Ch);h(this,"lightmapFilterEnabled",!1);h(this,"lightmapHDR",!1);h(this,"root",null);h(this,"physicalUnits",!1);h(this,"_envAtlas",null);h(this,"_skyboxCubeMap",null);h(this,"_fogParams",new jb);h(this,"forcePassThroughSpecular",!1);y.assert(e,"Scene constructor takes a GraphicsDevice as a parameter, and it was not provided."),this.device=e,this._gravity=new A(0,-9.8,0),this._layers=null,this._prefilteredCubemaps=[],this._internalEnvAtlas=null,this._skyboxIntensity=1,this._skyboxLuminance=0,this._skyboxMip=0,this._skyboxHighlightMultiplier=1,this._skyboxRotationShaderInclude=!1,this._skyboxRotation=new ue,this._skyboxRotationMat3=new _i,this._skyboxRotationMat4=new ie,this._ambientBakeNumSamples=1,this._ambientBakeSpherePart=.4,this._lightmapFilterRange=10,this._lightmapFilterSmoothness=.2,this._clusteredLightingEnabled=!0,this._lightingParams=new Uy(this.device.supportsAreaLights,this.device.maxTextureSize,()=>{this.updateShaders=!0}),this._sky=new Wb(this),this._stats={meshInstances:0,lights:0,dynamicLights:0,bakedLights:0,updateShadersTime:0},this.updateShaders=!0,this._shaderVersion=0,this.immediate=new qb(this.device)}get defaultDrawLayer(){return this.layers.getLayerById(wp)}set ambientBakeNumSamples(e){this._ambientBakeNumSamples=Y.clamp(Math.floor(e),1,255)}get ambientBakeNumSamples(){return this._ambientBakeNumSamples}set ambientBakeSpherePart(e){this._ambientBakeSpherePart=Y.clamp(e,.001,1)}get ambientBakeSpherePart(){return this._ambientBakeSpherePart}set clusteredLightingEnabled(e){if(this.device.isWebGPU&&!e){y.warnOnce("WebGPU currently only supports clustered lighting, and this cannot be disabled.");return}if(!this._clusteredLightingEnabled&&e){console.error("Turning on disabled clustered lighting is not currently supported");return}this._clusteredLightingEnabled=e}get clusteredLightingEnabled(){return this._clusteredLightingEnabled}set envAtlas(e){e!==this._envAtlas&&(this._envAtlas=e,e&&(e.addressU=me,e.addressV=me,e.minFilter=yt,e.magFilter=yt,e.mipmaps=!1),this._prefilteredCubemaps=[],this._internalEnvAtlas&&(this._internalEnvAtlas.destroy(),this._internalEnvAtlas=null),this._resetSkyMesh())}get envAtlas(){return this._envAtlas}set layers(e){const s=this._layers;this._layers=e,this.fire("set:layers",s,e)}get layers(){return this._layers}get sky(){return this._sky}get lighting(){return this._lightingParams}get fog(){return this._fogParams}set lightmapFilterRange(e){this._lightmapFilterRange=Math.max(e,.001)}get lightmapFilterRange(){return this._lightmapFilterRange}set lightmapFilterSmoothness(e){this._lightmapFilterSmoothness=Math.max(e,.001)}get lightmapFilterSmoothness(){return this._lightmapFilterSmoothness}set prefilteredCubemaps(e){e=e||[];const s=this._prefilteredCubemaps;(s.length!==e.length||s.some((r,a)=>r!==e[a]))&&(e.length===6&&e.every(a=>!!a)?(this._internalEnvAtlas=My.generatePrefilteredAtlas(e,{target:this._internalEnvAtlas}),this._envAtlas=this._internalEnvAtlas):(this._internalEnvAtlas&&(this._internalEnvAtlas.destroy(),this._internalEnvAtlas=null),this._envAtlas=null),this._prefilteredCubemaps=e.slice(),this._resetSkyMesh())}get prefilteredCubemaps(){return this._prefilteredCubemaps}set skybox(e){e!==this._skyboxCubeMap&&(this._skyboxCubeMap=e,this._resetSkyMesh())}get skybox(){return this._skyboxCubeMap}set skyboxIntensity(e){e!==this._skyboxIntensity&&(this._skyboxIntensity=e,this._resetSkyMesh())}get skyboxIntensity(){return this._skyboxIntensity}set skyboxLuminance(e){e!==this._skyboxLuminance&&(this._skyboxLuminance=e,this._resetSkyMesh())}get skyboxLuminance(){return this._skyboxLuminance}set skyboxMip(e){e!==this._skyboxMip&&(this._skyboxMip=e,this._resetSkyMesh())}get skyboxMip(){return this._skyboxMip}set skyboxHighlightMultiplier(e){e!==this._skyboxHighlightMultiplier&&(this._skyboxHighlightMultiplier=e,this._resetSkyMesh())}get skyboxHighlightMultiplier(){return this._skyboxHighlightMultiplier}set skyboxRotation(e){if(!this._skyboxRotation.equals(e)){const s=e.equals(ue.IDENTITY);this._skyboxRotation.copy(e),s?this._skyboxRotationMat3.setIdentity():(this._skyboxRotationMat4.setTRS(A.ZERO,e,A.ONE),this._skyboxRotationMat3.invertMat4(this._skyboxRotationMat4)),!this._skyboxRotationShaderInclude&&!s&&(this._skyboxRotationShaderInclude=!0,this._resetSkyMesh())}}get skyboxRotation(){return this._skyboxRotation}destroy(){this._resetSkyMesh(),this.root=null,this.off()}drawLine(e,s,i=ae.WHITE,r=!0,a=this.defaultDrawLayer){this.immediate.getBatch(a,r).addLines([e,s],[i,i])}drawLines(e,s,i=!0,r=this.defaultDrawLayer){this.immediate.getBatch(r,i).addLines(e,s)}drawLineArrays(e,s,i=!0,r=this.defaultDrawLayer){this.immediate.getBatch(r,i).addLinesArrays(e,s)}applySettings(e){const s=e.physics,i=e.render;this._gravity.set(s.gravity[0],s.gravity[1],s.gravity[2]),this.ambientLight.set(i.global_ambient[0],i.global_ambient[1],i.global_ambient[2]),this.ambientLuminance=i.ambientLuminance,this.fog.type=i.fog,this.fog.color.set(i.fog_color[0],i.fog_color[1],i.fog_color[2]),this.fog.start=i.fog_start,this.fog.end=i.fog_end,this.fog.density=i.fog_density,this.lightmapSizeMultiplier=i.lightmapSizeMultiplier,this.lightmapMaxResolution=i.lightmapMaxResolution,this.lightmapMode=i.lightmapMode,this.exposure=i.exposure,this._skyboxIntensity=i.skyboxIntensity??1,this._skyboxLuminance=i.skyboxLuminance??2e4,this._skyboxMip=i.skyboxMip??0,i.skyboxRotation&&(this.skyboxRotation=new ue().setFromEulerAngles(i.skyboxRotation[0],i.skyboxRotation[1],i.skyboxRotation[2])),this.sky.applySettings(i),this.clusteredLightingEnabled=i.clusteredLightingEnabled??!1,this.lighting.applySettings(i),["lightmapFilterEnabled","lightmapFilterRange","lightmapFilterSmoothness","ambientBake","ambientBakeNumSamples","ambientBakeSpherePart","ambientBakeOcclusionBrightness","ambientBakeOcclusionContrast"].forEach(r=>{i.hasOwnProperty(r)&&(this[r]=i[r])}),this._resetSkyMesh()}_getSkyboxTex(){const e=this._prefilteredCubemaps;return this._skyboxMip?e[[0,1,3,4,5,6][this._skyboxMip]]||this._envAtlas||e[0]||this._skyboxCubeMap:this._skyboxCubeMap||e[0]||this._envAtlas}_updateSkyMesh(){this.sky.skyMesh||this.sky.updateSkyMesh(),this.sky.update()}_resetSkyMesh(){this.sky.resetSkyMesh(),this.updateShaders=!0}setSkybox(e){e?(this.skybox=e[0]||null,e[1]&&!e[1].cubemap?this.envAtlas=e[1]:this.prefilteredCubemaps=e.slice(1)):(this.skybox=null,this.envAtlas=null)}get lightmapPixelFormat(){return this.lightmapHDR&&this.device.getRenderableHdrFormat()||Fe}}h(Tt,"EVENT_SETLAYERS","set:layers"),h(Tt,"EVENT_SETSKYBOX","set:skybox"),h(Tt,"EVENT_PRERENDER","prerender"),h(Tt,"EVENT_POSTRENDER","postrender"),h(Tt,"EVENT_PRERENDER_LAYER","prerender:layer"),h(Tt,"EVENT_POSTRENDER_LAYER","postrender:layer"),h(Tt,"EVENT_PRECULL","precull"),h(Tt,"EVENT_POSTCULL","postcull");class Vy{constructor(t,e,s){this.device=t,this.inverseBindPose=e,this.boneNames=s}}const Yb=[0,0,1,0,0,1,0,0,1,0,0,1],Kb=[0,1,3,2,3,1];class Zb extends Se{constructor(t,e){super(),this._device=t,this._pixelsPerUnit=e&&e.pixelsPerUnit!==void 0?e.pixelsPerUnit:1,this._renderMode=e&&e.renderMode!==void 0?e.renderMode:hi,this._atlas=e&&e.atlas!==void 0?e.atlas:null,this._frameKeys=e&&e.frameKeys!==void 0?e.frameKeys:null,this._meshes=[],this._updatingProperties=!1,this._meshesDirty=!1,this._atlas&&this._frameKeys&&this._createMeshes()}set frameKeys(t){this._frameKeys=t,this._atlas&&this._frameKeys&&(this._updatingProperties?this._meshesDirty=!0:this._createMeshes()),this.fire("set:frameKeys",t)}get frameKeys(){return this._frameKeys}set atlas(t){t!==this._atlas&&(this._atlas&&(this._atlas.off("set:frames",this._onSetFrames,this),this._atlas.off("set:frame",this._onFrameChanged,this),this._atlas.off("remove:frame",this._onFrameRemoved,this)),this._atlas=t,this._atlas&&this._frameKeys&&(this._atlas.on("set:frames",this._onSetFrames,this),this._atlas.on("set:frame",this._onFrameChanged,this),this._atlas.on("remove:frame",this._onFrameRemoved,this),this._updatingProperties?this._meshesDirty=!0:this._createMeshes()),this.fire("set:atlas",t))}get atlas(){return this._atlas}set pixelsPerUnit(t){this._pixelsPerUnit!==t&&(this._pixelsPerUnit=t,this.fire("set:pixelsPerUnit",t),this._atlas&&this._frameKeys&&this.renderMode===hi&&(this._updatingProperties?this._meshesDirty=!0:this._createMeshes()))}get pixelsPerUnit(){return this._pixelsPerUnit}set renderMode(t){if(this._renderMode===t)return;const e=this._renderMode;this._renderMode=t,this.fire("set:renderMode",t),(e===hi||t===hi)&&this._atlas&&this._frameKeys&&(this._updatingProperties?this._meshesDirty=!0:this._createMeshes())}get renderMode(){return this._renderMode}get meshes(){return this._meshes}_createMeshes(){const t=this._meshes.length;for(let i=0;i<t;i++){const r=this._meshes[i];r&&r.destroy()}const e=this._frameKeys.length;this._meshes=new Array(e);const s=this.renderMode===At||this._renderMode===Ct?this._create9SliceMesh:this._createSimpleMesh;for(let i=0;i<e;i++){const r=this._atlas.frames[this._frameKeys[i]];this._meshes[i]=r?s.call(this,r):null}this.fire("set:meshes")}_createSimpleMesh(t){const e=t.rect,s=this._atlas.texture.width,i=this._atlas.texture.height,r=e.z/this._pixelsPerUnit,a=e.w/this._pixelsPerUnit,n=t.pivot.x,o=t.pivot.y,c=[-n*r,-o*a,0,(1-n)*r,-o*a,0,(1-n)*r,(1-o)*a,0,-n*r,(1-o)*a,0],d=e.x/s,f=1-e.y/i,u=(e.x+e.z)/s,p=1-(e.y+e.w)/i,m=[d,f,u,f,u,p,d,p],_=new va;return _.positions=c,_.normals=Yb,_.uvs=m,_.indices=Kb,Ve.fromGeometry(this._device,_)}_create9SliceMesh(){const t=J.ONE,e=3,s=3,i=[],r=[],a=[],n=[];let o=0;for(let d=0;d<=e;d++){const f=d===0||d===e?0:1;for(let u=0;u<=s;u++){const p=-t.x+2*t.x*(d<=1?0:3)/e,m=0,_=-(-t.y+2*t.y*(u<=1?0:3)/s),S=u===0||u===s?0:1;i.push(-p,m,_),r.push(0,1,0),a.push(f,S),d<e&&u<s&&(n.push(o+s+1,o+1,o),n.push(o+s+1,o+s+2,o+1)),o++}}const c=new va;return c.positions=i,c.normals=r,c.uvs=a,c.indices=n,Ve.fromGeometry(this._device,c)}_onSetFrames(t){this._updatingProperties?this._meshesDirty=!0:this._createMeshes()}_onFrameChanged(t,e){const s=this._frameKeys.indexOf(t);s<0||(e?this.renderMode===hi&&(this._meshes[s]=this._createSimpleMesh(e)):this._meshes[s]=null,this.fire("set:meshes"))}_onFrameRemoved(t){const e=this._frameKeys.indexOf(t);e<0||(this._meshes[e]=null,this.fire("set:meshes"))}startUpdate(){this._updatingProperties=!0,this._meshesDirty=!1}endUpdate(){this._updatingProperties=!1,this._meshesDirty&&this._atlas&&this._frameKeys&&this._createMeshes(),this._meshesDirty=!1}destroy(){for(const t of this._meshes)t&&t.destroy();this._meshes.length=0}}class Qb extends Se{constructor(){super(),this._texture=null,this._frames=null}set texture(t){this._texture=t,this.fire("set:texture",t)}get texture(){return this._texture}set frames(t){this._frames=t,this.fire("set:frames",t)}get frames(){return this._frames}setFrame(t,e){let s=this._frames[t];s?(s.rect.copy(e.rect),s.pivot.copy(e.pivot),s.border.copy(e.border)):(s={rect:e.rect.clone(),pivot:e.pivot.clone(),border:e.border.clone()},this._frames[t]=s),this.fire("set:frame",t.toString(),s)}removeFrame(t){const e=this._frames[t];e&&(delete this._frames[t],this.fire("remove:frame",t.toString(),e))}destroy(){this._texture&&this._texture.destroy()}}class O_{constructor(t,e,s,i){this.time=t,this.position=e,this.rotation=s,this.scale=i}}class F_{constructor(){this._name="",this._keys=[]}}class N_{constructor(){h(this,"name","");h(this,"duration",0);this._nodes=[],this._nodeDict={}}getNode(t){return this._nodeDict[t]}addNode(t){this._nodes.push(t),this._nodeDict[t._name]=t}get nodes(){return this._nodes}}class Jb{constructor(){this._written=!1,this._name="",this._keyFrames=[],this._quat=new ue,this._pos=new A,this._scale=new A,this._targetNode=null}getTarget(){return this._targetNode}setTarget(t){this._targetNode=t}}class Zd{constructor(t){h(this,"looping",!0);this._animation=null,this._time=0,this._interpolatedKeys=[],this._interpolatedKeyDict={},this._currKeyIndices={},this.graph=null;const e=s=>{const i=new Jb;i._name=s.name,this._interpolatedKeys.push(i),this._interpolatedKeyDict[s.name]=i,this._currKeyIndices[s.name]=0;for(let r=0;r<s._children.length;r++)e(s._children[r])};e(t)}set animation(t){this._animation=t,this.currentTime=0}get animation(){return this._animation}set currentTime(t){this._time=t;const e=this._interpolatedKeys.length;for(let s=0;s<e;s++){const r=this._interpolatedKeys[s]._name;this._currKeyIndices[r]=0}this.addTime(0),this.updateGraph()}get currentTime(){return this._time}get numNodes(){return this._interpolatedKeys.length}addTime(t){if(this._animation!==null){const e=this._animation._nodes,s=this._animation.duration;if(this._time===s&&!this.looping)return;if(this._time+=t,this._time>s){this._time=this.looping?0:s;for(let r=0;r<e.length;r++){const n=e[r]._name;this._currKeyIndices[n]=0}}else if(this._time<0){this._time=this.looping?s:0;for(let r=0;r<e.length;r++){const a=e[r],n=a._name;this._currKeyIndices[n]=a._keys.length-2}}const i=t>=0?1:-1;for(let r=0;r<e.length;r++){const a=e[r],n=a._name,o=a._keys,c=this._interpolatedKeyDict[n];if(c===void 0){y.warn(`Unknown skeleton node name: ${n}`);continue}let d=!1;if(o.length!==1)for(let f=this._currKeyIndices[n];f<o.length-1&&f>=0;f+=i){const u=o[f],p=o[f+1];if(u.time<=this._time&&p.time>=this._time){const m=(this._time-u.time)/(p.time-u.time);c._pos.lerp(u.position,p.position,m),c._quat.slerp(u.rotation,p.rotation,m),c._scale.lerp(u.scale,p.scale,m),c._written=!0,this._currKeyIndices[n]=f,d=!0;break}}(o.length===1||!d&&this._time===0&&this.looping)&&(c._pos.copy(o[0].position),c._quat.copy(o[0].rotation),c._scale.copy(o[0].scale),c._written=!0)}}}blend(t,e,s){const i=this._interpolatedKeys.length;for(let r=0;r<i;r++){const a=t._interpolatedKeys[r],n=e._interpolatedKeys[r],o=this._interpolatedKeys[r];a._written&&n._written?(o._quat.slerp(a._quat,e._interpolatedKeys[r]._quat,s),o._pos.lerp(a._pos,e._interpolatedKeys[r]._pos,s),o._scale.lerp(a._scale,n._scale,s),o._written=!0):a._written?(o._quat.copy(a._quat),o._pos.copy(a._pos),o._scale.copy(a._scale),o._written=!0):n._written&&(o._quat.copy(n._quat),o._pos.copy(n._pos),o._scale.copy(n._scale),o._written=!0)}}setGraph(t){if(this.graph=t,t)for(let e=0;e<this._interpolatedKeys.length;e++){const s=this._interpolatedKeys[e],i=t.findByName(s._name);this._interpolatedKeys[e].setTarget(i)}else for(let e=0;e<this._interpolatedKeys.length;e++)this._interpolatedKeys[e].setTarget(null)}updateGraph(){if(this.graph)for(let t=0;t<this._interpolatedKeys.length;t++){const e=this._interpolatedKeys[t];if(e._written){const s=e.getTarget();s.localPosition.copy(e._pos),s.localRotation.copy(e._quat),s.localScale.copy(e._scale),s._dirtyLocal||s._dirtifyLocal(),e._written=!1}}}}const Us=4/64,si=1-Us*2;class Hp extends va{constructor(t,e,s,i,r,a){super();const n=new A,o=new A,c=new A,d=new A,f=new A,u=new A,p=[],m=[],_=[],S=[],g=[];let v;if(s>0)for(let w=0;w<=i;w++)for(let x=0;x<=r;x++){const b=x/r*2*Math.PI-Math.PI,C=Math.sin(b),D=Math.cos(b);f.set(C*t,-s/2,D*t),d.set(C*e,s/2,D*e),n.lerp(f,d,w/i),o.sub2(d,f).normalize(),u.set(D,0,-C),c.cross(u,o).normalize(),p.push(n.x,n.y,n.z),m.push(c.x,c.y,c.z);let T=x/r,I=w/i;_.push(T,1-I);const L=I;if(I=T,T=L,T=T*si+Us,I=I*si+Us,T/=3,S.push(T,1-I),w<i&&x<r){const E=w*(r+1)+x,F=w*(r+1)+(x+1),k=(w+1)*(r+1)+x,H=(w+1)*(r+1)+(x+1);g.push(E,F,k),g.push(F,H,k)}}if(a){const w=Math.floor(r/2),x=r,b=s/2;for(let C=0;C<=w;C++){const D=C*Math.PI*.5/w,T=Math.sin(D),I=Math.cos(D);for(let L=0;L<=x;L++){const E=L*2*Math.PI/x-Math.PI/2,F=Math.sin(E),H=Math.cos(E)*T,G=I,W=F*T;let R=1-L/x,B=1-C/w;p.push(H*e,G*e+b,W*e),m.push(H,G,W),_.push(R,1-B),R=R*si+Us,B=B*si+Us,R/=3,B/=3,R+=1/3,S.push(R,1-B)}}v=(i+1)*(r+1);for(let C=0;C<w;++C)for(let D=0;D<x;++D){const T=C*(x+1)+D,I=T+x+1;g.push(v+T+1,v+I,v+T),g.push(v+T+1,v+I+1,v+I)}for(let C=0;C<=w;C++){const D=Math.PI*.5+C*Math.PI*.5/w,T=Math.sin(D),I=Math.cos(D);for(let L=0;L<=x;L++){const E=L*2*Math.PI/x-Math.PI/2,F=Math.sin(E),H=Math.cos(E)*T,G=I,W=F*T;let R=1-L/x,B=1-C/w;p.push(H*e,G*e-b,W*e),m.push(H,G,W),_.push(R,1-B),R=R*si+Us,B=B*si+Us,R/=3,B/=3,R+=2/3,S.push(R,1-B)}}v=(i+1)*(r+1)+(x+1)*(w+1);for(let C=0;C<w;++C)for(let D=0;D<x;++D){const T=C*(x+1)+D,I=T+x+1;g.push(v+T+1,v+I,v+T),g.push(v+T+1,v+I+1,v+I)}}else{if(v=(i+1)*(r+1),t>0)for(let w=0;w<r;w++){const x=w/r*2*Math.PI,b=Math.sin(x),C=-s/2,D=Math.cos(x);let T=1-(b+1)/2,I=(D+1)/2;p.push(b*t,C,D*t),m.push(0,-1,0),_.push(T,1-I),T=T*si+Us,I=I*si+Us,T/=3,I/=3,T+=1/3,S.push(T,1-I),w>1&&g.push(v,v+w,v+w-1)}if(v+=r,e>0)for(let w=0;w<r;w++){const x=w/r*2*Math.PI,b=Math.sin(x),C=s/2,D=Math.cos(x);let T=1-(b+1)/2,I=(D+1)/2;p.push(b*e,C,D*e),m.push(0,1,0),_.push(T,1-I),T=T*si+Us,I=I*si+Us,T/=3,I/=3,T+=2/3,S.push(T,1-I),w>1&&g.push(v,v+w-1,v+w)}}this.positions=p,this.normals=m,this.uvs=_,this.uvs1=S,this.indices=g}}class eA extends Hp{constructor(t={}){const e=t.radius??.3,s=t.height??1,i=t.heightSegments??1,r=t.sides??20;super(e,e,s-2*e,i,r,!0),t.calculateTangents&&(this.tangents=Pr(this.positions,this.normals,this.uvs,this.indices))}}class tA extends Hp{constructor(t={}){const e=t.baseRadius??.5,s=t.peakRadius??0,i=t.height??1,r=t.heightSegments??5,a=t.capSegments??18;super(e,s,i,r,a,!1),t.calculateTangents&&(this.tangents=Pr(this.positions,this.normals,this.uvs,this.indices))}}class sA extends Hp{constructor(t={}){const e=t.radius??.5,s=t.height??1,i=t.heightSegments??5,r=t.capSegments??20;super(e,e,s,i,r,!1),t.calculateTangents&&(this.tangents=Pr(this.positions,this.normals,this.uvs,this.indices))}}class iA extends va{constructor(t={}){super();const e=t.halfExtents??new J(.5,.5),s=t.widthSegments??5,i=t.lengthSegments??5,r=[],a=[],n=[],o=[];let c=0;for(let d=0;d<=s;d++)for(let f=0;f<=i;f++){const u=-e.x+2*e.x*d/s,p=0,m=-(-e.y+2*e.y*f/i),_=d/s,S=f/i;r.push(u,p,m),a.push(0,1,0),n.push(_,1-S),d<s&&f<i&&(o.push(c+i+1,c+1,c),o.push(c+i+1,c+i+2,c+1)),c++}this.positions=r,this.normals=a,this.uvs=n,this.uvs1=n,this.indices=o,t.calculateTangents&&(this.tangents=Pr(r,a,n,o))}}class rA extends va{constructor(t={}){super();const e=t.tubeRadius??.2,s=t.ringRadius??.3,i=(t.sectorAngle??360)*Y.DEG_TO_RAD,r=t.segments??30,a=t.sides??20,n=[],o=[],c=[],d=[];for(let f=0;f<=a;f++)for(let u=0;u<=r;u++){const p=Math.cos(i*u/r)*(s+e*Math.cos(2*Math.PI*f/a)),m=Math.sin(2*Math.PI*f/a)*e,_=Math.sin(i*u/r)*(s+e*Math.cos(2*Math.PI*f/a)),S=Math.cos(i*u/r)*Math.cos(2*Math.PI*f/a),g=Math.sin(2*Math.PI*f/a),v=Math.sin(i*u/r)*Math.cos(2*Math.PI*f/a),w=f/a,x=1-u/r;if(n.push(p,m,_),o.push(S,g,v),c.push(w,1-x),f<a&&u<r){const b=f*(r+1)+u,C=(f+1)*(r+1)+u,D=f*(r+1)+(u+1),T=(f+1)*(r+1)+(u+1);d.push(b,C,D),d.push(C,T,D)}}this.positions=n,this.normals=o,this.uvs=c,this.uvs1=c,this.indices=d,t.calculateTangents&&(this.tangents=Pr(n,o,c,d))}}class aA{constructor(t,e){h(this,"processedCache",new Map);h(this,"definitionsCache",new Map);h(this,"_generators",new Map);this._device=t,this._isClearingCache=!1,this._precached=!1,this._programsCollection=[],this._defaultStdMatOption=new tl,this._defaultStdMatOptionMin=new tl;const s=new Dy;e.shaderOptBuilder.updateRef(this._defaultStdMatOption,{},s,e,null,[],Ea,null),e.shaderOptBuilder.updateMinRef(this._defaultStdMatOptionMin,{},e,null,Fp,null),t.on("destroy:shader",i=>{this.removeFromCache(i)})}destroy(){this.clearCache()}register(t,e){this._generators.has(t)||this._generators.set(t,e)}unregister(t){this._generators.has(t)&&this._generators.delete(t)}isRegistered(t){return this._generators.has(t)}generateShaderDefinition(t,e,s,i){var a,n;let r=this.definitionsCache.get(s);if(!r){let o;(a=i.litOptions)!=null&&a.lights&&(o=i.litOptions.lights,i.litOptions.lights=o.map(d=>{const f=d.clone?d.clone():d;return f.key=d.key,f})),this.storeNewProgram(e,i),(n=i.litOptions)!=null&&n.lights&&(i.litOptions.lights=o),this._precached&&y.log(`ProgramLibrary#getProgram: Cache miss for shader ${e} key ${s} after shaders precaching`);const c=this._device;r=t.createShaderDefinition(c,i),r.name=r.name??(i.pass?`${e}-pass:${i.pass}`:e),this.definitionsCache.set(s,r)}return r}getCachedShader(t){return this.processedCache.get(t)}setCachedShader(t,e){this.processedCache.set(t,e)}getProgram(t,e,s,i){const r=this._generators.get(t);if(!r)return y.warn(`ProgramLibrary#getProgram: No program library functions registered for: ${t}`),null;const a=r.generateKey(e),n=ci(a),o=s.generateKey(this._device),c=ci(o),d=`${n}#${c}`;let f=this.getCachedShader(d);if(!f){const u=this.generateShaderDefinition(r,t,n,e);y.assert(u);let p="",m;e.pass!==void 0&&(m=Si.get(this._device).getByIndex(e.pass),p=`-${m.name}`),this._device.fire("shader:generate",{userMaterialId:i,shaderPassInfo:m,definition:u});const _={name:`${u.name}${p}-proc`,attributes:u.attributes,vshader:u.vshader,vincludes:u.vincludes,fincludes:u.fincludes,fshader:u.fshader,processingOptions:s,shaderLanguage:u.shaderLanguage,meshUniformBufferFormat:u.meshUniformBufferFormat,meshBindGroupFormat:u.meshBindGroupFormat};f=new sy(this._device,_),y.call(()=>{f._generationKey=a,f._processingKey=o}),this.setCachedShader(d,f)}return f}storeNewProgram(t,e){let s={};if(t==="standard"){const i=this._getDefaultStdMatOptions(e.pass);for(const r in e)(e.hasOwnProperty(r)&&i[r]!==e[r]||r==="pass")&&(s[r]=e[r]);for(const r in e.litOptions)s[r]=e.litOptions[r]}else s=e;this._programsCollection.push(JSON.stringify({name:t,options:s}))}dumpPrograms(){let t=`let device = pc.app ? pc.app.graphicsDevice : pc.Application.getApplication().graphicsDevice;
`;t+="let shaders = [",this._programsCollection[0]&&(t+=`
	${this._programsCollection[0]}`);for(let s=1;s<this._programsCollection.length;++s)t+=`,
	${this._programsCollection[s]}`;t+=`
];
`,t+=`pc.getProgramLibrary(device).precompile(shaders);
`,t+=`if (pc.version != "${an}" || pc.revision != "${eS}")
`,t+='	console.warn("precompile-shaders.js: engine version mismatch, rebuild shaders lib with current engine");';const e=document.createElement("a");e.setAttribute("href",`data:text/plain;charset=utf-8,${encodeURIComponent(t)}`),e.setAttribute("download","precompile-shaders.js"),e.style.display="none",document.body.appendChild(e),e.click(),document.body.removeChild(e)}clearCache(){this._isClearingCache=!0,this.processedCache.forEach(t=>{t.destroy()}),this.processedCache.clear(),this._isClearingCache=!1}removeFromCache(t){this._isClearingCache||this.processedCache.forEach((e,s)=>{t===e&&this.processedCache.delete(s)})}_getDefaultStdMatOptions(t){const e=Si.get(this._device).getByIndex(t);return t===Wn||t===wl||e.isShadow?this._defaultStdMatOptionMin:this._defaultStdMatOption}precompile(t){if(t){const e=new Array(t.length);for(let s=0;s<t.length;s++){if(t[s].name==="standard"){const i=t[s].options,r=this._getDefaultStdMatOptions(i.pass);for(const a in r)r.hasOwnProperty(a)&&i[a]===void 0&&(i[a]=r[a])}e[s]=this.getProgram(t[s].name,t[s].options)}}this._precached=!0}}async function nA(){globalThis.numSplats=0,globalThis.properties={},globalThis.releaseSeqDataTask=[];const l=new Float32Array(1),t=new Int32Array(l.buffer),e=u=>{const p=(u&32768)>>15,m=(u&31744)>>10,_=u&1023;if(m===0)if(_===0)t[0]=p<<31;else{let S=0,g=_;for(;(g&512)===0;)g<<=1,S++;g&=1023;const v=113-S<<23,w=g<<13;t[0]=p<<31|v|w}else if(m===31)_===0?t[0]=p<<31|2139095040:t[0]=p<<31|2143289344|_<<13;else{const S=m+112<<23,g=_<<13;t[0]=p<<31|S|g}return l[0]};self.onmessage=async u=>{const{data:p}=u;switch(p.type){case"initWorker":globalThis.numSplats=0,globalThis.properties={},globalThis.releaseSeqDataTask=[];break;case"appendGSplatData":r(p.properties,p.numSplats,p.timeIndex,p.timeOption);break;case"getTransformData":a(p.transformData);break;case"releaseSeqData":c(p.index);break;case"releaseAllSeqData":d();break;case"destroyWorker":f();break;case"calcAabb":i();break}};const s=()=>({9:1,24:2,45:3})[(()=>{for(let m=0;m<45;++m)if(!globalThis.properties[`f_rest_${m}`])return m;return 45})()]??0,i=()=>{const u=new Float32Array(3),p=new Float32Array(3);let m=1/0,_=1/0,S=1/0,g=-1/0,v=-1/0,w=-1/0;for(let x=0;x<globalThis.numSplats;){const b=globalThis.properties.position[x*3+0],C=globalThis.properties.position[x*3+1],D=globalThis.properties.position[x*3+2],T=Math.max(e(globalThis.properties.scale[x*3+0]),e(globalThis.properties.scale[x*3+1]),e(globalThis.properties.scale[x*3+2]));if(isFinite(b)&&isFinite(C)&&isFinite(D)&&isFinite(T)){const I=2*T;m=Math.min(m,b-I),_=Math.min(_,C-I),S=Math.min(S,D-I),g=Math.max(g,b+I),v=Math.max(v,C+I),w=Math.max(w,D+I)}if(globalThis.numSplats<1e3)x+=2;else{const I=Math.floor(globalThis.numSplats/1e3);x+=I}}m!==1/0&&(u[0]=(m+g)*.5,u[1]=(_+v)*.5,u[2]=(S+w)*.5,p[0]=(g-m)*.5,p[1]=(v-_)*.5,p[2]=(w-S)*.5),self.postMessage({type:"newAabbData",center:u,halfExtents:p})},r=(u,p,m,_)=>{const S=Object.keys(u),g=globalThis.numSplats,v=globalThis.releaseSeqDataTask.map(x=>{const b=globalThis.properties.time_index.findIndex(D=>D===x);let C=globalThis.properties.time_index.findIndex((D,T)=>D!==x&&T>b);return b===-1?[-1,-1]:(C===-1&&b!==-1&&(C=globalThis.properties.time_index.length),[b,C])}).filter(x=>!(x[0]===-1&&x[1]===-1)).sort((x,b)=>x[0]-b[0]);globalThis.releaseSeqDataTask=[],v.forEach(x=>{globalThis.numSplats-=x[1]-x[0]}),globalThis.numSplats+=p;for(let x=0;x<S.length;x++){const b=S[x],C=u[b];if(C){const D=globalThis.properties[b]??new C.constructor(0);let T=1;switch(b){case"position":T=3;break;case"color_opacity":T=4;break;case"scale":T=3;break;case"motion":T=3;break;case"rotation":T=3;break;default:T=1;break}let I=null;D.length>=globalThis.numSplats*T?I=D:I=new C.constructor(Math.ceil(globalThis.numSplats*1.1)*T);let L=0;for(let E=0;E<v.length;E++){let F=0,k=g;E>0&&(F=v[E-1][1]),E<v.length-1&&(k=v[E+1][0]);const H=v[E][0],G=v[E][1];H===0?(I.set(D.subarray(G*T,k*T),L),L+=(k-G)*T):(I.set(D.subarray(F*T,H*T),L),L+=(H-F)*T,I.set(D.subarray(G*T,k*T),L),L+=(k-G)*T)}v.length===0&&(I.set(D.subarray(0,g*T),L),L=g*T),I.set(C.subarray(0,p*T),L),L+=p*T,globalThis.properties[b]=I}}const w=Object.keys(u).map(x=>u[x].buffer);self.postMessage({type:"newAppendData",returnedProperties:u},w)},a=u=>{var I,L,E,F,k,H;const p=globalThis.numSplats,m=globalThis.properties.t,_=globalThis.properties.t_scale,S=globalThis.properties.time_index,g=(m==null?void 0:m.length)>0;if(!u.dataPosition||((I=u.dataPosition)==null?void 0:I.length)<p*3){console.log("____ ENGINE IVAN","不复用内存 gsplatDataWorker getTransformData",p);const G=p;u.center=new Float32Array(3),u.halfExtents=new Float32Array(3),u.dataPosition=new Float32Array(G*3),u.dataScale=new Uint16Array(G*3),u.dataRotation=new Float32Array(G*3),u.dataColor=new Uint16Array(G*4),u.muT=new Float32Array(G),u.timeIndex=new Float32Array(G),g&&(u.dataMotion=new Float32Array(G*3),u.dataTime=new Float32Array(G*3),u.tScaleArray=new Float32Array(G))}else console.log("____ ENGINE IVAN","复用内存 gsplatDataWorker getTransformData",p);if(u.muT.set((m==null?void 0:m.subarray(0,p))??new Float32Array(0)),u.timeIndex.set((S==null?void 0:S.subarray(0,p))??new Float32Array(0)),u.dataPosition.set(((L=globalThis.properties)==null?void 0:L.position.subarray(0,p*3))??new Float32Array(0)),u.dataScale.set(((E=globalThis.properties.scale)==null?void 0:E.subarray(0,p*3))??new Uint16Array(0)),u.dataRotation.set(((F=globalThis.properties.rotation)==null?void 0:F.subarray(0,p*3))??new Float32Array(0)),u.dataColor.set(((k=globalThis.properties.color_opacity)==null?void 0:k.subarray(0,p*4))??new Uint16Array(0)),g&&(u.dataMotion.set(((H=globalThis.properties.motion)==null?void 0:H.subarray(0,p*3))??new Float32Array(0)),u.tScaleArray.set((_==null?void 0:_.subarray(0,p))??new Float32Array(0))),g)for(let G=0;G<p;++G)u.dataTime[G*3+0]=m?m[G]:0,u.dataTime[G*3+1]=u.tScaleArray[G];let v=1/0,w=1/0,x=1/0,b=-1/0,C=-1/0,D=-1/0;for(let G=0;G<p;){const W=globalThis.properties.position[G*3+0],R=globalThis.properties.position[G*3+1],B=globalThis.properties.position[G*3+2],V=Math.max(e(globalThis.properties.scale[G*3+0]),e(globalThis.properties.scale[G*3+1]),e(globalThis.properties.scale[G*3+2]));if(isFinite(W)&&isFinite(R)&&isFinite(B)&&isFinite(V)){const O=2*V;v=Math.min(v,W-O),w=Math.min(w,R-O),x=Math.min(x,B-O),b=Math.max(b,W+O),C=Math.max(C,R+O),D=Math.max(D,B+O)}if(p<1e3)G+=2;else{const O=Math.floor(globalThis.numSplats/1e3);G+=O}}v!==1/0&&(u.center[0]=(v+b)*.5,u.center[1]=(w+C)*.5,u.center[2]=(x+D)*.5,u.halfExtents[0]=(b-v)*.5,u.halfExtents[1]=(C-w)*.5,u.halfExtents[2]=(D-x)*.5),o(u);const T=Object.keys(u).map(G=>u[G].buffer);self.postMessage({type:"newTransformData",numSplats:globalThis.numSplats,transformData:u},T)},n=u=>{const p=[];for(let m=0;m<u;++m)p.push(globalThis.properties[`f_rest_${m}`]);return p},o=u=>{var C;const p=s();if(p<=0)return;const m={1:3,2:8,3:15}[p],_=globalThis.numSplats;if(!u.sh1to3Data||((C=u.sh1to3Data)==null?void 0:C.length)<_*4){console.log("____ ENGINE IVAN","不复用内存 gsplatDataWorker updateSHData",_);const D=_;u.sh1to3Data=new Uint32Array(D*4),p>1&&(u.sh4to7Data=new Uint32Array(D*4),p>2&&(u.sh8to11Data=new Uint32Array(D*4),u.sh12to15Data=new Uint32Array(D*4)))}else console.log("____ ENGINE IVAN","复用内存 gsplatDataWorker updateSHData",_);const S=n(m*3),g=2047,v=1023;this.float32View||(this.float32View=new Float32Array(1),this.uint32View=new Uint32Array(this.float32View.buffer));const w=this.float32View,x=this.uint32View;(!this.coefficientsArray||this.coefficientsArray.length<m*3)&&(this.coefficientsArray=new Array(m*3));const b=this.coefficientsArray;b.fill(0);for(let D=0;D<_;++D){for(let I=0;I<m;++I)b[I*3]=S[I][D],b[I*3+1]=S[I+m][D],b[I*3+2]=S[I+m*2][D];let T=b[0];for(let I=1;I<m*3;++I)T=Math.max(T,Math.abs(b[I]));if(T!==0){for(let I=0;I<m;++I)b[I*3+0]=Math.max(0,Math.min(g,Math.floor((b[I*3+0]/T*.5+.5)*g+.5))),b[I*3+1]=Math.max(0,Math.min(v,Math.floor((b[I*3+1]/T*.5+.5)*v+.5))),b[I*3+2]=Math.max(0,Math.min(g,Math.floor((b[I*3+2]/T*.5+.5)*g+.5)));w[0]=T,u.sh1to3Data[D*4+0]=x[0],u.sh1to3Data[D*4+1]=b[0]<<21|b[1]<<11|b[2],u.sh1to3Data[D*4+2]=b[3]<<21|b[4]<<11|b[5],u.sh1to3Data[D*4+3]=b[6]<<21|b[7]<<11|b[8],p>1&&(u.sh4to7Data[D*4+0]=b[9]<<21|b[10]<<11|b[11],u.sh4to7Data[D*4+1]=b[12]<<21|b[13]<<11|b[14],u.sh4to7Data[D*4+2]=b[15]<<21|b[16]<<11|b[17],u.sh4to7Data[D*4+3]=b[18]<<21|b[19]<<11|b[20],p>2?(u.sh8to11Data[D*4+0]=b[21]<<21|b[22]<<11|b[23],u.sh8to11Data[D*4+1]=b[24]<<21|b[25]<<11|b[26],u.sh8to11Data[D*4+2]=b[27]<<21|b[28]<<11|b[29],u.sh8to11Data[D*4+3]=b[30]<<21|b[31]<<11|b[32],u.sh12to15Data[D*4+0]=b[33]<<21|b[34]<<11|b[35],u.sh12to15Data[D*4+1]=b[36]<<21|b[37]<<11|b[38],u.sh12to15Data[D*4+2]=b[39]<<21|b[40]<<11|b[41],u.sh12to15Data[D*4+3]=b[42]<<21|b[43]<<11|b[44]):u.sh8to11Data[D]=b[21]<<21|b[22]<<11|b[23])}}},c=u=>{globalThis.properties.time_index&&globalThis.releaseSeqDataTask.push(u)},d=()=>{const u=Object.keys(globalThis.properties);for(let p=0;p<u.length;p++){const m=u[p],_=globalThis.properties[m];_&&(globalThis.properties[m]=new _.constructor(0))}globalThis.numSplats=0},f=()=>{globalThis.properties={},globalThis.numSplats=0}}class oA extends Se{constructor(){super(),this.worker=new Worker(URL.createObjectURL(new Blob([`(${nA.toString()})()`],{type:"application/javascript"})))}async appendGSplatData(t,e,s,i){var r;return(r=this.worker)==null||r.postMessage({type:"appendGSplatData",properties:t,timeIndex:s,numSplats:e,timeOption:i},Object.keys(t).map(a=>t[a].buffer)),new Promise(a=>{this.worker.onmessage=n=>{if(!this.worker)return;const{data:o}=n;o.type==="newAppendData"&&a(o.returnedProperties)}})}async getTransformData(t){var e;return(e=this.worker)==null||e.postMessage({type:"getTransformData",transformData:t},Object.keys(t).map(s=>t[s].buffer)),new Promise(s=>{this.worker.onmessage=i=>{if(!this.worker)return;const{data:r}=i;r.type==="newTransformData"&&s(r)}})}async calcAabb(){var t;return(t=this.worker)==null||t.postMessage({type:"calcAabb"}),new Promise(e=>{this.worker.onmessage=s=>{if(!this.worker)return;const{data:i}=s;i.type==="newAabbData"&&e(i)}})}async releaseSeqData(t){var e;(e=this.worker)==null||e.postMessage({type:"releaseSeqData",index:t})}async releaseAllSeqData(){var t;(t=this.worker)==null||t.postMessage({type:"releaseAllSeqData"})}destroy(){var t;this.worker&&(this.worker.postMessage({type:"destroyWorker"}),(t=this.worker)==null||t.terminate(),this.worker=null)}}class Gy{constructor(t,e=[]){h(this,"elements");h(this,"numSplats",0);h(this,"comments");h(this,"is4D");h(this,"dataWorker");h(this,"shBands",0);h(this,"transformData");h(this,"returnedProperties");h(this,"destroy",()=>{var t;(t=this.dataWorker)==null||t.destroy(),this.dataWorker=null,this.returnedProperties={},this.transformData={centers:new Float32Array(0),dataPosition:new Float32Array(0),dataScale:new Uint16Array(0),dataRotation:new Float32Array(0),dataMotion:new Float32Array(0),dataTime:new Float32Array(0),tScaleArray:new Float32Array(0),muT:new Float32Array(0),timeIndex:new Float32Array(0),dataColor:new Uint16Array(0),sh1to3Data:new Uint32Array(0),sh4to7Data:new Uint32Array(0),sh8to11Data:new Uint32Array(0),sh12to15Data:new Uint32Array(0)}});this.elements=t,this.numSplats=0,this.comments=e,this.is4D=!0,this.shBands=0,this.dataWorker=null,this.returnedProperties={},this.transformData={centers:new Float32Array(0),dataPosition:new Float32Array(0),dataScale:new Uint16Array(0),dataRotation:new Float32Array(0),dataMotion:new Float32Array(0),dataTime:new Float32Array(0),tScaleArray:new Float32Array(0),muT:new Float32Array(0),timeIndex:new Float32Array(0),dataColor:new Uint16Array(0),sh1to3Data:new Uint32Array(0),sh4to7Data:new Uint32Array(0),sh8to11Data:new Uint32Array(0),sh12to15Data:new Uint32Array(0)}}async appendGSplatData(t,e,s,i){var n;let r=0;for(let o=0;o<i.length&&s>i[o];o+=2)r=o/2;console.log("____ ENGINE IVAN","GSplatData appendGSplatData",r),this.dataWorker||(this.dataWorker=new oA,await this.dataWorker.appendGSplatData({},0,0,i)),this.returnedProperties=await this.dataWorker.appendGSplatData(t,e,r,i);const a=await this.dataWorker.getTransformData(this.transformData);this.transformData=a.transformData,this.numSplats=(((n=this.transformData.dataPosition)==null?void 0:n.length)??3)/3,this.rawNumSplats=a.numSplats,console.log("____ ENGINE IVAN","GSplatData appendGSplatData numSplats",this.numSplats)}async releaseSeqData(t){var e;return console.log("____ ENGINE IVAN","GSplatData releaseSeqData",t),(e=this.dataWorker)==null||e.releaseSeqData(t),this}async releaseAllSeqData(){var t;return console.log("____ ENGINE IVAN","GSplatData release all SeqData"),(t=this.dataWorker)==null||t.releaseAllSeqData(),this}async getProp(t,e="vertex"){var s,i;return(i=(s=this.getElement(e))==null?void 0:s.properties.find(r=>r.name===t))==null?void 0:i.storage}async getElement(t){return this.elements.find(e=>e.name===t)}async calcAabbAsync(t){var s,i,r;if((s=this.transformData)!=null&&s.center&&((i=this.transformData)!=null&&i.halfExtents)){t.center.set(this.transformData.center[0],this.transformData.center[1],this.transformData.center[2]),t.halfExtents.set(this.transformData.halfExtents[0],this.transformData.halfExtents[1],this.transformData.halfExtents[2]);return}let e=await((r=this.dataWorker)==null?void 0:r.calcAabb());e||(e={center:[0,0,0],halfExtents:[2,2,2]}),t.center.set(e.center[0],e.center[1],e.center[2]),t.halfExtents.set(e.halfExtents[0],e.halfExtents[1],e.halfExtents[2])}get isCompressed(){return!1}}async function lA(){let l=0,t={},e={};self.onmessage=async f=>{const{data:u}=f;switch(u.type){case"initWorker":break;case"appendGSplatData":i(u.properties,u.timeIndex,u.timeOption);break;case"releaseSeqData":o(u.index);break;case"releaseAllSeqData":c();break;case"destroyWorker":d();break}};const s=()=>({9:1,24:2,45:3})[(()=>{for(let p=0;p<45;++p)if(!t[`f_rest_${p}`])return p;return 45})()]??0,i=(f,u,p)=>{var S,g;l+=(((S=f.position)==null?void 0:S.length)??0)/3,console.log("____ ENGINE IVAN","GSplatDecodedDataWorker appendGSplatData numSplats",l,(((g=f.position)==null?void 0:g.length)??0)/3);const m=Object.keys(f);for(let v=0;v<m.length;v++){const w=m[v],x=f[w],b=t[w]??new Float32Array(0);if(x){let C=null;switch(w){case"position":C=new Float32Array(l*3);break;case"color_opacity":C=new Uint16Array(l*4);break;case"scale":C=new Uint16Array(l*3);break;case"motion":C=new Float32Array(l*3);break;case"rotation":C=new Float32Array(l*3);break;default:C=new Float32Array(l);break}C.set(b,0),C.set(x,b.length),t[w]=C}}r();const _=Object.keys(e).map(v=>e[v].buffer);self.postMessage({type:"newAppendData",numSplats:l,transformData:e},_),e={}},r=()=>{var b,C;const f=(((b=t.position)==null?void 0:b.length)??0)/3,u=t.position,p=t.scale,m=t.rotation,_=t.motion,S=t.t,g=t.t_scale,v=t.time_index,w=t.color_opacity,x=(S==null?void 0:S.length)>0;!e.dataPosition||((C=e.dataPosition)==null?void 0:C.length)<f*3?(e.dataPosition=new Float32Array((u==null?void 0:u.buffer.slice())??new Float32Array(0)),e.dataColor=new Uint16Array((w==null?void 0:w.buffer.slice())??new Uint16Array(0)),e.dataScale=new Uint16Array((p==null?void 0:p.buffer.slice())??new Uint16Array(0)),e.dataRotation=new Float32Array((m==null?void 0:m.buffer.slice())??new Float32Array(0)),e.muT=new Float32Array((S==null?void 0:S.buffer.slice())??new Float32Array(0)),e.timeIndex=new Float32Array((v==null?void 0:v.buffer.slice())??new Float32Array(0)),x&&(e.dataTime=new Float32Array(f*3),e.tScaleArray=new Float32Array(f),e.dataMotion=new Float32Array((_==null?void 0:_.buffer.slice())??new Float32Array(0)))):(e.dataPosition.set((u==null?void 0:u.buffer.slice())??new Float32Array(0)),e.dataColor.set((w==null?void 0:w.buffer.slice())??new Uint16Array(0)),e.dataScale.set((p==null?void 0:p.buffer.slice())??new Uint16Array(0)),e.dataRotation.set((m==null?void 0:m.buffer.slice())??new Float32Array(0)),e.muT.set((S==null?void 0:S.buffer.slice())??new Float32Array(0)),e.timeIndex.set((v==null?void 0:v.buffer.slice())??new Float32Array(0)),x&&e.dataMotion.set((_==null?void 0:_.buffer.slice())??new Float32Array(0)));for(let D=0;D<f;++D)x&&(e.tScaleArray[D]=g?Math.exp(g[D]):0,e.dataTime[D*3+0]=S?S[D]:0,e.dataTime[D*3+1]=e.tScaleArray[D]);n()},a=f=>{const u=[];for(let p=0;p<f;++p)u.push(t[`f_rest_${p}`]);return u},n=()=>{var x,b;const f=s();if(f<=0)return;const u={1:3,2:8,3:15}[f],p=(((x=t.position)==null?void 0:x.length)??0)/3;(!e.sh1to3Data||((b=e.sh1to3Data)==null?void 0:b.length)<p*4)&&(e.sh1to3Data=new Uint32Array(p*4),f>1&&(e.sh4to7Data=new Uint32Array(p*4),f>2&&(e.sh8to11Data=new Uint32Array(p*4),e.sh12to15Data=new Uint32Array(p*4))));const m=a(u*3),_=2047,S=1023,g=new Float32Array(1),v=new Uint32Array(g.buffer),w=new Array(u*3).fill(0);for(let C=0;C<p;++C){for(let T=0;T<u;++T)w[T*3]=m[T][C],w[T*3+1]=m[T+u][C],w[T*3+2]=m[T+u*2][C];let D=w[0];for(let T=1;T<u*3;++T)D=Math.max(D,Math.abs(w[T]));if(D!==0){for(let T=0;T<u;++T)w[T*3+0]=Math.max(0,Math.min(_,Math.floor((w[T*3+0]/D*.5+.5)*_+.5))),w[T*3+1]=Math.max(0,Math.min(S,Math.floor((w[T*3+1]/D*.5+.5)*S+.5))),w[T*3+2]=Math.max(0,Math.min(_,Math.floor((w[T*3+2]/D*.5+.5)*_+.5)));g[0]=D,e.sh1to3Data[C*4+0]=v[0],e.sh1to3Data[C*4+1]=w[0]<<21|w[1]<<11|w[2],e.sh1to3Data[C*4+2]=w[3]<<21|w[4]<<11|w[5],e.sh1to3Data[C*4+3]=w[6]<<21|w[7]<<11|w[8],f>1&&(e.sh4to7Data[C*4+0]=w[9]<<21|w[10]<<11|w[11],e.sh4to7Data[C*4+1]=w[12]<<21|w[13]<<11|w[14],e.sh4to7Data[C*4+2]=w[15]<<21|w[16]<<11|w[17],e.sh4to7Data[C*4+3]=w[18]<<21|w[19]<<11|w[20],f>2?(e.sh8to11Data[C*4+0]=w[21]<<21|w[22]<<11|w[23],e.sh8to11Data[C*4+1]=w[24]<<21|w[25]<<11|w[26],e.sh8to11Data[C*4+2]=w[27]<<21|w[28]<<11|w[29],e.sh8to11Data[C*4+3]=w[30]<<21|w[31]<<11|w[32],e.sh12to15Data[C*4+0]=w[33]<<21|w[34]<<11|w[35],e.sh12to15Data[C*4+1]=w[36]<<21|w[37]<<11|w[38],e.sh12to15Data[C*4+2]=w[39]<<21|w[40]<<11|w[41],e.sh12to15Data[C*4+3]=w[42]<<21|w[43]<<11|w[44]):e.sh8to11Data[C]=w[21]<<21|w[22]<<11|w[23])}}},o=f=>{if(!t.time_index)return;const u=t.time_index.findIndex(_=>_===f);let p=t.time_index.findIndex((_,S)=>_!==f&&S>u);if(p===-1&&u===-1)return;p===-1&&u!==-1&&(p=t.time_index.length),l-=p-u,console.log("____ ENGINE IVAN","GSplatDecodedDataWorker releaseSeqData numSplats",l,p-u);const m=Object.keys(t);for(let _=0;_<m.length;_++){const S=m[_],g=t[S];if(g){let v=1;switch(S){case"position":v=3;break;case"color_opacity":v=4;break;case"scale":v=3;break;case"motion":v=3;break;case"rotation":v=3;break;default:v=1;break}const w=g.constructor,x=new w(l*v);u>0?(x.set(g.subarray(0,u*v),0),x.set(g.subarray(p*v),u*v)):x.set(g.subarray(p*v),0),t[S]=x}}},c=()=>{const f=Object.keys(t);for(let u=0;u<f.length;u++){const p=f[u];t[p]&&(t[p]=[])}},d=()=>{t={},l=0}}class hA extends Se{constructor(){super(),this.worker=new Worker(URL.createObjectURL(new Blob([`(${lA.toString()})()`],{type:"application/javascript"})))}async appendGSplatData(t,e,s){var i;return(i=this.worker)==null||i.postMessage({type:"appendGSplatData",properties:t,timeIndex:e,timeOption:s},Object.keys(t).map(r=>t[r].buffer)),new Promise(r=>{this.worker.onmessage=a=>{if(!this.worker)return;const{data:n}=a;n.type==="newAppendData"&&r(n)}})}async releaseSeqData(t){var e;(e=this.worker)==null||e.postMessage({type:"releaseSeqData",index:t})}async releaseAllSeqData(){var t;(t=this.worker)==null||t.postMessage({type:"releaseAllSeqData"})}destroy(){var t;this.worker&&(this.worker.postMessage({type:"destroyWorker"}),(t=this.worker)==null||t.terminate(),this.worker=null)}}class cA{constructor(t,e=[]){h(this,"elements");h(this,"numSplats",0);h(this,"comments");h(this,"is4D");h(this,"dataWorker");h(this,"shBands");h(this,"destroy",()=>{var t;(t=this.dataWorker)==null||t.destroy(),this.dataWorker=null});this.elements=t,this.numSplats=0,this.comments=e,this.shBands=0,this.is4D=!1,this.dataWorker=null}async appendGSplatData(t,e,s){let i=0;for(let a=0;a<s.length&&e>s[a];a+=2)i=a/2;this.dataWorker||(this.dataWorker=new hA,await this.dataWorker.appendGSplatData({},0,s));const r=await this.dataWorker.appendGSplatData(t,i,s);this.transformData=r.transformData,this.numSplats=r.numSplats}async releaseSeqData(t){return console.log("____ ENGINE IVAN","GSplatDecodedData releaseSeqData",t),this.dataWorker.releaseSeqData(t),this}async releaseAllSeqData(){var t;return console.log("____ ENGINE IVAN","GSplatDecodedData release all SeqData"),(t=this.dataWorker)==null||t.releaseAllSeqData(),this}getProp(t,e="vertex"){var s,i;return(i=(s=this.getElement(e))==null?void 0:s.properties.find(r=>r.name===t))==null?void 0:i.storage}getElement(t){return this.elements.find(e=>e.name===t)}get isCompressed(){return!1}}const dA=`
    attribute vec2 vertex_position;
    void main(void) {
        gl_Position = vec4(vertex_position, 0.0, 1.0);
    }
`,fA=`
    #include "gsplatEvalSHVS"

    // takes a normalized 3-component value, convert to (11, 11, 10) bit range and
    // then package into RGBA8
    vec4 packRgb(vec3 v) {
        uvec3 vb = uvec3(clamp(v, vec3(0.0), vec3(1.0)) * vec3(2047.0, 2047.0, 1023.0));
        uint bits = (vb.x << 21) | (vb.y << 10) | vb.z;
        return vec4((uvec4(bits) >> uvec4(24, 16, 8, 0)) & uvec4(0xff)) / vec4(255.0);
    }

    uniform mediump vec3 dir;
    uniform mediump sampler2D centroids;
    uniform mediump float shN_mins;
    uniform mediump float shN_maxs;

    void main(void) {
        ivec2 uv = ivec2(gl_FragCoord.xy) * ivec2(SH_COEFFS, 1);
        mediump vec3 coefficients[SH_COEFFS];

        // read coefficients
        for (int i = 0; i < SH_COEFFS; i++) {
            vec3 s = texelFetch(centroids, ivec2(uv.x + i, uv.y), 0).xyz;
            coefficients[i] = mix(vec3(shN_mins), vec3(shN_maxs), s);
        }

        // evaluate
        gl_FragColor = packRgb(evalSH(coefficients, dir) * 0.25 + 0.5);
    }
`,uA=`
    attribute vertex_position: vec2f;
    @vertex
    fn vertexMain(input: VertexInput) -> VertexOutput {
        var output: VertexOutput;
        output.position = vec4f(vertex_position, 0.0, 1.0);
        return output;
    }
`,pA=`
    #include "gsplatEvalSHVS"

    // takes a normalized 3-component value, convert to (11, 11, 10) bit range and
    // then package into RGBA8
    fn packRgb(v: vec3f) -> vec4f {
        let vb = vec3u(clamp(v, vec3f(0.0), vec3f(1.0)) * vec3f(2047.0, 2047.0, 1023.0));
        let bits = dot(vb, vec3u(1 << 21, 1 << 10, 1));
        return vec4f((vec4u(bits) >> vec4u(24, 16, 8, 0)) & vec4u(0xff)) / vec4f(255.0);
    }

    uniform dir: vec3f;
    uniform shN_mins: f32;
    uniform shN_maxs: f32;

    var centroids: texture_2d<f32>;

    @fragment
    fn fragmentMain(input: FragmentInput) -> FragmentOutput {
        var output: FragmentOutput;

        var uv = vec2i(input.position.xy) * vec2i(SH_COEFFS, 1);
        var coefficients: array<vec3f, SH_COEFFS>;

        // read coefficients
        for (var i: i32 = 0; i < SH_COEFFS; i++) {
            let s: vec3f = textureLoad(centroids, vec2i(uv.x + i, uv.y), 0).xyz;
            coefficients[i] = mix(vec3f(uniform.shN_mins), vec3f(uniform.shN_maxs), s);
        }

        // evaluate
        output.color = packRgb(evalSH(&coefficients, uniform.dir) * 0.25 + 0.5);

        return output;
    }
`,mA=`
    uniform mediump sampler2D sh0;
    uniform highp sampler2D sh_labels;
    uniform mediump sampler2D sh_result;

    uniform vec4 sh0_mins;
    uniform vec4 sh0_maxs;

    float SH_C0 = 0.28209479177387814;

    // unpack 11, 11, 10 normalized value from rgba8 texture sample
    vec3 unpackRgb(vec4 v) {
        uvec4 uv = uvec4(v * 255.0);
        uint bits = (uv.x << 24) | (uv.y << 16) | (uv.z << 8) | uv.w;
        uvec3 vb = (uvec3(bits) >> uvec3(21, 10, 0)) & uvec3(0x7ffu, 0x7ffu, 0x3ffu);
        return vec3(vb) / vec3(2047.0, 2047.0, 1023.0);
    }

    vec4 readColor(in SplatSource source) {
        // sample base color
        vec4 baseSample = mix(sh0_mins, sh0_maxs, texelFetch(sh0, source.uv, 0));

        // resolve base color
        vec4 base = vec4(vec3(0.5) + baseSample.xyz * SH_C0, 1.0 / (1.0 + exp(-baseSample.w)));

        // extract spherical harmonics palette index
        ivec2 labelSample = ivec2(texelFetch(sh_labels, source.uv, 0).xy * 255.0);
        int n = labelSample.x + labelSample.y * 256;

        vec4 shSample = texelFetch(sh_result, ivec2(n % 64, n / 64), 0);
        vec3 sh = (unpackRgb(shSample) - vec3(0.5)) * 4.0;

        return vec4(base.xyz + sh, base.w);
    }
`,_A=`
    var sh0: texture_2d<f32>;
    var sh_labels: texture_2d<f32>;
    var sh_result: texture_2d<f32>;

    uniform sh0_mins: vec4f;
    uniform sh0_maxs: vec4f;

    const SH_C0: f32 = 0.28209479177387814;

    // unpack 11, 11, 10 normalized value from rgba8 texture sample
    fn unpackRgb(v: vec4f) -> vec3f {
        let bits = dot(vec4u(v * 255.0), vec4u(1u << 24, 1u << 16, 1u << 8, 1u));
        let vb = (vec3u(bits) >> vec3u(21, 10, 0)) & vec3u(0x7ffu, 0x7ffu, 0x3ffu);
        return vec3f(vb) / vec3f(2047.0, 2047.0, 1023.0);
    }

    fn readColor(source: ptr<function, SplatSource>) -> vec4f {
        // sample base color
        let baseSample: vec4f = mix(uniform.sh0_mins, uniform.sh0_maxs, textureLoad(sh0, source.uv, 0));
        let base = vec4f(vec3f(0.5) + baseSample.xyz * SH_C0, 1.0 / (1.0 + exp(-baseSample.w)));

        // extract spherical harmonics palette index
        let labelSample: vec2i = vec2i(textureLoad(sh_labels, source.uv, 0).xy * 255.0);
        let n = labelSample.x + labelSample.y * 256;

        let shSample: vec4f = textureLoad(sh_result, vec2i(n % 64, n / 64), 0);
        let sh: vec3f = (unpackRgb(shSample) - vec3f(0.5)) * 4.0;

        return vec4f(base.xyz + sh, base.w);
    }
`,gA=(l,t)=>{for(const e in t)l.resolve(e).setValue(t[e])};class SA extends Ss{constructor(){super(...arguments);h(this,"executeCallback",null)}execute(){var e;(e=this.executeCallback)==null||e.call(this)}}const k_=new ie,oo=new A;class yA{constructor(t,e){h(this,"prevDir",new A);h(this,"updateMode","enable");this.device=t,this.gsplatInstance=e;const{resource:s}=e,i=new Map(be.get(t,t.isWebGPU?"wgsl":"glsl"));this.shader=Wt.createShader(t,{uniqueName:"gsplatResolveSH",vertexGLSL:dA,fragmentGLSL:fA,vertexWGSL:uA,fragmentWGSL:pA,vertexIncludes:i,fragmentIncludes:i,fragmentDefines:new Map([["SH_BANDS",s.gsplatData.shBands.toString()]]),attributes:{vertex_position:Ae}}),this.texture=s.createTexture("centroids",Fe,new J(64,1024)),this.renderTarget=new _t({colorBuffer:this.texture,depth:!1}),this.renderPass=new SA(t),this.renderPass.init(this.renderTarget,{}),this.renderPass.colorOps.clear=!0,this.quadRender=new ac(this.shader);const{material:r}=e;r.setDefine("SH_BANDS","0");const{shaderChunks:a}=r;a.glsl.set("gsplatSogsColorVS",mA),a.wgsl.set("gsplatSogsColorVS",_A),r.update(),t.scope.resolve("sh_result").setValue(this.texture)}destroy(){const{gsplatInstance:t}=this,{material:e}=t;e.setDefine("SH_BANDS",t.resource.gsplatData.shBands.toString());const{shaderChunks:s}=e;s.glsl.delete("gsplatSogsColorVS"),s.wgsl.delete("gsplatSogsColorVS"),e.update(),this.quadRender.destroy(),this.renderPass.destroy(),this.renderTarget.destroy(),this.texture.destroy(),this.shader.destroy()}render(t,e){const{prevDir:s,updateMode:i}=this;if(i==="disable"||(k_.invert(e),k_.transformVector(t.forward,oo),oo.normalize(),i==="enable"&&oo.equalsApprox(s,.001)))return;s.copy(oo);const r=()=>{const{device:a}=this,{sh_centroids:n,meta:o}=this.gsplatInstance.resource.gsplatData;gA(a.scope,{dir:oo.toArray(),centroids:n,shN_mins:o.shN.mins,shN_maxs:o.shN.maxs}),a.setCullMode(wt),a.setDepthState(qt.NODEPTH),a.setStencilState(null,null),a.setBlendState(ut.NOBLEND),this.quadRender.render()};this.renderPass.executeCallback=r,this.renderPass.render()}}const vA=`
    uniform sampler2D means_l;
    uniform sampler2D means_u;
    uniform sampler2D quats;
    uniform sampler2D scales;
    uniform sampler2D sh_labels;

    uniform highp uint numSplats;

    uint packU32(vec4 v) {
        return uint(v.x * 255.0) << 24u |
               uint(v.y * 255.0) << 16u |
               uint(v.z * 255.0) << 8u |
               uint(v.w * 255.0);
    }

    uvec4 packU32(vec4 a, vec4 b, vec4 c, vec4 d) {
        return uvec4(packU32(a), packU32(b), packU32(c), packU32(d));
    }

    void main(void) {
        int w = int(textureSize(means_l, 0).x);
        ivec2 uv = ivec2(gl_FragCoord.xy);
        if (uint(uv.x + uv.y * w) >= numSplats) {
            discard;
        }

        vec3 meansLSample = texelFetch(means_l, uv, 0).xyz;
        vec3 meansUSample = texelFetch(means_u, uv, 0).xyz;
        vec4 quatsSample = texelFetch(quats, uv, 0);
        vec3 scalesSample = texelFetch(scales, uv, 0).xyz;
        vec2 shLabelsSample = texelFetch(sh_labels, uv, 0).xy;

        pcFragColor0 = packU32(
            vec4(meansLSample, shLabelsSample.x),
            vec4(meansUSample, shLabelsSample.y),
            vec4(quatsSample),
            vec4(scalesSample, 0.0)
        );
    }
`,xA=`
    var means_l: texture_2d<f32>;
    var means_u: texture_2d<f32>;
    var quats: texture_2d<f32>;
    var scales: texture_2d<f32>;
    var sh_labels: texture_2d<f32>;

    uniform numSplats: u32;

    fn packU32(v: vec4<f32>) -> u32 {
        return (u32(v.x * 255.0) << 24u)  |
               (u32(v.y * 255.0) << 16u)  |
               (u32(v.z * 255.0) << 8u) |
               u32(v.w * 255.0);
    }

    fn packUVec32(a: vec4<f32>, b: vec4<f32>, c: vec4<f32>, d: vec4<f32>) -> vec4<u32> {
        return vec4<u32>(packU32(a), packU32(b), packU32(c), packU32(d));
    }

    @fragment
    fn fragmentMain(input: FragmentInput) -> FragmentOutput {
        var output: FragmentOutput;

        let w: u32 = textureDimensions(means_l, 0).x;
        let uv: vec2<u32> = vec2<u32>(pcPosition.xy);
        if (uv.x + uv.y * w >= uniform.numSplats) {
            discard;
            return output;
        }

        // fetch the source index and calculate source uv
        let meansLSample: vec3<f32> = textureLoad(means_l, uv, 0).xyz;
        let meansUSample: vec3<f32> = textureLoad(means_u, uv, 0).xyz;
        let quatsSample: vec4<f32> = textureLoad(quats, uv, 0);
        let scalesSample: vec3<f32> = textureLoad(scales, uv, 0).xyz;
        let shLabelsSample: vec2<f32> = textureLoad(sh_labels, uv, 0).xy;

        output.color = packUVec32(
            vec4(meansLSample, shLabelsSample.x),
            vec4(meansUSample, shLabelsSample.y),
            vec4(quatsSample),
            vec4(scalesSample, 0.0)
        );

        return output;
    }
`,xn=.28209479177387814,Di=l=>l.read(0,0,l.width,l.height,{mipLevel:0,face:0,immediate:!0}),TA=(l,t)=>{for(const e in t)l.resolve(e).setValue(t[e])};class wA{constructor(t,e,s,i,r,a){const n=(b,C,D)=>b*(1-D)+C*D,{meta:o}=t,{means:c,scales:d,sh0:f,shN:u}=o,p=e&&t.means_l._levels[0],m=e&&t.means_u._levels[0],_=s&&t.quats._levels[0],S=i&&t.scales._levels[0],g=r&&t.sh0._levels[0],v=a&&t.sh_labels._levels[0],w=a&&t.sh_centroids._levels[0],x=2/Math.sqrt(2);this.read=b=>{if(e){const C=n(c.mins[0],c.maxs[0],((m[b*4+0]<<8)+p[b*4+0])/65535),D=n(c.mins[1],c.maxs[1],((m[b*4+1]<<8)+p[b*4+1])/65535),T=n(c.mins[2],c.maxs[2],((m[b*4+2]<<8)+p[b*4+2])/65535);e.x=Math.sign(C)*(Math.exp(Math.abs(C))-1),e.y=Math.sign(D)*(Math.exp(Math.abs(D))-1),e.z=Math.sign(T)*(Math.exp(Math.abs(T))-1)}if(s){const C=(_[b*4+0]/255-.5)*x,D=(_[b*4+1]/255-.5)*x,T=(_[b*4+2]/255-.5)*x,I=Math.sqrt(Math.max(0,1-(C*C+D*D+T*T)));switch(_[b*4+3]-252){case 0:s.set(C,D,T,I);break;case 1:s.set(I,D,T,C);break;case 2:s.set(D,I,T,C);break;case 3:s.set(D,T,I,C);break}}if(i){const C=n(d.mins[0],d.maxs[0],S[b*4+0]/255),D=n(d.mins[1],d.maxs[1],S[b*4+1]/255),T=n(d.mins[2],d.maxs[2],S[b*4+2]/255);i.set(C,D,T)}if(r){const C=n(f.mins[0],f.maxs[0],g[b*4+0]/255),D=n(f.mins[1],f.maxs[1],g[b*4+1]/255),T=n(f.mins[2],f.maxs[2],g[b*4+2]/255),I=n(f.mins[3],f.maxs[3],g[b*4+3]/255);r.set(.5+C*xn,.5+D*xn,.5+T*xn,1/(1+Math.exp(-I)))}if(a){const C=v[b*4+0]+(v[b*4+1]<<8),D=C%64*15,T=Math.floor(C/64);for(let I=0;I<3;++I)for(let L=0;L<15;++L)a[I*15+L]=n(u.mins,u.maxs,w[(D+L)*4+I+T*t.sh_centroids.width*4]/255)}}}}class EA{constructor(){h(this,"meta");h(this,"numSplats");h(this,"means_l");h(this,"means_u");h(this,"quats");h(this,"scales");h(this,"sh0");h(this,"sh_centroids");h(this,"sh_labels");h(this,"packedTexture")}destroy(){var t,e,s,i,r,a,n,o;(t=this.means_l)==null||t.destroy(),(e=this.means_u)==null||e.destroy(),(s=this.quats)==null||s.destroy(),(i=this.scales)==null||i.destroy(),(r=this.sh0)==null||r.destroy(),(a=this.sh_centroids)==null||a.destroy(),(n=this.sh_labels)==null||n.destroy(),(o=this.packedTexture)==null||o.destroy()}createIter(t,e,s,i,r){return new wA(this,t,e,s,i,r)}calcAabb(t){const{mins:e,maxs:s}=this.meta.means,i=r=>Math.sign(r)*(Math.exp(Math.abs(r))-1);t.center.set((i(e[0])+i(s[0]))*.5,(i(e[1])+i(s[1]))*.5,(i(e[2])+i(s[2]))*.5),t.halfExtents.set((i(s[0])-i(e[0]))*.5,(i(s[1])-i(e[1]))*.5,(i(s[2])-i(e[2]))*.5)}getCenters(t){const{meta:e,means_l:s,means_u:i,numSplats:r}=this,{means:a}=e,n=new Uint32Array(i._levels[0].buffer),o=new Uint32Array(s._levels[0].buffer),c=a.mins[0]/65535,d=a.mins[1]/65535,f=a.mins[2]/65535,u=a.maxs[0]/65535,p=a.maxs[1]/65535,m=a.maxs[2]/65535;for(let _=0;_<r;_++){const S=_,g=n[S],v=o[S],w=g<<8&65280|v&255,x=g&65280|v>>>8&255,b=g>>>8&65280|v>>>16&255,C=c*(65535-w)+u*w,D=d*(65535-x)+p*x,T=f*(65535-b)+m*b,I=C<0?-C:C,L=D<0?-D:D,E=T<0?-T:T;t[_*3]=(C<0?-1:1)*(Math.exp(I)-1),t[_*3+1]=(D<0?-1:1)*(Math.exp(L)-1),t[_*3+2]=(T<0?-1:1)*(Math.exp(E)-1)}}calcFocalPoint(t,e){t.set(0,0,0)}get isSogs(){return!0}get shBands(){var e;return{192:1,512:2,960:3}[(e=this.sh_centroids)==null?void 0:e.width]??0}async decompress(){const t=["x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3"],{shBands:e}=this,{means_l:s,means_u:i,quats:r,scales:a,sh0:n,sh_labels:o,sh_centroids:c}=this;if(s._levels[0]=await Di(s),i._levels[0]=await Di(i),r._levels[0]=await Di(r),a._levels[0]=await Di(a),n._levels[0]=await Di(n),e>0){o._levels[0]=await Di(o),c._levels[0]=await Di(c);const g=[];for(let v=0;v<45;++v)g.push(`f_rest_${v}`);t.splice(t.indexOf("f_dc_0")+1,0,...g)}const d={};t.forEach(g=>{d[g]=new Float32Array(this.numSplats)});const f=new A,u=new ue,p=new A,m=new oe,_=e>0?new Float32Array(45):null,S=this.createIter(f,u,p,m,_);for(let g=0;g<this.numSplats;++g)if(S.read(g),d.x[g]=f.x,d.y[g]=f.y,d.z[g]=f.z,d.rot_1[g]=u.x,d.rot_2[g]=u.y,d.rot_3[g]=u.z,d.rot_0[g]=u.w,d.scale_0[g]=p.x,d.scale_1[g]=p.y,d.scale_2[g]=p.z,d.f_dc_0[g]=(m.x-.5)/xn,d.f_dc_1[g]=(m.y-.5)/xn,d.f_dc_2[g]=(m.z-.5)/xn,d.opacity[g]=m.w<=0?-40:m.w>=1?40:-Math.log(1/m.w-1),_)for(let v=0;v<45;++v)d[`f_rest_${v}`][g]=_[v];return new Gy([{name:"vertex",count:this.numSplats,properties:t.map(g=>({name:g,type:"float",byteSize:4,storage:d[g]}))}])}packGpuMemory(){const{means_l:t,means_u:e,quats:s,scales:i,sh_labels:r,numSplats:a}=this,{device:n}=t,{scope:o}=n,c=Wt.createShader(n,{uniqueName:"GsplatSogsReorderShader",attributes:{vertex_position:Ae},vertexChunk:"fullscreenQuadVS",fragmentGLSL:vA,fragmentWGSL:xA,fragmentOutputTypes:["uvec4"]}),d=new _t({colorBuffer:this.packedTexture,depth:!1,mipLevel:0});n.setCullMode(wt),n.setBlendState(ut.NOBLEND),n.setDepthState(qt.NODEPTH),TA(o,{means_l:t,means_u:e,quats:s,scales:i,sh_labels:r??t,numSplats:a}),br(n,d,c),d.destroy(),c.destroy()}async prepareGpuData(){const{device:t,height:e,width:s}=this.means_l;this.means_l._levels[0]=await Di(this.means_l),this.means_u._levels[0]=await Di(this.means_u),this.packedTexture=new ge(t,{name:"sogsPackedTexture",width:s,height:e,format:ke,mipmaps:!1}),t.on("devicerestored",()=>{this.packGpuMemory()}),this.packGpuMemory()}reorderData(){return this.prepareGpuData()}}async function bA(){let l=null,t=null,e=null,s=null,i=null,r=null,a=null,n=null,o=null,c=null,d=null,f=null,u=null,p=null,m=null,_=null,S=null,g=null,v=null,w=null,x=null,b=null,C=null,D=null,T=Float32Array.BYTES_PER_ELEMENT,I=Uint32Array.BYTES_PER_ELEMENT,L=0,E=!0,F,k,H={x:0,y:0,z:0},G={x:0,y:0,z:0},W=!0,R=!0,B=!1,V=!1,O=0,M=0,P=!1,N=null,U=!1,z=0,$=0,X={x:0,y:0,z:0},K={x:0,y:0,z:0},q,re,ee=new Uint32Array(0),se=new Uint32Array(0);self.onmessage=async ye=>{const{data:j}=ye;switch(j.type){case"initWorker":await He(j.sortWasmUrl),self.postMessage({type:"initialized"});break;case"updateData":if(j.numSplats<=0||!t)return;L=j.numSplats,E=j.is4d,q=j.id,ce(),ne(j.numSplats),Q(j);const pt=Object.keys(j.sortingTransferData).map(Ce=>j.sortingTransferData[Ce].buffer);self.postMessage({type:"returnSortingTransferData",sortingTransferData:j.sortingTransferData},{transfer:pt}),vi(),U=!0,B=!0,xi();break;case"returnOrderTransferData":!ee||ee.length<=0?ee=j.transformOrderData:se=j.transformOrderData;break;case"setTime":F=j.time,xi();break;case"setUseTemporalSort":W=j.useTemporalSort;break;case"setUseDynamicSort":R=j.useDynamicSort;break;case"sort":if(!e)return;e[0]=j.cameraPosition.x,e[1]=j.cameraPosition.y,e[2]=j.cameraPosition.z,s[0]=j.cameraDirection.x,s[1]=j.cameraDirection.y,s[2]=j.cameraDirection.z,X.x=j.cameraPosition.x,X.y=j.cameraPosition.y,X.z=j.cameraPosition.z,K.x=j.cameraDirection.x,K.y=j.cameraDirection.y,K.z=j.cameraDirection.z,xi();break}};const ne=ye=>{const j=Xt(ye);te(j)},Q=ye=>{const{centers:j,muT:pt,tScale:Ce,motion:Je,timeIndex:bt}=ye.sortingTransferData;e[0]=X.x,e[1]=X.y,e[2]=X.z,s[0]=K.x,s[1]=K.y,s[2]=K.z,r&&j&&r.length===j.length&&r.set(j),n&&bt&&n.length===bt.length&&n.set(bt),d&&Je&&d.length===Je.length&&d.set(Je),E&&o&&c&&pt&&Ce&&o.length===pt.length&&c.length===Ce.length&&(o.set(pt),c.set(Ce)),i&&ye.timeOption&&i.set(ye.timeOption)},ce=()=>{M=Math.max(10,Math.min(20,Math.round(Math.log2(L/4)))),O=2**M+1};let le=0,he=0;const te=ye=>{!(le<L||he<O)&&r&&r.length>=L*3||(f=0,u=f+L*T*3,g=u+100*T*2,v=g+L*I,w=v+3*T,x=w+3*T,b=x+3*T,C=b+3*T,D=C+L*I,r=new Float32Array(ye,f,L*3),i=new Float32Array(ye,u,200),a=new Uint32Array(ye,g,L),e=new Float32Array(ye,v,3),s=new Float32Array(ye,w,3),E&&(_=D+O*I,S=_+L*T,m=S+L*T,p=m+L*3*T,o=new Float32Array(ye,_,L),c=new Float32Array(ye,S,L),d=new Float32Array(ye,m,L*3),n=new Uint32Array(ye,p,L)),le=L,he=O)},He=async ye=>{z=1;const pt={env:{memory:new WebAssembly.Memory({initial:z}),pthread_self:function(){return 0},emscripten_builtin_memalign:function(){return 0},loggerVec3:(Ce,Je,bt,Ot)=>{console.log(`C++ loggerVec3 [${Ce}] 0:${Je} 1:${bt} 2:${Ot}`)},loggerFloat:(Ce,Je)=>{console.log(`C++ LogFloat [${Ce}] a:${Je}`)},loggerValue:(Ce,Je,bt,Ot,Qs)=>{console.log(`C++ loggerValue [${Ce}] minDist:${Je} maxDist:${bt} range:${Ot} divider:${Qs}`)},loggerCamera:(Ce,Je,bt,Ot,Qs,jn,rr)=>{console.log(`C++ loggerCamera [${Ce}] x:${Je} y:${bt} z:${Ot} dx:${Qs} dy:${jn} dz:${rr}`)},loggerBound:(Ce,Je,bt,Ot,Qs,jn)=>{console.log(`C++ loggerBound minX:${Ce} minY:${Je} minZ:${bt} maxX:${Ot} maxY:${Qs} maxZ:${jn}`)},loggerDebug:Ce=>{console.log(`C++ loggerDebug [${Ce}]`)}}};try{const Je=await(await fetch(ye)).arrayBuffer();return l=(await WebAssembly.instantiate(Je,pt)).instance,t=pt.env.memory,l}catch(Ce){throw console.error("加载WASM模块失败:",Ce),Ce}},ss=ye=>{if(ye<=0)return 1;let j=ye*T*3;j+=ye*I,j+=3*T,j+=3*T,j+=3*T,j+=3*T,j+=ye*T,j+=O*I,j+=100*T*2,j+=ye*I,E&&(j+=ye*T,j+=ye*T,j+=ye*T*3);const pt=64*1024;return Math.ceil(j/pt)},Xt=ye=>{const j=ss(ye);return j>z&&(t.grow(j-z),z=j),t.buffer},vi=()=>{if(!l)return;const{calcAABB:ye}=l.exports;ye(f,x,b,L)},xi=()=>{N&&clearTimeout(N),N=setTimeout(()=>{N=null,ys()},0)},ys=()=>{if(!l||!U||a.length!==L||g===null||f===null||v===null||w===null||x===null||b===null)return;const ye=e[0],j=e[1],pt=e[2],Ce=s[0],Je=s[1],bt=s[2],Ot=.001,Qs=.01;if(!B){const rr=Math.abs(ye-H.x)>=Ot||Math.abs(j-H.y)>=Ot||Math.abs(pt-H.z)>=Ot,Yn=Math.abs(Ce-G.x)>=Ot||Math.abs(Je-G.y)>=Ot||Math.abs(bt-G.z)>=Ot,dd=Math.abs(F-k)>=Qs;if(!rr&&!Yn&&!dd)return}if(V){P=!0;return}V=!0,B=!1,k=F,H.x=ye,H.y=j,H.z=pt,G.x=Ce,G.y=Je,G.z=bt,P=!1;const{sortIndexes:jn}=l.exports;try{(F==null||F===NaN)&&(F=0);const rr=performance.now(),Yn=jn(g,f,m,_,S,v,w,x,b,C,D,F,W,R,E,L,O,M,u,p),dd=performance.now();if(ee&&ee.length>=a.length?ee.set(a):se&&se.length>=a.length?(se.set(a),[ee,se]=[se,ee]):((!ee||ee.length<a.length)&&(ee=new Uint32Array(a.length)),(!se||se.length<a.length)&&(se=new Uint32Array(a.length)),ee.set(a)),Yn===0){debugger;console.log("____ ENGINE","Indexes count === ",Yn)}const qv=dd-rr,jv=L!==$||re!==q;self.postMessage({type:"sortCompleted",count:Yn,transformOrderData:ee,isNewOrder:jv,numSplats:L,sortTime:F,sortTimeConsuming:qv},{transfer:[ee.buffer]});debugger;$=L,re=q}catch(rr){debugger;console.error("排序操作失败:",rr),self.postMessage({type:"error",error:rr.message})}V=!1,P&&xi()}}class AA extends Se{constructor(){super();h(this,"worker",null);h(this,"numSplats",0);h(this,"is4d",!0);h(this,"orderTexture");h(this,"backOrderTexture");h(this,"data",{});this.orderTexture=null,this.backOrderTexture=null,this.worker=null,this._initWorker(),this.sortingTransferData={centers:new Float32Array(0),muT:new Float32Array(0),tScale:new Float32Array(0),motion:new Float32Array(0),timeIndex:new Float32Array(0)}}async _initWorker(){this.worker=new Worker(URL.createObjectURL(new Blob([`(${bA.toString()})()`],{type:"application/javascript"}))),this.worker.onmessage=s=>{var r;if(!this.worker)return;const{data:i}=s;switch(i.type){case"initialized":this.fire("initialized");break;case"returnSortingTransferData":this.sortingTransferData=i.sortingTransferData;break;case"sortCompleted":const a=((this.data.time||0)-i.sortTime)*1e3;this.data.sortTimeOffset=a,i.transformOrderData&&(i.isNewOrder&&(this.orderTexture=this.backOrderTexture),(r=this.orderTexture)==null||r.write(0,0,this.orderTexture.width,this.orderTexture.height-1,i.transformOrderData.subarray(0,i.numSplats)).then(()=>{var n;(n=this.worker)==null||n.postMessage({type:"returnOrderTransferData",transformOrderData:i.transformOrderData},{transfer:[i.transformOrderData.buffer]})})),this.fire("updated",s.data.count,i.sortTimeConsuming,i.isNewOrder,a);break;case"error":console.error("Worker错误:",i.error),this.fire("error",i.error);break}};const e=`https://frontend.4dv-intelligence.com/viewer-static/sorter-trailing.wasm?t=${Date.now()}`;this.worker.postMessage({type:"initWorker",sortWasmUrl:e})}async updateData(e,s,i,r,a,n,o,c){var p;this.is4d=c,this.numSplats=s.length/3,(!o||o.length===0)&&(o=[0,60]),this.orderTexture||(this.orderTexture=e),this.backOrderTexture=e;const d=new Date().getTime();!this.sortingTransferData.centers||this.sortingTransferData.centers.length<s.length?(console.log("____ ENGINE IVAN","不复用内存 sortingTransferData",s.length),this.sortingTransferData.centers=new Float32Array(s.buffer.slice(0,s.byteLength)),this.sortingTransferData.muT=new Float32Array(i.buffer.slice(0,i.byteLength)),this.sortingTransferData.tScale=new Float32Array(r.buffer.slice(0,r.byteLength)),this.sortingTransferData.motion=new Float32Array(a.buffer.slice(0,a.byteLength)),this.sortingTransferData.timeIndex=new Float32Array(n.buffer.slice(0,n.byteLength))):(console.log("____ ENGINE IVAN","复用内存 sortingTransferData",s.length),this.sortingTransferData.centers.set(s),this.sortingTransferData.muT.set(i),this.sortingTransferData.tScale.set(r),this.sortingTransferData.motion.set(a),this.sortingTransferData.timeIndex.set(n));const u=Object.keys(this.sortingTransferData).map(m=>this.sortingTransferData[m].buffer);(p=this.worker)==null||p.postMessage({type:"updateData",numSplats:this.numSplats,sortingTransferData:this.sortingTransferData,timeOption:o.slice(),is4d:c,id:d},{transfer:u})}setCamera(e,s){this.worker&&(!e||!s||(this.data.cameraPosition={x:e.x,y:e.y,z:e.z},this.data.cameraDirection={x:s.x,y:s.y,z:s.z},this.worker.postMessage({type:"sort",cameraPosition:{x:e.x,y:e.y,z:e.z},cameraDirection:{x:s.x,y:s.y,z:s.z}})))}setCurrentTime(e){this.worker&&(this.data.time=e,this.worker.postMessage({type:"setTime",time:e}))}setUseTemporalSort(e){this.worker&&this.worker.postMessage({type:"setUseTemporalSort",useTemporalSort:e})}setUseDynamicSort(e){this.worker&&this.worker.postMessage({type:"setUseDynamicSort",useDynamicSort:e})}destroy(){this.worker&&(this.worker.terminate(),this.worker=null)}}const CA=new ie,Ua=new A,Ba=new A,ah=[0,0];class PA{constructor(t,e={}){h(this,"resource");h(this,"orderTexture");h(this,"backOrderTexture");h(this,"_material");h(this,"meshInstance");h(this,"options",{});h(this,"sorter",null);h(this,"time",0);h(this,"lastCameraPosition",new A);h(this,"lastCameraDirection",new A);h(this,"resolveSH",null);h(this,"cameras",[]);h(this,"forceUpDateSorterTime",(t,e=void 0)=>{(e||e===0)&&(this.material.setParameter("uTime",e),this.updateTime(e)),this.sort(t)});console.log("____ ENGINE IVAN","new GSplatInstance",t.numSplats),this.resource=t,this.orderTexture=this.resource.createTexture("splatOrder",Zi,this.resource.evalTextureSize(this.resource.numSplats)),this.backOrderTexture=null,e.material?(this._material=e.material,this._material.setParameter("splatOrder",this.orderTexture)):(this._material=new zn({uniqueName:"SplatMaterial",vertexGLSL:'#include "gsplatVS"',fragmentGLSL:'#include "gsplatPS"',vertexWGSL:'#include "gsplatVS"',fragmentWGSL:'#include "gsplatPS"',attributes:{vertex_position:Ae,vertex_id_attrib:qh}}),this.configureMaterial(this._material),this._material.update()),this.meshInstance=new Ge(this.resource.mesh,this._material),this.meshInstance.setInstancing(this.resource.instanceIndices,!0),this.meshInstance.gsplatInstance=this,this.meshInstance.instancingCount=0,this.sorter=new AA,this.sorter.on("initialized",async()=>{var c,d,f,u,p,m,_,S,g,v,w;const s=((d=(c=this.resource.gsplatData)==null?void 0:c.transformData)==null?void 0:d.dataPosition)??new Float32Array(0),i=((u=(f=this.resource.gsplatData)==null?void 0:f.transformData)==null?void 0:u.muT)??new Float32Array(0),r=((m=(p=this.resource.gsplatData)==null?void 0:p.transformData)==null?void 0:m.tScaleArray)??new Float32Array(0),a=((S=(_=this.resource.gsplatData)==null?void 0:_.transformData)==null?void 0:S.dataMotion)??new Float32Array(0),n=((v=(g=this.resource.gsplatData)==null?void 0:g.transformData)==null?void 0:v.timeIndex)??new Float32Array(0),o=this.resource.timeOption??new Float32Array(0);await((w=this.sorter)==null?void 0:w.updateData(this.orderTexture,s,i,r,a,n,o,this.resource.is4D))}),this.sorter.on("updated",async(s,i,r)=>{var a;this.meshInstance.instancingCount=Math.ceil(s/this.resource.instanceSize),r&&this.backOrderTexture&&(console.log("____ ENGINE IVAN","GSplatInstance updated"),[this.orderTexture,this.backOrderTexture]=[this.backOrderTexture,this.orderTexture],await this.resource.updateTexture(),this.resource.configureMaterial(this._material),this._material.setParameter("splatOrder",this.orderTexture)),r&&((a=this.resource)==null||a.fireAssetsManagerTimeIndex()),this.material.setParameter("numSplats",s)}),this.setHighQualitySH(e.highQualitySH??!1)}async updateInstanceData(t){var c,d,f,u,p,m,_,S,g,v,w,x;console.log("____ ENGINE IVAN","updateInstanceData ASSETS GSplatInstance",t.gsplatData.numSplats),this.resource=t;const e=this.resource.evalTextureSize(t.gsplatData.numSplats);(c=this.backOrderTexture)==null||c.destroy(),this.backOrderTexture=this.resource.createTexture("splatOrder2",Zi,e),this.meshInstance.setInstancing(this.resource.instanceIndices,!0);const s=((f=(d=this.resource.gsplatData)==null?void 0:d.transformData)==null?void 0:f.dataPosition)??new Float32Array(0),i=((p=(u=this.resource.gsplatData)==null?void 0:u.transformData)==null?void 0:p.muT)??new Float32Array(0),r=((_=(m=this.resource.gsplatData)==null?void 0:m.transformData)==null?void 0:_.tScaleArray)??new Float32Array(0),a=((g=(S=this.resource.gsplatData)==null?void 0:S.transformData)==null?void 0:g.dataMotion)??new Float32Array(0),n=((w=(v=this.resource.gsplatData)==null?void 0:v.transformData)==null?void 0:w.timeIndex)??new Float32Array(0),o=this.resource.timeOption??new Float32Array(0);return await((x=this.sorter)==null?void 0:x.updateData(this.backOrderTexture,s,i,r,a,n,o,this.resource.is4D)),new Promise(b=>{var D;const C=(T,I,L)=>{var E;L&&((E=this.sorter)==null||E.off("updated",C),b(!0))};(D=this.sorter)==null||D.on("updated",C)})}destroy(){var t,e,s,i,r,a;(t=this.resolveSH)==null||t.destroy(),(e=this.material)==null||e.destroy(),(s=this.meshInstance)==null||s.destroy(),(i=this.sorter)==null||i.destroy(),(r=this.orderTexture)==null||r.destroy(),(a=this.backOrderTexture)==null||a.destroy()}set material(t){console.log("____ ENGINE IVAN"," GSplatInstance.set material"),this._material!==t&&(this._material=t,this._material.setParameter("splatOrder",this.orderTexture),this.meshInstance&&(this.meshInstance.material=t))}get material(){return this._material}configureMaterial(t,e={}){console.log("____ ENGINE IVAN"," GSplatInstance.configureMaterial"),this.resource.configureMaterial(t),t.setParameter("numSplats",0),t.setParameter("splatOrder",this.orderTexture),t.setParameter("alphaClip",.3),t.setDefine(`DITHER_${e.dither?"BLUENOISE":"NONE"}`,""),t.cull=wt,t.blendType=e.dither?Cs:Ks,t.depthWrite=!!e.dither}updateViewport(t){var n;const e=t==null?void 0:t.camera,s=e==null?void 0:e.renderTarget,{width:i,height:r}=s??this.resource.device;ah[0]=i,ah[1]=r;const a=(n=e==null?void 0:e.camera)==null?void 0:n.xr;a!=null&&a.active&&a.views.list.length===2&&(ah[0]*=.5),this.material.setParameter("viewport",ah)}sort(t){if(this.sorter){const e=t.getWorldTransform();e.getTranslation(Ua),e.getZ(Ba);const s=this.meshInstance.node.getWorldTransform(),i=CA.invert(s);i.transformPoint(Ua,Ua),i.transformVector(Ba,Ba);const r=!Ua.equalsApprox(this.lastCameraPosition),a=!Ba.equalsApprox(this.lastCameraDirection);(r||a)&&(this.lastCameraPosition.copy(Ua),this.lastCameraDirection.copy(Ba),this.sorter.setCamera(Ua,Ba)),this.sorter.setCurrentTime(this.time)}this.updateViewport(t)}update(){var t;if(this.cameras.length>0){const e=this.cameras[0];this.sort(e._node),(t=this.resolveSH)==null||t.render(e._node,this.meshInstance.node.getWorldTransform()),this.cameras.length=0}}setHighQualitySH(t){const{resource:e}=this,{gsplatData:s}=e;s instanceof EA&&s.shBands>0&&t===!!this.resolveSH&&(this.resolveSH?(this.resolveSH.destroy(),this.resolveSH=null):this.resolveSH=new yA(e.device,this))}updateTime(t){this.time=t}}class Hy{constructor(t,e){h(this,"sceneInfo",{});h(this,"isDestroyed",!0);h(this,"device");h(this,"gsplatData");h(this,"centers");h(this,"aabb");h(this,"mesh");h(this,"instanceIndices");h(this,"gsplatInstance");h(this,"transformData");this.device=t,this.gsplatData=e,this.isDestroyed=!1,this.transformData={};const s=128,r=Math.ceil(e.numSplats/s)*s/s,a=new Uint32Array(r);for(let d=0;d<r;++d)a[d]=d*s;const n=new Nt(t,[{semantic:qh,components:1,type:Wo,asInt:!0}]),o=new Float32Array(12*s),c=new Uint32Array(6*s);for(let d=0;d<s;++d){o.set([-1,-1,d,1,-1,d,1,1,d,-1,1,d],d*12);const f=d*4;c.set([0+f,1+f,2+f,0+f,2+f,3+f],d*6)}this.mesh=new Ve(t),this.mesh.setPositions(o,3),this.mesh.setIndices(c),this.mesh.update(),this.mesh.incRefCount(),this.instanceIndices=new Is(t,n,r,{usage:ps,data:a.buffer})}updateData(){var c;const t=this.gsplatData;if(!t)return;const e=128,i=Math.ceil(t.numSplats/e)*e/e,r=new Uint32Array(i);for(let d=0;d<i;++d)r[d]=d*e;const a=new Nt(this.device,[{semantic:qh,components:1,type:Wo,asInt:!0}]),n=new Float32Array(12*e),o=new Uint32Array(6*e);for(let d=0;d<e;++d){n.set([-1,-1,d,1,-1,d,1,1,d,-1,1,d],d*12);const f=d*4;o.set([0+f,1+f,2+f,0+f,2+f,3+f],d*6)}this.mesh.setPositions(n,3),this.mesh.setIndices(o),this.mesh.update(),this.mesh.incRefCount(),(c=this.instanceIndices)==null||c.destroy(),this.instanceIndices=new Is(this.device,a,i,{usage:ps,data:r.buffer})}updateTexture(){}destroy(){var t,e,s,i;(t=this.mesh)==null||t.destroy(),(e=this.instanceIndices)==null||e.destroy(),(s=this.gsplatData)==null||s.destroy(),this.gsplatData=null,(i=this.gsplatInstance)==null||i.destroy(),this.gsplatInstance=void 0,this.isDestroyed=!0,this.mesh=null}get instanceSize(){return 128}get numSplats(){var t;return(t=this.gsplatData)==null?void 0:t.numSplats}setSceneInfo(t){}configureMaterial(t){}evalTextureSize(t){return J.ZERO}appendGSplatResource(t,e,s,i,r,a){}fireAssetsManagerTimeIndex(){}createTexture(t,e,s,i){return new ge(this.device,{name:t,width:s.x,height:s.y,format:e,cubemap:!1,mipmaps:!1,minFilter:Te,magFilter:Te,addressU:me,addressV:me,...i?{levels:[i]}:{}})}instantiate(){y.removed("GSplatResource.instantiate is removed. Use gsplat component instead")}createInstance(t,e){return this.gsplatInstance=new PA(t,e),this.gsplatInstance}updateInstanceAabb(t){this.gsplatInstance&&(this.gsplatInstance.meshInstance.setCustomAabb(t),this.gsplatInstance.meshInstance.aabb=t)}}class DA extends Hy{constructor(e,s){console.log("____ ENGINE IVAN","new GSplatResource");super(e,s);h(this,"timeOption");h(this,"appendQueue",[]);h(this,"isProcessingQueue",!1);h(this,"colorTexture");h(this,"transformATexture");h(this,"transformBTexture");h(this,"transformRTexture");h(this,"transformMotionTexture");h(this,"transformLifecycleTexture");h(this,"colorTexture2");h(this,"transformATexture2");h(this,"transformBTexture2");h(this,"transformRTexture2");h(this,"transformMotionTexture2");h(this,"transformLifecycleTexture2");h(this,"is4D");h(this,"sh1to3Texture");h(this,"sh4to7Texture");h(this,"sh8to11Texture");h(this,"sh12to15Texture");h(this,"sh1to3Texture2");h(this,"sh4to7Texture2");h(this,"sh8to11Texture2");h(this,"sh12to15Texture2");h(this,"assetsManagerLoadedTime");this.assetsManagerLoadedTime=0,this.aabb=new Me(new A(0,0,0),new A(2,2,2)),this.mesh.aabb.copy(this.aabb)}async updateData(){var i,r,a,n,o,c,d,f,u,p,m;console.log("____ ENGINE IVAN","ASSETS GSplat updateData"),await super.updateData();const e=this.gsplatData;if(!e)return;this.is4D=e.is4D,await e.calcAabbAsync(this.aabb),this.mesh.aabb.copy(this.aabb),this.updateInstanceAabb(this.aabb),console.log("____ ENGINE IVAN","GSplatResource updateData numSplats",e.numSplats);const s=this.evalTextureSize(e.numSplats);this.colorTexture?((i=this.colorTexture2)==null||i.destroy(),(r=this.transformATexture2)==null||r.destroy(),(a=this.transformBTexture2)==null||a.destroy(),(n=this.transformRTexture2)==null||n.destroy(),this.colorTexture2=this.createTexture("splatColor2",nt,s),this.transformATexture2=this.createTexture("transformA2",Ye,s),this.transformBTexture2=this.createTexture("transformB2",ui,s),this.transformRTexture2=this.createTexture("transformR2",Ye,s),this.is4D&&((o=this.transformMotionTexture2)==null||o.destroy(),(c=this.transformLifecycleTexture2)==null||c.destroy(),this.transformMotionTexture2=this.createTexture("transformMotion2",Ye,s),this.transformLifecycleTexture2=this.createTexture("transformLifecycleTexture2",Ye,s))):(this.colorTexture=this.createTexture("splatColor",nt,s),this.colorTexture2=this.createTexture("splatColor2",nt,s),this.transformATexture=this.createTexture("transformA",Ye,s),this.transformATexture2=this.createTexture("transformA2",Ye,s),this.transformBTexture=this.createTexture("transformB",ui,s),this.transformBTexture2=this.createTexture("transformB2",ui,s),this.transformRTexture=this.createTexture("transformR",Ye,s),this.transformRTexture2=this.createTexture("transformR2",Ye,s),this.is4D&&(this.transformMotionTexture=this.createTexture("transformMotion",Ye,s),this.transformMotionTexture2=this.createTexture("transformMotion2",Ye,s),this.transformLifecycleTexture=this.createTexture("transformLifecycleTexture",Ye,s),this.transformLifecycleTexture2=this.createTexture("transformLifecycleTexture2",Ye,s))),await this.updateColorData(),await this.updateTransformFromData(),this.shBands>0&&(this.sh1to3Texture?((d=this.sh1to3Texture2)==null||d.destroy(),this.sh1to3Texture2=this.createTexture("splatSH_1to3_2",ke,s),this.shBands>1&&((f=this.sh4to7Texture2)==null||f.destroy(),this.sh4to7Texture2=this.createTexture("splatSH_4to7_2",ke,s),this.shBands>2?((u=this.sh8to11Texture2)==null||u.destroy(),(p=this.sh12to15Texture2)==null||p.destroy(),this.sh8to11Texture2=this.createTexture("splatSH_8to11_2",ke,s),this.sh12to15Texture2=this.createTexture("splatSH_12to15_2",ke,s)):((m=this.sh8to11Texture2)==null||m.destroy(),this.sh8to11Texture2=this.createTexture("splatSH_8to11_2",ke,s)))):(this.sh1to3Texture=this.createTexture("splatSH_1to3",ke,s),this.sh1to3Texture2=this.createTexture("splatSH_1to3_2",ke,s),this.shBands>1&&(this.sh4to7Texture=this.createTexture("splatSH_4to7",ke,s),this.sh4to7Texture2=this.createTexture("splatSH_4to7_2",ke,s),this.shBands>2?(this.sh8to11Texture=this.createTexture("splatSH_8to11",ke,s),this.sh8to11Texture2=this.createTexture("splatSH_8to11_2",ke,s),this.sh12to15Texture=this.createTexture("splatSH_12to15",ke,s),this.sh12to15Texture2=this.createTexture("splatSH_12to15_2",ke,s)):(this.sh8to11Texture=this.createTexture("splatSH_8to11",Zi,s),this.sh8to11Texture2=this.createTexture("splatSH_8to11_2",Zi,s)))),await this.updateSHDataByWorker())}updateTexture(){console.log("____ ENGINE IVAN","ASSETS GSplat updateTexture"),!this.isDestroyed&&(super.updateTexture(),[this.colorTexture,this.colorTexture2]=[this.colorTexture2,this.colorTexture],[this.transformATexture,this.transformATexture2]=[this.transformATexture2,this.transformATexture],[this.transformBTexture,this.transformBTexture2]=[this.transformBTexture2,this.transformBTexture],[this.transformRTexture,this.transformRTexture2]=[this.transformRTexture2,this.transformRTexture],this.is4D&&([this.transformMotionTexture,this.transformMotionTexture2]=[this.transformMotionTexture2,this.transformMotionTexture],[this.transformLifecycleTexture,this.transformLifecycleTexture2]=[this.transformLifecycleTexture2,this.transformLifecycleTexture]),[this.sh1to3Texture,this.sh1to3Texture2]=[this.sh1to3Texture2,this.sh1to3Texture],[this.sh4to7Texture,this.sh4to7Texture2]=[this.sh4to7Texture2,this.sh4to7Texture],[this.sh8to11Texture,this.sh8to11Texture2]=[this.sh8to11Texture2,this.sh8to11Texture],[this.sh12to15Texture,this.sh12to15Texture2]=[this.sh12to15Texture2,this.sh12to15Texture])}releaseGSplatResource(e){this.appendQueue.push({type:"release",taskId:new Date().getTime(),data:{index:e}}),this.isProcessingQueue||Promise.resolve().then(()=>this.processQueue())}async releaseAllGSplatResource(){this.isDestroyed||(console.log("____ ENGINE IVAN","ASSETS GSplat releaseSeqGSplat all"),this.appendQueue=[],await this.gsplatData.releaseAllSeqData())}appendGSplatResource(e,s,i,r,a,n){this.appendQueue.push({type:"append",taskId:new Date().getTime(),data:{properties:e,numSplats:s,timeOption:i,loadedTime:r,asset:a,events:n}}),this.isProcessingQueue||Promise.resolve().then(()=>this.processQueue())}async processQueue(){if(!this.isProcessingQueue){this.isProcessingQueue=!0;try{for(;this.appendQueue.length>0;){const e=this.appendQueue.shift();e.type==="append"?await this.processAppendTask(e.data):e.type==="release"&&await this.processReleaseTask(e.data)}}finally{this.isProcessingQueue=!1}}}async processReleaseTask(e){const{index:s}=e;console.log("____ ENGINE IVAN","GSplatResource.releaseGSplatResource",s),!this.isDestroyed&&await this.gsplatData.releaseSeqData(s)}async processAppendTask(e){var c;const{properties:s,numSplats:i,timeOption:r,loadedTime:a,asset:n,events:o}=e;!this.gsplatData||this.isDestroyed||(this.timeOption=r,await this.gsplatData.appendGSplatData(s,i,a,r),await this.updateData(),this.asset=n,this.assetsManagerLoadedTime=a,this.events=o,await((c=this.gsplatInstance)==null?void 0:c.updateInstanceData(this)))}fireAssetsManagerTimeIndex(){var s,i;const e=this.assetsManagerLoadedTime;console.log("____ ENGINE IVAN","fireAssetsManagerTimeIndex",e),(s=this.asset)==null||s.fire("setAssetsLoaded",e),(i=this.asset)==null||i.fire("setAlreadyDrawStatus")}destroy(){var e,s,i,r,a,n,o,c,d,f,u,p,m,_,S,g,v,w,x,b;(e=this.colorTexture)==null||e.destroy(),(s=this.transformATexture)==null||s.destroy(),(i=this.transformBTexture)==null||i.destroy(),(r=this.transformRTexture)==null||r.destroy(),(a=this.transformMotionTexture)==null||a.destroy(),(n=this.transformLifecycleTexture)==null||n.destroy(),(o=this.sh1to3Texture)==null||o.destroy(),(c=this.sh4to7Texture)==null||c.destroy(),(d=this.sh8to11Texture)==null||d.destroy(),(f=this.sh12to15Texture)==null||f.destroy(),(u=this.colorTexture2)==null||u.destroy(),(p=this.transformATexture2)==null||p.destroy(),(m=this.transformBTexture2)==null||m.destroy(),(_=this.transformRTexture2)==null||_.destroy(),(S=this.transformMotionTexture2)==null||S.destroy(),(g=this.transformLifecycleTexture2)==null||g.destroy(),(v=this.sh1to3Texture2)==null||v.destroy(),(w=this.sh4to7Texture2)==null||w.destroy(),(x=this.sh8to11Texture2)==null||x.destroy(),(b=this.sh12to15Texture2)==null||b.destroy(),this.releaseAllGSplatResource(),super.destroy()}configureMaterial(e){var S,g,v,w,x,b,C,D,T,I,L,E,F;if(console.log("====== ENGINE IVAN","GSplat.configureMaterial"),this.isDestroyed)return;const s=((S=e.getParameter("pointCloudModeEnabled"))==null?void 0:S.data)??0,i=((g=e.getParameter("uSplatScale"))==null?void 0:g.data)??1,r=((v=e.getParameter("uSaturation"))==null?void 0:v.data)??1,a=((w=e.getParameter("uHueOffset"))==null?void 0:w.data)??0,n=((x=e.getParameter("uInvertOpacity"))==null?void 0:x.data)??0,o=((b=e.getParameter("uOpacity"))==null?void 0:b.data)??1,c=((C=e.getParameter("clrOffset"))==null?void 0:C.data)??[0,0,0,1],d=((D=e.getParameter("clrScale"))==null?void 0:D.data)??[1,1,1,1],f=((T=e.getParameter("uShapeN"))==null?void 0:T.data)??0,u=((I=e.getParameter("mode"))==null?void 0:I.data)??0,p=((L=e.getParameter("ringSize"))==null?void 0:L.data)??0,m=((E=e.defines)==null?void 0:E.get("uOpenAnim"))??"0",_=((F=e.defines)==null?void 0:F.get("uControlColorMode"))??"0";e.setParameter("splatColor",this.colorTexture),e.setParameter("transformA",this.transformATexture),e.setParameter("transformB",this.transformBTexture),e.setParameter("transformR",this.transformRTexture),e.setParameter("uSplatScale",i),e.setParameter("pointCloudModeEnabled",s),e.setParameter("uSaturation",r),e.setParameter("uHueOffset",a),e.setParameter("uInvertOpacity",n),e.setParameter("uOpacity",o),e.setParameter("clrOffset",c),e.setParameter("clrScale",d),e.setParameter("uShapeN",f),e.setParameter("mode",u),e.setParameter("ringSize",p),e.setParameter("prerenderCTime",0),e.setParameter("renderSpace",10),e.setParameter("endSpace",10),e.setDefine("uOpenAnim",m),e.setDefine("uControlColorMode",_),this.transformMotionTexture&&e.setParameter("transformMotion",this.transformMotionTexture),this.transformLifecycleTexture&&e.setParameter("transformLifecycle",this.transformLifecycleTexture),e.setDefine("SH_BANDS",this.shBands),e.setDefine("IS_4D",this.is4D),this.sh1to3Texture&&e.setParameter("splatSH_1to3",this.sh1to3Texture),this.sh4to7Texture&&e.setParameter("splatSH_4to7",this.sh4to7Texture),this.sh8to11Texture&&e.setParameter("splatSH_8to11",this.sh8to11Texture),this.sh12to15Texture&&e.setParameter("splatSH_12to15",this.sh12to15Texture)}evalTextureSize(e){const s=Math.ceil(Math.sqrt(e)),i=Math.ceil(e/s);return new J(s,i)}async updateColorData(){var i,r;console.log("____ ENGINE IVAN","updateColorData");const e=this.colorTexture2;if(!e||this.isDestroyed)return;let s=(r=(i=this.gsplatData)==null?void 0:i.transformData)==null?void 0:r.dataColor;s||(s=new Uint16Array(0)),await this.idleUpdateTexturePromise(e,s)}async updateTransformFromData(){var e,s,i,r,a,n,o,c,d,f,u;console.log("____ ENGINE IVAN","updateTransformFromData"),!(!this.transformATexture2||!((e=this.gsplatData)!=null&&e.transformData))&&(await this.idleUpdateTexturePromise(this.transformATexture2,(i=(s=this.gsplatData)==null?void 0:s.transformData)==null?void 0:i.dataPosition),await this.idleUpdateTexturePromise(this.transformRTexture2,(a=(r=this.gsplatData)==null?void 0:r.transformData)==null?void 0:a.dataRotation),await this.idleUpdateTexturePromise(this.transformBTexture2,(o=(n=this.gsplatData)==null?void 0:n.transformData)==null?void 0:o.dataScale),this.is4D&&(await this.idleUpdateTexturePromise(this.transformMotionTexture2,(d=(c=this.gsplatData)==null?void 0:c.transformData)==null?void 0:d.dataMotion),await this.idleUpdateTexturePromise(this.transformLifecycleTexture2,(u=(f=this.gsplatData)==null?void 0:f.transformData)==null?void 0:u.dataTime)))}async idleUpdateTexturePromise(e,s){if(!this.isDestroyed)return new Promise(i=>{setTimeout(()=>{e.write(0,0,e.width,e.height-1,s).then(()=>{i(!0)}).catch(r=>{console.error("____ ENGINE IVAN","idleUpdateTexturePromise",r),i(!1)})},100)})}get shBands(){var e;return((e=this.gsplatData)==null?void 0:e.shBands)??0}async updateSHDataByWorker(){var a,n,o,c,d,f,u,p,m,_;if(console.log("____ ENGINE IVAN","updateSHDataByWorker"),this.isDestroyed)return;let e,s,i,r;(n=(a=this.gsplatData)==null?void 0:a.transformData)!=null&&n.sh1to3Data?(e=(c=(o=this.gsplatData)==null?void 0:o.transformData)==null?void 0:c.sh1to3Data,s=(f=(d=this.gsplatData)==null?void 0:d.transformData)==null?void 0:f.sh4to7Data,i=(p=(u=this.gsplatData)==null?void 0:u.transformData)==null?void 0:p.sh8to11Data,r=(_=(m=this.gsplatData)==null?void 0:m.transformData)==null?void 0:_.sh12to15Data):(e=new Uint32Array(0),s=new Uint32Array(0),i=new Uint32Array(0),r=new Uint32Array(0)),await this.idleUpdateTexturePromise(this.sh1to3Texture2,e),this.shBands>1&&(await this.idleUpdateTexturePromise(this.sh4to7Texture2,s),this.shBands>2?(await this.idleUpdateTexturePromise(this.sh8to11Texture2,i),await this.idleUpdateTexturePromise(this.sh12to15Texture2,r)):await this.idleUpdateTexturePromise(this.sh8to11Texture2,i))}}class IA extends Hy{constructor(e,s){super(e,s);h(this,"timeOption");h(this,"appendQueue",[]);h(this,"isProcessingQueue",!1);h(this,"muT");h(this,"tScale");h(this,"motion");h(this,"timeIndex");h(this,"colorTexture");h(this,"transformATexture");h(this,"transformBTexture");h(this,"transformRTexture");h(this,"transformMotionTexture");h(this,"transformLifecycleTexture");h(this,"colorTexture2");h(this,"transformATexture2");h(this,"transformBTexture2");h(this,"transformRTexture2");h(this,"transformMotionTexture2");h(this,"transformLifecycleTexture2");h(this,"is4D");h(this,"shBands");h(this,"sh1to3Texture");h(this,"sh4to7Texture");h(this,"sh8to11Texture");h(this,"sh12to15Texture");h(this,"sh1to3Texture2");h(this,"sh4to7Texture2");h(this,"sh8to11Texture2");h(this,"sh12to15Texture2");this.assetsManagerLoadedTime=0}setSceneInfo(e){this.sceneInfo.duration=e.duration,this.sceneInfo.fps=e.fps,this.sceneInfo.totalGaussians=e.totalGaussians,this.sceneInfo.globalBoundingBoxMin=new A(e.globalBoundingBox.min[0],e.globalBoundingBox.min[1],e.globalBoundingBox.min[2]),this.sceneInfo.globalBoundingBoxMax=new A(e.globalBoundingBox.max[0],e.globalBoundingBox.max[1],e.globalBoundingBox.max[2]);const s=e.globalBoundingBox.min[0],i=e.globalBoundingBox.min[1],r=e.globalBoundingBox.min[2],a=e.globalBoundingBox.max[0],n=e.globalBoundingBox.max[1],o=e.globalBoundingBox.max[2],c=new A((s+a)*.5,(i+n)*.5,(r+o)*.5),d=new A((a-s)*.5,(n-i)*.5,(o-r)*.5),f=new Me(c,d);this.sceneInfo.globalBoundingBox=f,this.aabb=f}async updateData(){var i,r,a,n,o,c,d,f,u,p,m;await super.updateData();const e=this.gsplatData;if(!e)return;this.is4D=e.is4D,this.transformData=await this.getTransformDataByWorker(),this.mesh.aabb.copy(this.aabb);const s=this.evalTextureSize(e.numSplats);this.colorTexture?((i=this.colorTexture2)==null||i.destroy(),(r=this.transformATexture2)==null||r.destroy(),(a=this.transformBTexture2)==null||a.destroy(),(n=this.transformRTexture2)==null||n.destroy(),this.colorTexture2=this.createTexture("splatColor2",nt,s),this.transformATexture2=this.createTexture("transformA2",Ye,s),this.transformBTexture2=this.createTexture("transformB2",ui,s),this.transformRTexture2=this.createTexture("transformR2",Ye,s),this.is4D&&((o=this.transformMotionTexture2)==null||o.destroy(),(c=this.transformLifecycleTexture2)==null||c.destroy(),this.transformMotionTexture2=this.createTexture("transformMotion2",Ye,s),this.transformLifecycleTexture2=this.createTexture("transformLifecycleTexture2",Ye,s))):(this.colorTexture=this.createTexture("splatColor",nt,s),this.colorTexture2=this.createTexture("splatColor2",nt,s),this.transformATexture=this.createTexture("transformA",Ye,s),this.transformATexture2=this.createTexture("transformA2",Ye,s),this.transformBTexture=this.createTexture("transformB",ui,s),this.transformBTexture2=this.createTexture("transformB2",ui,s),this.transformRTexture=this.createTexture("transformR",Ye,s),this.transformRTexture2=this.createTexture("transformR2",Ye,s),this.is4D&&(this.transformMotionTexture=this.createTexture("transformMotion",Ye,s),this.transformMotionTexture2=this.createTexture("transformMotion2",Ye,s),this.transformLifecycleTexture=this.createTexture("transformLifecycleTexture",Ye,s),this.transformLifecycleTexture2=this.createTexture("transformLifecycleTexture2",Ye,s))),await this.updateColorData(),await this.updateTransformFromData(),this.shBands=e.shBands,this.shBands>0&&(this.sh1to3Texture?((d=this.sh1to3Texture2)==null||d.destroy(),this.sh1to3Texture2=this.createTexture("splatSH_1to3",ke,s),this.shBands>1&&((f=this.sh4to7Texture2)==null||f.destroy(),this.sh4to7Texture2=this.createTexture("splatSH_4to72",ke,s),this.shBands>2?((u=this.sh8to11Texture2)==null||u.destroy(),(p=this.sh12to15Texture2)==null||p.destroy(),this.sh8to11Texture2=this.createTexture("splatSH_8to112",ke,s),this.sh12to15Texture2=this.createTexture("splatSH_12to152",ke,s)):((m=this.sh8to11Texture2)==null||m.destroy(),this.sh8to11Texture2=this.createTexture("splatSH_8to112",ke,s)))):(this.sh1to3Texture=this.createTexture("splatSH_1to3",ke,s),this.sh1to3Texture2=this.createTexture("splatSH_1to32",ke,s),this.shBands>1&&(this.sh4to7Texture=this.createTexture("splatSH_4to7",ke,s),this.sh4to7Texture2=this.createTexture("splatSH_4to72",ke,s),this.shBands>2?(this.sh8to11Texture=this.createTexture("splatSH_8to11",ke,s),this.sh8to11Texture2=this.createTexture("splatSH_8to112",ke,s),this.sh12to15Texture=this.createTexture("splatSH_12to15",ke,s),this.sh12to15Texture2=this.createTexture("splatSH_12to152",ke,s)):(this.sh8to11Texture=this.createTexture("splatSH_8to11",Zi,s),this.sh8to11Texture2=this.createTexture("splatSH_8to112",Zi,s)))),await this.updateSHDataByWorker())}updateTexture(){this.isDestroyed||(super.updateTexture(),[this.colorTexture,this.colorTexture2]=[this.colorTexture2,this.colorTexture],[this.transformATexture,this.transformATexture2]=[this.transformATexture2,this.transformATexture],[this.transformBTexture,this.transformBTexture2]=[this.transformBTexture2,this.transformBTexture],[this.transformRTexture,this.transformRTexture2]=[this.transformRTexture2,this.transformRTexture],this.is4D&&([this.transformMotionTexture,this.transformMotionTexture2]=[this.transformMotionTexture2,this.transformMotionTexture],[this.transformLifecycleTexture,this.transformLifecycleTexture2]=[this.transformLifecycleTexture2,this.transformLifecycleTexture]),[this.sh1to3Texture,this.sh1to3Texture2]=[this.sh1to3Texture2,this.sh1to3Texture],[this.sh4to7Texture,this.sh4to7Texture2]=[this.sh4to7Texture2,this.sh4to7Texture],[this.sh8to11Texture,this.sh8to11Texture2]=[this.sh8to11Texture2,this.sh8to11Texture],[this.sh12to15Texture,this.sh12to15Texture2]=[this.sh12to15Texture2,this.sh12to15Texture])}releaseGSplatResource(e){this.appendQueue.push({type:"release",taskId:new Date().getTime(),data:{index:e}}),this.isProcessingQueue||Promise.resolve().then(()=>this.processQueue())}async releaseAllGSplatResource(){this.isDestroyed||(this.appendQueue=[],await this.gsplatData.releaseAllSeqData())}appendGSplatResource(e,s,i,r,a,n){this.appendQueue.push({type:"append",taskId:new Date().getTime(),data:{properties:e,timeOption:s,loadedTime:i,asset:r,events:a,seekCB:n}}),this.isProcessingQueue||Promise.resolve().then(()=>this.processQueue())}async processQueue(){if(!this.isProcessingQueue){this.isProcessingQueue=!0;try{for(;this.appendQueue.length>0;){const e=this.appendQueue.shift();e.type==="append"?await this.processAppendTask(e.data):e.type==="release"&&await this.processReleaseTask(e.data)}}finally{this.isProcessingQueue=!1}}}async processReleaseTask(e){const{index:s}=e;this.isDestroyed||await this.gsplatData.releaseSeqData(s)}async processAppendTask(e){var c;const{properties:s,timeOption:i,loadedTime:r,asset:a,events:n,seekCB:o}=e;!this.gsplatData||this.isDestroyed||(this.timeOption=i,this.asset=a,this.assetsManagerLoadedTime=r,this.events=n,await this.gsplatData.appendGSplatData(s,r,i),await this.updateData(),await((c=this.gsplatInstance)==null?void 0:c.updateInstanceData(this,r,o)))}fireAssetsManagerTimeIndex(e,s){var r;const i=e||this.assetsManagerLoadedTime;(r=this.asset)==null||r.fire("setAssetsLoaded",i,s)}destroy(){var e,s,i,r,a,n,o,c,d,f,u,p,m,_,S,g,v,w,x,b;(e=this.colorTexture)==null||e.destroy(),(s=this.transformATexture)==null||s.destroy(),(i=this.transformBTexture)==null||i.destroy(),(r=this.transformRTexture)==null||r.destroy(),(a=this.transformMotionTexture)==null||a.destroy(),(n=this.transformLifecycleTexture)==null||n.destroy(),(o=this.sh1to3Texture)==null||o.destroy(),(c=this.sh4to7Texture)==null||c.destroy(),(d=this.sh8to11Texture)==null||d.destroy(),(f=this.sh12to15Texture)==null||f.destroy(),(u=this.colorTexture2)==null||u.destroy(),(p=this.transformATexture2)==null||p.destroy(),(m=this.transformBTexture2)==null||m.destroy(),(_=this.transformRTexture2)==null||_.destroy(),(S=this.transformMotionTexture2)==null||S.destroy(),(g=this.transformLifecycleTexture2)==null||g.destroy(),(v=this.sh1to3Texture2)==null||v.destroy(),(w=this.sh4to7Texture2)==null||w.destroy(),(x=this.sh8to11Texture2)==null||x.destroy(),(b=this.sh12to15Texture2)==null||b.destroy(),this.releaseAllGSplatResource(),super.destroy()}configureMaterial(e){var S,g,v,w,x,b,C,D,T,I,L,E,F;if(console.log("====== ENGINE IVAN","GSplat.configureMaterial"),this.isDestroyed)return;const s=((S=e.getParameter("pointCloudModeEnabled"))==null?void 0:S.data)??0,i=((g=e.getParameter("uSplatScale"))==null?void 0:g.data)??1,r=((v=e.getParameter("uSaturation"))==null?void 0:v.data)??1,a=((w=e.getParameter("uHueOffset"))==null?void 0:w.data)??0,n=((x=e.getParameter("uInvertOpacity"))==null?void 0:x.data)??0,o=((b=e.getParameter("uOpacity"))==null?void 0:b.data)??1,c=((C=e.getParameter("clrOffset"))==null?void 0:C.data)??[0,0,0,1],d=((D=e.getParameter("clrScale"))==null?void 0:D.data)??[1,1,1,1],f=((T=e.getParameter("uShapeN"))==null?void 0:T.data)??0,u=((I=e.getParameter("mode"))==null?void 0:I.data)??0,p=((L=e.getParameter("ringSize"))==null?void 0:L.data)??0,m=((E=e.defines)==null?void 0:E.get("uOpenAnim"))??"0",_=((F=e.defines)==null?void 0:F.get("uControlColorMode"))??"0";e.setParameter("splatColor",this.colorTexture),e.setParameter("transformA",this.transformATexture),e.setParameter("transformB",this.transformBTexture),e.setParameter("transformR",this.transformRTexture),e.setParameter("uSplatScale",i),e.setParameter("pointCloudModeEnabled",s),e.setParameter("uSaturation",r),e.setParameter("uHueOffset",a),e.setParameter("uInvertOpacity",n),e.setParameter("uOpacity",o),e.setParameter("clrOffset",c),e.setParameter("clrScale",d),e.setParameter("uShapeN",f),e.setParameter("mode",u),e.setParameter("ringSize",p),e.setParameter("prerenderCTime",0),e.setParameter("renderSpace",10),e.setParameter("endSpace",10),e.setDefine("uOpenAnim",m),e.setDefine("uControlColorMode",_),this.transformMotionTexture&&e.setParameter("transformMotion",this.transformMotionTexture),this.transformLifecycleTexture&&e.setParameter("transformLifecycle",this.transformLifecycleTexture),e.setDefine("SH_BANDS",this.shBands),e.setDefine("IS_4D",this.is4D),this.sh1to3Texture&&e.setParameter("splatSH_1to3",this.sh1to3Texture),this.sh4to7Texture&&e.setParameter("splatSH_4to7",this.sh4to7Texture),this.sh8to11Texture&&e.setParameter("splatSH_8to11",this.sh8to11Texture),this.sh12to15Texture&&e.setParameter("splatSH_12to15",this.sh12to15Texture)}evalTextureSize(e){const s=Math.ceil(Math.sqrt(e)),i=Math.ceil(e/s);return new J(s,i)}async updateColorData(){var i;console.log("____ ENGINE IVAN","updateColorData");const e=this.colorTexture2;if(!e||this.isDestroyed)return;let s=(i=this.gsplatData.transformData)==null?void 0:i.dataColor;s||(s=new Uint16Array(0)),await this.idleUpdateTexturePromise(e,s)}async getTransformDataByWorker(){var s;console.log("____ ENGINE IVAN","getTransformDataByWorker");let e;return this.gsplatData&&this.gsplatData.transformData&&((s=this.gsplatData.transformData)!=null&&s.dataPosition)?e=this.gsplatData.transformData:e={dataPosition:new Float32Array(0),dataScale:new Uint16Array(0),dataRotation:new Float32Array(0),dataMotion:new Float32Array(0),dataTime:new Float32Array(0),tScaleArray:new Float32Array(0),muT:new Float32Array(0),timeIndex:new Float32Array(0)},e}async updateTransformFromData(){console.log("____ ENGINE IVAN","updateTransformFromData"),this.transformATexture2&&(await this.idleUpdateTexturePromise(this.transformATexture2,this.transformData.dataPosition),await this.idleUpdateTexturePromise(this.transformRTexture2,this.transformData.dataRotation),await this.idleUpdateTexturePromise(this.transformBTexture2,this.transformData.dataScale),this.is4D&&(await this.idleUpdateTexturePromise(this.transformMotionTexture2,this.transformData.dataMotion),await this.idleUpdateTexturePromise(this.transformLifecycleTexture2,this.transformData.dataTime)))}async idleUpdateTexturePromise(e,s){if(!this.isDestroyed)return new Promise(i=>{requestIdleCallback(()=>{try{e.write(0,0,e.width,e.height-1,s),i(!0)}catch(r){console.error("____ ENGINE IVAN","idleUpdateTexturePromise",r),i(!1)}},{timeout:300})})}async updateSHDataByWorker(){var a,n,o,c,d;if(console.log("____ ENGINE IVAN","updateSHDataByWorker"),this.isDestroyed)return;let e,s,i,r;(a=this.gsplatData.transformData)!=null&&a.sh1to3Data?(e=(n=this.gsplatData.transformData)==null?void 0:n.sh1to3Data,s=(o=this.gsplatData.transformData)==null?void 0:o.sh4to7Data,i=(c=this.gsplatData.transformData)==null?void 0:c.sh8to11Data,r=(d=this.gsplatData.transformData)==null?void 0:d.sh12to15Data):(e=new Uint32Array(0),s=new Uint32Array(0),i=new Uint32Array(0),r=new Uint32Array(0)),await this.idleUpdateTexturePromise(this.sh1to3Texture2,e),this.shBands>1&&(await this.idleUpdateTexturePromise(this.sh4to7Texture2,s),this.shBands>2?(await this.idleUpdateTexturePromise(this.sh8to11Texture2,i),await this.idleUpdateTexturePromise(this.sh12to15Texture2,r)):await this.idleUpdateTexturePromise(this.sh8to11Texture2,i))}}const MA="FILL_WINDOW",U_="KEEP_ASPECT",B_="AUTO",LA="FIXED";let Wy;function js(){return Wy}function Hf(l){Wy=l}class RA{constructor(){h(this,"renderPasses",[]);h(this,"renderTargetMap",new Map)}addRenderPass(t){y.assert(t),t.frameUpdate();const e=t.beforePasses;for(let i=0;i<e.length;i++){const r=e[i];r.enabled&&this.addRenderPass(r)}t.enabled&&this.renderPasses.push(t);const s=t.afterPasses;for(let i=0;i<s.length;i++){const r=s[i];r.enabled&&this.addRenderPass(r)}}reset(){this.renderPasses.length=0}compile(){const t=this.renderTargetMap,e=this.renderPasses;for(let r=0;r<e.length;r++){const a=e[r],n=a.renderTarget;if(n!==void 0){const o=t.get(n);if(o){const c=a.colorArrayOps.length;for(let d=0;d<c;d++)a.colorArrayOps[d].clear||(o.colorArrayOps[d].store=!0);a.depthStencilOps.clearDepth||(o.depthStencilOps.storeDepth=!0),a.depthStencilOps.clearStencil||(o.depthStencilOps.storeStencil=!0)}t.set(n,a)}}for(let r=0;r<e.length-1;r++){const a=e[r],n=a.renderTarget,o=e[r+1],c=o.renderTarget;n!==c||n===void 0||o.depthStencilOps.clearDepth||o.depthStencilOps.clearStencil||o.colorArrayOps.some(d=>d.clear)||a.afterPasses.length>0||o.beforePasses.length>0||(a._skipEnd=!0,o._skipStart=!0)}let s=null,i=null;for(let r=0;r<e.length;r++){const a=e[r],n=a.renderTarget,o=n==null?void 0:n.colorBuffer;if(o!=null&&o.cubemap){if(s===o){const c=i.colorArrayOps.length;for(let d=0;d<c;d++)i.colorArrayOps[d].mipmaps=!1}s=n.colorBuffer,i=a}else a.requiresCubemaps&&(s=null,i=null)}t.clear()}render(t){this.compile();const e=this.renderPasses;for(let s=0;s<e.length;s++)e[s].render()}}class OA{constructor(t,e){this.texture0=t,this.texture1=e}destroy(){var t,e;(t=this.texture0)==null||t.destroy(),(e=this.texture1)==null||e.destroy()}}const z_=new jt;class ta{static createTexture(t,e,s,i=""){return new ge(t,{name:`AreaLightLUT${i}`,width:s,height:s,format:e,addressU:me,addressV:me,type:Ds,magFilter:yt,minFilter:Te,anisotropy:1,mipmaps:!1})}static applyTextures(t,e,s){z_.remove(t),z_.get(t,()=>new OA(e,e===s?null:s)),t.scope.resolve("areaLightsLutTex1").setValue(e),t.scope.resolve("areaLightsLutTex2").setValue(s)}static createPlaceholder(t){const e=ta.createTexture(t,nt,2,"placeholder");e.lock().fill(0),e.unlock(),ta.applyTextures(t,e,e)}static set(t,e,s){function i(u,p,m){const _=ta.createTexture(u,m,64);return _.lock().set(p),_.unlock(),_}function r(u){const p=u.length,m=new Uint16Array(p),_=ko.float2Half;for(let S=0;S<p;S++)m[S]=_(u[S]);return m}const a=e,n=s,o=r(a),c=r(n),d=i(t,o,nt),f=i(t,c,nt);ta.applyTextures(t,d,f)}}const oc="en-US",lc={en:"en-US",es:"en-ES",zh:"zh-CN","zh-HK":"zh-TW","zh-TW":"zh-HK","zh-MO":"zh-HK",fr:"fr-FR",de:"de-DE",it:"it-IT",ru:"ru-RU",ja:"ja-JP"},Wp={};function Dr(l,t){for(let e=0,s=l.length;e<s;e++)Wp[l[e]]=t}function Fi(l){const t=l.indexOf("-");return t!==-1?l.substring(0,t):l}function FA(l,t){const e=l.indexOf("-");return e!==-1?t+l.substring(e):t}function $y(l,t){if(t[l])return l;let e=lc[l];if(e&&t[e])return e;const s=Fi(l);return e=lc[s],t[e]?e:t[s]?s:oc}Dr(["ja","ko","th","vi","zh","id"],l=>0);Dr(["fa","hi"],l=>l>=0&&l<=1?0:1);Dr(["fr","pt"],l=>l>=0&&l<2?0:1);Dr(["da"],l=>l===1||!Number.isInteger(l)&&l>=0&&l<=1?0:1);Dr(["de","en","it","el","es","tr","fi","sv","nb","no","ur"],l=>l===1?0:1);Dr(["ru","uk"],l=>{if(Number.isInteger(l)){const t=l%10,e=l%100;if(t===1&&e!==11)return 0;if(t>=2&&t<=4&&(e<12||e>14))return 1;if(t===0||t>=5&&t<=9||e>=11&&e<=14)return 2}return 3});Dr(["pl"],l=>{if(Number.isInteger(l)){if(l===1)return 0;const t=l%10,e=l%100;if(t>=2&&t<=4&&(e<12||e>14))return 1;if(t>=0&&t<=1||t>=5&&t<=9||e>=12&&e<=14)return 2}return 3});Dr(["ar"],l=>{if(l===0)return 0;if(l===1)return 1;if(l===2)return 2;if(Number.isInteger(l)){const t=l%100;if(t>=3&&t<=10)return 3;if(t>=11&&t<=99)return 4}return 5});const NA=Wp[Fi(oc)];function Qd(l){return Wp[l]||NA}const Vn=new RegExp("^\\s*(?:(?:[a-z]+[a-z0-9\\-+.]*:)?//|data:|blob:)","i");class kA{constructor(t="",e="",s=null,i=null,r=null,a=null){this.url=t,this.filename=e,this.hash=s,this.size=i,this.opt=r,this.contents=a}equals(t){return this.url===t.url&&this.filename===t.filename&&this.hash===t.hash&&this.size===t.size&&this.opt===t.opt&&this.contents===t.contents}}let UA=-1;const BA={pvr:"extCompressedTexturePVRTC",dxt:"extCompressedTextureS3TC",etc2:"extCompressedTextureETC",etc1:"extCompressedTextureETC1",basis:"canvas"},V_=["pvr","dxt","etc2","etc1","basis"];class _e extends Se{constructor(e,s,i,r={},a={}){super();h(this,"_file",null);h(this,"_i18n",{});h(this,"_preload",!1);h(this,"_resources",[]);h(this,"id",UA--);h(this,"loaded",!1);h(this,"loading",!1);h(this,"options",{});h(this,"registry",null);h(this,"tags",new Eo(this));h(this,"type");h(this,"urlObject",null);this._name=e||"",this.type=s,this._data=r||{},this.options=a||{},i&&(this.file=i)}set name(e){if(this._name===e)return;const s=this._name;this._name=e,this.fire("name",this,this._name,s)}get name(){return this._name}set file(e){var r,a;if(e&&e.variants&&["texture","textureatlas","bundle"].indexOf(this.type)!==-1){const n=((a=(r=this.registry)==null?void 0:r._loader)==null?void 0:a._app)||js(),o=n==null?void 0:n.graphicsDevice;if(o)for(let c=0,d=V_.length;c<d;c++){const f=V_[c];if(e.variants[f]&&o[BA[f]]){e=e.variants[f];break}if(n.enableBundles){const u=n.bundles.listBundlesForAsset(this);if(u&&u.find(p=>{var m;return(m=p==null?void 0:p.file)==null?void 0:m.variants[f]}))break}}}const s=this._file,i=e?new kA(e.url,e.filename,e.hash,e.size,e.opt,e.contents):null;(!!i!=!!s||i&&!i.equals(s))&&(this._file=i,this.fire("change",this,"file",i,s),this.reload())}get file(){return this._file}set data(e){const s=this._data;this._data=e,e!==s&&(this.fire("change",this,"data",e,s),this.loaded&&this.registry._loader.patch(this,this.registry))}get data(){return this._data}set resource(e){const s=this._resources[0];this._resources[0]=e,this.fire("change",this,"resource",e,s)}get resource(){return this._resources[0]}set resources(e){const s=this._resources;this._resources=e,this.fire("change",this,"resources",e,s)}get resources(){return this._resources}set preload(e){e=!!e,this._preload!==e&&(this._preload=e,this._preload&&!this.loaded&&!this.loading&&this.registry&&this.registry.load(this))}get preload(){return this._preload}set loadFaces(e){e=!!e,(!this.hasOwnProperty("_loadFaces")||e!==this._loadFaces)&&(this._loadFaces=e,this.loaded&&this.registry._loader.patch(this,this.registry))}get loadFaces(){return this._loadFaces}getFileUrl(){const e=this.file;if(!e||!e.url)return null;let s=e.url;if(this.registry&&this.registry.prefix&&!Vn.test(s)&&(s=this.registry.prefix+s),this.type!=="script"&&e.hash){const i=s.indexOf("?")!==-1?"&":"?";s+=`${i}t=${e.hash}`}return s}getAbsoluteUrl(e){if(e.startsWith("blob:")||e.startsWith("data:"))return e;const s=xe.getDirectory(this.file.url);return xe.join(s,e)}getLocalizedAssetId(e){return e=$y(e,this._i18n),this._i18n[e]||null}addLocalizedAssetId(e,s){this._i18n[e]=s,this.fire("add:localized",e,s)}removeLocalizedAssetId(e){const s=this._i18n[e];s&&(delete this._i18n[e],this.fire("remove:localized",e,s))}ready(e,s){s=s||this,this.loaded?e.call(s,this):this.once("load",i=>{e.call(s,i)})}reload(){this.loaded&&(this.loaded=!1,this.registry.load(this))}unload(){if(!this.loaded&&this._resources.length===0)return;this.fire("unload",this),this.registry.fire(`unload:${this.id}`,this);const e=this._resources;this.urlObject&&(URL.revokeObjectURL(this.urlObject),this.urlObject=null),this.resources=[],this.loaded=!1,this.file&&this.registry._loader.clearCache(this.getFileUrl(),this.type);for(let s=0;s<e.length;++s){const i=e[s];i&&i.destroy&&i.destroy()}}static fetchArrayBuffer(e,s,i,r=0){var a;(a=i==null?void 0:i.file)!=null&&a.contents?setTimeout(()=>{s(null,i.file.contents)}):ot.get(e,{cache:!0,responseType:"arraybuffer",retry:r>0,maxRetries:r},s)}}h(_e,"EVENT_LOAD","load"),h(_e,"EVENT_UNLOAD","unload"),h(_e,"EVENT_REMOVE","remove"),h(_e,"EVENT_ERROR","error"),h(_e,"EVENT_CHANGE","change"),h(_e,"EVENT_PROGRESS","progress"),h(_e,"EVENT_ADDLOCALIZED","add:localized"),h(_e,"EVENT_REMOVELOCALIZED","remove:localized");class zA{constructor(t=null){h(this,"_index",{});h(this,"_key");this._key=t}addItem(t){const e=t.tags._list;for(const s of e)this.add(s,t)}removeItem(t){const e=t.tags._list;for(const s of e)this.remove(s,t)}add(t,e){this._index[t]&&this._index[t].list.indexOf(e)!==-1||(this._index[t]||(this._index[t]={list:[]},this._key&&(this._index[t].keys={})),this._index[t].list.push(e),this._key&&(this._index[t].keys[e[this._key]]=e))}remove(t,e){if(!this._index[t]||this._key&&!this._index[t].keys[e[this._key]])return;const s=this._index[t].list.indexOf(e);s!==-1&&(this._index[t].list.splice(s,1),this._key&&delete this._index[t].keys[e[this._key]],this._index[t].list.length===0&&delete this._index[t])}find(t){const e={},s=[];let i,r,a,n,o;const c=(d,f)=>this._index[d].list.length-this._index[f].list.length;for(let d=0;d<t.length;d++){if(r=t[d],r instanceof Array){if(r.length===0)continue;if(r.length===1)r=r[0];else{o=!1;for(let f=0;f<r.length;f++)if(!this._index[r[f]]){o=!0;break}if(o)continue;a=r.slice(0).sort(c),n=a.slice(1),n.length===1&&(n=n[0]);for(let f=0;f<this._index[a[0]].list.length;f++)i=this._index[a[0]].list[f],(this._key?!e[i[this._key]]:s.indexOf(i)===-1)&&i.tags.has(n)&&(this._key&&(e[i[this._key]]=!0),s.push(i));continue}}if(r&&typeof r=="string"&&this._index[r])for(let f=0;f<this._index[r].list.length;f++)i=this._index[r].list[f],this._key?e[i[this._key]]||(e[i[this._key]]=!0,s.push(i)):s.indexOf(i)===-1&&s.push(i)}return s}}class cn extends Se{constructor(e){super();h(this,"_assets",new Set);h(this,"_loader");h(this,"_idToAsset",new Map);h(this,"_urlToAsset",new Map);h(this,"_nameToAsset",new Map);h(this,"_tags",new zA("id"));h(this,"prefix",null);h(this,"bundles",null);this._loader=e}list(e={}){const s=Array.from(this._assets);return e.preload!==void 0?s.filter(i=>i.preload===e.preload):s}add(e){var s,i;this._assets.has(e)||(this._assets.add(e),this._idToAsset.set(e.id,e),(s=e.file)!=null&&s.url&&this._urlToAsset.set(e.file.url,e),this._nameToAsset.has(e.name)||this._nameToAsset.set(e.name,new Set),this._nameToAsset.get(e.name).add(e),e.on("name",this._onNameChange,this),e.registry=this,this._tags.addItem(e),e.tags.on("add",this._onTagAdd,this),e.tags.on("remove",this._onTagRemove,this),this.fire("add",e),this.fire(`add:${e.id}`,e),(i=e.file)!=null&&i.url&&this.fire(`add:url:${e.file.url}`,e),e.preload&&this.load(e))}remove(e){var s,i;if(!this._assets.has(e))return!1;if(this._assets.delete(e),this._idToAsset.delete(e.id),(s=e.file)!=null&&s.url&&this._urlToAsset.delete(e.file.url),e.off("name",this._onNameChange,this),this._nameToAsset.has(e.name)){const r=this._nameToAsset.get(e.name);r.delete(e),r.size===0&&this._nameToAsset.delete(e.name)}return this._tags.removeItem(e),e.tags.off("add",this._onTagAdd,this),e.tags.off("remove",this._onTagRemove,this),e.fire("remove",e),this.fire("remove",e),this.fire(`remove:${e.id}`,e),(i=e.file)!=null&&i.url&&this.fire(`remove:url:${e.file.url}`,e),!0}get(e){return this._idToAsset.get(Number(e))}getByUrl(e){return this._urlToAsset.get(e)}load(e,s){if((e.loading||e.loaded)&&!(s!=null&&s.force))return;const i=e.file,r=()=>{this.fire("load",e),this.fire(`load:${e.id}`,e),i&&i.url&&this.fire(`load:url:${i.url}`,e),e.fire("load",e)},a=o=>{if(o instanceof Array?e.resources=o:e.resource=o,this._loader.patch(e,this),e.type==="bundle"){const c=e.data.assets;for(let d=0;d<c.length;d++){const f=this._idToAsset.get(c[d]);f&&!f.loaded&&this.load(f,{force:!0})}e.resource.loaded?r():(this.fire("load:start",e),this.fire(`load:start:${e.id}`,e),i&&i.url&&this.fire(`load:start:url:${i.url}`,e),e.fire("load:start",e),e.resource.on("load",r))}else r()},n=(o,c,d)=>{if(e.loaded=!0,e.loading=!1,o)this.fire("error",o,e),this.fire(`error:${e.id}`,o,e),e.fire("error",o,e);else{if(e.type==="script"){const f=this._loader.getHandler("script");f._cache[e.id]&&f._cache[e.id].parentNode===document.head&&document.head.removeChild(f._cache[e.id]),f._cache[e.id]=d}a(c)}};if(i||e.type==="cubemap"){this.fire("load:start",e),this.fire(`load:${e.id}:start`,e),e.loading=!0;const o=e.getFileUrl();if(e.type==="bundle"){const c=e.data.assets;for(let d=0;d<c.length;d++){const f=this._idToAsset.get(c[d]);f&&(f.loaded||f.resource||f.loading||(f.loading=!0))}}this._loader.load(o,e.type,n,e,s)}else{const o=this._loader.open(e.type,e.data);e.loaded=!0,a(o)}}reloadIndex(e,s,i){const r=(a,n,o)=>{s.loaded=!0,s.loading=!1};return this._loader.load(e,s.type,r,s,i),s}loadFromUrl(e,s,i){this.loadFromUrlAndFilename(e,null,s,i)}loadFromUrlAndFilename(e,s,i,r){const a=xe.getBasename(s||e),n={filename:s||a,url:e};let o=this.getByUrl(e);if(!o)o=new _e(a,i,n),this.add(o);else if(o.loaded){r(o.loadFromUrlError||null,o);return}const c=d=>{d.once("load",f=>{i==="material"?this._loadTextures(f,(u,p)=>{r(u,f)}):r(null,f)}),d.once("error",f=>{f&&(this.loadFromUrlError=f),r(f,d)}),this.load(d)};o.resource?r(null,o):i==="model"?this._loadModel(o,c):c(o)}_loadModel(e,s){const i=e.getFileUrl(),r=xe.getExtension(i);if(r===".json"||r===".glb"){const a=xe.getDirectory(i),n=xe.getBasename(i),o=xe.join(a,n.replace(r,".mapping.json"));this._loader.load(o,"json",(c,d)=>{c?(e.data={mapping:[]},s(e)):this._loadMaterials(e,d,(f,u)=>{e.data=d,s(e)})})}else s(e)}_loadMaterials(e,s,i){const r=[];let a=0;const n=(o,c)=>{this._loadTextures(c,(d,f)=>{r.push(c),r.length===a&&i(null,r)})};for(let o=0;o<s.mapping.length;o++){const c=s.mapping[o].path;if(c){a++;const d=e.getAbsoluteUrl(c);this.loadFromUrl(d,"material",n)}}a===0&&i(null,r)}_loadTextures(e,s){const i=[];let r=0;const a=e.data;if(a.mappingFormat!=="path"){y.warn(`Skipping: ${e.name}, material files must be mappingFormat: "path" to be loaded from URL`),s(null,i);return}const n=(c,d)=>{c&&console.error(c),i.push(d),i.length===r&&s(null,i)},o=nd;for(let c=0;c<o.length;c++){const d=a[o[c]];if(d&&typeof d=="string"){r++;const f=e.getAbsoluteUrl(d);this.loadFromUrl(f,"texture",n)}}r===0&&s(null,i)}_onTagAdd(e,s){this._tags.add(e,s)}_onTagRemove(e,s){this._tags.remove(e,s)}_onNameChange(e,s,i){if(this._nameToAsset.has(i)){const r=this._nameToAsset.get(i);r.delete(e),r.size===0&&this._nameToAsset.delete(i)}this._nameToAsset.has(e.name)||this._nameToAsset.set(e.name,new Set),this._nameToAsset.get(e.name).add(e)}findByTag(...e){return this._tags.find(e)}filter(e){return Array.from(this._assets).filter(s=>e(s))}find(e,s){const i=this._nameToAsset.get(e);if(!i)return null;for(const r of i)if(!s||r.type===s)return r;return null}findAll(e,s){const i=this._nameToAsset.get(e);if(!i)return[];const r=Array.from(i);return s?r.filter(a=>a.type===s):r}}h(cn,"EVENT_LOAD","load"),h(cn,"EVENT_ADD","add"),h(cn,"EVENT_REMOVE","remove"),h(cn,"EVENT_ERROR","error");class VA{constructor(t){h(this,"_idToBundle",new Map);h(this,"_assetToBundles",new Map);h(this,"_urlsToBundles",new Map);h(this,"_fileRequests",new Map);this._assets=t,this._assets.bundles=this,this._assets.on("add",this._onAssetAdd,this),this._assets.on("remove",this._onAssetRemove,this)}_onAssetAdd(t){if(t.type==="bundle"){this._idToBundle.set(t.id,t),this._assets.on(`load:start:${t.id}`,this._onBundleLoadStart,this),this._assets.on(`load:${t.id}`,this._onBundleLoad,this),this._assets.on(`error:${t.id}`,this._onBundleError,this);const e=t.data.assets;for(let s=0;s<e.length;s++)this._indexAssetInBundle(e[s],t)}else this._assetToBundles.has(t.id)&&this._indexAssetFileUrls(t)}_unbindAssetEvents(t){this._assets.off(`load:start:${t}`,this._onBundleLoadStart,this),this._assets.off(`load:${t}`,this._onBundleLoad,this),this._assets.off(`error:${t}`,this._onBundleError,this)}_indexAssetInBundle(t,e){let s=this._assetToBundles.get(t);s||(s=new Set,this._assetToBundles.set(t,s)),s.add(e);const i=this._assets.get(t);i&&this._indexAssetFileUrls(i)}_indexAssetFileUrls(t){const e=this._getAssetFileUrls(t);if(e)for(let s=0;s<e.length;s++){const i=this._assetToBundles.get(t.id);i&&this._urlsToBundles.set(e[s],i)}}_getAssetFileUrls(t){let e=t.getFileUrl();if(!e)return null;e=e.split("?")[0];const s=[e];if(t.type==="font"){const i=t.data.info.maps.length;for(let r=1;r<i;r++)s.push(e.replace(".png",`${r}.png`))}return s}_onAssetRemove(t){if(t.type==="bundle"){this._idToBundle.delete(t.id),this._unbindAssetEvents(t.id);const e=t.data.assets;for(let s=0;s<e.length;s++){const i=this._assetToBundles.get(e[s]);if(i&&(i.delete(t),i.size===0)){this._assetToBundles.delete(e[s]);for(const[r,a]of this._urlsToBundles)a===i&&this._urlsToBundles.delete(r)}}this._onBundleError(`Bundle ${t.id} was removed`)}else{if(!this._assetToBundles.get(t.id))return;this._assetToBundles.delete(t.id);const s=this._getAssetFileUrls(t);if(!s)return;for(let i=0;i<s.length;i++)this._urlsToBundles.delete(s[i])}}_onBundleLoadStart(t){t.resource.on("add",(e,s)=>{const i=this._fileRequests.get(e);if(i){for(let r=0;r<i.length;r++)i[r](null,s);this._fileRequests.delete(e)}})}_onBundleLoad(t){if(!t.resource){this._onBundleError(`Bundle ${t.id} failed to load`);return}if(this._fileRequests)for(const[e,s]of this._fileRequests){const i=this._urlsToBundles.get(e);if(!i||!i.has(t))continue;const r=decodeURIComponent(e);let a,n;if(t.resource.has(r))n=t.resource.get(r);else if(t.resource.loaded)a=`Bundle ${t.id} does not contain URL ${e}`;else continue;for(let o=0;o<s.length;o++)s[o](a,a||n);this._fileRequests.delete(e)}}_onBundleError(t){for(const[e,s]of this._fileRequests)if(!this._findLoadedOrLoadingBundleForUrl(e)){for(let r=0;r<s.length;r++)s[r](t);this._fileRequests.delete(e)}}_findLoadedOrLoadingBundleForUrl(t){const e=this._urlsToBundles.get(t);if(!e)return null;let s=null;for(const i of e){if(i.loaded&&i.resource)return i;i.loading&&(s=i)}return s}listBundlesForAsset(t){const e=this._assetToBundles.get(t.id);return e?Array.from(e):null}list(){return Array.from(this._idToBundle.values())}hasUrl(t){return this._urlsToBundles.has(t)}urlIsLoadedOrLoading(t){return!!this._findLoadedOrLoadingBundleForUrl(t)}loadUrl(t,e){const s=this._findLoadedOrLoadingBundleForUrl(t);if(!s){e(`URL ${t} not found in any bundles`);return}if(s.loaded){const r=decodeURIComponent(t);if(s.resource.has(r)){e(null,s.resource.get(r));return}else if(s.resource.loaded){e(`Bundle ${s.id} does not contain URL ${t}`);return}}let i=this._fileRequests.get(t);i||(i=[],this._fileRequests.set(t,i)),i.push(e)}destroy(){this._assets.off("add",this._onAssetAdd,this),this._assets.off("remove",this._onAssetRemove,this);for(const t of this._idToBundle.keys())this._unbindAssetEvents(t);this._assets=null,this._idToBundle.clear(),this._idToBundle=null,this._assetToBundles.clear(),this._assetToBundles=null,this._urlsToBundles.clear(),this._urlsToBundles=null,this._fileRequests.clear(),this._fileRequests=null}}class GA extends Se{constructor(){super();h(this,"anim");h(this,"animation");h(this,"audiolistener");h(this,"button");h(this,"camera");h(this,"collision");h(this,"element");h(this,"joint");h(this,"layoutchild");h(this,"layoutgroup");h(this,"light");h(this,"model");h(this,"particlesystem");h(this,"render");h(this,"rigidbody");h(this,"screen");h(this,"script");h(this,"scrollbar");h(this,"scrollview");h(this,"sound");h(this,"sprite");h(this,"zone");this.list=[]}add(e){const s=e.id;if(this[s])throw new Error(`ComponentSystem name '${s}' already registered or not allowed`);this[s]=e,this.list.push(e)}remove(e){const s=e.id;if(!this[s])throw new Error(`No ComponentSystem named '${s}' registered`);delete this[s];const i=this.list.indexOf(this[s]);i!==-1&&this.list.splice(i,1)}destroy(){this.off();for(let e=0;e<this.list.length;e++)this.list[e].destroy()}}class Wf extends Se{constructor(){super(...arguments);h(this,"_index",new Map);h(this,"_loaded",!1)}addFile(e,s){this._index.has(e)||(this._index.set(e,s),this.fire("add",e,s))}has(e){return this._index.has(e)}get(e){return this._index.get(e)||null}destroy(){this._index.clear()}set loaded(e){!e||this._loaded||(this._loaded=!0,this.fire("load"))}get loaded(){return this._loaded}}h(Wf,"EVENT_ADD","add"),h(Wf,"EVENT_LOAD","load");class HA extends Se{constructor(e,s=""){super();h(this,"headerSize",512);h(this,"paddingSize",512);h(this,"bytesRead",0);h(this,"bytesReceived",0);h(this,"headerRead",!1);h(this,"reader",null);h(this,"data",new Uint8Array(0));h(this,"decoder",null);h(this,"prefix","");h(this,"fileName","");h(this,"fileSize",0);h(this,"fileType","");h(this,"ustarFormat","");this.prefix=s||"",this.reader=e.body.getReader(),this.reader.read().then(i=>{this.pump(i.done,i.value)}).catch(i=>{this.fire("error",i)})}pump(e,s){if(e)return this.fire("done"),null;this.bytesReceived+=s.byteLength;const i=new Uint8Array(this.data.length+s.length);for(i.set(this.data),i.set(s,this.data.length),this.data=i;this.readFile(););return this.reader.read().then(r=>{this.pump(r.done,r.value)}).catch(r=>{this.fire("error",r)})}readFile(){if(!this.headerRead&&this.bytesReceived>this.bytesRead+this.headerSize){this.headerRead=!0;const e=new DataView(this.data.buffer,this.bytesRead,this.headerSize);this.decoder??(this.decoder=new TextDecoder("windows-1252"));const s=this.decoder.decode(e);if(this.fileName=s.substring(0,100).replace(/\0/g,""),this.fileSize=parseInt(s.substring(124,136),8),this.fileType=s.substring(156,157),this.ustarFormat=s.substring(257,263),this.ustarFormat.indexOf("ustar")!==-1){const i=s.substring(345,500).replace(/\0/g,"");i.length>0&&(this.fileName=i.trim()+this.fileName.trim())}this.bytesRead+=512}if(this.headerRead){if(this.bytesReceived<this.bytesRead+this.fileSize)return!1;if(this.fileType===""||this.fileType==="0"){const s=new DataView(this.data.buffer,this.bytesRead,this.fileSize),i={name:this.prefix+this.fileName,size:this.fileSize,data:s};this.fire("file",i)}this.bytesRead+=this.fileSize,this.headerRead=!1;const e=this.bytesRead%this.paddingSize;return e!==0&&(this.bytesRead+=this.paddingSize-e),!0}return!1}}class Qe{constructor(t,e){h(this,"handlerType","");h(this,"_app");h(this,"_maxRetries",0);this._app=t,this.handlerType=e}set maxRetries(t){this._maxRetries=t}get maxRetries(){return this._maxRetries}load(t,e,s){}open(t,e,s){return e}patch(t,e){}}class WA extends Qe{constructor(t){super(t,"bundle"),this._assets=t.assets}_fetchRetries(t,e,s=0){return new Promise((i,r)=>{const a=()=>{fetch(t,e).then(i).catch(n=>{s++,s<this.maxRetries?(y.error(`Bundle failed to load retrying (attempt ${s}`),a()):r(n)})};a()})}load(t,e){typeof t=="string"&&(t={load:t,original:t}),this._fetchRetries(t.load,{mode:"cors"},this.maxRetries).then(s=>{const i=new Wf;e(null,i);const r=new HA(s,this._assets.prefix);r.on("file",a=>{i.addFile(a.name,a.data)}),r.on("done",()=>{i.loaded=!0}),r.on("error",a=>{y.error(a),e(a)})}).catch(s=>{y.error(s),e(s)})}open(t,e){return e}}class Tn{constructor(t){this._handlers={},this._requests={},this._cache={},this._app=t}addHandler(t,e){this._handlers[t]=e,e._loader=this}removeHandler(t){delete this._handlers[t]}getHandler(t){return this._handlers[t]}static makeKey(t,e){return`${t}-${e}`}load(t,e,s,i,r){var o;const a=this._handlers[e];if(!a){const c=`No resource handler for asset type: '${e}' when loading [${t}]`;y.errorOnce(c),s(c);return}if(!t){this._loadNull(a,s,i);return}const n=Tn.makeKey(t,e);if(this._requests[n])this._requests[n].push(s);else{this._requests[n]=[s];const c=this,d=function(u,p){if(u){c._onFailure(n,u);return}if(p.load instanceof DataView){if(a.openBinary){if(!c._requests[n])return;try{const m=a.openBinary(p.load);c._onSuccess(n,m)}catch(m){c._onFailure(n,m)}return}p.load=URL.createObjectURL(new Blob([p.load])),i&&(i.urlObject&&URL.revokeObjectURL(i.urlObject),i.urlObject=p.load)}a.load(p,(m,_,S)=>{if(c._requests[n]){if(m){c._onFailure(n,m);return}try{c._onSuccess(n,a.open(p.original,_,i),S)}catch(g){c._onFailure(n,g)}}},i)},f=t.split("?")[0];if(this._app.enableBundles&&this._app.bundles.hasUrl(f)&&!(r&&r.bundlesIgnore)){if(!this._app.bundles.urlIsLoadedOrLoading(f)){const u=this._app.bundles.listBundlesForAsset(i);let p;r&&r.bundlesFilter&&(p=r.bundlesFilter(u)),p||(u==null||u.sort((m,_)=>m.file.size-_.file.size),p=u==null?void 0:u[0]),p&&((o=this._app.assets)==null||o.load(p))}this._app.bundles.loadUrl(f,(u,p)=>{d(u,{load:p,original:f})})}else d(null,{load:t,original:i&&i.file.filename||t})}}_loadNull(t,e,s){const i=function(r,a,n){if(r)e(r);else try{e(null,t.open(null,a,s),n)}catch(o){e(o)}};t.load(null,i,s)}_onSuccess(t,e,s){for(let i=0;i<this._requests[t].length;i++)this._requests[t][i](null,e,s);delete this._requests[t]}_onFailure(t,e){if(console.error(e),this._requests[t]){for(let s=0;s<this._requests[t].length;s++)this._requests[t][s](e);delete this._requests[t]}}open(t,e){const s=this._handlers[t];return s?s.open(null,e):(console.warn(`No resource handler found for: ${t}`),e)}patch(t,e){const s=this._handlers[t.type];if(!s){console.warn(`No resource handler found for: ${t.type}`);return}s.patch&&s.patch(t,e)}clearCache(t,e){const s=Tn.makeKey(t,e);delete this._cache[s]}getFromCache(t,e){const s=Tn.makeKey(t,e);if(this._cache[s])return this._cache[s]}enableRetry(t=5){t=Math.max(0,t)||0;for(const e in this._handlers)this._handlers[e].maxRetries=t}disableRetry(){for(const t in this._handlers)this._handlers[t].maxRetries=0}destroyRequests(){this._requests={}}destroy(){this._handlers={},this._requests={},this._cache={}}}class $A{_validate(t){if(!t.header)throw new Error('pc.I18n#addData: Missing "header" field');if(!t.header.version)throw new Error('pc.I18n#addData: Missing "header.version" field');if(t.header.version!==1)throw new Error('pc.I18n#addData: Invalid "header.version" field');if(t.data){if(!Array.isArray(t.data))throw new Error('pc.I18n#addData: "data" field must be an array')}else throw new Error('pc.I18n#addData: Missing "data" field');for(let e=0,s=t.data.length;e<s;e++){const i=t.data[e];if(!i.info)throw new Error(`pc.I18n#addData: missing "data[${e}].info" field`);if(!i.info.locale)throw new Error(`pc.I18n#addData: missing "data[${e}].info.locale" field`);if(typeof i.info.locale!="string")throw new Error(`pc.I18n#addData: "data[${e}].info.locale" must be a string`);if(!i.messages)throw new Error(`pc.I18n#addData: missing "data[${e}].messages" field`)}}parse(t){return this._validate(t),t.data}}const xc=class xc extends Se{constructor(t){super(),this.locale=oc,this._translations={},this._availableLangs={},this._app=t,this._assets=[],this._parser=new $A}set assets(t){const e={};for(let i=0,r=t.length;i<r;i++){const a=t[i]instanceof _e?t[i].id:t[i];e[a]=!0}let s=this._assets.length;for(;s--;){const i=this._assets[s];if(!e[i]){this._app.assets.off(`add:${i}`,this._onAssetAdd,this);const r=this._app.assets.get(i);r&&this._onAssetRemove(r),this._assets.splice(s,1)}}for(const i in e){const r=parseInt(i,10);if(this._assets.indexOf(r)!==-1)continue;this._assets.push(r);const a=this._app.assets.get(r);a?this._onAssetAdd(a):this._app.assets.once(`add:${r}`,this._onAssetAdd,this)}}get assets(){return this._assets}set locale(t){if(this._locale===t)return;let e=Fi(t);if(e==="in"&&(e="id",t=FA(t,e),this._locale===t))return;const s=this._locale;this._locale=t,this._lang=e,this._pluralFn=Qd(this._lang),this.fire(xc.EVENT_CHANGE,t,s)}get locale(){return this._locale}static findAvailableLocale(t,e){return $y(t,e)}findAvailableLocale(t){if(this._translations[t])return t;const e=Fi(t);return this._findFallbackLocale(t,e)}getText(t,e){let s=t,i;e||(e=this._locale,i=this._lang);let r=this._translations[e];return r||(i||(i=Fi(e)),e=this._findFallbackLocale(e,i),r=this._translations[e]),r&&r.hasOwnProperty(t)&&(s=r[t],Array.isArray(s)&&(s=s[0]),s==null&&(s=t)),s}getPluralText(t,e,s){let i=t,r,a;s?(r=Fi(s),a=Qd(r)):(s=this._locale,r=this._lang,a=this._pluralFn);let n=this._translations[s];if(n||(s=this._findFallbackLocale(s,r),r=Fi(s),a=Qd(r),n=this._translations[s]),n&&n[t]&&a){const o=a(e);i=n[t][o],i==null&&(i=t)}return i}addData(t){let e;try{e=this._parser.parse(t)}catch(s){console.error(s);return}for(let s=0,i=e.length;s<i;s++){const r=e[s],a=r.info.locale,n=r.messages;if(!this._translations[a]){this._translations[a]={};const o=Fi(a);this._availableLangs[o]||(this._availableLangs[o]=a)}Object.assign(this._translations[a],n),this.fire("data:add",a,n)}}removeData(t){let e;try{e=this._parser.parse(t)}catch(s){console.error(s);return}for(let s=0,i=e.length;s<i;s++){const r=e[s],a=r.info.locale,n=this._translations[a];if(!n)continue;const o=r.messages;for(const c in o)delete n[c];Object.keys(n).length===0&&(delete this._translations[a],delete this._availableLangs[Fi(a)]),this.fire("data:remove",a,o)}}destroy(){this._translations=null,this._availableLangs=null,this._assets=null,this._parser=null,this.off()}_findFallbackLocale(t,e){let s=lc[t];return s&&this._translations[s]||(s=lc[e],s&&this._translations[s])||(s=this._availableLangs[e],s&&this._translations[s])?s:oc}_onAssetAdd(t){t.on("load",this._onAssetLoad,this),t.on("change",this._onAssetChange,this),t.on("remove",this._onAssetRemove,this),t.on("unload",this._onAssetUnload,this),t.resource&&this._onAssetLoad(t)}_onAssetLoad(t){this.addData(t.resource)}_onAssetChange(t){t.resource&&this.addData(t.resource)}_onAssetRemove(t){t.off("load",this._onAssetLoad,this),t.off("change",this._onAssetChange,this),t.off("remove",this._onAssetRemove,this),t.off("unload",this._onAssetUnload,this),t.resource&&this.removeData(t.resource),this._app.assets.once(`add:${t.id}`,this._onAssetAdd,this)}_onAssetUnload(t){t.resource&&this.removeData(t.resource)}};h(xc,"EVENT_CHANGE","change");let xa=xc;class XA extends Se{constructor(e){super();h(this,"_scripts",{});h(this,"_list",[]);h(this,"_scriptSchemas",new Map);this.app=e}destroy(){this.app=null,this.off()}addSchema(e,s){s&&this._scriptSchemas.set(e,s)}getSchema(e){return this._scriptSchemas.get(e)}add(e){const s=e.__name;return this._scripts.hasOwnProperty(s)?(setTimeout(()=>{if(e.prototype.swap){const i=this._scripts[s],r=this._list.indexOf(i);this._list[r]=e,this._scripts[s]=e,this.fire("swap",s,e),this.fire(`swap:${s}`,e)}else console.warn(`script registry already has '${s}' script, define 'swap' method for new script type to enable code hot swapping`)}),!1):(this._scripts[s]=e,this._list.push(e),this.fire("add",s,e),this.fire(`add:${s}`,e),setTimeout(()=>{if(!this._scripts.hasOwnProperty(s)||!this.app||!this.app.systems||!this.app.systems.script)return;const i=this.app.systems.script._components;let r;const a=[],n=[];for(i.loopIndex=0;i.loopIndex<i.length;i.loopIndex++){const o=i.items[i.loopIndex];if(o._scriptsIndex[s]&&o._scriptsIndex[s].awaiting){o._scriptsData&&o._scriptsData[s]&&(r=o._scriptsData[s].attributes);const c=o.create(s,{preloading:!0,ind:o._scriptsIndex[s].ind,attributes:r});c&&a.push(c);for(const d of o.scripts)o.initializeAttributes(d)}}for(let o=0;o<a.length;o++)a[o].enabled&&(a[o]._initialized=!0,n.push(a[o]),a[o].initialize&&a[o].initialize());for(let o=0;o<n.length;o++)!n[o].enabled||n[o]._postInitialized||(n[o]._postInitialized=!0,n[o].postInitialize&&n[o].postInitialize())}),!0)}remove(e){let s=e,i=e;if(typeof i!="string"?i=s.__name:s=this.get(i),this.get(i)!==s)return!1;delete this._scripts[i];const r=this._list.indexOf(s);return this._list.splice(r,1),this.fire("remove",i,s),this.fire(`remove:${i}`,s),!0}get(e){return this._scripts[e]||null}has(e){if(typeof e=="string")return this._scripts.hasOwnProperty(e);if(!e)return!1;const s=e.__name;return this._scripts[s]===e}list(){return this._list}}const qA=(l,t)=>l.constructor.order-t.constructor.order,jA=l=>l.sort(qA),lo=[],Xy=[],YA=()=>Xy.pop()??[],G_=l=>{l.length=0,Xy.push(l)},Tc=class Tc extends De{constructor(e,s=js()){super(e);h(this,"anim");h(this,"animation");h(this,"audiolistener");h(this,"button");h(this,"camera");h(this,"collision");h(this,"element");h(this,"gsplat");h(this,"layoutchild");h(this,"layoutgroup");h(this,"light");h(this,"model");h(this,"particlesystem");h(this,"render");h(this,"rigidbody");h(this,"screen");h(this,"script");h(this,"scrollbar");h(this,"scrollview");h(this,"sound");h(this,"sprite");h(this,"c",{});h(this,"_app");h(this,"_destroying",!1);h(this,"_guid",null);h(this,"_template",!1);y.assert(s,"Could not find current application"),this._app=s}addComponent(e,s){const i=this._app.systems[e];return i?this.c[e]?(y.warn(`addComponent: Entity already has '${e}' component`),null):i.addComponent(this,s):(y.error(`addComponent: System '${e}' doesn't exist`),null)}removeComponent(e){const s=this._app.systems[e];if(!s){y.error(`removeComponent: System '${e}' doesn't exist`);return}if(!this.c[e]){y.warn(`removeComponent: Entity doesn't have '${e}' component`);return}s.removeComponent(this)}findComponent(e){const s=this.findOne(i=>{var r;return(r=i.c)==null?void 0:r[e]});return s&&s.c[e]}findComponents(e){return this.find(s=>{var i;return(i=s.c)==null?void 0:i[e]}).map(s=>s.c[e])}findScript(e){const s=this.findOne(i=>{var r,a;return(a=(r=i.c)==null?void 0:r.script)==null?void 0:a.has(e)});return s==null?void 0:s.c.script.get(e)}findScripts(e){return this.find(i=>{var r,a;return(a=(r=i.c)==null?void 0:r.script)==null?void 0:a.has(e)}).map(i=>i.c.script.get(e))}getGuid(){return this._guid||this.setGuid(cx.create()),this._guid}setGuid(e){const s=this._app._entityIndex;this._guid&&delete s[this._guid],this._guid=e,s[this._guid]=this}_notifyHierarchyStateChanged(e,s){let i=!1;e===this&&lo.length===0&&(i=!0),e._beingEnabled=!0,e._onHierarchyStateChanged(s),e._onHierarchyStatePostChanged&&lo.push(e);const r=e._children;for(let a=0,n=r.length;a<n;a++)r[a]._enabled&&this._notifyHierarchyStateChanged(r[a],s);if(e._beingEnabled=!1,i){for(let a=0;a<lo.length;a++)lo[a]._onHierarchyStatePostChanged();lo.length=0}}_onHierarchyStateChanged(e){super._onHierarchyStateChanged(e);const s=this._getSortedComponents();for(let i=0;i<s.length;i++){const r=s[i];r.enabled&&(e?r.onEnable():r.onDisable())}G_(s)}_onHierarchyStatePostChanged(){const e=this._getSortedComponents();for(let s=0;s<e.length;s++)e[s].onPostStateChange();G_(e)}findByGuid(e){if(this._guid===e)return this;const s=this._app._entityIndex[e];return s&&(s===this||s.isDescendantOf(this))?s:null}destroy(){this._destroying=!0;for(const e in this.c)this.c[e].enabled=!1;for(const e in this.c)this.c[e].system.removeComponent(this);super.destroy(),this._guid&&delete this._app._entityIndex[this._guid],this._destroying=!1}clone(){const e={},s=this._cloneRecursively(e);return e[this.getGuid()]=s,qy(this,this,s,e),s}_getSortedComponents(){const e=this.c,s=YA();let i=0;for(const r in e)if(e.hasOwnProperty(r)){const a=e[r];i|=a.constructor.order!==0,s.push(a)}return i&&s.length>1&&jA(s),s}_cloneRecursively(e){const s=new this.constructor(void 0,this._app);super._cloneInternal(s);for(const i in this.c)this.c[i].system.cloneComponent(this,s);for(let i=0;i<this._children.length;i++){const r=this._children[i];if(r instanceof Tc){const a=r._cloneRecursively(e);s.addChild(a),e[r.getGuid()]=a}}return s}};h(Tc,"EVENT_DESTROY","destroy");let lt=Tc;function qy(l,t,e,s){if(t instanceof lt){const i=t.c;for(const n in i){const o=i[n],c=o.system.getPropertiesOfType("entity");for(let d=0,f=c.length;d<f;d++){const p=c[d].name,m=o[p];if(!!l.findByGuid(m)){const S=s[m].getGuid();S?e.c[n][p]=S:y.warn("Could not find corresponding entity id when resolving duplicated entity references")}}}i.script&&e.script.resolveDuplicatedEntityReferenceProperties(i.script,s),i.render&&e.render.resolveDuplicatedEntityReferenceProperties(i.render,s),i.button&&e.button.resolveDuplicatedEntityReferenceProperties(i.button,s),i.scrollview&&e.scrollview.resolveDuplicatedEntityReferenceProperties(i.scrollview,s),i.scrollbar&&e.scrollbar.resolveDuplicatedEntityReferenceProperties(i.scrollbar,s),i.anim&&e.anim.resolveDuplicatedEntityReferenceProperties(i.anim,s);const r=t.children.filter(n=>n instanceof lt),a=e.children.filter(n=>n instanceof lt);for(let n=0,o=r.length;n<o;n++)qy(l,r[n],a[n],s)}}class H_{constructor(t,e){h(this,"name");h(this,"url");h(this,"data",null);h(this,"_loading",!1);h(this,"_onLoadedCallbacks",[]);this.name=t,this.url=e}get loaded(){return!!this.data}get loading(){return this._loading}}class KA{constructor(t){h(this,"_app");h(this,"_list",[]);h(this,"_index",{});h(this,"_urlIndex",{});this._app=t}destroy(){this._app=null}list(){return this._list}add(t,e){if(this._index.hasOwnProperty(t))return y.warn(`pc.SceneRegistry: trying to add more than one scene called: ${t}`),!1;const s=new H_(t,e),i=this._list.push(s);return this._index[s.name]=i-1,this._urlIndex[s.url]=i-1,!0}find(t){return this._index.hasOwnProperty(t)?this._list[this._index[t]]:null}findByUrl(t){return this._urlIndex.hasOwnProperty(t)?this._list[this._urlIndex[t]]:null}remove(t){if(this._index.hasOwnProperty(t)){const e=this._index[t];let s=this._list[e];delete this._urlIndex[s.url],delete this._index[t],this._list.splice(e,1);for(let i=0;i<this._list.length;i++)s=this._list[i],this._index[s.name]=i,this._urlIndex[s.url]=i}}_loadSceneData(t,e,s){const i=this._app;let r=t;if(typeof t=="string"&&(t=this.findByUrl(r)||this.find(r)||new H_("Untitled",r)),r=t.url,!r){s("Cannot find scene to load");return}if(t.loaded){s(null,t);return}i.assets&&i.assets.prefix&&!Vn.test(r)&&(r=xe.join(i.assets.prefix,r)),t._onLoadedCallbacks.push(s),t._loading||i.loader.getHandler("hierarchy").load(r,(n,o)=>{t.data=o,t._loading=!1;for(let c=0;c<t._onLoadedCallbacks.length;c++)t._onLoadedCallbacks[c](n,t);e||(t.data=null),t._onLoadedCallbacks.length=0}),t._loading=!0}loadSceneData(t,e){this._loadSceneData(t,!0,e)}unloadSceneData(t){typeof t=="string"&&(t=this.findByUrl(t)),t&&(t.data=null)}_loadSceneHierarchy(t,e,s){this._loadSceneData(t,!1,(i,r)=>{if(i){s&&s(i);return}e&&e(r);const a=this._app,n=()=>{const o=a.loader.getHandler("hierarchy");a.systems.script.preloading=!0;const c=o.open(r.url,r.data);a.systems.script.preloading=!1,a.loader.clearCache(r.url,"hierarchy"),a.root.addChild(c),a.systems.fire("initialize",c),a.systems.fire("postInitialize",c),a.systems.fire("postPostInitialize",c),s&&s(null,c)};a._preloadScripts(r.data,n)})}loadSceneHierarchy(t,e){this._loadSceneHierarchy(t,null,e)}loadSceneSettings(t,e){this._loadSceneData(t,!1,(s,i)=>{s?e&&e(s):(this._app.applySceneSettings(i.data.settings),e&&e(null))})}changeScene(t,e){const s=this._app,i=r=>{const{children:a}=s.root;for(;a.length;)a[0].destroy();s.applySceneSettings(r.data.settings)};this._loadSceneHierarchy(t,i,e)}loadScene(t,e){const s=this._app,i=s.loader.getHandler("scene");s.assets&&s.assets.prefix&&!Vn.test(t)&&(t=xe.join(s.assets.prefix,t)),i.load(t,(r,a)=>{if(r)e&&e(r);else{const n=()=>{s.systems.script.preloading=!0;const o=i.open(t,a),c=this.findByUrl(t);c&&!c.loaded&&(c.data=a),s.systems.script.preloading=!1,s.loader.clearCache(t,"scene"),s.loader.patch({resource:o,type:"scene"},s.assets),s.root.addChild(o.root),s.systems.rigidbody&&typeof Ammo<"u"&&s.systems.rigidbody.gravity.set(o._gravity.x,o._gravity.y,o._gravity.z),e&&e(null,o)};s._preloadScripts(a,n)}})}}class ZA{constructor(t){this.frame={fps:0,ms:0,dt:0,updateStart:0,updateTime:0,renderStart:0,renderTime:0,physicsStart:0,physicsTime:0,cullTime:0,sortTime:0,skinTime:0,morphTime:0,instancingTime:0,triangles:0,otherPrimitives:0,shaders:0,materials:0,cameras:0,shadowMapUpdates:0,shadowMapTime:0,depthMapTime:0,forwardTime:0,lightClustersTime:0,lightClusters:0,_timeToCountFrames:0,_fpsAccum:0},this.drawCalls={forward:0,depth:0,shadow:0,immediate:0,misc:0,total:0,skinned:0,instanced:0,removedByInstancing:0},this.misc={renderTargetCreationTime:0},this.particles={updatesPerFrame:0,_updatesPerFrame:0,frameTime:0,_frameTime:0},this.shaders=t._shaderStats,this.vram=t._vram,Object.defineProperty(this.vram,"totalUsed",{get:function(){return this.tex+this.vb+this.ib}}),Object.defineProperty(this.vram,"geom",{get:function(){return this.vb+this.ib}})}get scene(){return js().scene._stats}get lightmapper(){var t;return(t=js().lightmapper)==null?void 0:t.stats}get batcher(){const t=js()._batcher;return t?t._stats:null}}const QA=`
uniform float alpha_ref;

void alphaTest(float a) {
    if (a < alpha_ref) discard;
}
`,JA=`

#ifdef LIT_AMBIENT_SOURCE == AMBIENTSH
    uniform vec3 ambientSH[9];
#endif

#if LIT_AMBIENT_SOURCE == ENVALATLAS
    #include "envAtlasPS"

    #ifndef ENV_ATLAS
    #define ENV_ATLAS
        uniform sampler2D texture_envAtlas;
    #endif
#endif

void addAmbient(vec3 worldNormal) {
    #ifdef LIT_AMBIENT_SOURCE == AMBIENTSH

        vec3 n = cubeMapRotate(worldNormal);
        vec3 color =
            ambientSH[0] +
            ambientSH[1] * n.x +
            ambientSH[2] * n.y +
            ambientSH[3] * n.z +
            ambientSH[4] * n.x * n.z +
            ambientSH[5] * n.z * n.y +
            ambientSH[6] * n.y * n.x +
            ambientSH[7] * (3.0 * n.z * n.z - 1.0) +
            ambientSH[8] * (n.x * n.x - n.y * n.y);

        dDiffuseLight += processEnvironment(max(color, vec3(0.0)));

    #endif

    #if LIT_AMBIENT_SOURCE == ENVALATLAS

        vec3 dir = normalize(cubeMapRotate(worldNormal) * vec3(-1.0, 1.0, 1.0));
        vec2 uv = mapUv(toSphericalUv(dir), vec4(128.0, 256.0 + 128.0, 64.0, 32.0) / atlasSize);

        vec4 raw = texture2D(texture_envAtlas, uv);
        vec3 linear = {ambientDecode}(raw);
        dDiffuseLight += processEnvironment(linear);

    #endif

    #if LIT_AMBIENT_SOURCE == CONSTANT

        dDiffuseLight += light_globalAmbient;

    #endif
}
`,eC=`

#ifdef LIT_GGX_SPECULAR
    uniform float material_anisotropyIntensity;
    uniform vec2 material_anisotropyRotation;
#endif

void getAnisotropy() {
    dAnisotropy = 0.0;
    dAnisotropyRotation = vec2(1.0, 0.0);

#ifdef LIT_GGX_SPECULAR
    dAnisotropy = material_anisotropyIntensity;
    dAnisotropyRotation = material_anisotropyRotation;
#endif

    #ifdef STD_ANISOTROPY_TEXTURE
    vec3 anisotropyTex = texture2DBias({STD_ANISOTROPY_TEXTURE_NAME}, {STD_ANISOTROPY_TEXTURE_UV}, textureBias).rgb;
    dAnisotropy *= anisotropyTex.b;

    vec2 anisotropyRotationFromTex = anisotropyTex.rg * 2.0 - vec2(1.0);
    mat2 rotationMatrix = mat2(dAnisotropyRotation.x, dAnisotropyRotation.y, -dAnisotropyRotation.y, dAnisotropyRotation.x);
    dAnisotropyRotation = rotationMatrix * anisotropyRotationFromTex;
    #endif
    
    dAnisotropy = clamp(dAnisotropy, 0.0, 1.0);
}
`,tC=`

#if defined(STD_AO_TEXTURE) || defined(STD_AO_VERTEX)
    uniform float material_aoIntensity;
#endif

#ifdef STD_AODETAIL_TEXTURE
    #include "detailModesPS"
#endif

void getAO() {
    dAo = 1.0;

    #ifdef STD_AO_TEXTURE
        float aoBase = texture2DBias({STD_AO_TEXTURE_NAME}, {STD_AO_TEXTURE_UV}, textureBias).{STD_AO_TEXTURE_CHANNEL};

        #ifdef STD_AODETAIL_TEXTURE
            float aoDetail = texture2DBias({STD_AODETAIL_TEXTURE_NAME}, {STD_AODETAIL_TEXTURE_UV}, textureBias).{STD_AODETAIL_TEXTURE_CHANNEL};
            aoBase = detailMode_{STD_AODETAIL_DETAILMODE}(vec3(aoBase), vec3(aoDetail)).r;
        #endif

        dAo *= aoBase;
    #endif

    #ifdef STD_AO_VERTEX
        dAo *= saturate(vVertexColor.{STD_AO_VERTEX_CHANNEL});
    #endif

    #if defined(STD_AO_TEXTURE) || defined(STD_AO_VERTEX)
        dAo = mix(1.0, dAo, material_aoIntensity);
    #endif
}
`,sC=`
void occludeDiffuse(float ao) {
    dDiffuseLight *= ao;
}
`,iC=`

#if LIT_OCCLUDE_SPECULAR != NONE
    #ifdef LIT_OCCLUDE_SPECULAR_FLOAT
        uniform float material_occludeSpecularIntensity;
    #endif
#endif

void occludeSpecular(float gloss, float ao, vec3 worldNormal, vec3 viewDir) {

    #if LIT_OCCLUDE_SPECULAR == AO
        #ifdef LIT_OCCLUDE_SPECULAR_FLOAT
            float specOcc = mix(1.0, ao, material_occludeSpecularIntensity);
        #else
            float specOcc = ao;
        #endif
    #endif

    #if LIT_OCCLUDE_SPECULAR == GLOSSDEPENDENT

        // approximated specular occlusion from AO
        // http://research.tri-ace.com/Data/cedec2011_RealtimePBR_Implementation_e.pptx
        float specPow = exp2(gloss * 11.0);
        float specOcc = saturate(pow(dot(worldNormal, viewDir) + ao, 0.01 * specPow) - 1.0 + ao);

        #ifdef LIT_OCCLUDE_SPECULAR_FLOAT
            specOcc = mix(1.0, specOcc, material_occludeSpecularIntensity);
        #endif
    #endif

    #if LIT_OCCLUDE_SPECULAR != NONE
        dSpecularLight *= specOcc;
        dReflection *= specOcc;

        #ifdef LIT_SHEEN
            sSpecularLight *= specOcc;
            sReflection *= specOcc;
        #endif
    #endif
}
`,rC=`
    vec4 dirLm = texture2D(texture_dirLightMap, vUv1);

    if (bakeDir > 0.5) {
        if (dAtten > 0.00001) {
            dirLm.xyz = dirLm.xyz * 2.0 - vec3(1.0);
            dAtten = saturate(dAtten);
            gl_FragColor.rgb = normalize(dLightDirNormW.xyz*dAtten + dirLm.xyz*dirLm.w) * 0.5 + vec3(0.5);
            gl_FragColor.a = dirLm.w + dAtten;
            gl_FragColor.a = max(gl_FragColor.a, 1.0 / 255.0);
        } else {
            gl_FragColor = dirLm;
        }
    } else {
        gl_FragColor.rgb = dirLm.xyz;
        gl_FragColor.a = max(dirLm.w, dAtten > 0.00001 ? (1.0/255.0) : 0.0);
    }
`,aC=`

#ifdef LIT_LIGHTMAP_BAKING_ADD_AMBIENT
    // diffuse light stores accumulated AO, apply contrast and brightness to it
    // and multiply ambient light color by the AO
    dDiffuseLight = ((dDiffuseLight - 0.5) * max(ambientBakeOcclusionContrast + 1.0, 0.0)) + 0.5;
    dDiffuseLight += vec3(ambientBakeOcclusionBrightness);
    dDiffuseLight = saturate(dDiffuseLight);
    dDiffuseLight *= dAmbientLight;
#endif

#ifdef LIGHTMAP_RGBM
    // encode to RGBM
    gl_FragColor.rgb = dDiffuseLight;
    gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(0.5));
    gl_FragColor.rgb /= 8.0;
    gl_FragColor.a = clamp( max( max( gl_FragColor.r, gl_FragColor.g ), max( gl_FragColor.b, 1.0 / 255.0 ) ), 0.0,1.0 );
    gl_FragColor.a = ceil(gl_FragColor.a * 255.0) / 255.0;
    gl_FragColor.rgb /= gl_FragColor.a;
#else
    gl_FragColor = vec4(dDiffuseLight, 1.0);
#endif
`,nC=`
uniform vec3 view_position;

uniform vec3 light_globalAmbient;

float square(float x) {
    return x*x;
}

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

vec3 saturate(vec3 x) {
    return clamp(x, vec3(0.0), vec3(1.0));
}
`,oC=`
#define NINESLICED

varying vec2 vMask;
varying vec2 vTiledUv;

uniform mediump vec4 innerOffset;
uniform mediump vec2 outerScale;
uniform mediump vec4 atlasRect;

vec2 nineSlicedUv;
`,lC=`
#define NINESLICED
#define NINESLICETILED

varying vec2 vMask;
varying vec2 vTiledUv;

uniform mediump vec4 innerOffset;
uniform mediump vec2 outerScale;
uniform mediump vec4 atlasRect;

vec2 nineSlicedUv;
`,hC=`
// 2x2 bayer matrix [1 2][3 0], p in [0,1]
float bayer2(vec2 p) {
    return mod(2.0 * p.y + p.x + 1.0, 4.0);
}

// 4x4 matrix, p - pixel coordinate
float bayer4(vec2 p) {
    vec2 p1 = mod(p, 2.0);
    vec2 p2 = floor(0.5 * mod(p, 4.0));
    return 4.0 * bayer2(p1) + bayer2(p2);
}

// 8x8 matrix, p - pixel coordinate
float bayer8(vec2 p) {
    vec2 p1 = mod(p, 2.0);
    vec2 p2 = floor(0.5 * mod(p, 4.0));
    vec2 p4 = floor(0.25 * mod(p, 8.0));
    return 4.0 * (4.0 * bayer2(p1) + bayer2(p2)) + bayer2(p4);
}
`,cC=`
varying vec2 vUv0;

uniform sampler2D source;
uniform vec2 pixelOffset;

#ifdef GAUSS
    uniform float weight[{SAMPLES}];
#endif

void main(void) {
    vec3 moments = vec3(0.0);
    vec2 uv = vUv0 - pixelOffset * (float({SAMPLES}) * 0.5);
    for (int i = 0; i < {SAMPLES}; i++) {
        vec4 c = texture2D(source, uv + pixelOffset * float(i));

        #ifdef GAUSS
            moments += c.xyz * weight[i];
        #else
            moments += c.xyz;
        #endif
    }

    #ifndef GAUSS
        moments *= 1.0 / float({SAMPLES});
    #endif

    gl_FragColor = vec4(moments.x, moments.y, moments.z, 1.0);
}
`,dC=`
uniform float material_clearCoat;

void getClearCoat() {
    ccSpecularity = material_clearCoat;

    #ifdef STD_CLEARCOAT_TEXTURE
    ccSpecularity *= texture2DBias({STD_CLEARCOAT_TEXTURE_NAME}, {STD_CLEARCOAT_TEXTURE_UV}, textureBias).{STD_CLEARCOAT_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_CLEARCOAT_VERTEX
    ccSpecularity *= saturate(vVertexColor.{STD_CLEARCOAT_VERTEX_CHANNEL});
    #endif
}
`,fC=`
uniform float material_clearCoatGloss;

void getClearCoatGlossiness() {
    ccGlossiness = material_clearCoatGloss;

    #ifdef STD_CLEARCOATGLOSS_TEXTURE
    ccGlossiness *= texture2DBias({STD_CLEARCOATGLOSS_TEXTURE_NAME}, {STD_CLEARCOATGLOSS_TEXTURE_UV}, textureBias).{STD_CLEARCOATGLOSS_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_CLEARCOATGLOSS_VERTEX
    ccGlossiness *= saturate(vVertexColor.{STD_CLEARCOATGLOSS_VERTEX_CHANNEL});
    #endif

    #ifdef STD_CLEARCOATGLOSS_INVERT
    ccGlossiness = 1.0 - ccGlossiness;
    #endif

    ccGlossiness += 0.0000001;
}
`,uC=`
#ifdef STD_CLEARCOATNORMAL_TEXTURE
uniform float material_clearCoatBumpiness;
#endif

void getClearCoatNormal() {
#ifdef STD_CLEARCOATNORMAL_TEXTURE
    vec3 normalMap = {STD_CLEARCOATNORMAL_TEXTURE_DECODE}(texture2DBias({STD_CLEARCOATNORMAL_TEXTURE_NAME}, {STD_CLEARCOATNORMAL_TEXTURE_UV}, textureBias));
    normalMap = mix(vec3(0.0, 0.0, 1.0), normalMap, material_clearCoatBumpiness);
    ccNormalW = normalize(dTBN * normalMap);
#else
    ccNormalW = dVertexNormalW;
#endif
}
`,pC=`
// Converts unnormalized direction vector to a cubemap face index [0..5] and uv coordinates within the face in [0..1] range.
// Additionally offset to a tile in atlas within 3x3 subdivision is provided
vec2 getCubemapFaceCoordinates(const vec3 dir, out float faceIndex, out vec2 tileOffset)
{
    vec3 vAbs = abs(dir);
    float ma;
    vec2 uv;
    if (vAbs.z >= vAbs.x && vAbs.z >= vAbs.y) {   // front / back

        faceIndex = dir.z < 0.0 ? 5.0 : 4.0;
        ma = 0.5 / vAbs.z;
        uv = vec2(dir.z < 0.0 ? -dir.x : dir.x, -dir.y);
        tileOffset.x = 2.0;
        tileOffset.y = dir.z < 0.0 ? 1.0 : 0.0;

    } else if(vAbs.y >= vAbs.x) {  // top index 2, bottom index 3

        faceIndex = dir.y < 0.0 ? 3.0 : 2.0;
        ma = 0.5 / vAbs.y;
        uv = vec2(dir.x, dir.y < 0.0 ? -dir.z : dir.z);
        tileOffset.x = 1.0;
        tileOffset.y = dir.y < 0.0 ? 1.0 : 0.0;

    } else {    // left / right

        faceIndex = dir.x < 0.0 ? 1.0 : 0.0;
        ma = 0.5 / vAbs.x;
        uv = vec2(dir.x < 0.0 ? dir.z : -dir.z, -dir.y);
        tileOffset.x = 0.0;
        tileOffset.y = dir.x < 0.0 ? 1.0 : 0.0;

    }
    return uv * ma + 0.5;
}

// converts unnormalized direction vector to a texture coordinate for a cubemap face stored within texture atlas described by the viewport
vec2 getCubemapAtlasCoordinates(const vec3 omniAtlasViewport, float shadowEdgePixels, float shadowTextureResolution, const vec3 dir) {

    float faceIndex;
    vec2 tileOffset;
    vec2 uv = getCubemapFaceCoordinates(dir, faceIndex, tileOffset);

    // move uv coordinates inwards inside to compensate for larger fov when rendering shadow into atlas
    float atlasFaceSize = omniAtlasViewport.z;
    float tileSize = shadowTextureResolution * atlasFaceSize;
    float offset = shadowEdgePixels / tileSize;
    uv = uv * vec2(1.0 - offset * 2.0) + vec2(offset * 1.0);

    // scale uv coordinates to cube face area within the viewport
    uv *= atlasFaceSize;

    // offset into face of the atlas (3x3 grid)
    uv += tileOffset * atlasFaceSize;

    // offset into the atlas viewport
    uv += omniAtlasViewport.xy;

    return uv;
}
`,mC=`
vec3 _getCookieClustered(TEXTURE_ACCEPT(tex), vec2 uv, float intensity, vec4 cookieChannel) {
    vec4 pixel = mix(vec4(1.0), texture2DLod(tex, uv, 0.0), intensity);
    bool isRgb = dot(cookieChannel.rgb, vec3(1.0)) == 3.0;
    return isRgb ? pixel.rgb : vec3(dot(pixel, cookieChannel));
}

// getCookie2D for clustered lighting including channel selector
vec3 getCookie2DClustered(TEXTURE_ACCEPT(tex), mat4 transform, vec3 worldPosition, float intensity, vec4 cookieChannel) {
    vec4 projPos = transform * vec4(worldPosition, 1.0);
    return _getCookieClustered(TEXTURE_PASS(tex), projPos.xy / projPos.w, intensity, cookieChannel);
}

// getCookie for clustered omni light with the cookie texture being stored in the cookie atlas
vec3 getCookieCubeClustered(TEXTURE_ACCEPT(tex), vec3 dir, float intensity, vec4 cookieChannel, float shadowTextureResolution, float shadowEdgePixels, vec3 omniAtlasViewport) {
    vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);
    return _getCookieClustered(TEXTURE_PASS(tex), uv, intensity, cookieChannel);
}
`,_C=`

vec3 _getShadowCoordPerspZbuffer(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {
    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);
    projPos.xyz /= projPos.w;
    return projPos.xyz;
    // depth bias is already applied on render
}

vec3 getShadowCoordPerspZbufferNormalOffset(mat4 shadowMatrix, vec4 shadowParams, vec3 normal) {
    vec3 wPos = vPositionW + normal * shadowParams.y;
    return _getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, wPos);
}

vec3 normalOffsetPointShadow(vec4 shadowParams, vec3 lightPos, vec3 lightDir, vec3 lightDirNorm, vec3 normal) {
    float distScale = length(lightDir);
    vec3 wPos = vPositionW + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale; //0.02
    vec3 dir = wPos - lightPos;
    return dir;
}

#if defined(CLUSTER_SHADOW_TYPE_PCF1)

float getShadowOmniClusteredPCF1(SHADOWMAP_ACCEPT(shadowMap), vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {

    float shadowTextureResolution = shadowParams.x;
    vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);

    float shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;
    return textureShadow(shadowMap, vec3(uv, shadowZ));
}

#endif

#if defined(CLUSTER_SHADOW_TYPE_PCF3)

float getShadowOmniClusteredPCF3(SHADOWMAP_ACCEPT(shadowMap), vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {

    float shadowTextureResolution = shadowParams.x;
    vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);

    float shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;
    vec3 shadowCoord = vec3(uv, shadowZ);
    return getShadowPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams);
}

#endif

#if defined(CLUSTER_SHADOW_TYPE_PCF5)

float getShadowOmniClusteredPCF5(SHADOWMAP_ACCEPT(shadowMap), vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {

    float shadowTextureResolution = shadowParams.x;
    vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);

    float shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;
    vec3 shadowCoord = vec3(uv, shadowZ);
    return getShadowPCF5x5(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams);
}

#endif

// Clustered Spot Sampling using atlas

#if defined(CLUSTER_SHADOW_TYPE_PCF1)

float getShadowSpotClusteredPCF1(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
    return textureShadow(shadowMap, shadowCoord);
}

#endif

#if defined(CLUSTER_SHADOW_TYPE_PCF3)

float getShadowSpotClusteredPCF3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
    return getShadowSpotPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams);
}

#endif

#if defined(CLUSTER_SHADOW_TYPE_PCF5)

float getShadowSpotClusteredPCF5(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
    return getShadowPCF5x5(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams);
}
#endif
`,gC=`

#include "lightBufferDefinesPS"

// include this before shadow / cookie code
#include "clusteredLightUtilsPS"

#ifdef CLUSTER_COOKIES
    #include "clusteredLightCookiesPS"
#endif

#ifdef CLUSTER_SHADOWS
    #include "clusteredLightShadowsPS"
#endif

uniform highp sampler2D clusterWorldTexture;
uniform highp sampler2D lightsTexture;

#ifdef CLUSTER_SHADOWS
    // TODO: when VSM shadow is supported, it needs to use sampler2D in webgl2
    uniform sampler2DShadow shadowAtlasTexture;
#endif

#ifdef CLUSTER_COOKIES
    uniform sampler2D cookieAtlasTexture;
#endif

uniform int clusterMaxCells;

// 1.0 if clustered lighting can be skipped (0 lights in the clusters)
uniform float clusterSkip;

uniform vec3 clusterCellsCountByBoundsSize;
uniform vec3 clusterTextureSize;
uniform vec3 clusterBoundsMin;
uniform vec3 clusterBoundsDelta;
uniform vec3 clusterCellsDot;
uniform vec3 clusterCellsMax;
uniform vec2 shadowAtlasParams;

// structure storing light properties of a clustered light
// it's sorted to have all vectors aligned to 4 floats to limit padding
struct ClusterLightData {

    // 32bit of flags
    uint flags;

    // area light sizes / orientation
    vec3 halfWidth;

    bool isSpot;

    // area light sizes / orientation
    vec3 halfHeight;

    // light index
    int lightIndex;

    // world space position
    vec3 position;

    // area light shape
    uint shape;

    // world space direction (spot light only)
    vec3 direction;

    // light follow mode
    bool falloffModeLinear;

    // color
    vec3 color;

    // 0.0 if the light doesn't cast shadows
    float shadowIntensity;

    // atlas viewport for omni light shadow and cookie (.xy is offset to the viewport slot, .z is size of the face in the atlas)
    vec3 omniAtlasViewport;

    // range of the light
    float range;

    // channel mask - one of the channels has 1, the others are 0
    vec4 cookieChannelMask;

    // compressed biases, two haf-floats stored in a float
    float biasesData;

    // shadow bias values
    float shadowBias;
    float shadowNormalBias;

    // compressed angles, two haf-floats stored in a float
    float anglesData;

    // spot light inner and outer angle cosine
    float innerConeAngleCos;
    float outerConeAngleCos;

    // intensity of the cookie
    float cookieIntensity;

    // light mask
    //float mask;
    bool isDynamic;
    bool isLightmapped;
};

// Note: on some devices (tested on Pixel 3A XL), this matrix when stored inside the light struct has lower precision compared to
// when stored outside, so we store it outside to avoid spot shadow flickering. This might need to be done to other / all members
// of the structure if further similar issues are observed.

// shadow (spot light only) / cookie projection matrix
mat4 lightProjectionMatrix;

vec4 sampleLightTextureF(const ClusterLightData clusterLightData, int index) {
    return texelFetch(lightsTexture, ivec2(index, clusterLightData.lightIndex), 0);
}

void decodeClusterLightCore(inout ClusterLightData clusterLightData, float lightIndex) {

    // light index
    clusterLightData.lightIndex = int(lightIndex);

    // sample data encoding half-float values into 32bit uints
    vec4 halfData = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_COLOR_ANGLES_BIAS});

    // store floats we decode later as needed
    clusterLightData.anglesData = halfData.z;
    clusterLightData.biasesData = halfData.w;

    // decompress color half-floats
    vec2 colorRG = unpackHalf2x16(floatBitsToUint(halfData.x));
    vec2 colorB_ = unpackHalf2x16(floatBitsToUint(halfData.y));
    clusterLightData.color = vec3(colorRG, colorB_.x) * {LIGHT_COLOR_DIVIDER};

    // position and range, full floats
    vec4 lightPosRange = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_POSITION_RANGE});
    clusterLightData.position = lightPosRange.xyz;
    clusterLightData.range = lightPosRange.w;

    // spot direction & flags data
    vec4 lightDir_Flags = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_DIRECTION_FLAGS});

    // spot light direction
    clusterLightData.direction = lightDir_Flags.xyz;

    // 32bit flags
    clusterLightData.flags = floatBitsToUint(lightDir_Flags.w);
    clusterLightData.isSpot = (clusterLightData.flags & (1u << 30u)) != 0u;
    clusterLightData.shape = (clusterLightData.flags >> 28u) & 0x3u;
    clusterLightData.falloffModeLinear = (clusterLightData.flags & (1u << 27u)) == 0u;
    clusterLightData.shadowIntensity = float((clusterLightData.flags >> 0u) & 0xFFu) / 255.0;
    clusterLightData.cookieIntensity = float((clusterLightData.flags >> 8u) & 0xFFu) / 255.0;
    clusterLightData.isDynamic = (clusterLightData.flags & (1u << 22u)) != 0u;
    clusterLightData.isLightmapped = (clusterLightData.flags & (1u << 21u)) != 0u;
}

void decodeClusterLightSpot(inout ClusterLightData clusterLightData) {

    // spot light cos angles
    vec2 angles = unpackHalf2x16(floatBitsToUint(clusterLightData.anglesData));
    clusterLightData.innerConeAngleCos = angles.x;
    clusterLightData.outerConeAngleCos = angles.y;
}

void decodeClusterLightOmniAtlasViewport(inout ClusterLightData clusterLightData) {
    clusterLightData.omniAtlasViewport = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_PROJ_MAT_0}).xyz;
}

void decodeClusterLightAreaData(inout ClusterLightData clusterLightData) {
    clusterLightData.halfWidth = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_AREA_DATA_WIDTH}).xyz;
    clusterLightData.halfHeight = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_AREA_DATA_HEIGHT}).xyz;
}

void decodeClusterLightProjectionMatrixData(inout ClusterLightData clusterLightData) {
    
    // shadow matrix
    vec4 m0 = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_PROJ_MAT_0});
    vec4 m1 = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_PROJ_MAT_1});
    vec4 m2 = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_PROJ_MAT_2});
    vec4 m3 = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_PROJ_MAT_3});
    lightProjectionMatrix = mat4(m0, m1, m2, m3);
}

void decodeClusterLightShadowData(inout ClusterLightData clusterLightData) {
    
    // shadow biases
    vec2 biases = unpackHalf2x16(floatBitsToUint(clusterLightData.biasesData));
    clusterLightData.shadowBias = biases.x;
    clusterLightData.shadowNormalBias = biases.y;
}

void decodeClusterLightCookieData(inout ClusterLightData clusterLightData) {

    // extract channel mask from flags
    uint cookieFlags = (clusterLightData.flags >> 23u) & 0x0Fu;  // 4bits, each bit enables a channel
    clusterLightData.cookieChannelMask = vec4(uvec4(cookieFlags) & uvec4(1u, 2u, 4u, 8u));
    clusterLightData.cookieChannelMask = step(1.0, clusterLightData.cookieChannelMask);  // Normalize to 0.0 or 1.0
}

void evaluateLight(
    ClusterLightData light, 
    vec3 worldNormal, 
    vec3 viewDir, 
    vec3 reflectionDir,
#if defined(LIT_CLEARCOAT)
    vec3 clearcoatReflectionDir,
#endif
    float gloss, 
    vec3 specularity, 
    vec3 geometricNormal, 
    mat3 tbn, 
#if defined(LIT_IRIDESCENCE)
    vec3 iridescenceFresnel,
#endif
    vec3 clearcoat_worldNormal,
    float clearcoat_gloss,
    float sheen_gloss,
    float iridescence_intensity
) {

    vec3 cookieAttenuation = vec3(1.0);
    float diffuseAttenuation = 1.0;
    float falloffAttenuation = 1.0;

    // evaluate omni part of the light
    vec3 lightDirW = evalOmniLight(light.position);
    vec3 lightDirNormW = normalize(lightDirW);

    #ifdef CLUSTER_AREALIGHTS

    // distance attenuation
    if (light.shape != {LIGHTSHAPE_PUNCTUAL}) { // area light

        // area lights
        decodeClusterLightAreaData(light);

        // handle light shape
        if (light.shape == {LIGHTSHAPE_RECT}) {
            calcRectLightValues(light.position, light.halfWidth, light.halfHeight);
        } else if (light.shape == {LIGHTSHAPE_DISK}) {
            calcDiskLightValues(light.position, light.halfWidth, light.halfHeight);
        } else { // sphere
            calcSphereLightValues(light.position, light.halfWidth, light.halfHeight);
        }

        falloffAttenuation = getFalloffWindow(light.range, lightDirW);

    } else

    #endif

    {   // punctual light

        if (light.falloffModeLinear)
            falloffAttenuation = getFalloffLinear(light.range, lightDirW);
        else
            falloffAttenuation = getFalloffInvSquared(light.range, lightDirW);
    }

    if (falloffAttenuation > 0.00001) {

        #ifdef CLUSTER_AREALIGHTS

        if (light.shape != {LIGHTSHAPE_PUNCTUAL}) { // area light

            // handle light shape
            if (light.shape == {LIGHTSHAPE_RECT}) {
                diffuseAttenuation = getRectLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
            } else if (light.shape == {LIGHTSHAPE_DISK}) {
                diffuseAttenuation = getDiskLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
            } else { // sphere
                diffuseAttenuation = getSphereLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
            }

        } else

        #endif

        {
            falloffAttenuation *= getLightDiffuse(worldNormal, viewDir, lightDirNormW); 
        }

        // spot light falloff
        if (light.isSpot) {
            decodeClusterLightSpot(light);
            falloffAttenuation *= getSpotEffect(light.direction, light.innerConeAngleCos, light.outerConeAngleCos, lightDirNormW);
        }

        #if defined(CLUSTER_COOKIES) || defined(CLUSTER_SHADOWS)

        if (falloffAttenuation > 0.00001) {

            // shadow / cookie
            if (light.shadowIntensity > 0.0 || light.cookieIntensity > 0.0) {

                // shared shadow / cookie data depends on light type
                if (light.isSpot) {
                    decodeClusterLightProjectionMatrixData(light);
                } else {
                    decodeClusterLightOmniAtlasViewport(light);
                }

                float shadowTextureResolution = shadowAtlasParams.x;
                float shadowEdgePixels = shadowAtlasParams.y;

                #ifdef CLUSTER_COOKIES

                // cookie
                if (light.cookieIntensity > 0.0) {
                    decodeClusterLightCookieData(light);

                    if (light.isSpot) {
                        cookieAttenuation = getCookie2DClustered(TEXTURE_PASS(cookieAtlasTexture), lightProjectionMatrix, vPositionW, light.cookieIntensity, light.cookieChannelMask);
                    } else {
                        cookieAttenuation = getCookieCubeClustered(TEXTURE_PASS(cookieAtlasTexture), lightDirW, light.cookieIntensity, light.cookieChannelMask, shadowTextureResolution, shadowEdgePixels, light.omniAtlasViewport);
                    }
                }

                #endif

                #ifdef CLUSTER_SHADOWS

                // shadow
                if (light.shadowIntensity > 0.0) {
                    decodeClusterLightShadowData(light);

                    vec4 shadowParams = vec4(shadowTextureResolution, light.shadowNormalBias, light.shadowBias, 1.0 / light.range);

                    if (light.isSpot) {

                        // spot shadow
                        vec3 shadowCoord = getShadowCoordPerspZbufferNormalOffset(lightProjectionMatrix, shadowParams, geometricNormal);
                        
                        #if defined(CLUSTER_SHADOW_TYPE_PCF1)
                            float shadow = getShadowSpotClusteredPCF1(SHADOWMAP_PASS(shadowAtlasTexture), shadowCoord, shadowParams);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF3)
                            float shadow = getShadowSpotClusteredPCF3(SHADOWMAP_PASS(shadowAtlasTexture), shadowCoord, shadowParams);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF5)
                            float shadow = getShadowSpotClusteredPCF5(SHADOWMAP_PASS(shadowAtlasTexture), shadowCoord, shadowParams);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCSS)
                            float shadow = getShadowSpotClusteredPCSS(SHADOWMAP_PASS(shadowAtlasTexture), shadowCoord, shadowParams);
                        #endif
                        falloffAttenuation *= mix(1.0, shadow, light.shadowIntensity);

                    } else {

                        // omni shadow
                        vec3 dir = normalOffsetPointShadow(shadowParams, light.position, lightDirW, lightDirNormW, geometricNormal);  // normalBias adjusted for distance

                        #if defined(CLUSTER_SHADOW_TYPE_PCF1)
                            float shadow = getShadowOmniClusteredPCF1(SHADOWMAP_PASS(shadowAtlasTexture), shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF3)
                            float shadow = getShadowOmniClusteredPCF3(SHADOWMAP_PASS(shadowAtlasTexture), shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF5)
                            float shadow = getShadowOmniClusteredPCF5(SHADOWMAP_PASS(shadowAtlasTexture), shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
                        #endif
                        falloffAttenuation *= mix(1.0, shadow, light.shadowIntensity);
                    }
                }

                #endif
            }
        }

        #endif

        // diffuse / specular / clearcoat
        #ifdef CLUSTER_AREALIGHTS

        if (light.shape != {LIGHTSHAPE_PUNCTUAL}) { // area light

            // area light diffuse
            {
                vec3 areaDiffuse = (diffuseAttenuation * falloffAttenuation) * light.color * cookieAttenuation;

                #if defined(LIT_SPECULAR)
                    areaDiffuse = mix(areaDiffuse, vec3(0), dLTCSpecFres);
                #endif

                // area light diffuse - it does not mix diffuse lighting into specular attenuation
                dDiffuseLight += areaDiffuse;
            }

            // specular and clear coat are material settings and get included by a define based on the material
            #ifdef LIT_SPECULAR

                // area light specular
                float areaLightSpecular;

                if (light.shape == {LIGHTSHAPE_RECT}) {
                    areaLightSpecular = getRectLightSpecular(worldNormal, viewDir);
                } else if (light.shape == {LIGHTSHAPE_DISK}) {
                    areaLightSpecular = getDiskLightSpecular(worldNormal, viewDir);
                } else { // sphere
                    areaLightSpecular = getSphereLightSpecular(worldNormal, viewDir);
                }

                dSpecularLight += dLTCSpecFres * areaLightSpecular * falloffAttenuation * light.color * cookieAttenuation;

                #ifdef LIT_CLEARCOAT

                    // area light specular clear coat
                    float areaLightSpecularCC;

                    if (light.shape == {LIGHTSHAPE_RECT}) {
                        areaLightSpecularCC = getRectLightSpecular(clearcoat_worldNormal, viewDir);
                    } else if (light.shape == {LIGHTSHAPE_DISK}) {
                        areaLightSpecularCC = getDiskLightSpecular(clearcoat_worldNormal, viewDir);
                    } else { // sphere
                        areaLightSpecularCC = getSphereLightSpecular(clearcoat_worldNormal, viewDir);
                    }

                    ccSpecularLight += ccLTCSpecFres * areaLightSpecularCC * falloffAttenuation * light.color  * cookieAttenuation;

                #endif

            #endif

        } else

        #endif

        {    // punctual light

            // punctual light diffuse
            {
                vec3 punctualDiffuse = falloffAttenuation * light.color * cookieAttenuation;

                #if defined(CLUSTER_AREALIGHTS)
                #if defined(LIT_SPECULAR)
                    punctualDiffuse = mix(punctualDiffuse, vec3(0), specularity);
                #endif
                #endif

                dDiffuseLight += punctualDiffuse;
            }
   
            // specular and clear coat are material settings and get included by a define based on the material
            #ifdef LIT_SPECULAR

                vec3 halfDir = normalize(-lightDirNormW + viewDir);
                
                // specular
                #ifdef LIT_SPECULAR_FRESNEL
                    dSpecularLight += 
                        getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, lightDirNormW, gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation * 
                        getFresnel(
                            dot(viewDir, halfDir), 
                            gloss, 
                            specularity
                        #if defined(LIT_IRIDESCENCE)
                            , iridescenceFresnel,
                            iridescence_intensity
                        #endif
                            );
                #else
                    dSpecularLight += getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, lightDirNormW, gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation * specularity;
                #endif

                #ifdef LIT_CLEARCOAT
                    #ifdef LIT_SPECULAR_FRESNEL
                        ccSpecularLight += getLightSpecular(halfDir, clearcoatReflectionDir, clearcoat_worldNormal, viewDir, lightDirNormW, clearcoat_gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation * getFresnelCC(dot(viewDir, halfDir));
                    #else
                        ccSpecularLight += getLightSpecular(halfDir, clearcoatReflectionDir, clearcoat_worldNormal, viewDir, lightDirNormW, clearcoat_gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation; 
                    #endif
                #endif

                #ifdef LIT_SHEEN
                    sSpecularLight += getLightSpecularSheen(halfDir, worldNormal, viewDir, lightDirNormW, sheen_gloss) * falloffAttenuation * light.color * cookieAttenuation;
                #endif

            #endif
        }
    }

    // Write to global attenuation values (for lightmapper)
    dAtten = falloffAttenuation;
    dLightDirNormW = lightDirNormW;
}

void evaluateClusterLight(
    float lightIndex, 
    vec3 worldNormal, 
    vec3 viewDir, 
    vec3 reflectionDir, 
#if defined(LIT_CLEARCOAT)
    vec3 clearcoatReflectionDir,
#endif
    float gloss, 
    vec3 specularity, 
    vec3 geometricNormal, 
    mat3 tbn, 
#if defined(LIT_IRIDESCENCE)
    vec3 iridescenceFresnel,
#endif
    vec3 clearcoat_worldNormal,
    float clearcoat_gloss,
    float sheen_gloss,
    float iridescence_intensity
) {

    // decode core light data from textures
    ClusterLightData clusterLightData;
    decodeClusterLightCore(clusterLightData, lightIndex);

    // evaluate light if it uses accepted light mask
    #ifdef CLUSTER_MESH_DYNAMIC_LIGHTS
        bool acceptLightMask = clusterLightData.isDynamic;
    #else
        bool acceptLightMask = clusterLightData.isLightmapped;
    #endif

    if (acceptLightMask)
        evaluateLight(
            clusterLightData, 
            worldNormal, 
            viewDir, 
            reflectionDir, 
#if defined(LIT_CLEARCOAT)
            clearcoatReflectionDir, 
#endif
            gloss, 
            specularity, 
            geometricNormal, 
            tbn, 
#if defined(LIT_IRIDESCENCE)
            iridescenceFresnel,
#endif
            clearcoat_worldNormal,
            clearcoat_gloss,
            sheen_gloss,
            iridescence_intensity
        );
}

void addClusteredLights(
    vec3 worldNormal, 
    vec3 viewDir, 
    vec3 reflectionDir, 
#if defined(LIT_CLEARCOAT)
    vec3 clearcoatReflectionDir,
#endif
    float gloss, 
    vec3 specularity, 
    vec3 geometricNormal, 
    mat3 tbn, 
#if defined(LIT_IRIDESCENCE)
    vec3 iridescenceFresnel,
#endif
    vec3 clearcoat_worldNormal,
    float clearcoat_gloss,
    float sheen_gloss,
    float iridescence_intensity
) {

    // skip lights if no lights at all
    if (clusterSkip > 0.5)
        return;

    // world space position to 3d integer cell cordinates in the cluster structure
    vec3 cellCoords = floor((vPositionW - clusterBoundsMin) * clusterCellsCountByBoundsSize);

    // no lighting when cell coordinate is out of range
    if (!(any(lessThan(cellCoords, vec3(0.0))) || any(greaterThanEqual(cellCoords, clusterCellsMax)))) {

        // cell index (mapping from 3d cell coordinates to linear memory)
        float cellIndex = dot(clusterCellsDot, cellCoords);

        // convert cell index to uv coordinates
        float clusterV = floor(cellIndex * clusterTextureSize.y);
        float clusterU = cellIndex - (clusterV * clusterTextureSize.x);

        // loop over maximum number of light cells
        for (int lightCellIndex = 0; lightCellIndex < clusterMaxCells; lightCellIndex++) {

            // using a single channel texture with data in red channel
            float lightIndex = texelFetch(clusterWorldTexture, ivec2(int(clusterU) + lightCellIndex, clusterV), 0).x;

            if (lightIndex <= 0.0)
                break;

            evaluateClusterLight(
                lightIndex * 255.0, 
                worldNormal, 
                viewDir, 
                reflectionDir,
#if defined(LIT_CLEARCOAT)
                clearcoatReflectionDir,
#endif
                gloss, 
                specularity, 
                geometricNormal, 
                tbn, 
#if defined(LIT_IRIDESCENCE)
                iridescenceFresnel,
#endif
                clearcoat_worldNormal,
                clearcoat_gloss,
                sheen_gloss,
                iridescence_intensity
            ); 
        }
    }
}
`,SC=`
vec3 combineColor(vec3 albedo, vec3 sheenSpecularity, float clearcoatSpecularity) {
    vec3 ret = vec3(0);
#ifdef LIT_OLD_AMBIENT
    ret += (dDiffuseLight - light_globalAmbient) * albedo + material_ambient * light_globalAmbient;
#else
    ret += albedo * dDiffuseLight;
#endif
#ifdef LIT_SPECULAR
    ret += dSpecularLight;
#endif
#ifdef LIT_REFLECTIONS
    ret += dReflection.rgb * dReflection.a;
#endif

#ifdef LIT_SHEEN
    float sheenScaling = 1.0 - max(max(sheenSpecularity.r, sheenSpecularity.g), sheenSpecularity.b) * 0.157;
    ret = ret * sheenScaling + (sSpecularLight + sReflection.rgb) * sheenSpecularity;
#endif
#ifdef LIT_CLEARCOAT
    float clearCoatScaling = 1.0 - ccFresnel * clearcoatSpecularity;
    ret = ret * clearCoatScaling + (ccSpecularLight + ccReflection) * clearcoatSpecularity;
#endif

    return ret;
}
`,yC=`
    varying vec2 uv0;
    uniform sampler2D blitTexture;
    void main(void) {
        gl_FragColor = texture2D(blitTexture, uv0);
    }
`,vC=`
    varying vec2 uv0;
    uniform samplerCube blitTexture;
    uniform mat4 invViewProj;
    void main(void) {
        vec4 projPos = vec4(uv0 * 2.0 - 1.0, 0.5, 1.0);
        vec4 worldPos = invViewProj * projPos;
        gl_FragColor = textureCube(blitTexture, worldPos.xyz);
    }
`,xC=`
    attribute vec2 vertex_position;
    varying vec2 uv0;
    void main(void) {
        gl_Position = vec4(vertex_position, 0.5, 1.0);
        uv0 = vertex_position.xy * 0.5 + 0.5;
        #ifndef WEBGPU
            uv0.y = 1.0 - uv0.y;
        #endif
    }
`,TC=`
// light cookie functionality for non-clustered lights
vec4 getCookie2D(sampler2D tex, mat4 transform, float intensity) {
    vec4 projPos = transform * vec4(vPositionW, 1.0);
    projPos.xy /= projPos.w;
    return mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);
}

vec4 getCookie2DClip(sampler2D tex, mat4 transform, float intensity) {
    vec4 projPos = transform * vec4(vPositionW, 1.0);
    projPos.xy /= projPos.w;
    if (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);
    return mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);
}

vec4 getCookie2DXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {
    vec4 projPos = transform * vec4(vPositionW, 1.0);
    projPos.xy /= projPos.w;
    projPos.xy += cookieOffset;
    vec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);
    return mix(vec4(1.0), texture2D(tex, uv), intensity);
}

vec4 getCookie2DClipXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {
    vec4 projPos = transform * vec4(vPositionW, 1.0);
    projPos.xy /= projPos.w;
    projPos.xy += cookieOffset;
    if (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);
    vec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);
    return mix(vec4(1.0), texture2D(tex, uv), intensity);
}

vec4 getCookieCube(samplerCube tex, mat4 transform, float intensity) {
    return mix(vec4(1.0), textureCube(tex, dLightDirNormW * mat3(transform)), intensity);
}
`,wC=`

#if LIT_CUBEMAP_PROJECTION == BOX
    uniform vec3 envBoxMin;
    uniform vec3 envBoxMax;
#endif

vec3 cubeMapProject(vec3 nrdir) {

    #if LIT_CUBEMAP_PROJECTION == NONE
        return cubeMapRotate(nrdir);
    #endif

    #if LIT_CUBEMAP_PROJECTION == BOX

        nrdir = cubeMapRotate(nrdir);

        vec3 rbmax = (envBoxMax - vPositionW) / nrdir;
        vec3 rbmin = (envBoxMin - vPositionW) / nrdir;

        vec3 rbminmax = mix(rbmin, rbmax, vec3(greaterThan(nrdir, vec3(0.0))));
        float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);

        vec3 posonbox = vPositionW + nrdir * fa;
        vec3 envBoxPos = (envBoxMin + envBoxMax) * 0.5;
        return normalize(posonbox - envBoxPos);

    #endif
}
`,EC=`
#ifdef CUBEMAP_ROTATION
uniform mat3 cubeMapRotationMatrix;
#endif

vec3 cubeMapRotate(vec3 refDir) {
#ifdef CUBEMAP_ROTATION
    return refDir * cubeMapRotationMatrix;
#else
    return refDir;
#endif
}
`,bC=`
#ifdef DEBUG_ALBEDO_PASS
gl_FragColor = vec4(gammaCorrectOutput(dAlbedo), 1.0);
#endif

#ifdef DEBUG_UV0_PASS
gl_FragColor = vec4(litArgs_albedo , 1.0);
#endif

#ifdef DEBUG_WORLD_NORMAL_PASS
gl_FragColor = vec4(litArgs_worldNormal * 0.5 + 0.5, 1.0);
#endif

#ifdef DEBUG_OPACITY_PASS
gl_FragColor = vec4(vec3(litArgs_opacity) , 1.0);
#endif

#ifdef DEBUG_SPECULARITY_PASS
gl_FragColor = vec4(litArgs_specularity, 1.0);
#endif

#ifdef DEBUG_GLOSS_PASS
gl_FragColor = vec4(vec3(litArgs_gloss) , 1.0);
#endif

#ifdef DEBUG_METALNESS_PASS
gl_FragColor = vec4(vec3(litArgs_metalness) , 1.0);
#endif

#ifdef DEBUG_AO_PASS
gl_FragColor = vec4(vec3(litArgs_ao) , 1.0);
#endif

#ifdef DEBUG_EMISSION_PASS
gl_FragColor = vec4(gammaCorrectOutput(litArgs_emission), 1.0);
#endif
`,AC=`
#ifdef DEBUG_LIGHTING_PASS
litArgs_albedo = vec3(0.5);
#endif

#ifdef DEBUG_UV0_PASS
#ifdef VARYING_VUV0
litArgs_albedo = vec3(vUv0, 0);
#else
litArgs_albedo = vec3(0);
#endif
#endif
`,CC=`

#ifndef _DECODE_INCLUDED_
#define _DECODE_INCLUDED_

vec3 decodeLinear(vec4 raw) {
    return raw.rgb;
}

float decodeGamma(float raw) {
    return pow(raw, 2.2);
}

vec3 decodeGamma(vec3 raw) {
    return pow(raw, vec3(2.2));
}

vec3 decodeGamma(vec4 raw) {
    return pow(raw.xyz, vec3(2.2));
}

vec3 decodeRGBM(vec4 raw) {
    vec3 color = (8.0 * raw.a) * raw.rgb;
    return color * color;
}

vec3 decodeRGBP(vec4 raw) {
    vec3 color = raw.rgb * (-raw.a * 7.0 + 8.0);
    return color * color;
}

vec3 decodeRGBE(vec4 raw) {
    if (raw.a == 0.0) {
        return vec3(0.0, 0.0, 0.0);
    } else {
        return raw.xyz * pow(2.0, raw.w * 255.0 - 128.0);
    }
}

vec4 passThrough(vec4 raw) {
    return raw;
}

vec3 unpackNormalXYZ(vec4 nmap) {
    return nmap.xyz * 2.0 - 1.0;
}

vec3 unpackNormalXY(vec4 nmap) {
    vec3 normal;
    normal.xy = nmap.wy * 2.0 - 1.0;
    normal.z = sqrt(1.0 - clamp(dot(normal.xy, normal.xy), 0.0, 1.0));
    return normal;
}

#endif
`,PC=`

#ifndef _DETAILMODES_INCLUDED_
#define _DETAILMODES_INCLUDED_

vec3 detailMode_mul(vec3 c1, vec3 c2) {
    return c1 * c2;
}

vec3 detailMode_add(vec3 c1, vec3 c2) {
    return c1 + c2;
}

// https://en.wikipedia.org/wiki/Blend_modes#Screen
vec3 detailMode_screen(vec3 c1, vec3 c2) {
    return 1.0 - (1.0 - c1)*(1.0 - c2);
}

// https://en.wikipedia.org/wiki/Blend_modes#Overlay
vec3 detailMode_overlay(vec3 c1, vec3 c2) {
    return mix(1.0 - 2.0 * (1.0 - c1)*(1.0 - c2), 2.0 * c1 * c2, step(c1, vec3(0.5)));
}

vec3 detailMode_min(vec3 c1, vec3 c2) {
    return min(c1, c2);
}

vec3 detailMode_max(vec3 c1, vec3 c2) {
    return max(c1, c2);
}

#endif
`,DC=`
uniform vec3 material_diffuse;

#ifdef STD_DIFFUSEDETAIL_TEXTURE
    #include "detailModesPS"
#endif

void getAlbedo() {
    dAlbedo = material_diffuse.rgb;

    #ifdef STD_DIFFUSE_TEXTURE
        vec3 albedoTexture = {STD_DIFFUSE_TEXTURE_DECODE}(texture2DBias({STD_DIFFUSE_TEXTURE_NAME}, {STD_DIFFUSE_TEXTURE_UV}, textureBias)).{STD_DIFFUSE_TEXTURE_CHANNEL};

        #ifdef STD_DIFFUSEDETAIL_TEXTURE
            vec3 albedoDetail = {STD_DIFFUSEDETAIL_TEXTURE_DECODE}(texture2DBias({STD_DIFFUSEDETAIL_TEXTURE_NAME}, {STD_DIFFUSEDETAIL_TEXTURE_UV}, textureBias)).{STD_DIFFUSEDETAIL_TEXTURE_CHANNEL};
            albedoTexture = detailMode_{STD_DIFFUSEDETAIL_DETAILMODE}(albedoTexture, albedoDetail);
        #endif

        dAlbedo *= albedoTexture;
    #endif

    #ifdef STD_DIFFUSE_VERTEX
        dAlbedo *= gammaCorrectInput(saturate(vVertexColor.{STD_DIFFUSE_VERTEX_CHANNEL}));
    #endif
}
`,IC=`
uniform vec3 material_emissive;
uniform float material_emissiveIntensity;

void getEmission() {
    dEmission = material_emissive * material_emissiveIntensity;

    #ifdef STD_EMISSIVE_TEXTURE
    dEmission *= {STD_EMISSIVE_TEXTURE_DECODE}(texture2DBias({STD_EMISSIVE_TEXTURE_NAME}, {STD_EMISSIVE_TEXTURE_UV}, textureBias)).{STD_EMISSIVE_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_EMISSIVE_VERTEX
    dEmission *= gammaCorrectInput(saturate(vVertexColor.{STD_EMISSIVE_VERTEX_CHANNEL}));
    #endif
}
`,MC=`
vec4 encodeLinear(vec3 source) {
    return vec4(source, 1.0);
}

vec4 encodeGamma(vec3 source) {
    return vec4(pow(source + 0.0000001, vec3(1.0 / 2.2)), 1.0);
}

vec4 encodeRGBM(vec3 source) { // modified RGBM
    vec4 result;
    result.rgb = pow(source.rgb, vec3(0.5));
    result.rgb *= 1.0 / 8.0;

    result.a = saturate( max( max( result.r, result.g ), max( result.b, 1.0 / 255.0 ) ) );
    result.a = ceil(result.a * 255.0) / 255.0;

    result.rgb /= result.a;
    return result;
}

vec4 encodeRGBP(vec3 source) {
    // convert incoming linear to gamma(ish)
    vec3 gamma = pow(source, vec3(0.5));

    // calculate the maximum component clamped to 1..8
    float maxVal = min(8.0, max(1.0, max(gamma.x, max(gamma.y, gamma.z))));

    // calculate storage factor
    float v = 1.0 - ((maxVal - 1.0) / 7.0);

    // round the value for storage in 8bit channel
    v = ceil(v * 255.0) / 255.0;

    return vec4(gamma / (-v * 7.0 + 8.0), v);    
}

vec4 encodeRGBE(vec3 source) {
    float maxVal = max(source.x, max(source.y, source.z));
    if (maxVal < 1e-32) {
        return vec4(0, 0, 0, 0);
    } else {
        float e = ceil(log2(maxVal));
        return vec4(source / pow(2.0, e), (e + 128.0) / 255.0);
    }
}
`,LC=`
    gl_FragColor.rgb = combineColor(litArgs_albedo, litArgs_sheen_specularity, litArgs_clearcoat_specularity);

    gl_FragColor.rgb += litArgs_emission;
    gl_FragColor.rgb = addFog(gl_FragColor.rgb);
    gl_FragColor.rgb = toneMap(gl_FragColor.rgb);
    gl_FragColor.rgb = gammaCorrectOutput(gl_FragColor.rgb);
`,RC=`

#ifndef _ENVATLAS_INCLUDED_
#define _ENVATLAS_INCLUDED_

// the envAtlas is fixed at 512 pixels. every equirect is generated with 1 pixel boundary.
const float atlasSize = 512.0;
const float seamSize = 1.0 / atlasSize;

// map a normalized equirect UV to the given rectangle (taking 1 pixel seam into account).
vec2 mapUv(vec2 uv, vec4 rect) {
    return vec2(mix(rect.x + seamSize, rect.x + rect.z - seamSize, uv.x),
                mix(rect.y + seamSize, rect.y + rect.w - seamSize, uv.y));
}

// map a normalized equirect UV and roughness level to the correct atlas rect.
vec2 mapRoughnessUv(vec2 uv, float level) {
    float t = 1.0 / exp2(level);
    return mapUv(uv, vec4(0, 1.0 - t, t, t * 0.5));
}

// map shiny level UV
vec2 mapShinyUv(vec2 uv, float level) {
    float t = 1.0 / exp2(level);
    return mapUv(uv, vec4(1.0 - t, 1.0 - t, t, t * 0.5));
}

#endif
`,OC=`
#ifdef LIT_SKYBOX_INTENSITY
    uniform float skyboxIntensity;
#endif

vec3 processEnvironment(vec3 color) {
    #ifdef LIT_SKYBOX_INTENSITY
        return color * skyboxIntensity;
    #else
        return color;
    #endif
}
`,FC=`
float getFalloffWindow(float lightRadius, vec3 lightDir) {
    float sqrDist = dot(lightDir, lightDir);
    float invRadius = 1.0 / lightRadius;
    return square(saturate(1.0 - square(sqrDist * square(invRadius))));
}

float getFalloffInvSquared(float lightRadius, vec3 lightDir) {
    float sqrDist = dot(lightDir, lightDir);
    float falloff = 1.0 / (sqrDist + 1.0);
    float invRadius = 1.0 / lightRadius;

    falloff *= 16.0;
    falloff *= square(saturate(1.0 - square(sqrDist * square(invRadius))));

    return falloff;
}
`,NC=`
float getFalloffLinear(float lightRadius, vec3 lightDir) {
    float d = length(lightDir);
    return max(((lightRadius - d) / lightRadius), 0.0);
}
`,kC=`

#ifndef FLOAT_AS_UINT
#define FLOAT_AS_UINT

// encode float value to RGBA8
vec4 float2uint(float value) {
    uint intBits = floatBitsToUint(value);
    return vec4(
        float((intBits >> 24u) & 0xFFu) / 255.0,
        float((intBits >> 16u) & 0xFFu) / 255.0,
        float((intBits >> 8u) & 0xFFu) / 255.0,
        float(intBits & 0xFFu) / 255.0
    );
}

// decode RGBA8 value to float
float uint2float(vec4 value) {
    uint intBits = 
        (uint(value.r * 255.0) << 24u) |
        (uint(value.g * 255.0) << 16u) |
        (uint(value.b * 255.0) << 8u) |
        uint(value.a * 255.0);

    return uintBitsToFloat(intBits);
}

// store a single float value in vec4, assuming either RGBA8 or float renderable texture
vec4 float2vec4(float value) {
    #if defined(CAPS_TEXTURE_FLOAT_RENDERABLE)
        return vec4(value, 1.0, 1.0, 1.0);
    #else
        return float2uint(value);
    #endif
}

#endif // FLOAT_AS_UINT
`,UC=`

float dBlendModeFogFactor = 1.0;

#if (FOG != NONE)
    uniform vec3 fog_color;

    #if (FOG == LINEAR)
        uniform float fog_start;
        uniform float fog_end;
    #else
        uniform float fog_density;
    #endif
#endif

float getFogFactor() {

    float depth = gl_FragCoord.z / gl_FragCoord.w;
    float fogFactor = 0.0;

    #if (FOG == LINEAR)
        fogFactor = (fog_end - depth) / (fog_end - fog_start);
    #elif (FOG == EXP)
        fogFactor = exp(-depth * fog_density);
    #elif (FOG == EXP2)
        fogFactor = exp(-depth * depth * fog_density * fog_density);
    #endif

    return clamp(fogFactor, 0.0, 1.0);
}

vec3 addFog(vec3 color) {

    #if (FOG != NONE)
        return mix(fog_color * dBlendModeFogFactor, color, getFogFactor());
    #endif

    return color;
}
`,BC=`
// Schlick's approximation
vec3 getFresnel(
        float cosTheta, 
        float gloss, 
        vec3 specularity
#if defined(LIT_IRIDESCENCE)
        , vec3 iridescenceFresnel, 
        float iridescenceIntensity
#endif
    ) {
    float fresnel = pow(1.0 - saturate(cosTheta), 5.0);
    float glossSq = gloss * gloss;
    vec3 ret = specularity + (max(vec3(glossSq), specularity) - specularity) * fresnel;
#if defined(LIT_IRIDESCENCE)
    return mix(ret, iridescenceFresnel, iridescenceIntensity);
#else
    return ret;
#endif    
}

float getFresnelCC(float cosTheta) {
    float fresnel = pow(1.0 - saturate(cosTheta), 5.0);
    return 0.04 + (1.0 - 0.04) * fresnel;
}
`,zC=`
attribute vec2 vertex_position;

varying vec2 vUv0;

void main(void)
{
    gl_Position = vec4(vertex_position, 0.5, 1.0);
    vUv0 = vertex_position.xy * 0.5 + 0.5;
}
`,VC=`

#include "decodePS"

#if (GAMMA == SRGB)

    float gammaCorrectInput(float color) {
        return decodeGamma(color);
    }

    vec3 gammaCorrectInput(vec3 color) {
        return decodeGamma(color);
    }

    vec4 gammaCorrectInput(vec4 color) {
        return vec4(decodeGamma(color.xyz), color.w);
    }

    vec3 gammaCorrectOutput(vec3 color) {
        return pow(color + 0.0000001, vec3(1.0 / 2.2));
    }

#else // NONE

    float gammaCorrectInput(float color) {
        return color;
    }

    vec3 gammaCorrectInput(vec3 color) {
        return color;
    }

    vec4 gammaCorrectInput(vec4 color) {
        return color;
    }

    vec3 gammaCorrectOutput(vec3 color) {
        return color;
    }

#endif
`,GC=`
#ifdef STD_GLOSS_CONSTANT
uniform float material_gloss;
#endif

void getGlossiness() {
    dGlossiness = 1.0;

    #ifdef STD_GLOSS_CONSTANT
    dGlossiness *= material_gloss;
    #endif

    #ifdef STD_GLOSS_TEXTURE
    dGlossiness *= texture2DBias({STD_GLOSS_TEXTURE_NAME}, {STD_GLOSS_TEXTURE_UV}, textureBias).{STD_GLOSS_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_GLOSS_VERTEX
    dGlossiness *= saturate(vVertexColor.{STD_GLOSS_VERTEX_CHANNEL});
    #endif

    #ifdef STD_GLOSS_INVERT
    dGlossiness = 1.0 - dGlossiness;
    #endif

    dGlossiness += 0.0000001;
}
`,HC=`
uniform mat4 matrix_model;
uniform mat4 matrix_view;
uniform mat4 matrix_projection;

// project the model space gaussian center to view and clip space
bool initCenter(vec3 modelCenter, out SplatCenter center) {
    mat4 modelView = matrix_view * matrix_model;
    vec4 centerView = modelView * vec4(modelCenter, 1.0);

    // early out if splat is behind the camera
    if (centerView.z > 0.0) {
        return false;
    }

    vec4 centerProj = matrix_projection * centerView;

    // ensure gaussians are not clipped by camera near and far
    #if WEBGPU
        centerProj.z = clamp(centerProj.z, 0, abs(centerProj.w));
    #else
        centerProj.z = clamp(centerProj.z, -abs(centerProj.w), abs(centerProj.w));
    #endif

    center.view = centerView.xyz / centerView.w;
    center.proj = centerProj;
    center.projMat00 = matrix_projection[0][0];
    center.modelView = modelView;
    return true;
}
`,WC=`

uniform mediump sampler2D splatColor;

// 返回值: 0.0 ~ 1.0 之间的透明度因子
float computeAlpha(float muT, float uTime, float uFadeSpeed, float life) {
    float age = (uTime - muT) * 2.0; // 存活时长（秒）

    if (muT > uTime) return 0.0;

    // --- 线性衰减：基于 life ---
    float linearFade = 1.0 - age / life;
    // --- 指数衰减：基于 uFadeSpeed ---
    float expFade = exp(-age * uFadeSpeed);

    // return clamp(linearFade, 0.0, 1.0); 
    return clamp(expFade, 0.0, 1.0);
}


vec4 readColor(in SplatSource source, float uTime, bool plusA, int pointCloudModeEnabled) {
    vec4 color = texelFetch(splatColor, source.uv, 0);
    #ifdef IS_4D
        vec2 tData = texelFetch(transformLifecycle, source.uv, 0).xy;
        float muT = tData.x;
        
        float saveA = pointCloudModeEnabled == 1 ? 1.0 : color.a;
        float alpha = saveA;
        
        if (uOpenAnim == 1) {
            alpha = alpha * (muT - uTime + 0.05);
            float age = uTime - muT;    // 当前存在的时间长度
            float uFadeSpeed = 2.0;
            float life = 0.1;
            alpha = computeAlpha(muT, uTime, uFadeSpeed, life);
            alpha *= alpha;
        }
    
        color.a = plusA ? alpha : saveA;
    #endif
    return color;
}

`,$C=`

// stores the source UV and order of the splat
struct SplatSource {
    uint order;         // render order
    uint id;            // splat id
    ivec2 uv;           // splat uv
    vec2 cornerUV;      // corner coordinates for this vertex of the gaussian (-1, -1)..(1, 1)
};

// stores the camera and clip space position of the gaussian center
struct SplatCenter {
    vec3 view;          // center in view space
    vec4 proj;          // center in clip space
    mat4 modelView;     // model-view matrix
    float projMat00;    // element [0][0] of the projection matrix
};

// stores the offset from center for the current gaussian
struct SplatCorner {
    vec2 offset;        // corner offset from center in clip space
    vec2 uv;            // corner uv
    #if GSPLAT_AA
        float aaFactor; // for scenes generated with antialiasing
    #endif

    vec2 v;
    float dlen;
    vec2 cSize;
    vec2 cUV;
};

#include "gsplatEvalSHVS"
#include "gsplatQuatToMat3VS"

#if GSPLAT_COMPRESSED_DATA == true
    #include "gsplatCompressedDataVS"
    #if SH_COEFFS > 0
        #include "gsplatCompressedSHVS"
    #endif
#elif GSPLAT_SOGS_DATA == true
    #include "gsplatSogsDataVS"
    #include "gsplatSogsColorVS"
    #if SH_COEFFS > 0
        #include "gsplatSogsSHVS"
    #endif
#else
    #include "gsplatDataVS"
    #include "gsplatColorVS"
    #if SH_COEFFS > 0
        #include "gsplatSHVS"
    #endif
#endif

#include "gsplatSourceVS"
#include "gsplatCenterVS"
#include "gsplatCornerVS"
#include "gsplatOutputVS"

// modify the gaussian corner so it excludes gaussian regions with alpha less than 1/255
void clipCorner(inout SplatCorner corner, float alpha) {
    float clip = min(1.0, sqrt(-log(1.0 / 255.0 / alpha)) / 2.0);
    corner.offset *= clip;
    corner.uv *= clip;
}
`,XC=`
uniform highp usampler2D packedTexture;
uniform highp usampler2D packedTimeTexture;
uniform highp sampler2D chunkTexture;

// work values
vec4 chunkDataA;    // x: min_x, y: min_y, z: min_z, w: max_x
vec4 chunkDataB;    // x: max_y, y: max_z, z: scale_min_x, w: scale_min_y
vec4 chunkDataC;    // x: scale_min_z, y: scale_max_x, z: scale_max_y, w: scale_max_z
vec4 chunkDataD;    // x: min_r, y: min_g, z: min_b, w: max_r
vec4 chunkDataE;    // x: max_g, y: max_b, z: min_motion_x, w: min_motion_y
vec4 chunkDataF;    // x: min_motion_z, y: max_motion_x, z: max_motion_y, w: max_motion_z
vec4 chunkDataT;    // x: min_time, y: max_time, z: min_time_scale, w: max_time_scale
uvec4 packedData;   // x: position bits, y: rotation bits, z: scale bits, w: color bits
uvec2 packedT;   // x: motion bits(x, y, z), y: time bits(t_scale, t, unused)

// tool for compute Marginal time
float computeMarginalT(float time, float muT, float sigmaT) {
    if (muT <= -10.0) {
        return 1.0;
    }
    float result = exp(-0.5 * (pow((time - muT), 2.0) / pow(sigmaT, 2.0)));
    return result;
}

vec3 unpack111011(uint bits) {
    return vec3(
        float(bits >> 21u) / 2047.0,
        float((bits >> 11u) & 0x3ffu) / 1023.0,
        float(bits & 0x7ffu) / 2047.0
    );
}

vec4 unpack8888(uint bits) {
    return vec4(
        float(bits >> 24u) / 255.0,
        float((bits >> 16u) & 0xffu) / 255.0,
        float((bits >> 8u) & 0xffu) / 255.0,
        float(bits & 0xffu) / 255.0
    );
}

const float norm = 1.0 / (sqrt(2.0) * 0.5);

vec4 unpackRotation(uint bits) {
    float a = (float((bits >> 20u) & 0x3ffu) / 1023.0 - 0.5) * norm;
    float b = (float((bits >> 10u) & 0x3ffu) / 1023.0 - 0.5) * norm;
    float c = (float(bits & 0x3ffu) / 1023.0 - 0.5) * norm;
    float m = sqrt(1.0 - (a * a + b * b + c * c));

    uint mode = bits >> 30u;
    if (mode == 0u) return vec4(m, a, b, c);
    if (mode == 1u) return vec4(a, m, b, c);
    if (mode == 2u) return vec4(a, b, m, c);
    return vec4(a, b, c, m);
}


// read center
vec3 readCenter(SplatSource source) {
    uint w = uint(textureSize(chunkTexture, 0).x) / 5u;
    uint chunkId = source.id / 256u;
    ivec2 chunkUV = ivec2((chunkId % w) * 5u, chunkId / w);

    // read chunk and packed compressed data
    chunkDataA = texelFetch(chunkTexture, chunkUV, 0);
    chunkDataB = texelFetch(chunkTexture, chunkUV + ivec2(1, 0), 0);
    chunkDataC = texelFetch(chunkTexture, chunkUV + ivec2(2, 0), 0);
    chunkDataD = texelFetch(chunkTexture, chunkUV + ivec2(3, 0), 0);
    chunkDataE = texelFetch(chunkTexture, chunkUV + ivec2(4, 0), 0);
    packedData = texelFetch(packedTexture, source.uv, 0);

    return mix(chunkDataA.xyz, vec3(chunkDataA.w, chunkDataB.xy), unpack111011(packedData.x));
}

vec4 readColor(in SplatSource source) {
    vec4 r = unpack8888(packedData.w);
    return vec4(mix(chunkDataD.xyz, vec3(chunkDataD.w, chunkDataE.xy), r.rgb), r.w);
}

vec4 getRotation() {
    return unpackRotation(packedData.y);
}

vec3 getScale() {
    return exp(mix(vec3(chunkDataB.zw, chunkDataC.x), chunkDataC.yzw, unpack111011(packedData.z)));
}

// given a rotation matrix and scale vector, compute 3d covariance A and B
void readCovariance(in SplatSource source, out vec3 covA, out vec3 covB) {
    mat3 rot = quatToMat3(getRotation());
    vec3 scale = getScale();

    // M = S * R
    mat3 M = transpose(mat3(
        scale.x * rot[0],
        scale.y * rot[1],
        scale.z * rot[2]
    ));

    covA = vec3(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
    covB = vec3(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}

float getMarginalT(in SplatSource source, in float time) {
    float marginal = 1.0;
    #ifdef IS_4D
        chunkDataT = texelFetch(chunkTexture, chunkUV + ivec2(6, 0), 0);
        packedT = texelFetch(packedTimeTexture, source.uv, 0).xy;
        vec3 timeData = mix(vec3(chunkDataT.z, chunkDataT.x, 0), vec3(chunkDataT.w, chunkDataT.y, 1), unpack111011(packedT.y));
        float tScale = exp(timeData.x);
        float muT = timeData.y;
        marginal = computeMarginalT(time, muT, tScale);
    #endif
    return marginal;
}

vec3 readCenter4D(SplatSource source, float time) {
    uint w = uint(textureSize(chunkTexture, 0).x) / 7u;
    uint chunkId = source.id / 256u;
    ivec2 chunkUV = ivec2((chunkId % w) * 7u, chunkId / w);

    // read chunk and packed compressed data
    chunkDataA = texelFetch(chunkTexture, chunkUV, 0);
    chunkDataB = texelFetch(chunkTexture, chunkUV + ivec2(1, 0), 0);
    chunkDataC = texelFetch(chunkTexture, chunkUV + ivec2(2, 0), 0);
    chunkDataD = texelFetch(chunkTexture, chunkUV + ivec2(3, 0), 0);
    chunkDataE = texelFetch(chunkTexture, chunkUV + ivec2(4, 0), 0);
    chunkDataF = texelFetch(chunkTexture, chunkUV + ivec2(5, 0), 0);
    chunkDataT = texelFetch(chunkTexture, chunkUV + ivec2(6, 0), 0);
    packedData = texelFetch(packedTexture, source.uv, 0);
    packedT = texelFetch(packedTimeTexture, source.uv, 0).xy;

    vec3 splatCenter = mix(chunkDataA.xyz, vec3(chunkDataA.w, chunkDataB.xy), unpack111011(packedData.x));
    #ifdef IS_4D
        vec3 time = mix(vec3(chunkDataT.z, chunkDataT.x, 0), vec3(chunkDataT.w, chunkDataT.y, 1), unpack111011(packedT.y));
        float muT = time.y;
        vec3 movingSpeed = mix(vec3(chunkDataE.zw, chunkDataF.x), chunkDataF.yzw, unpack111011(packedT.x));
        vec3 splatOffset = movingSpeed * (time - muT);
        splatCenter += splatOffset;
    #endif
    return splatCenter;
}
`,qC=`
#if SH_BANDS > 0

uniform highp usampler2D shTexture0;
uniform highp usampler2D shTexture1;
uniform highp usampler2D shTexture2;

vec4 unpack8888s(in uint bits) {
    return vec4((uvec4(bits) >> uvec4(0u, 8u, 16u, 24u)) & 0xffu) * (8.0 / 255.0) - 4.0;
}

void readSHData(in SplatSource source, out vec3 sh[15], out float scale) {
    // read the sh coefficients
    uvec4 shData0 = texelFetch(shTexture0, source.uv, 0);
    uvec4 shData1 = texelFetch(shTexture1, source.uv, 0);
    uvec4 shData2 = texelFetch(shTexture2, source.uv, 0);

    vec4 r0 = unpack8888s(shData0.x);
    vec4 r1 = unpack8888s(shData0.y);
    vec4 r2 = unpack8888s(shData0.z);
    vec4 r3 = unpack8888s(shData0.w);

    vec4 g0 = unpack8888s(shData1.x);
    vec4 g1 = unpack8888s(shData1.y);
    vec4 g2 = unpack8888s(shData1.z);
    vec4 g3 = unpack8888s(shData1.w);

    vec4 b0 = unpack8888s(shData2.x);
    vec4 b1 = unpack8888s(shData2.y);
    vec4 b2 = unpack8888s(shData2.z);
    vec4 b3 = unpack8888s(shData2.w);

    sh[0] =  vec3(r0.x, g0.x, b0.x);
    sh[1] =  vec3(r0.y, g0.y, b0.y);
    sh[2] =  vec3(r0.z, g0.z, b0.z);
    sh[3] =  vec3(r0.w, g0.w, b0.w);
    sh[4] =  vec3(r1.x, g1.x, b1.x);
    sh[5] =  vec3(r1.y, g1.y, b1.y);
    sh[6] =  vec3(r1.z, g1.z, b1.z);
    sh[7] =  vec3(r1.w, g1.w, b1.w);
    sh[8] =  vec3(r2.x, g2.x, b2.x);
    sh[9] =  vec3(r2.y, g2.y, b2.y);
    sh[10] = vec3(r2.z, g2.z, b2.z);
    sh[11] = vec3(r2.w, g2.w, b2.w);
    sh[12] = vec3(r3.x, g3.x, b3.x);
    sh[13] = vec3(r3.y, g3.y, b3.y);
    sh[14] = vec3(r3.z, g3.z, b3.z);

    scale = 1.0;
}

#endif
`,jC=`
    #if SH_BANDS == 1
        #define SH_COEFFS 3
    #elif SH_BANDS == 2
        #define SH_COEFFS 8
    #elif SH_BANDS == 3
        #define SH_COEFFS 15
    #else
        #define SH_COEFFS 0
    #endif

    #if SH_BANDS > 0

    const float SH_C1 = 0.4886025119029199f;

    #if SH_BANDS > 1
        const float SH_C2_0 = 1.0925484305920792f;
        const float SH_C2_1 = -1.0925484305920792f;
        const float SH_C2_2 = 0.31539156525252005f;
        const float SH_C2_3 = -1.0925484305920792f;
        const float SH_C2_4 = 0.5462742152960396f;
    #endif

    #if SH_BANDS > 2
        const float SH_C3_0 = -0.5900435899266435f;
        const float SH_C3_1 = 2.890611442640554f;
        const float SH_C3_2 = -0.4570457994644658f;
        const float SH_C3_3 = 0.3731763325901154f;
        const float SH_C3_4 = -0.4570457994644658f;
        const float SH_C3_5 = 1.445305721320277f;
        const float SH_C3_6 = -0.5900435899266435f;
    #endif

    // see https://github.com/graphdeco-inria/gaussian-splatting/blob/main/utils/sh_utils.py
    vec3 evalSH(in vec3 sh[SH_COEFFS], in vec3 dir) {
        float x = dir.x;
        float y = dir.y;
        float z = dir.z;

        // 1st degree
        vec3 result = SH_C1 * (-sh[0] * y + sh[1] * z - sh[2] * x);

        #if SH_BANDS > 1
            // 2nd degree
            float xx = x * x;
            float yy = y * y;
            float zz = z * z;
            float xy = x * y;
            float yz = y * z;
            float xz = x * z;

            result +=
                sh[3] * (SH_C2_0 * xy) +
                sh[4] * (SH_C2_1 * yz) +
                sh[5] * (SH_C2_2 * (2.0 * zz - xx - yy)) +
                sh[6] * (SH_C2_3 * xz) +
                sh[7] * (SH_C2_4 * (xx - yy));
        #endif

        #if SH_BANDS > 2
            // 3rd degree
            result +=
                sh[8]  * (SH_C3_0 * y * (3.0 * xx - yy)) +
                sh[9]  * (SH_C3_1 * xy * z) +
                sh[10] * (SH_C3_2 * y * (4.0 * zz - xx - yy)) +
                sh[11] * (SH_C3_3 * z * (2.0 * zz - 3.0 * xx - 3.0 * yy)) +
                sh[12] * (SH_C3_4 * x * (4.0 * zz - xx - yy)) +
                sh[13] * (SH_C3_5 * z * (xx - yy)) +
                sh[14] * (SH_C3_6 * x * (xx - 3.0 * yy));
        #endif

        return result;
    }
    #endif
`,YC=`
mat3 quatToMat3(vec4 R) {
    vec4 R2 = R + R;
    float X = R2.x * R.w;
    vec4 Y  = R2.y * R;
    vec4 Z  = R2.z * R;
    float W = R2.w * R.w;

    return mat3(
        1.0 - Z.z - W,
              Y.z + X,
              Y.w - Z.x,
              Y.z - X,
        1.0 - Y.y - W,
              Z.w + Y.x,
              Y.w + Z.x,
              Z.w - Y.x,
        1.0 - Y.y - Z.z
    );
}
`,KC=`
uniform mediump sampler2D sh0;

uniform vec4 sh0_mins;
uniform vec4 sh0_maxs;

float SH_C0 = 0.28209479177387814;

vec4 readColor(in SplatSource source) {
    vec4 clr = mix(sh0_mins, sh0_maxs, texelFetch(sh0, source.uv, 0));
    return vec4(vec3(0.5) + clr.xyz * SH_C0, 1.0 / (1.0 + exp(-clr.w)));
}
`,ZC=`
uniform highp usampler2D packedTexture;

uniform vec3 means_mins;
uniform vec3 means_maxs;

uniform vec3 scales_mins;
uniform vec3 scales_maxs;

vec4 unpackU32(uint v) {
    return vec4(
        float((v >> 24u) & 0xFFu) / 255.0,
        float((v >> 16u) & 0xFFu) / 255.0,
        float((v >> 8u) & 0xFFu) / 255.0,
        float(v & 0xFFu) / 255.0
    );
}

uvec4 packedSample;

// read the model-space center of the gaussian
vec3 readCenter(SplatSource source) {

    // read the packed texture sample
    packedSample = texelFetch(packedTexture, source.uv, 0);

    vec3 l = unpackU32(packedSample.x).xyz;
    vec3 u = unpackU32(packedSample.y).xyz;
    vec3 n = (l * 255.0 + u * 255.0 * 256.0) / 65535.0;
    vec3 v = mix(means_mins, means_maxs, n);

    return sign(v) * (exp(abs(v)) - 1.0);
}

const float norm = 2.0 / sqrt(2.0);

// sample covariance vectors
void readCovariance(in SplatSource source, out vec3 covA, out vec3 covB) {
    vec4 qdata = unpackU32(packedSample.z);
    vec3 sdata = unpackU32(packedSample.w).xyz;

    vec3 abc = (qdata.xyz - 0.5) * norm;
    float d = sqrt(max(0.0, 1.0 - dot(abc, abc)));

    uint mode = uint(qdata.w * 255.0 + 0.5) - 252u;

    vec4 quat = (mode == 0u) ? vec4(d, abc) :
                ((mode == 1u) ? vec4(abc.x, d, abc.yz) :
                ((mode == 2u) ? vec4(abc.xy, d, abc.z) : vec4(abc, d)));

    mat3 rot = quatToMat3(quat);
    vec3 scale = exp(mix(scales_mins, scales_maxs, sdata));

    // M = S * R
    mat3 M = transpose(mat3(
        scale.x * rot[0],
        scale.y * rot[1],
        scale.z * rot[2]
    ));

    covA = vec3(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
    covB = vec3(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}
`,QC=`
uniform highp sampler2D sh_centroids;

uniform float shN_mins;
uniform float shN_maxs;

// To support each SH degree, readSHData is overloaded based on the SH vector depth 

void readSHData(in SplatSource source, out vec3 sh[SH_COEFFS], out float scale) {
    // extract spherical harmonics palette index
    ivec2 t = ivec2(packedSample.x & 255u, packedSample.y & 255u);
    int n = t.x + t.y * 256;
    int u = (n % 64) * SH_COEFFS;
    int v = n / 64;

    // calculate offset into the centroids texture and read consecutive texels
    for (int i = 0; i < SH_COEFFS; i++) {
        sh[i] = mix(vec3(shN_mins), vec3(shN_maxs), texelFetch(sh_centroids, ivec2(u + i, v), 0).xyz);
    }

    scale = 1.0;
}
`,JC=`
uniform vec2 viewport;                  // viewport dimensions
uniform vec4 camera_params;             // 1 / far, far, near, isOrtho
uniform float uSplatScale;
uniform float renderSpace;
uniform float endSpace;
uniform int uShapeN;

// calculate the clip-space offset from the center for this gaussian
bool initCorner(SplatSource source, SplatCenter center, out SplatCorner corner, int pointCloudModeEnabled) {
    // get covariance
    vec3 covA, covB;
    readCovariance(source, covA, covB);

    mat3 Vrk = mat3(
        covA.x, covA.y, covA.z,
        covA.y, covB.x, covB.y,
        covA.z, covB.y, covB.z
    );

    float focal = viewport.x * center.projMat00;

    vec3 v = camera_params.w == 1.0 ? vec3(0.0, 0.0, 1.0) : center.view.xyz;
    float J1 = focal / v.z;
    vec2 J2 = -J1 / v.z * v.xy;
    mat3 J = mat3(
        J1, 0.0, J2.x,
        0.0, J1, J2.y,
        0.0, 0.0, 0.0
    );

    mat3 W = transpose(mat3(center.modelView));
    mat3 T = W * J;
    mat3 cov = transpose(T) * Vrk * T;

    #if GSPLAT_AA
        // calculate AA factor
        float detOrig = cov[0][0] * cov[1][1] - cov[0][1] * cov[0][1];
        float detBlur = (cov[0][0] + 0.3) * (cov[1][1] + 0.3) - cov[0][1] * cov[0][1];
        corner.aaFactor = sqrt(max(detOrig / detBlur, 0.0));
    #endif

    float diagonal1 = cov[0][0] + 0.3;
    float offDiagonal = cov[0][1];
    float diagonal2 = cov[1][1] + 0.3;

    float mid = 0.5 * (diagonal1 + diagonal2);
    float radius = length(vec2((diagonal1 - diagonal2) / 2.0, offDiagonal));
    float lambda1 = mid + radius;
    float lambda2 = max(mid - radius, 0.1);
    if (pointCloudModeEnabled == 1) {
    lambda1 = lambda2 = 2.0;
    }

    // Use the smaller viewport dimension to limit the kernel size relative to the screen resolution.
    float vmin = min(1024.0, min(viewport.x, viewport.y));

    float l1 = 2.0 * min(sqrt(2.0 * lambda1), vmin);
    float l2 = 2.0 * min(sqrt(2.0 * lambda2), vmin);

    // early-out gaussians smaller than 2 pixels
    if (l1 < 2.0 && l2 < 2.0) {
        return false;
    }

    vec2 c = center.proj.ww / viewport;

    // cull against frustum x/y axes
    if (any(greaterThan(abs(center.proj.xy) - vec2(max(l1, l2)) * c, center.proj.ww))) {
        return false;
    }

    vec2 diagonalVector = normalize(vec2(offDiagonal, lambda1 - diagonal1));

    float scale = 0.0;
    bool inRenderSpace = (center.view.x >= -renderSpace && center.view.x <= renderSpace) && (center.view.y >= -renderSpace && center.view.y <= renderSpace);
    bool openRenderAnim = renderSpace < endSpace;
    bool inRender = renderSpace >= endSpace || inRenderSpace || pointCloudModeEnabled == 1;
    if(!openRenderAnim && uSplatScale > 0.0 && uSplatScale <= 5.0){
        scale = uSplatScale;
    } else if (inRender){
        scale = 1.0;
    } else if (openRenderAnim) {
       scale = inRenderSpace ? uSplatScale : 0.1;
    }
    vec2 v1 = scale * l1 * diagonalVector;
    vec2 v2 = scale * l2 * vec2(diagonalVector.y, -diagonalVector.x);

    corner.offset = (source.cornerUV.x * v1 + source.cornerUV.y * v2) * c;
    // corner.uv = source.cornerUV;
    
    if (uShapeN < 3) {
        corner.uv = source.cornerUV;
    }

    corner.cSize = (v1 + v2) * c;
    corner.cUV = source.cornerUV;
    
    return true;
}
`,eP=`

uniform highp sampler2D transformA;
uniform highp sampler2D transformB;
uniform highp sampler2D transformR;

#ifdef IS_4D
uniform highp sampler2D transformMotion;
uniform highp sampler2D transformLifecycle;
#endif

// work values
// uint tAw;
vec2 sampledCov4D;
float muT;

// tool for compute Marginal time
float computeMarginalT(float time, float muT, float sigmaT) {
    if (muT <= -10.0) {
        return 1.0;
    }
    float result = exp(-0.5 * (pow((time - muT), 2.0) / pow(sigmaT, 2.0)));
    return result;
}

// read the model-space center of the gaussian
vec3 readCenter(SplatSource source) {
    // read transform data
    return texelFetch(transformA, source.uv, 0).xyz;
}

mat3 quatToMat3v2(vec4 R) {
    float x = R.w;
    float y = R.x;
    float z = R.y;
    float w = R.z;
    return mat3(
        1.0 - 2.0 * (z * z + w * w),
              2.0 * (y * z + x * w),
              2.0 * (y * w - x * z),
              2.0 * (y * z - x * w),
        1.0 - 2.0 * (y * y + w * w),
              2.0 * (z * w + x * y),
              2.0 * (y * w + x * z),
              2.0 * (z * w - x * y),
        1.0 - 2.0 * (y * y + z * z)
    );
}

vec4 unpackRotation(vec3 packed) {
    return vec4(packed.xyz, sqrt(max(0.0, 1.0 - dot(packed, packed))));
}

// sample covariance vectors
void readCovariance(in SplatSource source, out vec3 covA, out vec3 covB) {
    vec4 tB = texelFetch(transformB, source.uv, 0);

    vec3 tR = texelFetch(transformR, source.uv, 0).xyz;
    mat3 rot = quatToMat3v2(unpackRotation(tR));
    vec3 scale = tB.xyz;

    // M = S * R
    mat3 M = transpose(mat3(
        scale.x * rot[0],
        scale.y * rot[1],
        scale.z * rot[2]
    ));

    covA = vec3(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
    covB = vec3(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}

// sample 4D covariance vectors
void readFTGSCovariance(in SplatSource source, out vec3 covA, out vec3 covB,out vec4 covariance4D) {
    vec4 tB = texelFetch(transformB, source.uv, 0);

    vec3 tR = texelFetch(transformR, source.uv, 0).xyz;
    mat3 rot = quatToMat3v2(unpackRotation(tR));
    vec3 scale = tB.xyz;

    // M = S * R
    mat3 M = transpose(mat3(
        scale.x * rot[0],
        scale.y * rot[1],
        scale.z * rot[2]
    ));

    covA = vec3(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
    covB = vec3(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));

}


float getMarginalT(in SplatSource source, in float time) {
    float marginal = 1.0;
    #ifdef IS_4D
        // filter out splats that have too little influence to now in the time dimension.
        vec2 tData = texelFetch(transformLifecycle, source.uv, 0).xy;
        muT = tData.x;
        float tScale = tData.y;
        marginal = computeMarginalT(time, muT, tScale);
    #endif
    return marginal;
}

vec3 readCenter4D(SplatSource source, float time) {
    vec3 splatCenter = texelFetch(transformA, source.uv, 0).xyz;
    #ifdef IS_4D
    if(muT > -5.0){
        vec3 movingSpeed = texelFetch(transformMotion, source.uv, 0).xyz;
        vec3 splatOffset = movingSpeed * (time - muT);
        splatCenter += splatOffset;
    }
    #endif

    return splatCenter;
}
`,tP=`

#include "tonemappingPS"
#include "decodePS"
#include "gammaPS"

// prepare the output color for the given gamma-space color
vec3 prepareOutputFromGamma(vec3 gammaColor) {
    #if TONEMAP == NONE
        #if GAMMA == NONE
            // convert to linear space
            return decodeGamma(gammaColor);
        #else
            // output gamma space color directly
            return gammaColor;
        #endif
    #else
        // apply tonemapping in linear space and output to linear or
        // gamma (which is handled by gammaCorrectOutput)
        return gammaCorrectOutput(toneMap(decodeGamma(gammaColor)));
    #endif
}
`,sP=`
uniform int mode;               // 0: centers, 1: rings
uniform float ringSize;
uniform int uShapeN;

#ifndef DITHER_NONE
    #include "bayerPS"
    #include "opacityDitherPS"
    varying float id;
#endif

#ifdef PICK_PASS
    #include "pickPS"
#endif

#if defined(SHADOW_PASS) || defined(PICK_PASS) || defined(PREPASS_PASS)
    uniform float alphaClip;
#endif

#ifdef PREPASS_PASS
    varying float vLinearDepth;
    #include "floatAsUintPS"
#endif

// Fast approximate e^x based on https://nic.schraudolph.org/pubs/Schraudolph99.pdf
const float  EXP_A      = 12102203.0;   // ≈ 2^23 / ln(2)
const int    EXP_BC_RMS = 1064866808;   // (127 << 23) - 60801 * 8
float fastExp(float x) {
    int i = int(EXP_A * x) + EXP_BC_RMS;
    return intBitsToFloat(i);
}

varying mediump vec2 gaussianUV;
varying mediump vec4 gaussianColor;
varying mediump vec2 gaussianSize;
varying mediump vec2 gaussianCUV;
varying mediump float saveMarginal;

// 判断点 p 是否在正 N 边形内
// p: 点坐标 (UV 空间或局部空间)
// N: 边数
// r: 半径（归一化到1时就是单位圆）
// center: 中心偏移
bool insideRegularPolygon(vec2 p, int N, float r, vec2 center) {
    // 平移坐标，确保中心对齐
    vec2 d = p - center;
    float theta = atan(d.y, d.x);        // 当前角度
    float len = length(d);              // 当前半径
    float anglePerSide = 2.0 * 3.14159265 / float(N);

    // 映射到 0 ~ anglePerSide 区间
    float localAngle = mod(theta, anglePerSide);

    // 到边界的最大半径（极坐标下的正 N 边形公式）
    float maxR = r * cos(anglePerSide / 2.0) / cos(localAngle - anglePerSide / 2.0);

    return len <= maxR;
}

// 距离场方式的正N边形 soft mask
float polygonSoftMask(vec2 p, int N, float radius, float edgeSoftness) {
    float angle = atan(p.y, p.x);
    float sector = 6.2831853 / float(N);  // 每个扇区角度
    // 将角度归一化到 [-sector/2, sector/2]
    float halfSector = sector * 0.5;
    float localAngle = mod(angle + halfSector, sector) - halfSector;

    // 多边形边界在该方向的最大半径
    float boundary = radius * cos(halfSector) / cos(localAngle);

    // 距离 = 点到边界的差值
    float dist = boundary - length(p);

    // 用 smoothstep 实现软边缘 (edgeSoftness 控制边缘模糊宽度)
    float alpha = smoothstep(0.0, edgeSoftness, dist);

    return alpha; // 0~1
}

void main(void) {
    mediump float A = dot(gaussianUV, gaussianUV);
    if (A > 1.0) {
        discard;
    }

    // evaluate alpha
    mediump float alpha = fastExp(-A * 4.0) * gaussianColor.a;
    // TODO uShapeN alpha
    // float dx = abs(gaussianCUV.x) / gaussianSize.x;
    // float dy = abs(gaussianCUV.y) / gaussianSize.y;
    // float B = max(dx, dy);                  // 距离度量：矩形边界
    // mediump float alpha = exp(-pow(B, 2.0) * 4.0) * gaussianColor.a;

    bool openRingMode = ringSize > 0.0 && mode == 1; // && uControlMode == 1; 
    if (openRingMode && saveMarginal >= 0.05) {
        if (A < 1.0 - ringSize) {
            alpha = max(0.05, alpha);
        } else {
            alpha = 0.6;
        }
    }
    
    bool openShapeMode = uShapeN > 2; // && uControlMode == 1;
    if (openShapeMode) {
        vec2 uv = gaussianCUV * 2.0;
        float radius = 1.0; // 1.0
        float edgeSoftness = 0.05; // 0.05
        uv *= 1.0;//0.9;
        vec2 center = vec2(0.0, 0.0);   // 如果中心不在原点，传入偏移
        // alpha = polygonSoftMask(uv, uShapeN, radius, edgeSoftness); // 透明
        if (!insideRegularPolygon(uv, uShapeN, radius, center)) { //裁剪
            discard;
        }
    }
    
    #if defined(SHADOW_PASS) || defined(PICK_PASS) || defined(PREPASS_PASS)
        if (alpha < alphaClip) {
            discard;
        }
    #endif

    #ifdef PICK_PASS

        gl_FragColor = getPickOutput();

    #elif SHADOW_PASS

        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);

    #elif PREPASS_PASS

        gl_FragColor = float2vec4(vLinearDepth);

    #else
        if (alpha < 1.0 / 255.0) {
            discard;
        }

        #ifndef DITHER_NONE
            opacityDither(alpha, id * 0.013);
        #endif

        gl_FragColor = vec4(gaussianColor.xyz, alpha);
    #endif
}
`,iP=`

#if SH_BANDS > 0

// unpack signed 11 10 11 bits
vec3 unpack111011s(uint bits) {
    return vec3((uvec3(bits) >> uvec3(21u, 11u, 0u)) & uvec3(0x7ffu, 0x3ffu, 0x7ffu)) / vec3(2047.0, 1023.0, 2047.0) * 2.0 - 1.0;
}

// fetch quantized spherical harmonic coefficients
void fetchScale(in uvec4 t, out float scale, out vec3 a, out vec3 b, out vec3 c) {
    scale = uintBitsToFloat(t.x);
    a = unpack111011s(t.y);
    b = unpack111011s(t.z);
    c = unpack111011s(t.w);
}

// fetch quantized spherical harmonic coefficients
void fetch(in uvec4 t, out vec3 a, out vec3 b, out vec3 c, out vec3 d) {
    a = unpack111011s(t.x);
    b = unpack111011s(t.y);
    c = unpack111011s(t.z);
    d = unpack111011s(t.w);
}

void fetch(in uint t, out vec3 a) {
    a = unpack111011s(t);
}

#if SH_BANDS == 1
    uniform highp usampler2D splatSH_1to3;
    void readSHData(in SplatSource source, out vec3 sh[3], out float scale) {
        fetchScale(texelFetch(splatSH_1to3, source.uv, 0), scale, sh[0], sh[1], sh[2]);
    }
#elif SH_BANDS == 2
    uniform highp usampler2D splatSH_1to3;
    uniform highp usampler2D splatSH_4to7;
    uniform highp usampler2D splatSH_8to11;
    void readSHData(in SplatSource source, out vec3 sh[8], out float scale) {
        fetchScale(texelFetch(splatSH_1to3, source.uv, 0), scale, sh[0], sh[1], sh[2]);
        fetch(texelFetch(splatSH_4to7, source.uv, 0), sh[3], sh[4], sh[5], sh[6]);
        fetch(texelFetch(splatSH_8to11, source.uv, 0).x, sh[7]);
    }
#else
    uniform highp usampler2D splatSH_1to3;
    uniform highp usampler2D splatSH_4to7;
    uniform highp usampler2D splatSH_8to11;
    uniform highp usampler2D splatSH_12to15;
    void readSHData(in SplatSource source, out vec3 sh[15], out float scale) {
        fetchScale(texelFetch(splatSH_1to3, source.uv, 0), scale, sh[0], sh[1], sh[2]);
        fetch(texelFetch(splatSH_4to7, source.uv, 0), sh[3], sh[4], sh[5], sh[6]);
        fetch(texelFetch(splatSH_8to11, source.uv, 0), sh[7], sh[8], sh[9], sh[10]);
        fetch(texelFetch(splatSH_12to15, source.uv, 0), sh[11], sh[12], sh[13], sh[14]);
    }
#endif

#endif
`,rP=`
attribute vec3 vertex_position;         // xy: cornerUV, z: render order offset
attribute uint vertex_id_attrib;        // render order base

uniform uint numSplats;                 // total number of splats
uniform highp usampler2D splatOrder;    // per-splat index to source gaussian

// initialize the splat source structure
bool initSource(out SplatSource source) {
    uint w = uint(textureSize(splatOrder, 0).x);

    // calculate splat order
    source.order = vertex_id_attrib + uint(vertex_position.z);

    // return if out of range (since the last block of splats may be partially full)
    if (source.order >= numSplats) {
        return false;
    }

    ivec2 orderUV = ivec2(source.order % w, source.order / w);

    // read splat id
    source.id = texelFetch(splatOrder, orderUV, 0).r;

    // map id to uv
    source.uv = ivec2(source.id % w, source.id / w);

    // get the corner
    source.cornerUV = vertex_position.xy;

    return true;
}
`,aP=`
#include "gsplatCommonVS"

uniform int pointCloudModeEnabled;
uniform float uTime;
uniform float prerenderCTime;
uniform float uSaturation; // 0.0-2.0，1.0 为原始饱和度
uniform float uHueOffset;  // 色相偏移，单位：度（360度环绕）
uniform vec3 clrOffset;
uniform vec4 clrScale;
uniform float uOpacity;
uniform int uInvertOpacity;

varying mediump vec2 gaussianUV;
varying mediump vec4 gaussianColor;
varying mediump vec2 gaussianSize;
varying mediump vec2 gaussianCUV;
varying mediump float saveMarginal;

// ===== 高精度 HSV/RGB 转换 =====
highp vec3 rgb2hsv(highp vec3 c) {
    highp float cMax = max(max(c.r, c.g), c.b);
    highp float cMin = min(min(c.r, c.g), c.b);
    highp float delta = cMax - cMin + 1e-10; // 避免除0

    highp float h = 0.0;
    if (delta > 1e-6) {
        if (cMax == c.r) {
            h = mod((c.g - c.b) / delta, 6.0);
        } else if (cMax == c.g) {
            h = (c.b - c.r) / delta + 2.0;
        } else {
            h = (c.r - c.g) / delta + 4.0;
        }
        h /= 6.0; // 转到 [0,1]
        if (h < 0.0) h += 1.0;
    }

    highp float s = (cMax < 1e-6) ? 0.0 : delta / cMax;
    highp float v = cMax;
    return vec3(h, s, v);
}

highp vec3 hsv2rgb(highp vec3 c) {
    highp float h = c.x * 6.0; // 0-6
    highp float s = c.y;
    highp float v = c.z;

    highp int i = int(floor(h));
    highp float f = h - float(i);
    highp float p = v * (1.0 - s);
    highp float q = v * (1.0 - s * f);
    highp float t = v * (1.0 - s * (1.0 - f));

    if (i == 0) return vec3(v, t, p);
    else if (i == 1) return vec3(q, v, p);
    else if (i == 2) return vec3(p, v, t);
    else if (i == 3) return vec3(p, q, v);
    else if (i == 4) return vec3(t, p, v);
    else return vec3(v, p, q); // i==5
}

#ifndef DITHER_NONE
    varying float id;
#endif

mediump vec4 discardVec = vec4(0.0, 0.0, 2.0, 1.0);

#ifdef PREPASS_PASS
    varying float vLinearDepth;
#endif

void main(void) {
    // read gaussian details
    SplatSource source;
    if (!initSource(source)) {
        gl_Position = discardVec;
        return;
    }

    saveMarginal = getMarginalT(source, uTime);
    
    float marginal = uOpenAnim == 1 ? 1.0 : saveMarginal;
    if (marginal < 0.05) {
        gl_Position = discardVec;
        return;
    }

    vec3 modelCenter;
    bool isCenter4D = saveMarginal >= 0.05;
    if (isCenter4D) {
        modelCenter = readCenter4D(source, uTime);
    } else {
        modelCenter = readCenter(source);
    }

    SplatCenter center;
    if (!initCenter(modelCenter, center)) {
        gl_Position = discardVec;
        return;
    }
    
    int showCloud = pointCloudModeEnabled;
    if (prerenderCTime == 0.0) {
        showCloud = pointCloudModeEnabled;
    } else if (prerenderCTime >= 1.0 && prerenderCTime < 2.0) {
        showCloud = 1;
    } else if (prerenderCTime >= 2.0) {
        showCloud = pointCloudModeEnabled;
    }

    // project center to screen space
    SplatCorner corner;
    if (!initCorner(source, center, corner, showCloud)) {
        gl_Position = discardVec;
        return;
    }

    // read color
    vec4 clr = readColor(source, uTime, !isCenter4D, pointCloudModeEnabled);

    #if GSPLAT_AA
        // apply AA compensation
        clr.a *= corner.aaFactor;
    #endif

    if(marginal > 0.0) {
        clr.w *= marginal;
    }

    // 开关控制
    if (uControlColorMode == 1) {
        // apply tint/brightness
        clr = clr * clrScale + vec4(clrOffset, 0.0);

        if (uInvertOpacity == 1) {
            clr.a = 1.0 - clr.a;
        }
    
        // don't allow out-of-range alpha
        clr = clamp(clr, 0.0, 1.0);
    }

    // evaluate spherical harmonics
    #if SH_BANDS > 0
        // calculate the model-space view direction
        vec3 dir = normalize(center.view * mat3(center.modelView));

        // read sh coefficients
        vec3 sh[SH_COEFFS];
        float scale;
        readSHData(source, sh, scale);

        // evaluate
        clr.xyz += evalSH(sh, dir) * scale;
    #endif

    clipCorner(corner, clr.w);

    // pointCloudMode
    // if (pointCloudModeEnabled == 1) {
    //     clr.a = 1.0;
    // }
    highp vec3 color = max(clr.xyz, 0.0);
    
    // 开关控制
    if (uControlColorMode == 1) {
        // 转 HSV
        highp vec3 hsv = rgb2hsv(color);
        
        // 调整饱和度
        hsv.y *= uSaturation;
        
        // 调整色相
        hsv.x = fract(hsv.x + uHueOffset / 360.0);
        
        // 转回 RGB
        color = hsv2rgb(hsv);  
    }

    // write output
    gl_Position = center.proj + vec4(corner.offset, 0, 0);
    gaussianUV = corner.uv;
    gaussianCUV = corner.cUV;
    gaussianSize = corner.cSize;
    gaussianColor = vec4(prepareOutputFromGamma(color), clr.w);
    gaussianColor = clamp(gaussianColor, 0.0, 1.0);

    #ifndef DITHER_NONE
        id = float(source.id);
    #endif

    #ifdef PREPASS_PASS
        vLinearDepth = -center.view.z;
    #endif
}
`,nP=`
    attribute vec2 aPosition;
    varying vec2 uv0;
    void main(void)
    {
        gl_Position = vec4(aPosition, 0.0, 1.0);
        uv0 = getImageEffectUV((aPosition.xy + 1.0) * 0.5);
    }
`,oP=`
        #include "gammaPS"
        varying vec4 color;
        void main(void) {
            gl_FragColor = vec4(gammaCorrectOutput(decodeGamma(color.rgb)), color.a);
        }
`,lP=`
    attribute vec4 vertex_position;
    attribute vec4 vertex_color;
    uniform mat4 matrix_model;
    uniform mat4 matrix_viewProjection;
    varying vec4 color;
    void main(void) {
        color = vertex_color;
        gl_Position = matrix_viewProjection * matrix_model * vertex_position;
    }
`,hP=`
uniform float material_iridescenceRefractionIndex;

float iridescence_iorToFresnel(float transmittedIor, float incidentIor) {
    return pow((transmittedIor - incidentIor) / (transmittedIor + incidentIor), 2.0);
}

vec3 iridescence_iorToFresnel(vec3 transmittedIor, float incidentIor) {
    return pow((transmittedIor - vec3(incidentIor)) / (transmittedIor + vec3(incidentIor)), vec3(2.0));
}

vec3 iridescence_fresnelToIor(vec3 f0) {
    vec3 sqrtF0 = sqrt(f0);
    return (vec3(1.0) + sqrtF0) / (vec3(1.0) - sqrtF0);
}

vec3 iridescence_sensitivity(float opd, vec3 shift) {
    float PI = 3.141592653589793;
    float phase = 2.0 * PI * opd * 1.0e-9;
    const vec3 val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);
    const vec3 pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);
    const vec3 var = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);

    vec3 xyz = val * sqrt(2.0 * PI * var) * cos(pos * phase + shift) * exp(-pow(phase, 2.0) * var);
    xyz.x += 9.7470e-14 * sqrt(2.0 * PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(-4.5282e+09 * pow(phase, 2.0));
    xyz /= vec3(1.0685e-07);

    const mat3 XYZ_TO_REC709 = mat3(
        3.2404542, -0.9692660,  0.0556434,
       -1.5371385,  1.8760108, -0.2040259,
       -0.4985314,  0.0415560,  1.0572252
    );

    return XYZ_TO_REC709 * xyz;
}

float iridescence_fresnel(float cosTheta, float f0) {
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x2 = x * x;
    float x5 = x * x2 * x2;
    return f0 + (1.0 - f0) * x5;
} 

vec3 iridescence_fresnel(float cosTheta, vec3 f0) {
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x2 = x * x;
    float x5 = x * x2 * x2; 
    return f0 + (vec3(1.0) - f0) * x5;
}

vec3 calcIridescence(float outsideIor, float cosTheta, vec3 base_f0, float iridescenceThickness) {
    float PI = 3.141592653589793;

    float iridescenceIor = mix(outsideIor, material_iridescenceRefractionIndex, smoothstep(0.0, 0.03, iridescenceThickness));
    float sinTheta2Sq = pow(outsideIor / iridescenceIor, 2.0) * (1.0 - pow(cosTheta, 2.0));
    float cosTheta2Sq = 1.0 - sinTheta2Sq;

    if (cosTheta2Sq < 0.0) {
        return vec3(1.0);
    }

    float cosTheta2 = sqrt(cosTheta2Sq);

    float r0 = iridescence_iorToFresnel(iridescenceIor, outsideIor);
    float r12 = iridescence_fresnel(cosTheta, r0);
    float r21 = r12;
    float t121 = 1.0 - r12;

    float phi12 = iridescenceIor < outsideIor ? PI : 0.0;
    float phi21 = PI - phi12;

    vec3 baseIor = iridescence_fresnelToIor(base_f0 + vec3(0.0001));
    vec3 r1 = iridescence_iorToFresnel(baseIor, iridescenceIor);
    vec3 r23 = iridescence_fresnel(cosTheta2, r1);

    vec3 phi23 = vec3(0.0);
    if (baseIor[0] < iridescenceIor) phi23[0] = PI;
    if (baseIor[1] < iridescenceIor) phi23[1] = PI;
    if (baseIor[2] < iridescenceIor) phi23[2] = PI;
    float opd = 2.0 * iridescenceIor * iridescenceThickness * cosTheta2;
    vec3 phi = vec3(phi21) + phi23; 

    vec3 r123Sq = clamp(r12 * r23, 1e-5, 0.9999);
    vec3 r123 = sqrt(r123Sq);
    vec3 rs = pow(t121, 2.0) * r23 / (1.0 - r123Sq);

    vec3 c0 = r12 + rs;
    vec3 i = c0;

    vec3 cm = rs - t121;
    for (int m = 1; m <= 2; m++) {
        cm *= r123;
        vec3 sm = 2.0 * iridescence_sensitivity(float(m) * opd, float(m) * phi);
        i += cm * sm;
    }
    return max(i, vec3(0.0));
}

vec3 getIridescence(float cosTheta, vec3 specularity, float iridescenceThickness) {
    return calcIridescence(1.0, cosTheta, specularity, iridescenceThickness);
}
`,cP=`
#ifdef STD_IRIDESCENCE_CONSTANT
uniform float material_iridescence;
#endif

void getIridescence() {
    float iridescence = 1.0;

    #ifdef STD_IRIDESCENCE_CONSTANT
    iridescence *= material_iridescence;
    #endif

    #ifdef STD_IRIDESCENCE_TEXTURE
    iridescence *= texture2DBias({STD_IRIDESCENCE_TEXTURE_NAME}, {STD_IRIDESCENCE_TEXTURE_UV}, textureBias).{STD_IRIDESCENCE_TEXTURE_CHANNEL};
    #endif

    dIridescence = iridescence; 
}
`,dP=`
uniform float material_iridescenceThicknessMax;

#ifdef STD_IRIDESCENCETHICKNESS_TEXTURE
uniform float material_iridescenceThicknessMin;
#endif

void getIridescenceThickness() {

    #ifdef STD_IRIDESCENCETHICKNESS_TEXTURE
        float blend = texture2DBias({STD_IRIDESCENCETHICKNESS_TEXTURE_NAME}, {STD_IRIDESCENCETHICKNESS_TEXTURE_UV}, textureBias).{STD_IRIDESCENCETHICKNESS_TEXTURE_CHANNEL};
        float iridescenceThickness = mix(material_iridescenceThicknessMin, material_iridescenceThicknessMax, blend);
    #else
        float iridescenceThickness = material_iridescenceThicknessMax;
    #endif

    dIridescenceThickness = iridescenceThickness; 
}
`,fP=`
#ifdef STD_IOR_CONSTANT
uniform float material_refractionIndex;
#endif

void getIor() {
#ifdef STD_IOR_CONSTANT
    dIor = material_refractionIndex;
#else
    dIor = 1.0 / 1.5;
#endif
}
`,uP=`
#if defined(LIGHT{i})

    uniform vec3 light{i}_color;

    #if LIGHT{i}TYPE == DIRECTIONAL
        uniform vec3 light{i}_direction;
    #else

        #define LIT_CODE_LIGHTS_POINT // include functionality for point lights

        uniform vec3 light{i}_position;
        uniform float light{i}_radius;

        #if LIGHT{i}TYPE == SPOT

            #define LIT_CODE_LIGHTS_SPOT // include functionality for spot lights

            uniform vec3 light{i}_direction;
            uniform float light{i}_innerConeAngle;
            uniform float light{i}_outerConeAngle;
        #endif
    #endif

    // area lights
    #if LIGHT{i}SHAPE != PUNCTUAL

        #define LIT_CODE_FALLOFF_SQUARED // include functionality for inverse squared falloff

        #if LIGHT{i}TYPE == DIRECTIONAL
            uniform vec3 light{i}_position;
        #endif
        uniform vec3 light{i}_halfWidth;
        uniform vec3 light{i}_halfHeight;
    #else

        #if LIGHT{i}FALLOFF == LINEAR
            #define LIT_CODE_FALLOFF_LINEAR // include functionality for linear falloff
        #endif

        #if LIGHT{i}FALLOFF == INVERSESQUARED
            #define LIT_CODE_FALLOFF_SQUARED // include functionality for inverse squared falloff
        #endif

    #endif

    // shadow casting
    #if defined(LIGHT{i}CASTSHADOW)

        uniform mat4 light{i}_shadowMatrix;
        uniform float light{i}_shadowIntensity;
        uniform vec4 light{i}_shadowParams; // width, height, bias, radius

        #if LIGHT{i}SHADOWTYPE == PCSS_32F
            uniform float light{i}_shadowSearchArea;
            uniform vec4 light{i}_cameraParams;
            #if LIGHT{i}TYPE == DIRECTIONAL
                uniform vec4 light{i}_softShadowParams;
            #endif
        #endif

        // directional (cascaded) shadows
        #if LIGHT{i}TYPE == DIRECTIONAL
            uniform mat4 light{i}_shadowMatrixPalette[4];
            uniform vec4 light{i}_shadowCascadeDistances;
            uniform int light{i}_shadowCascadeCount;
            uniform float light{i}_shadowCascadeBlend;
        #endif

        #if LIGHT{i}TYPE == OMNI
            #if defined(LIGHT{i}SHADOW_PCF)
                uniform samplerCubeShadow light{i}_shadowMap;
            #else
                uniform samplerCube light{i}_shadowMap;
            #endif
        #else
            #if defined(LIGHT{i}SHADOW_PCF)
                uniform sampler2DShadow light{i}_shadowMap;
            #else
                uniform sampler2D light{i}_shadowMap;
            #endif
        #endif

    #endif

    // cookie
    #if defined(LIGHT{i}COOKIE)

        #define LIT_CODE_COOKIE // include functionality for cookies

        #if LIGHT{i}TYPE == OMNI
            uniform samplerCube light{i}_cookie;
            uniform float light{i}_cookieIntensity;
            #if !defined(LIGHT{i}CASTSHADOW)
                uniform mat4 light{i}_shadowMatrix;
            #endif
        #endif

        #if LIGHT{i}TYPE == SPOT
            uniform sampler2D light{i}_cookie;
            uniform float light{i}_cookieIntensity;
            #if !defined(LIGHT{i}CASTSHADOW)
                uniform mat4 light{i}_shadowMatrix;
            #endif
            #if defined(LIGHT{i}COOKIE_TRANSFORM)
                uniform vec4 light{i}_cookieMatrix;
                uniform vec2 light{i}_cookieOffset;
            #endif
        #endif
    #endif
#endif
`,pP=`
float getLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDirNorm) {
    return max(dot(worldNormal, -lightDirNorm), 0.0);
}
`,mP=`
vec3 evalOmniLight(vec3 lightPosW) {
    return vPositionW - lightPosW;
}
`,_P=`
#if defined(LIGHT{i})
    evaluateLight{i}(
        #if defined(LIT_IRIDESCENCE)
            iridescenceFresnel
        #endif
    );
#endif
`,gP=`
#if defined(LIGHT{i})

void evaluateLight{i}(
    #if defined(LIT_IRIDESCENCE)
        vec3 iridescenceFresnel
    #endif
) {

    // light color
    vec3 lightColor = light{i}_color;

    #if LIGHT{i}TYPE == DIRECTIONAL && !defined(LIT_SHADOW_CATCHER)
        // early return if the light color is black (used by shadow catcher - this way this light is very cheap)
        if (all(equal(lightColor, vec3(0.0)))) {
            return;
        }
    #endif

    #if LIGHT{i}TYPE == DIRECTIONAL // directional light

        dLightDirNormW = light{i}_direction;
        dAtten = 1.0;

    #else // omni or spot light
        
        vec3 lightDirW = evalOmniLight(light{i}_position);
        dLightDirNormW = normalize(lightDirW);

        // cookie attenuation
        #if defined(LIGHT{i}COOKIE)

            #if LIGHT{i}TYPE == SPOT
                #ifdef LIGHT{i}COOKIE_FALLOFF
                    #ifdef LIGHT{i}COOKIE_TRANSFORM
                        vec3 cookieAttenuation = getCookie2DXform(light{i}_cookie, light{i}_shadowMatrix, light{i}_cookieIntensity, light{i}_cookieMatrix, light{i}_cookieOffset).{LIGHT{i}COOKIE_CHANNEL};
                    #else
                        vec3 cookieAttenuation = getCookie2D(light{i}_cookie, light{i}_shadowMatrix, light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
                    #endif
                #else
                    #ifdef LIGHT{i}COOKIE_TRANSFORM
                        vec3 cookieAttenuation = getCookie2DClipXform(light{i}_cookie, light{i}_shadowMatrix, light{i}_cookieIntensity, light{i}_cookieMatrix, light{i}_cookieOffset).{LIGHT{i}COOKIE_CHANNEL};
                    #else
                        vec3 cookieAttenuation = getCookie2DClip(light{i}_cookie, light{i}_shadowMatrix, light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
                    #endif
                #endif
            #endif

            #if LIGHT{i}TYPE == OMNI
                vec3 cookieAttenuation = getCookieCube(light{i}_cookie, light{i}_shadowMatrix, light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
            #endif

            // multiply light color by the cookie attenuation
            lightColor *= cookieAttenuation;

        #endif

        // distance falloff
        #if LIGHT{i}SHAPE == PUNCTUAL
            #if LIGHT{i}FALLOFF == LINEAR
                dAtten = getFalloffLinear(light{i}_radius, lightDirW);
            #else
                dAtten = getFalloffInvSquared(light{i}_radius, lightDirW);
            #endif
        #else
            // non punctual lights only gets the range window here
            dAtten = getFalloffWindow(light{i}_radius, lightDirW);
        #endif

        // spot light angle falloff
        #if LIGHT{i}TYPE == SPOT
            #if !defined(LIGHT{i}COOKIE) || defined(LIGHT{i}COOKIE_FALLOFF)
                dAtten *= getSpotEffect(light{i}_direction, light{i}_innerConeAngle, light{i}_outerConeAngle, dLightDirNormW);
            #endif
        #endif
    #endif

    if (dAtten < 0.00001) {
        return;
    }

    // evaluate area light values
    #if LIGHT{i}SHAPE != PUNCTUAL
        #if LIGHT{i}SHAPE == RECT
            calcRectLightValues(light{i}_position, light{i}_halfWidth, light{i}_halfHeight);
        #elif LIGHT{i}SHAPE == DISK
            calcDiskLightValues(light{i}_position, light{i}_halfWidth, light{i}_halfHeight);
        #elif LIGHT{i}SHAPE == SPHERE
            calcSphereLightValues(light{i}_position, light{i}_halfWidth, light{i}_halfHeight);
        #endif
    #endif

    // diffuse lighting - LTC lights do not mix diffuse lighting into attenuation that affects specular
    #if LIGHT{i}SHAPE != PUNCTUAL

        // attenDiffuse - separate diffuse attenuation for non-punctual light sources

        #if LIGHT{i}TYPE == DIRECTIONAL
            // NB: A better approximation perhaps using wrap lighting could be implemented here
            float attenDiffuse = getLightDiffuse(litArgs_worldNormal, dViewDirW, dLightDirNormW);
        #else
            // 16.0 is a constant that is in getFalloffInvSquared()
            #if LIGHT{i}SHAPE == RECT
                float attenDiffuse = getRectLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
            #elif LIGHT{i}SHAPE == DISK
                float attenDiffuse = getDiskLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
            #elif LIGHT{i}SHAPE == SPHERE
                float attenDiffuse = getSphereLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
            #endif
        #endif
    #else
        // one parameter is unused for punctual lights
        dAtten *= getLightDiffuse(litArgs_worldNormal, vec3(0.0), dLightDirNormW);
    #endif

    // apply the shadow attenuation
    #ifdef LIGHT{i}CASTSHADOW

        #if LIGHT{i}TYPE == DIRECTIONAL
            float shadow = getShadow{i}(vec3(0.0));
        #else
            float shadow = getShadow{i}(lightDirW);
        #endif

        // Apply shadow intensity to the shadow value
        shadow = mix(1.0, shadow, light{i}_shadowIntensity);

        dAtten *= shadow;

        #if defined(LIT_SHADOW_CATCHER) && LIGHT{i}TYPE == DIRECTIONAL
            // accumulate shadows for directional lights
            dShadowCatcher *= shadow;
        #endif            

    #endif

    #if LIGHT{i}SHAPE != PUNCTUAL
        // area light - they do not mix diffuse lighting into specular attenuation
        #ifdef LIT_SPECULAR
            dDiffuseLight += ((attenDiffuse * dAtten) * lightColor) * (1.0 - dLTCSpecFres);
        #else
            dDiffuseLight += (attenDiffuse * dAtten) * lightColor;
        #endif                        
    #else
        // punctual light
        #if defined(AREA_LIGHTS) && defined(LIT_SPECULAR)
            dDiffuseLight += (dAtten * lightColor) * (1.0 - litArgs_specularity);
        #else
            dDiffuseLight += dAtten * lightColor;
        #endif
    #endif

    // specular lighting
    #ifdef LIGHT{i}AFFECT_SPECULARITY

        #if LIGHT{i}SHAPE != PUNCTUAL // area light

            #ifdef LIT_CLEARCOAT
                #if LIGHT{i}SHAPE == RECT
                    ccSpecularLight += ccLTCSpecFres * getRectLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor;
                #elif LIGHT{i}SHAPE == DISK
                    ccSpecularLight += ccLTCSpecFres * getDiskLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor;
                #elif LIGHT{i}SHAPE == SPHERE
                    ccSpecularLight += ccLTCSpecFres * getSphereLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor;
                #endif
            #endif

            #ifdef LIT_SPECULAR
                #if LIGHT{i}SHAPE == RECT
                    dSpecularLight += dLTCSpecFres * getRectLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor;
                #elif LIGHT{i}SHAPE == DISK
                    dSpecularLight += dLTCSpecFres * getDiskLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor;
                #elif LIGHT{i}SHAPE == SPHERE
                    dSpecularLight += dLTCSpecFres * getSphereLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor;
                #endif
            #endif

        #else // punctual light

            // is fresnel needed
            #if LIGHT{i}TYPE == DIRECTIONAL && LIT_FRESNEL_MODEL != NONE
                #define LIGHT{i}FRESNEL
            #endif

            #ifdef LIT_SPECULAR
                vec3 halfDirW = normalize(-dLightDirNormW + dViewDirW);
            #endif

            // if LTC lights are present, specular must be accumulated with specularity (specularity is pre multiplied by punctual light fresnel)
            #ifdef LIT_CLEARCOAT
                vec3 lightspecularCC = getLightSpecular(halfDirW, ccReflDirW, litArgs_clearcoat_worldNormal, dViewDirW, dLightDirNormW, litArgs_clearcoat_gloss, dTBN) * dAtten * lightColor;
                #ifdef LIGHT{i}FRESNEL
                    lightspecularCC *= getFresnelCC(dot(dViewDirW, halfDirW));
                #endif
                ccSpecularLight += lightspecularCC;
            #endif

            #ifdef LIT_SHEEN
                sSpecularLight += getLightSpecularSheen(halfDirW, litArgs_worldNormal, dViewDirW, dLightDirNormW, litArgs_sheen_gloss) * dAtten * lightColor;
            #endif

            #ifdef LIT_SPECULAR

                vec3 lightSpecular = getLightSpecular(halfDirW, dReflDirW, litArgs_worldNormal, dViewDirW, dLightDirNormW, litArgs_gloss, dTBN) * dAtten * lightColor;
                #ifdef LIGHT{i}FRESNEL

                    #if defined(LIT_IRIDESCENCE)
                        lightSpecular *= getFresnel(dot(dViewDirW, halfDirW), litArgs_gloss, litArgs_specularity, iridescenceFresnel, litArgs_iridescence_intensity);
                    #else
                        lightSpecular *= getFresnel(dot(dViewDirW, halfDirW), litArgs_gloss, litArgs_specularity);
                    #endif

                #else
                    lightSpecular *= litArgs_specularity;
                #endif
                
                dSpecularLight += lightSpecular;
            #endif
        #endif
    #endif
}
#endif
`,SP=`

// shadow casting functionality
#ifdef LIGHT{i}CASTSHADOW

    // generate shadow coordinates function, based on per light defines:
    // - _SHADOW_SAMPLE_NORMAL_OFFSET
    // - _SHADOW_SAMPLE_ORTHO
    // - _SHADOW_SAMPLE_POINT
    // - _SHADOW_SAMPLE_SOURCE_ZBUFFER
    vec3 getShadowSampleCoord{i}(mat4 shadowTransform, vec4 shadowParams, vec3 worldPosition, vec3 lightPos, inout vec3 lightDir, vec3 lightDirNorm, vec3 normal) {

        vec3 surfacePosition = worldPosition;

        #ifdef LIGHT{i}_SHADOW_SAMPLE_POINT
            #ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
                float distScale = length(lightDir);
                surfacePosition = surfacePosition + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale;
                lightDir = surfacePosition - lightPos;
                return lightDir;
            #endif
        #else
            #ifdef LIGHT{i}_SHADOW_SAMPLE_SOURCE_ZBUFFER
                #ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
                    surfacePosition = surfacePosition + normal * shadowParams.y;
                #endif
            #else
                #ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
                    #ifdef LIGHT{i}_SHADOW_SAMPLE_ORTHO
                        float distScale = 1.0;
                    #else
                        float distScale = abs(dot(vPositionW - lightPos, lightDirNorm));
                    #endif
                    surfacePosition = surfacePosition + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale;
                #endif
            #endif

            vec4 positionInShadowSpace = shadowTransform * vec4(surfacePosition, 1.0);
            #ifdef LIGHT{i}_SHADOW_SAMPLE_ORTHO
                positionInShadowSpace.z = saturate(positionInShadowSpace.z) - 0.0001;
            #else
                #ifdef LIGHT{i}_SHADOW_SAMPLE_SOURCE_ZBUFFER
                    positionInShadowSpace.xyz /= positionInShadowSpace.w;
                #else
                    positionInShadowSpace.xy /= positionInShadowSpace.w;
                    positionInShadowSpace.z = length(lightDir) * shadowParams.w;
                #endif
            #endif

            // this is currently unused
            #ifdef SHADOW_SAMPLE_Z_BIAS
                // positionInShadowSpace.z += getShadowBias(shadowParams.x, shadowParams.z);
            #endif
            surfacePosition = positionInShadowSpace.xyz;
        #endif

        return surfacePosition;
    }

    // shadow evaluation function
    float getShadow{i}(vec3 lightDirW) {

        // directional shadow cascades
        #ifdef LIGHT{i}_SHADOW_CASCADES

            // select shadow cascade matrix
            int cascadeIndex = getShadowCascadeIndex(light{i}_shadowCascadeDistances, light{i}_shadowCascadeCount);

            #ifdef LIGHT{i}_SHADOW_CASCADE_BLEND
                cascadeIndex = ditherShadowCascadeIndex(cascadeIndex, light{i}_shadowCascadeDistances, light{i}_shadowCascadeCount, light{i}_shadowCascadeBlend);
            #endif

            mat4 shadowMatrix = light{i}_shadowMatrixPalette[cascadeIndex];

        #else

            mat4 shadowMatrix = light{i}_shadowMatrix;

        #endif

        #if LIGHT{i}TYPE == DIRECTIONAL
            // directional light does not have a position
            vec3 shadowCoord = getShadowSampleCoord{i}(shadowMatrix, light{i}_shadowParams, vPositionW, vec3(0.0), lightDirW, dLightDirNormW, dVertexNormalW);
        #else
            vec3 shadowCoord = getShadowSampleCoord{i}(shadowMatrix, light{i}_shadowParams, vPositionW, light{i}_position, lightDirW, dLightDirNormW, dVertexNormalW);
        #endif

        // Fade directional shadow at the far distance
        #if LIGHT{i}TYPE == DIRECTIONAL
            shadowCoord = fadeShadow(shadowCoord, light{i}_shadowCascadeDistances);
        #endif

        // ----- sample the shadow -----

        #if LIGHT{i}TYPE == DIRECTIONAL // ----- directional light -----

            #if LIGHT{i}SHADOWTYPE == VSM_16F
                return getShadowVSM16(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, 5.54);
            #endif

            #if LIGHT{i}SHADOWTYPE == VSM_32F
                return getShadowVSM32(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, 15.0);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCSS_32F

                #if LIGHT{i}SHAPE != PUNCTUAL
                    vec2 shadowSearchArea = vec2(length(light{i}_halfWidth), length(light{i}_halfHeight)) * light{i}_shadowSearchArea;
                    return getShadowPCSS(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, light{i}_cameraParams, shadowSearchArea, lightDirW);
                #else
                    return getShadowPCSS(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, light{i}_cameraParams, light{i}_softShadowParams, lightDirW);
                #endif

            #endif

            #if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
                return getShadowPCF1x1(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
                return getShadowPCF3x3(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCF5_16F || LIGHT{i}SHADOWTYPE == PCF5_32F
                return getShadowPCF5x5(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
            #endif

        #endif


        #if LIGHT{i}TYPE == SPOT // ----- spot light -----

            #if LIGHT{i}SHADOWTYPE == VSM_16F
                return getShadowSpotVSM16(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, 5.54, lightDirW);
            #endif

            #if LIGHT{i}SHADOWTYPE == VSM_32F
                return getShadowSpotVSM32(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, 15.0, lightDirW);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCSS_32F

                #if LIGHT{i}SHAPE != PUNCTUAL
                    vec2 shadowSearchArea = vec2(length(light{i}_halfWidth), length(light{i}_halfHeight)) * light{i}_shadowSearchArea;
                #else
                    vec2 shadowSearchArea = vec2(light{i}_shadowSearchArea);
                #endif

                return getShadowSpotPCSS(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, light{i}_cameraParams, shadowSearchArea, lightDirW);

            #endif

            #if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
                return getShadowSpotPCF1x1(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
                return getShadowSpotPCF3x3(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCF5_16F || LIGHT{i}SHADOWTYPE == PCF5_32F
                return getShadowSpotPCF5x5(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
            #endif

        #endif


        #if LIGHT{i}TYPE == OMNI // ----- omni light -----

            #if LIGHT{i}SHADOWTYPE == PCSS_32F

                #if LIGHT{i}SHAPE != PUNCTUAL
                    vec2 shadowSearchArea = vec2(length(light{i}_halfWidth), length(light{i}_halfHeight)) * light{i}_shadowSearchArea;
                #else
                    vec2 shadowSearchArea = vec2(light{i}_shadowSearchArea);
                #endif

                return getShadowOmniPCSS(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, light{i}_cameraParams, shadowSearchArea, lightDirW);

            #endif

            #if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
                return getShadowOmniPCF1x1(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, lightDirW);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
                return getShadowOmniPCF3x3(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, lightDirW);
            #endif

        #endif
    }
#endif
`,yP=`

#ifdef LIT_CLUSTERED_LIGHTS
    // all this functionality that needs to be included for clustered lighting
    #define LIT_CODE_FALLOFF_LINEAR
    #define LIT_CODE_FALLOFF_SQUARED
    #define LIT_CODE_LIGHTS_POINT
    #define LIT_CODE_LIGHTS_SPOT
#endif

#ifdef AREA_LIGHTS
    uniform highp sampler2D areaLightsLutTex1;
    uniform highp sampler2D areaLightsLutTex2;
#endif

#ifdef LIT_LIGHTING
    #include "lightDiffuseLambertPS"

    // area lights
    #if defined(AREA_LIGHTS) || defined(LIT_CLUSTERED_AREA_LIGHTS)
        #include "ltcPS"
    #endif
#endif

#ifdef SHADOW_DIRECTIONAL
    #include "shadowCascadesPS"
#endif

#if defined(SHADOW_KIND_PCF1)
    #include "shadowPCF1PS"
#endif

#if defined(SHADOW_KIND_PCF3)
    #include "shadowPCF3PS"
#endif

#if defined(SHADOW_KIND_PCF5)
    #include "shadowPCF5PS"
#endif

#if defined(SHADOW_KIND_PCSS)
    #include "linearizeDepthPS"
    #include "shadowPCSSPS"
    #include "shadowSoftPS"
#endif

#if defined(SHADOW_KIND_VSM)
    #include "shadowEVSMPS"
#endif

#ifdef LIT_CODE_FALLOFF_LINEAR
    #include "falloffLinearPS"
#endif

#ifdef LIT_CODE_FALLOFF_SQUARED
    #include "falloffInvSquaredPS"
#endif

#ifdef LIT_CODE_LIGHTS_POINT
    #include "lightDirPointPS"
#endif

#ifdef LIT_CODE_LIGHTS_SPOT
    #include "spotPS"
#endif

#ifdef LIT_CODE_COOKIE
    #include "cookiePS"
#endif

// clustered lighting
#ifdef LIT_CLUSTERED_LIGHTS
    #include "clusteredLightPS"
#endif

#ifdef LIGHT_COUNT > 0
    // LOOP - generate shadow evaluation functions for all non-clustered lights
    #include "lightFunctionShadowPS, LIGHT_COUNT"

    // LOOP - generate light evaluation functions for all non-clustered lights
    #include "lightFunctionLightPS, LIGHT_COUNT"
#endif
`,vP=`
void addLightMap(
    vec3 lightmap, 
    vec3 dir, 
    vec3 worldNormal, 
    vec3 viewDir, 
    vec3 reflectionDir, 
    float gloss, 
    vec3 specularity, 
    vec3 vertexNormal, 
    mat3 tbn
#if defined(LIT_IRIDESCENCE)
    vec3 iridescenceFresnel, 
    float iridescenceIntensity
#endif
) {

    // directional lightmap
    #if defined(LIT_SPECULAR) && defined(LIT_DIR_LIGHTMAP)

        if (dot(dir, dir) < 0.0001) {
                dDiffuseLight += lightmap;
        } else {
            float vlight = saturate(dot(dir, -vertexNormal));
            float flight = saturate(dot(dir, -worldNormal));
            float nlight = (flight / max(vlight, 0.01)) * 0.5;

            dDiffuseLight += lightmap * nlight * 2.0;

            vec3 halfDir = normalize(-dir + viewDir);
            vec3 specularLight = lightmap * getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, dir, gloss, tbn);

            #ifdef LIT_SPECULAR_FRESNEL

                specularLight *= 
                    getFresnel(dot(viewDir, halfDir), 
                    gloss, 
                    specularity
                #if defined(LIT_IRIDESCENCE)
                    , iridescenceFresnel,
                    iridescenceIntensity
                #endif
                    );
            #endif

            dSpecularLight += specularLight;
        }

    #else // non-directional lightmap

        dDiffuseLight += lightmap;

    #endif
}
`,xP=`

#ifdef STD_LIGHTMAP_DIR
    vec3 dLightmapDir;
    uniform sampler2D texture_dirLightMap;
#endif

void getLightMap() {

    dLightmap = vec3(1.0);

    #ifdef STD_LIGHT_TEXTURE
        dLightmap *= {STD_LIGHT_TEXTURE_DECODE}(texture2DBias({STD_LIGHT_TEXTURE_NAME}, {STD_LIGHT_TEXTURE_UV}, textureBias)).{STD_LIGHT_TEXTURE_CHANNEL};

        #ifdef STD_LIGHTMAP_DIR
            vec3 dir = texture2DBias(texture_dirLightMap, {STD_LIGHT_TEXTURE_UV}, textureBias).xyz * 2.0 - 1.0;
            float dirDot = dot(dir, dir);
            dLightmapDir = (dirDot > 0.001) ? dir / sqrt(dirDot) : vec3(0.0);
        #endif
    #endif

    #ifdef STD_LIGHT_VERTEX
        dLightmap *= saturate(vVertexColor.{STD_LIGHT_VERTEX_CHANNEL});
    #endif
}
`,TP=`
// Anisotropic GGX
float calcLightSpecular(float gloss, vec3 worldNormal, vec3 viewDir, vec3 h, vec3 lightDirNorm, mat3 tbn) {
    float PI = 3.141592653589793;
    float roughness = max((1.0 - gloss) * (1.0 - gloss), 0.001);
    float alphaRoughness = roughness * roughness;
    float anisotropy = dAnisotropy;
    vec2 direction = dAnisotropyRotation;

    float at = mix(alphaRoughness, 1.0, anisotropy * anisotropy);
    float ab = clamp(alphaRoughness, 0.001, 1.0);

    vec3 anisotropicT = normalize(tbn * vec3(direction, 0.0));
    vec3 anisotropicB = normalize(cross(tbn[2], anisotropicT));

    float NoH = dot(worldNormal, h);
    float ToH = dot(anisotropicT, h);
    float BoH = dot(anisotropicB, h);

    float a2 = at * ab;
    vec3 v = vec3(ab * ToH, at * BoH, a2 * NoH);
    float v2 = dot(v, v);
    float w2 = a2 / v2;
    float D = a2 * w2 * w2 * (1.0 / PI);

    float ToV = dot(anisotropicT, viewDir);
    float BoV = dot(anisotropicB, viewDir);
    float ToL = dot(anisotropicT, -lightDirNorm);
    float BoL = dot(anisotropicB, -lightDirNorm);
    float NoV = dot(worldNormal, viewDir);
    float NoL = dot(worldNormal, -lightDirNorm);

    float lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));
    float lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));
    float G = 0.5 / (lambdaV + lambdaL);

    return D * G;
}

float getLightSpecular(vec3 h, vec3 reflDir, vec3 worldNormal, vec3 viewDir, vec3 lightDirNorm, float gloss, mat3 tbn) {
    return calcLightSpecular(gloss, worldNormal, viewDir, h, lightDirNorm, tbn);
}
`,wP=`
// Energy-conserving (hopefully) Blinn-Phong
float calcLightSpecular(float gloss, vec3 worldNormal, vec3 h) {
    float nh = max( dot( h, worldNormal ), 0.0 );

    float specPow = exp2(gloss * 11.0); // glossiness is linear, power is not; 0 - 2048

    // Hack: On Mac OS X, calling pow with zero for the exponent generates hideous artifacts so bias up a little
    specPow = max(specPow, 0.0001);

    return pow(nh, specPow) * (specPow + 2.0) / 8.0;
}

float getLightSpecular(vec3 h, vec3 reflDir, vec3 worldNormal, vec3 viewDir, vec3 lightDirNorm, float gloss, mat3 tbn) {
    return calcLightSpecular(gloss, worldNormal, h);
}
`,EP=`

float sheenD(vec3 normal, vec3 h, float roughness) {
    const float PI = 3.141592653589793;
    float invR = 1.0 / (roughness * roughness);
    float cos2h = max(dot(normal, h), 0.0);
    cos2h *= cos2h;
    float sin2h = max(1.0 - cos2h, 0.0078125);
    return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * PI);
}

float sheenV(vec3 normal, vec3 viewDir, vec3 light) {
    float NoV = max(dot(normal, viewDir), 0.000001);
    float NoL = max(dot(normal, light), 0.000001);
    return 1.0 / (4.0 * (NoL + NoV - NoL * NoV));
}

float getLightSpecularSheen(vec3 h, vec3 worldNormal, vec3 viewDir, vec3 lightDirNorm, float sheenGloss) {
    float D = sheenD(worldNormal, h, sheenGloss);
    float V = sheenV(worldNormal, viewDir, -lightDirNorm);
    return D * V;
}
`,bP=`

#ifndef LINEARIZE_DEPTH
#define LINEARIZE_DEPTH

float linearizeDepthWithParams(float z, vec4 cameraParams) {
    if (cameraParams.w == 0.0)
        return (cameraParams.z * cameraParams.y) / (cameraParams.y + z * (cameraParams.z - cameraParams.y));
    else
        return cameraParams.z + z * (cameraParams.y - cameraParams.z);
}

#ifndef CAMERAPLANES
    #define CAMERAPLANES
    uniform vec4 camera_params; // x: 1 / camera_far,      y: camera_far,     z: camera_near,        w: is_ortho
#endif

float linearizeDepth(float z) {
    return linearizeDepthWithParams(z, camera_params);
}
#endif
`,AP=`
void evaluateBackend() {

    // apply SSAO during lighting
    #ifdef LIT_SSAO
        litArgs_ao *= texture2DLod(ssaoTexture, gl_FragCoord.xy * ssaoTextureSizeInv, 0.0).r;
    #endif

    // transform tangent space normals to world space
    #ifdef LIT_NEEDS_NORMAL
        #ifdef LIT_SPECULAR
            getReflDir(litArgs_worldNormal, dViewDirW, litArgs_gloss, dTBN);
        #endif

        #ifdef LIT_CLEARCOAT
            ccReflDirW = normalize(-reflect(dViewDirW, litArgs_clearcoat_worldNormal));
        #endif
    #endif

    #ifdef LIT_SPECULAR_OR_REFLECTION
        #ifdef LIT_METALNESS
            float f0 = 1.0 / litArgs_ior;
            f0 = (f0 - 1.0) / (f0 + 1.0);
            f0 *= f0;
            litArgs_specularity = getSpecularModulate(litArgs_specularity, litArgs_albedo, litArgs_metalness, f0);
            litArgs_albedo = getAlbedoModulate(litArgs_albedo, litArgs_metalness);
        #endif

        #ifdef LIT_IRIDESCENCE
            vec3 iridescenceFresnel = getIridescence(saturate(dot(dViewDirW, litArgs_worldNormal)), litArgs_specularity, litArgs_iridescence_thickness);
        #endif
    #endif

    // ambient
    #ifdef LIT_ADD_AMBIENT
        addAmbient(litArgs_worldNormal);

        #ifdef LIT_SPECULAR
            dDiffuseLight = dDiffuseLight * (1.0 - litArgs_specularity);
        #endif

        // move ambient color out of diffuse (used by Lightmapper, to multiply ambient color by accumulated AO)
        #ifdef LIT_SEPARATE_AMBIENT
            vec3 dAmbientLight = dDiffuseLight;
            dDiffuseLight = vec3(0);
        #endif
    #endif

    #ifndef LIT_OLD_AMBIENT
        dDiffuseLight *= material_ambient;
    #endif

    #ifdef LIT_AO
        #ifndef LIT_OCCLUDE_DIRECT
            occludeDiffuse(litArgs_ao);
        #endif
    #endif

    #ifdef LIT_LIGHTMAP
        addLightMap(
            litArgs_lightmap, 
            litArgs_lightmapDir, 
            litArgs_worldNormal, 
            dViewDirW, 
            dReflDirW, 
            litArgs_gloss, 
            litArgs_specularity, 
            dVertexNormalW,
            dTBN
        #if defined(LIT_IRIDESCENCE)
            , iridescenceFresnel,
            litArgs_iridescence_intensity
        #endif
        );
    #endif

    #ifdef LIT_LIGHTING || LIT_REFLECTIONS

        #ifdef LIT_REFLECTIONS

            #ifdef LIT_CLEARCOAT
                addReflectionCC(ccReflDirW, litArgs_clearcoat_gloss);
            
                #ifdef LIT_SPECULAR_FRESNEL
                    ccFresnel = getFresnelCC(dot(dViewDirW, litArgs_clearcoat_worldNormal));
                    ccReflection *= ccFresnel;
                #else
                    ccFresnel = 0.0;
                #endif
            #endif

            #ifdef LIT_SPECULARITY_FACTOR
                ccReflection *= litArgs_specularityFactor;
            #endif

            #ifdef LIT_SHEEN
                addReflectionSheen(litArgs_worldNormal, dViewDirW, litArgs_sheen_gloss);
            #endif

            // Fresnel has to be applied to reflections
            addReflection(dReflDirW, litArgs_gloss);

            #ifdef LIT_FRESNEL_MODEL

                dReflection.rgb *= getFresnel(
                    dot(dViewDirW, litArgs_worldNormal), 
                    litArgs_gloss, 
                    litArgs_specularity
                #if defined(LIT_IRIDESCENCE)
                    , iridescenceFresnel,
                    litArgs_iridescence_intensity
                #endif
                    );

            #else

                dReflection.rgb *= litArgs_specularity;

            #endif

            #ifdef LIT_SPECULARITY_FACTOR
                dReflection.rgb *= litArgs_specularityFactor;
            #endif

        #endif

        #ifdef AREA_LIGHTS
            // specular has to be accumulated differently if we want area lights to look correct
            dSpecularLight *= litArgs_specularity;

            #ifdef LIT_SPECULAR
                // evaluate material based area lights data, shared by all area lights
                calcLTCLightValues(litArgs_gloss, litArgs_worldNormal, dViewDirW, litArgs_specularity, litArgs_clearcoat_gloss, litArgs_clearcoat_worldNormal, litArgs_clearcoat_specularity);
            #endif
        #endif
        
        // LOOP - evaluate all non-clustered lights
        #ifdef LIGHT_COUNT > 0
            #include "lightEvaluationPS, LIGHT_COUNT"
        #endif

        // clustered lighting
        #ifdef LIT_CLUSTERED_LIGHTS
            addClusteredLights(litArgs_worldNormal, dViewDirW, dReflDirW,
                #if defined(LIT_CLEARCOAT)
                        ccReflDirW,
                #endif
                        litArgs_gloss, litArgs_specularity, dVertexNormalW, dTBN, 
                #if defined(LIT_IRIDESCENCE)
                        iridescenceFresnel,
                #endif
                        litArgs_clearcoat_worldNormal, litArgs_clearcoat_gloss, litArgs_sheen_gloss, litArgs_iridescence_intensity
            );
        #endif

        #ifdef AREA_LIGHTS

            #ifdef LIT_CLEARCOAT
                // specular has to be accumulated differently if we want area lights to look correct
                litArgs_clearcoat_specularity = 1.0;
            #endif

            #ifdef LIT_SPECULAR
                litArgs_specularity = vec3(1);
            #endif

        #endif

        #ifdef LIT_REFRACTION
            addRefraction(
                litArgs_worldNormal, 
                dViewDirW, 
                litArgs_thickness, 
                litArgs_gloss, 
                litArgs_specularity, 
                litArgs_albedo, 
                litArgs_transmission,
                litArgs_ior,
                litArgs_dispersion
                #if defined(LIT_IRIDESCENCE)
                    , iridescenceFresnel, 
                    litArgs_iridescence_intensity
                #endif
            );
        #endif
    #endif

    // apply ambient occlusion
    #ifdef LIT_AO
        #ifdef LIT_OCCLUDE_DIRECT
            occludeDiffuse(litArgs_ao);
        #endif

        #if LIT_OCCLUDE_SPECULAR != NONE
            occludeSpecular(litArgs_gloss, litArgs_ao, litArgs_worldNormal, dViewDirW);
        #endif
    #endif

    #ifdef LIT_SPECULARITY_FACTOR
        dSpecularLight *= litArgs_specularityFactor;
    #endif

    #if !defined(LIT_OPACITY_FADES_SPECULAR)

        #if LIT_BLEND_TYPE == NORMAL || LIT_BLEND_TYPE == PREMULTIPLIED

            float specLum = dot((dSpecularLight + dReflection.rgb * dReflection.a), vec3( 0.2126, 0.7152, 0.0722 ));
            #ifdef LIT_CLEARCOAT
                specLum += dot(ccSpecularLight * litArgs_clearcoat_specularity + ccReflection * litArgs_clearcoat_specularity, vec3( 0.2126, 0.7152, 0.0722 ));
            #endif
            litArgs_opacity = clamp(litArgs_opacity + gammaCorrectInput(specLum), 0.0, 1.0);

        #endif

        litArgs_opacity *= material_alphaFade;

    #endif

    // end chunks - when baking lightmap
    #ifdef LIT_LIGHTMAP_BAKING
        #ifdef LIT_LIGHTMAP_BAKING_COLOR
            #include "bakeLmEndPS"
        #endif
        #ifdef LIT_LIGHTMAP_BAKING_DIR
            #include "bakeDirLmEndPS"
        #endif
    #else
        // end chunks - in all other cases
        #include "endPS"
        #include "outputAlphaPS"
    #endif

    #ifdef LIT_MSDF
        gl_FragColor = applyMsdf(gl_FragColor);
    #endif

    #include "outputPS"
    #include "debugOutputPS"

    #ifdef LIT_SHADOW_CATCHER
        // output when the shadow catcher is enabled - accumulated shadows
        gl_FragColor.rgb = vec3(dShadowCatcher);
    #endif
}
`,CP=`

// globals
vec3 sReflection;
vec3 dVertexNormalW;
vec3 dTangentW;
vec3 dBinormalW;
vec3 dViewDirW;
vec3 dReflDirW;
vec3 ccReflDirW;

// Per-light temporaries
vec3 dLightDirNormW;
float dAtten;

// Outputs
mat3 dTBN;
vec4 dReflection;
vec3 dDiffuseLight;
vec3 dSpecularLight;
float ccFresnel;
vec3 ccReflection;
vec3 ccSpecularLight;
float ccSpecularityNoFres;
vec3 sSpecularLight;

// FRAGMENT SHADER INPUTS: UNIFORMS

#ifdef LIT_DISPERSION
    uniform float material_dispersion;
#endif

#ifndef LIT_OPACITY_FADES_SPECULAR
    uniform float material_alphaFade;
#endif

#ifdef LIT_SSAO
    uniform sampler2D ssaoTexture;
    uniform vec2 ssaoTextureSizeInv;
#endif

// lighting and shadowing declarations

#ifdef LIT_SHADOW_CATCHER
    // a variable to accumulate shadows for shadow catcher materials
    float dShadowCatcher = 1.0;
#endif

// LOOP - uniform declarations for all non-clustered lights
#if LIGHT_COUNT > 0
    #include "lightDeclarationPS, LIGHT_COUNT"
#endif

#ifdef LIT_SPECULAR
    #if LIT_FRESNEL_MODEL == NONE && !defined(LIT_REFLECTIONS) && !defined(LIT_DIFFUSE_MAP) 
        #define LIT_OLD_AMBIENT
    #endif
#endif

// lightmap baking
#ifdef STD_LIGHTMAP_DIR
    uniform float bakeDir;
#endif
#ifdef LIT_LIGHTMAP_BAKING_ADD_AMBIENT
    uniform float ambientBakeOcclusionContrast;
    uniform float ambientBakeOcclusionBrightness;
#endif
`,PP=`

void main(void) {

    #include "litUserMainStartPS"

    dReflection = vec4(0);

    #ifdef LIT_CLEARCOAT
        ccSpecularLight = vec3(0);
        ccReflection = vec3(0);
    #endif

    #if LIT_NONE_SLICE_MODE == SLICED
        #include "startNineSlicedPS"
    #elif LIT_NONE_SLICE_MODE == TILED
        #include "startNineSlicedTiledPS"
    #endif

    #ifdef LIT_NEEDS_NORMAL
        dVertexNormalW = normalize(vNormalW);

        #ifdef LIT_TANGENTS
            #if defined(LIT_HEIGHTS) || defined(LIT_USE_NORMALS) || defined(LIT_USE_CLEARCOAT_NORMALS) || defined(LIT_GGX_SPECULAR)
                dTangentW = vTangentW;
                dBinormalW = vBinormalW;
            #endif
        #endif

        getViewDir();

        #ifdef LIT_TBN
            getTBN(dTangentW, dBinormalW, dVertexNormalW);

            #ifdef LIT_TWO_SIDED_LIGHTING
                handleTwoSidedLighting();
            #endif
        #endif
    #endif

    // invoke frontend functions
    evaluateFrontend();

    #include "debugProcessFrontendPS"

    evaluateBackend();

    #include "litUserMainEndPS"
}
`,DP=`

#ifdef LIT_NEEDS_NORMAL
    #include "cubeMapRotatePS"
    #include "cubeMapProjectPS"
    #include "envProcPS"
#endif

// ----- specular or reflections -----
#ifdef LIT_SPECULAR_OR_REFLECTION
    #ifdef LIT_METALNESS
        #include "metalnessModulatePS"
    #endif

    #if LIT_FRESNEL_MODEL == SCHLICK
        #include "fresnelSchlickPS"
    #endif

    #ifdef LIT_IRIDESCENCE
        #include "iridescenceDiffractionPS"
    #endif
#endif

// ----- ambient occlusion -----
#ifdef LIT_AO
    #include "aoDiffuseOccPS"
    #include "aoSpecOccPS"
#endif

#if LIT_REFLECTION_SOURCE == ENVATLASHQ
    #include "envAtlasPS"
    #include "reflectionEnvHQPS"
#elif LIT_REFLECTION_SOURCE == ENVATLAS
    #include "envAtlasPS"
    #include "reflectionEnvPS"
#elif LIT_REFLECTION_SOURCE == CUBEMAP
    #include "reflectionCubePS"
#elif LIT_REFLECTION_SOURCE == SPHEREMAP
    #include "reflectionSpherePS"
#endif

#ifdef LIT_REFLECTIONS
    #ifdef LIT_CLEARCOAT
        #include "reflectionCCPS"
    #endif

    #ifdef LIT_SHEEN
        #include "reflectionSheenPS"
    #endif
#endif

#ifdef LIT_REFRACTION
    #if defined(LIT_DYNAMIC_REFRACTION)
        #include "refractionDynamicPS"
    #elif defined(LIT_REFLECTIONS)
        #include "refractionCubePS"
    #endif
#endif

#ifdef LIT_SHEEN
    #include "lightSheenPS"
#endif

uniform vec3 material_ambient;

#ifdef LIT_SPECULAR
    #ifdef LIT_LIGHTING
        #ifdef LIT_GGX_SPECULAR
            #include "lightSpecularAnisoGGXPS"
        #else
            #include "lightSpecularBlinnPS"
        #endif
    #endif
#endif

#include "combinePS"

#ifdef LIT_LIGHTMAP
    #include "lightmapAddPS"
#endif

#ifdef LIT_ADD_AMBIENT
    #include "ambientPS"
#endif

#ifdef LIT_MSDF
    #include "msdfPS"
#endif

#ifdef LIT_NEEDS_NORMAL
    #include "viewDirPS"
    #ifdef LIT_SPECULAR
        #ifdef LIT_GGX_SPECULAR
            #include "reflDirAnisoPS"
        #else
            #include "reflDirPS"
        #endif
    #endif
#endif

// lighting functionality
#include "lightingPS"

`,IP=`

#include "basePS"
#include "sphericalPS"
#include "decodePS"
#include "gammaPS"
#include "tonemappingPS"
#include "fogPS"

// 9-slice support code
#if LIT_NONE_SLICE_MODE == SLICED
    #include "baseNineSlicedPS"
#elif LIT_NONE_SLICE_MODE == TILED
    #include "baseNineSlicedTiledPS"
#endif

// TBN
#ifdef LIT_TBN
    #include "TBNPS"

    #ifdef LIT_TWO_SIDED_LIGHTING
        #include "twoSidedLightingPS"
    #endif
#endif

`,MP=`

#include "varyingsPS"
#include "litUserDeclarationPS"
#include "frontendDeclPS"

#if defined(PICK_PASS) || defined(PREPASS_PASS)

    #include "frontendCodePS"
    #include "litUserCodePS"
    #include "litOtherMainPS"

#elif defined(SHADOW_PASS)

    #include "frontendCodePS"
    #include "litUserCodePS"
    #include "litShadowMainPS"

#else // FORWARD_PASS

    #include "litForwardDeclarationPS"
    #include "litForwardPreCodePS"
    #include "frontendCodePS"
    #include "litForwardPostCodePS"
    #include "litForwardBackendPS"
    #include "litUserCodePS"
    #include "litForwardMainPS"

#endif

`,LP=`

#include "varyingsVS"

#include  "litUserDeclarationVS"

#ifdef VERTEX_COLOR
    attribute vec4 vertex_color;
#endif

#ifdef NINESLICED

    varying vec2 vMask;
    varying vec2 vTiledUv;

    uniform mediump vec4 innerOffset;
    uniform mediump vec2 outerScale;
    uniform mediump vec4 atlasRect;

#endif

vec3 dPositionW;
mat4 dModelMatrix;

#include "transformCoreVS"

#ifdef UV0
    attribute vec2 vertex_texCoord0;
    #include "uv0VS"
#endif

#ifdef UV1
    attribute vec2 vertex_texCoord1;
    #include "uv1VS"
#endif


#ifdef LINEAR_DEPTH
    #ifndef VIEWMATRIX
    #define VIEWMATRIX
        uniform mat4 matrix_view;
    #endif
#endif

#include "transformVS"

#ifdef NORMALS
    #include "normalCoreVS"
    #include "normalVS"
#endif

#ifdef TANGENTS
    attribute vec4 vertex_tangent;
#endif

// expand uniforms for uv transforms
#include "uvTransformUniformsPS, UV_TRANSFORMS_COUNT"

#ifdef MSDF
    #include "msdfVS"
#endif

#include  "litUserCodeVS"

void main(void) {

    #include "litUserMainStartVS"

    // default point size to 1 in case the shader is used with points
    gl_PointSize = 1.0;

    gl_Position = getPosition();
    vPositionW = getWorldPosition();

    #ifdef NORMALS
        vNormalW = getNormal();
    #endif

    #ifdef TANGENTS
        vTangentW = normalize(dNormalMatrix * vertex_tangent.xyz);
        vBinormalW = cross(vNormalW, vTangentW) * vertex_tangent.w;
    #elif defined(GGX_SPECULAR)
        vObjectSpaceUpW = normalize(dNormalMatrix * vec3(0, 1, 0));
    #endif

    #ifdef UV0
        vec2 uv0 = getUv0();
        #ifdef UV0_UNMODIFIED
            vUv0 = uv0;
        #endif
    #endif

    #ifdef UV1
        vec2 uv1 = getUv1();
        #ifdef UV1_UNMODIFIED
            vUv1 = uv1;
        #endif
    #endif

    // expand code for uv transforms
    #include "uvTransformVS, UV_TRANSFORMS_COUNT"

    #ifdef VERTEX_COLOR
        vVertexColor = vertex_color;
    #endif

    #ifdef LINEAR_DEPTH
        // linear depth from the worldPosition, see getLinearDepth
        vLinearDepth = -(matrix_view * vec4(vPositionW, 1.0)).z;
    #endif

    #ifdef MSDF
        unpackMsdfParams();
    #endif

    #include "litUserMainEndVS"
}
`,RP=`

#ifdef PICK_PASS
    #include "pickPS"
#endif

#ifdef PREPASS_PASS
    #include "floatAsUintPS"
#endif

void main(void) {

    #include "litUserMainStartPS"

    evaluateFrontend();

    #ifdef PICK_PASS
        gl_FragColor = getPickOutput();
    #endif

    #ifdef PREPASS_PASS
        gl_FragColor = float2vec4(vLinearDepth);
    #endif

    #include "litUserMainEndPS"
}
`,OP=`

// Surface albedo absorbance
vec3 litArgs_albedo;

// Transparency
float litArgs_opacity;

// Emission color
vec3 litArgs_emission;

// Normal direction in world space
vec3 litArgs_worldNormal;

// Ambient occlusion amount, range [0..1]
float litArgs_ao;

// Light map color
vec3 litArgs_lightmap;

// Light map direction
vec3 litArgs_lightmapDir;

// Surface metalness factor, range [0..1]
float litArgs_metalness;

// The f0 specularity factor
vec3 litArgs_specularity;

// Specularity intensity factor, range [0..1]
float litArgs_specularityFactor;

// The microfacet glossiness factor, range [0..1]
float litArgs_gloss;

// Glossiness of the sheen layer, range [0..1]
float litArgs_sheen_gloss;

// The color of the f0 specularity factor for the sheen layer
vec3 litArgs_sheen_specularity;

// Transmission factor (refraction), range [0..1]
float litArgs_transmission;

// Uniform thickness of medium, used by transmission, range [0..inf]
float litArgs_thickness;

// Index of refraction
float litArgs_ior;

// Dispersion, range [0..1] typically, but can be higher
float litArgs_dispersion;

// Iridescence effect intensity, range [0..1]
float litArgs_iridescence_intensity;

// Thickness of the iridescent microfilm layer, value is in nanometers, range [0..1000]
float litArgs_iridescence_thickness;

// The normal used for the clearcoat layer
vec3 litArgs_clearcoat_worldNormal;

// Intensity of the clearcoat layer, range [0..1]
float litArgs_clearcoat_specularity;

// Glossiness of clearcoat layer, range [0..1]
float litArgs_clearcoat_gloss;

`,FP=`

    // global texture bias for standard textures
    #if LIT_NONE_SLICE_MODE == TILED
        const float textureBias = -1000.0;
    #else
        uniform float textureBias;
    #endif

    #include "litShaderArgsPS"
`,NP=`

#if LIGHT_TYPE != DIRECTIONAL
    uniform vec3 view_position;
    uniform float light_radius;
#endif

#if SHADOW_TYPE == PCSS_32F
    #include "linearizeDepthPS"
#endif

void main(void) {

    #include "litUserMainStartPS"

    evaluateFrontend();

    // using non-standard depth, i.e gl_FragCoord.z
    #ifdef PERSPECTIVE_DEPTH
        float depth = gl_FragCoord.z;

        #if SHADOW_TYPE == PCSS_32F
            // spot/omni shadows currently use linear depth.
            // TODO: use perspective depth for spot/omni the same way as directional
            #if LIGHT_TYPE != DIRECTIONAL
                depth = linearizeDepthWithParams(depth, camera_params);
            #endif
        #endif

    #else
        float depth = min(distance(view_position, vPositionW) / light_radius, 0.99999);
        #define MODIFIED_DEPTH
    #endif

    #if SHADOW_TYPE == VSM_16F || SHADOW_TYPE == VSM_32F
        #if SHADOW_TYPE == VSM_32F
            float exponent = 15.0;
        #else
            float exponent = 5.54;
        #endif
        depth = 2.0 * depth - 1.0;
        depth =  exp(exponent * depth);
        gl_FragColor = vec4(depth, depth*depth, 1.0, 1.0);
    #else
        #if SHADOW_TYPE == PCSS_32F
            // store depth into R32
            gl_FragColor.r = depth;
        #else
            #ifdef MODIFIED_DEPTH
                // If we end up using modified depth, it needs to be explicitly written to gl_FragDepth
                gl_FragDepth = depth;
            #endif

            // just the simplest code, color is not written anyway
            gl_FragColor = vec4(1.0);
        #endif
    #endif

    #include "litUserMainEndPS"
}
`,kP=`
// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines
// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt
// code: https://github.com/selfshadow/ltc_code/

mat3 transposeMat3( const in mat3 m ) {
    mat3 tmp;
    tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
    tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
    tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
    return tmp;
}

vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
    const float LUT_SIZE = 64.0;
    const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
    const float LUT_BIAS = 0.5 / LUT_SIZE;
    float dotNV = saturate( dot( N, V ) );
    // texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )
    vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
    uv = uv * LUT_SCALE + LUT_BIAS;
    return uv;
}

float LTC_ClippedSphereFormFactor( const in vec3 f ) {
    // Real-Time Area Lighting: a Journey from Research to Production (p.102)
    // An approximation of the form factor of a horizon-clipped rectangle.
    float l = length( f );
    return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}

vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
    float x = dot( v1, v2 );
    float y = abs( x );
    // rational polynomial approximation to theta / sin( theta ) / 2PI
    float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
    float b = 3.4175940 + ( 4.1616724 + y ) * y;
    float v = a / b;
    float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
    return cross( v1, v2 ) * theta_sintheta;
}

struct Coords {
    vec3 coord0;
    vec3 coord1;
    vec3 coord2;
    vec3 coord3;
};

float LTC_EvaluateRect( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in Coords rectCoords) {
    // bail if point is on back side of plane of light
    // assumes ccw winding order of light vertices
    vec3 v1 = rectCoords.coord1 - rectCoords.coord0;
    vec3 v2 = rectCoords.coord3 - rectCoords.coord0;
    
    vec3 lightNormal = cross( v1, v2 );
    // if( dot( lightNormal, P - rectCoords.coord0 ) < 0.0 ) return 0.0;
    float factor = sign(-dot( lightNormal, P - rectCoords.coord0 ));

    // construct orthonormal basis around N
    vec3 T1, T2;
    T1 = normalize( V - N * dot( V, N ) );
    T2 =  factor * cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system
    // compute transform
    mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
    // transform rect
    vec3 coords[ 4 ];
    coords[ 0 ] = mat * ( rectCoords.coord0 - P );
    coords[ 1 ] = mat * ( rectCoords.coord1 - P );
    coords[ 2 ] = mat * ( rectCoords.coord2 - P );
    coords[ 3 ] = mat * ( rectCoords.coord3 - P );
    // project rect onto sphere
    coords[ 0 ] = normalize( coords[ 0 ] );
    coords[ 1 ] = normalize( coords[ 1 ] );
    coords[ 2 ] = normalize( coords[ 2 ] );
    coords[ 3 ] = normalize( coords[ 3 ] );
    // calculate vector form factor
    vec3 vectorFormFactor = vec3( 0.0 );
    vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
    vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
    vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
    vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
    // adjust for horizon clipping
    float result = LTC_ClippedSphereFormFactor( vectorFormFactor );

    return result;
}

Coords dLTCCoords;
Coords getLTCLightCoords(vec3 lightPos, vec3 halfWidth, vec3 halfHeight){
    Coords coords;
    coords.coord0 = lightPos + halfWidth - halfHeight;
    coords.coord1 = lightPos - halfWidth - halfHeight;
    coords.coord2 = lightPos - halfWidth + halfHeight;
    coords.coord3 = lightPos + halfWidth + halfHeight;
    return coords;
}

float dSphereRadius;
Coords getSphereLightCoords(vec3 lightPos, vec3 halfWidth, vec3 halfHeight){
    // used for simple sphere light falloff
    // also, the code only handles a spherical light, it cannot be non-uniformly scaled in world space, and so we enforce it here
    dSphereRadius = max(length(halfWidth), length(halfHeight));

    // Billboard the 2d light quad to reflection vector, as it's used for specular. This allows us to use disk math for the sphere.
    vec3 f = reflect(normalize(lightPos - view_position), vNormalW);
    vec3 w = normalize(cross(f, halfHeight));
    vec3 h = normalize(cross(f, w));

    return getLTCLightCoords(lightPos, w * dSphereRadius, h * dSphereRadius);
}

// used for LTC LUT texture lookup
vec2 dLTCUV;
#ifdef LIT_CLEARCOAT
    vec2 ccLTCUV;
#endif

vec2 getLTCLightUV(float gloss, vec3 worldNormal, vec3 viewDir)
{
    float roughness = max((1.0 - gloss) * (1.0 - gloss), 0.001);
    return LTC_Uv( worldNormal, viewDir, roughness );
}

// used for energy conservation and to modulate specular
vec3 dLTCSpecFres;
#ifdef LIT_CLEARCOAT
    vec3 ccLTCSpecFres;
#endif

vec3 getLTCLightSpecFres(vec2 uv, vec3 specularity)
{
    vec4 t2 = texture2DLod(areaLightsLutTex2, uv, 0.0);
    return specularity * t2.x + ( vec3( 1.0 ) - specularity) * t2.y;
}

void calcLTCLightValues(float gloss, vec3 worldNormal, vec3 viewDir, vec3 specularity, float clearcoatGloss, vec3 clearcoatWorldNormal, float clearcoatSpecularity)
{
    dLTCUV = getLTCLightUV(gloss, worldNormal, viewDir);
    dLTCSpecFres = getLTCLightSpecFres(dLTCUV, specularity); 

#ifdef LIT_CLEARCOAT
    ccLTCUV = getLTCLightUV(clearcoatGloss, clearcoatWorldNormal, viewDir);
    ccLTCSpecFres = getLTCLightSpecFres(ccLTCUV, vec3(clearcoatSpecularity));
#endif
}

void calcRectLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight) {
    dLTCCoords = getLTCLightCoords(lightPos, halfWidth, halfHeight);
}
void calcDiskLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight) {
    calcRectLightValues(lightPos, halfWidth, halfHeight);
}
void calcSphereLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight) {
    dLTCCoords = getSphereLightCoords(lightPos, halfWidth, halfHeight);
}

// An extended version of the implementation from "How to solve a cubic equation, revisited"
// http://momentsingraphics.de/?p=105
vec3 SolveCubic(vec4 Coefficient)
{
    float pi = 3.14159;
    // Normalize the polynomial
    Coefficient.xyz /= Coefficient.w;
    // Divide middle coefficients by three
    Coefficient.yz /= 3.0;

    float A = Coefficient.w;
    float B = Coefficient.z;
    float C = Coefficient.y;
    float D = Coefficient.x;

    // Compute the Hessian and the discriminant
    vec3 Delta = vec3(
        -Coefficient.z * Coefficient.z + Coefficient.y,
        -Coefficient.y * Coefficient.z + Coefficient.x,
        dot(vec2(Coefficient.z, -Coefficient.y), Coefficient.xy)
    );

    float Discriminant = dot(vec2(4.0 * Delta.x, -Delta.y), Delta.zy);

    vec2 xlc, xsc;

    // Algorithm A
    {
        float A_a = 1.0;
        float C_a = Delta.x;
        float D_a = -2.0 * B * Delta.x + Delta.y;

        // Take the cubic root of a normalized complex number
        float Theta = atan(sqrt(Discriminant), -D_a) / 3.0;

        float x_1a = 2.0 * sqrt(-C_a) * cos(Theta);
        float x_3a = 2.0 * sqrt(-C_a) * cos(Theta + (2.0 / 3.0) * pi);

        float xl;
        if ((x_1a + x_3a) > 2.0 * B)
            xl = x_1a;
        else
            xl = x_3a;

        xlc = vec2(xl - B, A);
    }

    // Algorithm D
    {
        float A_d = D;
        float C_d = Delta.z;
        float D_d = -D * Delta.y + 2.0 * C * Delta.z;

        // Take the cubic root of a normalized complex number
        float Theta = atan(D * sqrt(Discriminant), -D_d) / 3.0;

        float x_1d = 2.0 * sqrt(-C_d) * cos(Theta);
        float x_3d = 2.0 * sqrt(-C_d) * cos(Theta + (2.0 / 3.0) * pi);

        float xs;
        if (x_1d + x_3d < 2.0 * C)
            xs = x_1d;
        else
            xs = x_3d;

        xsc = vec2(-D, xs + C);
    }

    float E =  xlc.y * xsc.y;
    float F = -xlc.x * xsc.y - xlc.y * xsc.x;
    float G =  xlc.x * xsc.x;

    vec2 xmc = vec2(C * F - B * G, -B * F + C * E);

    vec3 Root = vec3(xsc.x / xsc.y, xmc.x / xmc.y, xlc.x / xlc.y);

    if (Root.x < Root.y && Root.x < Root.z)
        Root.xyz = Root.yxz;
    else if (Root.z < Root.x && Root.z < Root.y)
        Root.xyz = Root.xzy;

    return Root;
}

float LTC_EvaluateDisk(vec3 N, vec3 V, vec3 P, mat3 Minv, Coords points)
{
    // construct orthonormal basis around N
    vec3 T1 = normalize(V - N * dot(V, N));
    vec3 T2 = cross(N, T1);

    // rotate area light in (T1, T2, N) basis
    //mat3 R = transpose(mat3(T1, T2, N));
    mat3 R = transposeMat3( mat3( T1, T2, N ) );
    // polygon (allocate 5 vertices for clipping)
    vec3 L_[ 3 ];
    L_[ 0 ] = R * ( points.coord0 - P );
    L_[ 1 ] = R * ( points.coord1 - P );
    L_[ 2 ] = R * ( points.coord2 - P );

    // init ellipse
    vec3 C  = 0.5 * (L_[0] + L_[2]);
    vec3 V1 = 0.5 * (L_[1] - L_[2]);
    vec3 V2 = 0.5 * (L_[1] - L_[0]);

    C  = Minv * C;
    V1 = Minv * V1;
    V2 = Minv * V2;

    //if(dot(cross(V1, V2), C) > 0.0)
    //    return 0.0;

    // compute eigenvectors of ellipse
    float a, b;
    float d11 = dot(V1, V1);
    float d22 = dot(V2, V2);
    float d12 = dot(V1, V2);
    if (abs(d12) / sqrt(d11 * d22) > 0.0001)
    {
        float tr = d11 + d22;
        float det = -d12 * d12 + d11 * d22;

        // use sqrt matrix to solve for eigenvalues
        det = sqrt(det);
        float u = 0.5 * sqrt(tr - 2.0 * det);
        float v = 0.5 * sqrt(tr + 2.0 * det);
        float e_max = (u + v) * (u + v);
        float e_min = (u - v) * (u - v);

        vec3 V1_, V2_;

        if (d11 > d22)
        {
            V1_ = d12 * V1 + (e_max - d11) * V2;
            V2_ = d12 * V1 + (e_min - d11) * V2;
        }
        else
        {
            V1_ = d12*V2 + (e_max - d22)*V1;
            V2_ = d12*V2 + (e_min - d22)*V1;
        }

        a = 1.0 / e_max;
        b = 1.0 / e_min;
        V1 = normalize(V1_);
        V2 = normalize(V2_);
    }
    else
    {
        a = 1.0 / dot(V1, V1);
        b = 1.0 / dot(V2, V2);
        V1 *= sqrt(a);
        V2 *= sqrt(b);
    }

    vec3 V3 = normalize(cross(V1, V2));
    if (dot(C, V3) < 0.0)
        V3 *= -1.0;

    float L  = dot(V3, C);
    float x0 = dot(V1, C) / L;
    float y0 = dot(V2, C) / L;

    float E1 = inversesqrt(a);
    float E2 = inversesqrt(b);

    a *= L * L;
    b *= L * L;

    float c0 = a * b;
    float c1 = a * b * (1.0 + x0 * x0 + y0 * y0) - a - b;
    float c2 = 1.0 - a * (1.0 + x0 * x0) - b * (1.0 + y0 * y0);
    float c3 = 1.0;

    vec3 roots = SolveCubic(vec4(c0, c1, c2, c3));
    float e1 = roots.x;
    float e2 = roots.y;
    float e3 = roots.z;

    vec3 avgDir = vec3(a * x0 / (a - e2), b * y0 / (b - e2), 1.0);

    mat3 rotate = mat3(V1, V2, V3);

    avgDir = rotate * avgDir;
    avgDir = normalize(avgDir);

    float L1 = sqrt(-e2 / e3);
    float L2 = sqrt(-e2 / e1);

    float formFactor = max(0.0, L1 * L2 * inversesqrt((1.0 + L1 * L1) * (1.0 + L2 * L2)));
    
    const float LUT_SIZE = 64.0;
    const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
    const float LUT_BIAS = 0.5 / LUT_SIZE;

    // use tabulated horizon-clipped sphere
    vec2 uv = vec2(avgDir.z * 0.5 + 0.5, formFactor);
    uv = uv*LUT_SCALE + LUT_BIAS;

    float scale = texture2DLod(areaLightsLutTex2, uv, 0.0).w;

    return formFactor*scale;
}

// LTC_EvaluateDisk in some rare cases genereates NaN values in a or b, just before 'float c0 = a * b;'
// Get rid of those Nan values before they propagate further, as in case of bloom / DOF blurs they
// propagate to large areas. I didn't find the actual reason where those come from, so that is still TODO.
// Note that only disk/sphere lights are causing it, so only handle those.
float FixNan(float value) {
    #ifdef WEBGPU
        return value != value ? 0.0 : value;  // isnan does not transpile correctly, use a workaround
    #else
        return isnan(value) ? 0.0 : value;
    #endif
}

float getRectLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDir, vec3 lightDirNorm) {
    return LTC_EvaluateRect( worldNormal, viewDir, vPositionW, mat3( 1.0 ), dLTCCoords );
}

float getDiskLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDir, vec3 lightDirNorm) {
    return FixNan(LTC_EvaluateDisk( worldNormal, viewDir, vPositionW, mat3( 1.0 ), dLTCCoords ));
}

float getSphereLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDir, vec3 lightDirNorm) {
    // NB: this could be improved further with distance based wrap lighting
    float falloff = dSphereRadius / (dot(lightDir, lightDir) + dSphereRadius);
    return FixNan(getLightDiffuse(worldNormal, viewDir, lightDirNorm) * falloff);
}

mat3 getLTCLightInvMat(vec2 uv)
{
    vec4 t1 = texture2DLod(areaLightsLutTex1, uv, 0.0);

    return mat3(
        vec3( t1.x, 0, t1.y ),
        vec3(    0, 1,    0 ),
        vec3( t1.z, 0, t1.w )
    );
}

float calcRectLightSpecular(vec3 worldNormal, vec3 viewDir, vec2 uv) {
    mat3 mInv = getLTCLightInvMat(uv);
    return LTC_EvaluateRect( worldNormal, viewDir, vPositionW, mInv, dLTCCoords );
}

float getRectLightSpecular(vec3 worldNormal, vec3 viewDir) {
    return calcRectLightSpecular(worldNormal, viewDir, dLTCUV);
}

float calcDiskLightSpecular(vec3 worldNormal, vec3 viewDir, vec2 uv) {
    mat3 mInv = getLTCLightInvMat(uv);
    return LTC_EvaluateDisk( worldNormal, viewDir, vPositionW, mInv, dLTCCoords );
}

float getDiskLightSpecular(vec3 worldNormal, vec3 viewDir) {
    return calcDiskLightSpecular(worldNormal, viewDir, dLTCUV);
}

float getSphereLightSpecular(vec3 worldNormal, vec3 viewDir) {
    return calcDiskLightSpecular(worldNormal, viewDir, dLTCUV);
}
`,UP=`
#ifdef STD_METALNESS_CONSTANT
uniform float material_metalness;
#endif

void getMetalness() {
    float metalness = 1.0;

    #ifdef STD_METALNESS_CONSTANT
    metalness *= material_metalness;
    #endif

    #ifdef STD_METALNESS_TEXTURE
    metalness *= texture2DBias({STD_METALNESS_TEXTURE_NAME}, {STD_METALNESS_TEXTURE_UV}, textureBias).{STD_METALNESS_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_METALNESS_VERTEX
    metalness *= saturate(vVertexColor.{STD_METALNESS_VERTEX_CHANNEL});
    #endif

    dMetalness = metalness;
}
`,BP=`
uniform sampler2D texture_msdfMap;

float median(float r, float g, float b) {
    return max(min(r, g), min(max(r, g), b));
}

float map (float min, float max, float v) {
    return (v - min) / (max - min);
}

uniform float font_sdfIntensity; // intensity is used to boost the value read from the SDF, 0 is no boost, 1.0 is max boost
uniform float font_pxrange;      // the number of pixels between inside and outside the font in SDF
uniform float font_textureWidth; // the width of the texture atlas

#ifndef LIT_MSDF_TEXT_ATTRIBUTE
    uniform vec4 outline_color;
    uniform float outline_thickness;
    uniform vec4 shadow_color;
    uniform vec2 shadow_offset;
#else
    varying vec4 outline_color;
    varying float outline_thickness;
    varying vec4 shadow_color;
    varying vec2 shadow_offset;
#endif

vec4 applyMsdf(vec4 color) {

    // Convert to linear space before processing
    // TODO: ideally this would receive the color in linear space, but that would require larger changes
    // on the engine side, with the way premultiplied alpha is handled as well.
    color.rgb = gammaCorrectInput(color.rgb);

    // sample the field
    vec3 tsample = texture2D(texture_msdfMap, vUv0).rgb;
    vec2 uvShdw = vUv0 - shadow_offset;
    vec3 ssample = texture2D(texture_msdfMap, uvShdw).rgb;

    // get the signed distance value
    float sigDist = median(tsample.r, tsample.g, tsample.b);
    float sigDistShdw = median(ssample.r, ssample.g, ssample.b);

    // smoothing limit - smaller value makes for sharper but more aliased text, especially on angles
    // too large value (0.5) creates a dark glow around the letters
    float smoothingMax = 0.2;

    // smoothing depends on size of texture on screen
    vec2 w = fwidth(vUv0);
    float smoothing = clamp(w.x * font_textureWidth / font_pxrange, 0.0, smoothingMax);

    float mapMin = 0.05;
    float mapMax = clamp(1.0 - font_sdfIntensity, mapMin, 1.0);

    // remap to a smaller range (used on smaller font sizes)
    float sigDistInner = map(mapMin, mapMax, sigDist);
    float sigDistOutline = map(mapMin, mapMax, sigDist + outline_thickness);
    sigDistShdw = map(mapMin, mapMax, sigDistShdw + outline_thickness);

    float center = 0.5;
    // calculate smoothing and use to generate opacity
    float inside = smoothstep(center-smoothing, center+smoothing, sigDistInner);
    float outline = smoothstep(center-smoothing, center+smoothing, sigDistOutline);
    float shadow = smoothstep(center-smoothing, center+smoothing, sigDistShdw);

    vec4 tcolor = (outline > inside) ? outline * vec4(outline_color.a * outline_color.rgb, outline_color.a) : vec4(0.0);
    tcolor = mix(tcolor, color, inside);

    vec4 scolor = (shadow > outline) ? shadow * vec4(shadow_color.a * shadow_color.rgb, shadow_color.a) : tcolor;
    tcolor = mix(scolor, tcolor, outline);

    // Convert back to gamma space before returning
    tcolor.rgb = gammaCorrectOutput(tcolor.rgb);
    
    return tcolor;
}
`,zP=`

vec3 getSpecularModulate(in vec3 specularity, in vec3 albedo, in float metalness, in float f0) {
    vec3 dielectricF0 = f0 * specularity;
    return mix(dielectricF0, albedo, metalness);
}

vec3 getAlbedoModulate(in vec3 albedo, in float metalness) {
    return albedo * (1.0 - metalness);
}
`,VP=`

    varying vec2 uv0;

    uniform sampler2DArray morphTexture;
    uniform highp float morphFactor[{MORPH_TEXTURE_MAX_COUNT}];
    uniform highp uint morphIndex[{MORPH_TEXTURE_MAX_COUNT}];
    uniform int count;

    #ifdef MORPH_INT
        uniform vec3 aabbSize;
        uniform vec3 aabbMin;
    #endif

    void main (void) {
        highp vec3 color = vec3(0, 0, 0);

        ivec2 pixelCoords = ivec2(uv0 * vec2(textureSize(morphTexture, 0).xy));
        
        for (int i = 0; i < count; i++) {
            uint textureIndex = morphIndex[i];
            vec3 delta = texelFetch(morphTexture, ivec3(pixelCoords, int(textureIndex)), 0).xyz;
            color += morphFactor[i] * delta;
        }

        #ifdef MORPH_INT
            color = (color - aabbMin) / aabbSize * 65535.0;
            gl_FragColor = uvec4(color, 1u);
        #else
            gl_FragColor = vec4(color, 1.0);
        #endif
    }
`,GP=`
    attribute vec2 vertex_position;
    varying vec2 uv0;
    void main(void) {
        gl_Position = vec4(vertex_position, 0.5, 1.0);
        uv0 = vertex_position.xy * 0.5 + 0.5;
    }
`,HP=`
attribute vec3 vertex_outlineParameters;
attribute vec3 vertex_shadowParameters;

varying vec4 outline_color;
varying float outline_thickness;
varying vec4 shadow_color;
varying vec2 shadow_offset;

void unpackMsdfParams() {
    vec3 little = mod(vertex_outlineParameters, 256.);
    vec3 big = (vertex_outlineParameters - little) / 256.;

    outline_color.rb = little.xy / 255.;
    outline_color.ga = big.xy / 255.;

    // _outlineThicknessScale === 0.2
    outline_thickness = little.z / 255. * 0.2;

    little = mod(vertex_shadowParameters, 256.);
    big = (vertex_shadowParameters - little) / 256.;

    shadow_color.rb = little.xy / 255.;
    shadow_color.ga = big.xy / 255.;

    // vec2(little.z, big.z) / 127. - 1. remaps shadow offset from [0, 254] to [-1, 1]
    // _shadowOffsetScale === 0.005
    shadow_offset = (vec2(little.z, big.z) / 127. - 1.) * 0.005;
}
`,WP=`
mat3 dNormalMatrix;

vec3 getNormal() {
    dNormalMatrix = getNormalMatrix(dModelMatrix);
    vec3 localNormal = getLocalNormal(vertex_normal);
    return normalize(dNormalMatrix * localNormal);
}
`,$P=`

attribute vec3 vertex_normal;

uniform mat3 matrix_normal;

#ifdef MORPHING_NORMAL
    #ifdef MORPHING_INT
        uniform highp usampler2D morphNormalTex;
    #else
        uniform highp sampler2D morphNormalTex;
    #endif
#endif

vec3 getLocalNormal(vec3 vertexNormal) {

    vec3 localNormal = vertex_normal;

    #ifdef MORPHING_NORMAL

        ivec2 morphUV = getTextureMorphCoords();

        #ifdef MORPHING_INT
            vec3 morphNormal = vec3(texelFetch(morphNormalTex, ivec2(morphUV), 0).xyz) / 65535.0 * 2.0 - 1.0;
        #else
            vec3 morphNormal = texelFetch(morphNormalTex, ivec2(morphUV), 0).xyz;
        #endif

        localNormal += morphNormal;

    #endif

    return localNormal;
}

#if defined(SKIN) || defined(BATCH)
    mat3 getNormalMatrix(mat4 modelMatrix) {
        return mat3(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz);
    }
#elif defined(INSTANCING)
    mat3 getNormalMatrix(mat4 modelMatrix) {
        return mat3(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz);
    }
#else
    mat3 getNormalMatrix(mat4 modelMatrix) {
        return matrix_normal;
    }
#endif
`,XP=`
#ifdef STD_NORMAL_TEXTURE
    uniform float material_bumpiness;
#endif

#ifdef STD_NORMALDETAIL_TEXTURE
    uniform float material_normalDetailMapBumpiness;

    vec3 blendNormals(vec3 n1, vec3 n2) {
        // https://blog.selfshadow.com/publications/blending-in-detail/#detail-oriented
        n1 += vec3(0, 0, 1);
        n2 *= vec3(-1, -1, 1);
        return n1 * dot(n1, n2) / n1.z - n2;
    }
#endif

void getNormal() {
#ifdef STD_NORMAL_TEXTURE
    vec3 normalMap = {STD_NORMAL_TEXTURE_DECODE}(texture2DBias({STD_NORMAL_TEXTURE_NAME}, {STD_NORMAL_TEXTURE_UV}, textureBias));
    normalMap = mix(vec3(0.0, 0.0, 1.0), normalMap, material_bumpiness);

    #ifdef STD_NORMALDETAIL_TEXTURE
        vec3 normalDetailMap = {STD_NORMALDETAIL_TEXTURE_DECODE}(texture2DBias({STD_NORMALDETAIL_TEXTURE_NAME}, {STD_NORMALDETAIL_TEXTURE_UV}, textureBias));
        normalDetailMap = mix(vec3(0.0, 0.0, 1.0), normalDetailMap, material_normalDetailMapBumpiness);
        normalMap = blendNormals(normalMap, normalDetailMap);
    #endif

    dNormalW = normalize(dTBN * normalMap);
#else
    dNormalW = dVertexNormalW;
#endif
}
`,qP=`
uniform float material_opacity;

void getOpacity() {
    dAlpha = material_opacity;

    #ifdef STD_OPACITY_TEXTURE
    dAlpha *= texture2DBias({STD_OPACITY_TEXTURE_NAME}, {STD_OPACITY_TEXTURE_UV}, textureBias).{STD_OPACITY_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_OPACITY_VERTEX
    dAlpha *= clamp(vVertexColor.{STD_OPACITY_VERTEX_CHANNEL}, 0.0, 1.0);
    #endif
}
`,jP=`

#if STD_OPACITY_DITHER == BAYER8
    #include "bayerPS"
#endif

uniform vec4 blueNoiseJitter;

#if STD_OPACITY_DITHER == BLUENOISE
    uniform sampler2D blueNoiseTex32;
#endif

void opacityDither(float alpha, float id) {
    #if STD_OPACITY_DITHER == BAYER8

        float noise = bayer8(floor(mod(gl_FragCoord.xy + blueNoiseJitter.xy + id, 8.0))) / 64.0;

    #else

        #if STD_OPACITY_DITHER == BLUENOISE
            vec2 uv = fract(gl_FragCoord.xy / 32.0 + blueNoiseJitter.xy + id);
            float noise = texture2DLod(blueNoiseTex32, uv, 0.0).y;
        #endif

        #if STD_OPACITY_DITHER == IGNNOISE
            // based on https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/
            vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);
            float noise = fract(magic.z * fract(dot(gl_FragCoord.xy + blueNoiseJitter.xy + id, magic.xy)));
        #endif

    #endif

    // convert the noise to linear space, as that is specified in sRGB space (stores perceptual values)
    noise = pow(noise, 2.2);

    if (alpha < noise)
        discard;
}
`,YP=`
`,KP=`

#if LIT_BLEND_TYPE == NORMAL || LIT_BLEND_TYPE == ADDITIVEALPHA || defined(LIT_ALPHA_TO_COVERAGE)

    gl_FragColor.a = litArgs_opacity;

#elif LIT_BLEND_TYPE == PREMULTIPLIED

    gl_FragColor.rgb *= litArgs_opacity;
    gl_FragColor.a = litArgs_opacity;

#else

    gl_FragColor.a = 1.0;

#endif
`,ZP=`
varying vec2 vUv0;

uniform sampler2D source;

void main(void) {
    gl_FragColor = texture2D(source, vUv0);
}
`,QP=`

uniform vec3 material_sheen;

void getSheen() {
    vec3 sheenColor = material_sheen;

    #ifdef STD_SHEEN_TEXTURE
    sheenColor *= {STD_SHEEN_TEXTURE_DECODE}(texture2DBias({STD_SHEEN_TEXTURE_NAME}, {STD_SHEEN_TEXTURE_UV}, textureBias)).{STD_SHEEN_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_SHEEN_VERTEX
    sheenColor *= saturate(vVertexColor.{STD_SHEEN_VERTEX_CHANNEL});
    #endif

    sSpecularity = sheenColor;
}
`,JP=`
uniform float material_sheenGloss;

void getSheenGlossiness() {
    float sheenGlossiness = material_sheenGloss;

    #ifdef STD_SHEENGLOSS_TEXTURE
    sheenGlossiness *= texture2DBias({STD_SHEENGLOSS_TEXTURE_NAME}, {STD_SHEENGLOSS_TEXTURE_UV}, textureBias).{STD_SHEENGLOSS_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_SHEENGLOSS_VERTEX
    sheenGlossiness *= saturate(vVertexColor.{STD_SHEENGLOSS_VERTEX_CHANNEL});
    #endif

    #ifdef STD_SHEENGLOSS_INVERT
    sheenGlossiness = 1.0 - sheenGlossiness;
    #endif

    sGlossiness = sheenGlossiness + 0.0000001;
}
`,e1=`
uniform float material_heightMapFactor;

void getParallax() {
    float parallaxScale = material_heightMapFactor;

    float height = texture2DBias({STD_HEIGHT_TEXTURE_NAME}, {STD_HEIGHT_TEXTURE_UV}, textureBias).{STD_HEIGHT_TEXTURE_CHANNEL};
    height = height * parallaxScale - parallaxScale * 0.5;
    vec3 viewDirT = dViewDirW * dTBN;

    viewDirT.z += 0.42;
    dUvOffset = height * (viewDirT.xy / viewDirT.z);
}
`,t1=`
uniform uint meshInstanceId;

vec4 getPickOutput() {
    const vec4 inv = vec4(1.0 / 255.0);
    const uvec4 shifts = uvec4(16, 8, 0, 24);
    uvec4 col = (uvec4(meshInstanceId) >> shifts) & uvec4(0xff);
    return vec4(col) * inv;
}
`,s1=`
void getReflDir(vec3 worldNormal, vec3 viewDir, float gloss, mat3 tbn) {
    dReflDirW = normalize(-reflect(viewDir, worldNormal));
}
`,i1=`
void getReflDir(vec3 worldNormal, vec3 viewDir, float gloss, mat3 tbn) {
    float roughness = sqrt(1.0 - min(gloss, 1.0));

    vec2 direction = dAnisotropyRotation;
    vec3 anisotropicT = normalize(tbn * vec3(direction, 0.0));
    vec3 anisotropicB = normalize(cross(tbn[2], anisotropicT));

    float anisotropy = dAnisotropy;
    vec3 anisotropicDirection = anisotropicB;
    vec3 anisotropicTangent = cross(anisotropicDirection, viewDir);
    vec3 anisotropicNormal = cross(anisotropicTangent, anisotropicDirection);
    float bendFactor = 1.0 - anisotropy * (1.0 - roughness);
    float bendFactor4 = bendFactor * bendFactor * bendFactor * bendFactor;
    vec3 bentNormal = normalize(mix(normalize(anisotropicNormal), normalize(worldNormal), bendFactor4));
    dReflDirW = reflect(-viewDir, bentNormal);
}
`,r1=`
#ifdef LIT_CLEARCOAT
void addReflectionCC(vec3 reflDir, float gloss) {
    ccReflection += calcReflection(reflDir, gloss);
}
#endif
`,a1=`
uniform samplerCube texture_cubeMap;
uniform float material_reflectivity;

vec3 calcReflection(vec3 reflDir, float gloss) {
    vec3 lookupVec = cubeMapProject(reflDir);
    lookupVec.x *= -1.0;
    return {reflectionDecode}(textureCube(texture_cubeMap, lookupVec));
}

void addReflection(vec3 reflDir, float gloss) {   
    dReflection += vec4(calcReflection(reflDir, gloss), material_reflectivity);
}
`,n1=`
#ifndef ENV_ATLAS
    #define ENV_ATLAS
    uniform sampler2D texture_envAtlas;
#endif
uniform samplerCube texture_cubeMap;
uniform float material_reflectivity;

vec3 calcReflection(vec3 reflDir, float gloss) {
    vec3 dir = cubeMapProject(reflDir) * vec3(-1.0, 1.0, 1.0);
    vec2 uv = toSphericalUv(dir);

    // calculate roughness level
    float level = saturate(1.0 - gloss) * 5.0;
    float ilevel = floor(level);
    float flevel = level - ilevel;

    vec3 sharp = {reflectionCubemapDecode}(textureCube(texture_cubeMap, dir));
    vec3 roughA = {reflectionDecode}(texture2D(texture_envAtlas, mapRoughnessUv(uv, ilevel)));
    vec3 roughB = {reflectionDecode}(texture2D(texture_envAtlas, mapRoughnessUv(uv, ilevel + 1.0)));

    return processEnvironment(mix(sharp, mix(roughA, roughB, flevel), min(level, 1.0)));
}

void addReflection(vec3 reflDir, float gloss) {   
    dReflection += vec4(calcReflection(reflDir, gloss), material_reflectivity);
}
`,o1=`
#ifndef ENV_ATLAS
#define ENV_ATLAS
    uniform sampler2D texture_envAtlas;
#endif
uniform float material_reflectivity;

// calculate mip level for shiny reflection given equirect coords uv.
float shinyMipLevel(vec2 uv) {
    vec2 dx = dFdx(uv);
    vec2 dy = dFdy(uv);

    // calculate second dF at 180 degrees
    vec2 uv2 = vec2(fract(uv.x + 0.5), uv.y);
    vec2 dx2 = dFdx(uv2);
    vec2 dy2 = dFdy(uv2);

    // calculate min of both sets of dF to handle discontinuity at the azim edge
    float maxd = min(max(dot(dx, dx), dot(dy, dy)), max(dot(dx2, dx2), dot(dy2, dy2)));

    return clamp(0.5 * log2(maxd) - 1.0 + textureBias, 0.0, 5.0);
}

vec3 calcReflection(vec3 reflDir, float gloss) {
    vec3 dir = cubeMapProject(reflDir) * vec3(-1.0, 1.0, 1.0);
    vec2 uv = toSphericalUv(dir);

    // calculate roughness level
    float level = saturate(1.0 - gloss) * 5.0;
    float ilevel = floor(level);

    // accessing the shiny (top level) reflection - perform manual mipmap lookup
    float level2 = shinyMipLevel(uv * atlasSize);
    float ilevel2 = floor(level2);

    vec2 uv0, uv1;
    float weight;
    if (ilevel == 0.0) {
        uv0 = mapShinyUv(uv, ilevel2);
        uv1 = mapShinyUv(uv, ilevel2 + 1.0);
        weight = level2 - ilevel2;
    } else {
        // accessing rough reflection - just sample the same part twice
        uv0 = uv1 = mapRoughnessUv(uv, ilevel);
        weight = 0.0;
    }

    vec3 linearA = {reflectionDecode}(texture2D(texture_envAtlas, uv0));
    vec3 linearB = {reflectionDecode}(texture2D(texture_envAtlas, uv1));
    vec3 linear0 = mix(linearA, linearB, weight);
    vec3 linear1 = {reflectionDecode}(texture2D(texture_envAtlas, mapRoughnessUv(uv, ilevel + 1.0)));

    return processEnvironment(mix(linear0, linear1, level - ilevel));
}

void addReflection(vec3 reflDir, float gloss) {   
    dReflection += vec4(calcReflection(reflDir, gloss), material_reflectivity);
}
`,l1=`
#ifndef VIEWMATRIX
    #define VIEWMATRIX
    uniform mat4 matrix_view;
#endif
uniform sampler2D texture_sphereMap;
uniform float material_reflectivity;

vec3 calcReflection(vec3 reflDir, float gloss) {
    vec3 reflDirV = (mat3(matrix_view) * reflDir);

    float m = 2.0 * sqrt(dot(reflDirV.xy, reflDirV.xy) + (reflDirV.z + 1.0) * (reflDirV.z + 1.0));
    vec2 sphereMapUv = reflDirV.xy / m + 0.5;

    return {reflectionDecode}(texture2D(texture_sphereMap, sphereMapUv));
}

void addReflection(vec3 reflDir, float gloss) {   
    dReflection += vec4(calcReflection(reflDir, gloss), material_reflectivity);
}
`,h1=`

void addReflectionSheen(vec3 worldNormal, vec3 viewDir, float gloss) {
    float NoV = dot(worldNormal, viewDir);
    float alphaG = gloss * gloss;

    // Avoid using a LUT and approximate the values analytically
    float a = gloss < 0.25 ? -339.2 * alphaG + 161.4 * gloss - 25.9 : -8.48 * alphaG + 14.3 * gloss - 9.95;
    float b = gloss < 0.25 ? 44.0 * alphaG - 23.7 * gloss + 3.26 : 1.97 * alphaG - 3.27 * gloss + 0.72;
    float DG = exp( a * NoV + b ) + ( gloss < 0.25 ? 0.0 : 0.1 * ( gloss - 0.25 ) );
    sReflection += calcReflection(worldNormal, 0.0) * saturate(DG);
}
`,c1=`
vec3 refract2(vec3 viewVec, vec3 normal, float IOR) {
    float vn = dot(viewVec, normal);
    float k = 1.0 - IOR * IOR * (1.0 - vn * vn);
    vec3 refrVec = IOR * viewVec - (IOR * vn + sqrt(k)) * normal;
    return refrVec;
}

void addRefraction(
    vec3 worldNormal, 
    vec3 viewDir, 
    float thickness, 
    float gloss, 
    vec3 specularity, 
    vec3 albedo, 
    float transmission,
    float refractionIndex,
    float dispersion
#if defined(LIT_IRIDESCENCE)
    , vec3 iridescenceFresnel,
    float iridescenceIntensity
#endif 
) {
    // use same reflection code with refraction vector
    vec4 tmpRefl = dReflection;
    vec3 reflectionDir = refract2(-viewDir, worldNormal, refractionIndex);
    dReflection = vec4(0);
    addReflection(reflectionDir, gloss);
    dDiffuseLight = mix(dDiffuseLight, dReflection.rgb * albedo, transmission);
    dReflection = tmpRefl;
}
`,d1=`
uniform float material_invAttenuationDistance;
uniform vec3 material_attenuation;

vec3 evalRefractionColor(vec3 refractionVector, float gloss, float refractionIndex) {

    // The refraction point is the entry point + vector to exit point
    vec4 pointOfRefraction = vec4(vPositionW + refractionVector, 1.0);

    // Project to texture space so we can sample it
    vec4 projectionPoint = matrix_viewProjection * pointOfRefraction;

    // use built-in getGrabScreenPos function to convert screen position to grab texture uv coords
    vec2 uv = getGrabScreenPos(projectionPoint);

    // Use IOR and roughness to select mip
    float iorToRoughness = (1.0 - gloss) * clamp((1.0 / refractionIndex) * 2.0 - 2.0, 0.0, 1.0);
    float refractionLod = log2(uScreenSize.x) * iorToRoughness;
    vec3 refraction = texture2DLod(uSceneColorMap, uv, refractionLod).rgb;

    return refraction;
}

void addRefraction(
    vec3 worldNormal, 
    vec3 viewDir, 
    float thickness, 
    float gloss, 
    vec3 specularity, 
    vec3 albedo, 
    float transmission,
    float refractionIndex,
    float dispersion
#if defined(LIT_IRIDESCENCE)
    , vec3 iridescenceFresnel,
    float iridescenceIntensity
#endif
) {

    // Extract scale from the model transform
    vec3 modelScale;
    modelScale.x = length(vec3(matrix_model[0].xyz));
    modelScale.y = length(vec3(matrix_model[1].xyz));
    modelScale.z = length(vec3(matrix_model[2].xyz));

    // Calculate the refraction vector, scaled by the thickness and scale of the object
    vec3 scale = thickness * modelScale;
    vec3 refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndex)) * scale;
    vec3 refraction = evalRefractionColor(refractionVector, gloss, refractionIndex);

    #ifdef LIT_DISPERSION
        // based on the dispersion material property, calculate modified refraction index values
        // for R and B channels and evaluate the refraction color for them.
        float halfSpread = (1.0 / refractionIndex - 1.0) * 0.025 * dispersion;

        float refractionIndexR = refractionIndex - halfSpread;
        refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndexR)) * scale;
        refraction.r = evalRefractionColor(refractionVector, gloss, refractionIndexR).r;

        float refractionIndexB = refractionIndex + halfSpread;
        refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndexB)) * scale;
        refraction.b = evalRefractionColor(refractionVector, gloss, refractionIndexB).b;
    #endif

    // Transmittance is our final refraction color
    vec3 transmittance;
    if (material_invAttenuationDistance != 0.0)
    {
        vec3 attenuation = -log(material_attenuation) * material_invAttenuationDistance;
        transmittance = exp(-attenuation * length(refractionVector));
    }
    else
    {
        transmittance = refraction;
    }

    // Apply fresnel effect on refraction
    vec3 fresnel = vec3(1.0) - 
        getFresnel(
            dot(viewDir, worldNormal), 
            gloss, 
            specularity
        #if defined(LIT_IRIDESCENCE)
            , iridescenceFresnel,
            iridescenceIntensity
        #endif
        );
    dDiffuseLight = mix(dDiffuseLight, refraction * transmittance * fresnel, transmission);
}
`,f1=`

varying vec2 vUv0;

// source
#ifdef CUBEMAP_SOURCE
    uniform samplerCube sourceCube;
#else
    uniform sampler2D sourceTex;
#endif

#ifdef USE_SAMPLES_TEX
    // samples
    uniform sampler2D samplesTex;
    uniform vec2 samplesTexInverseSize;
#endif

// params:
// x - target cubemap face 0..6
// y - target image total pixels
// z - source cubemap size
uniform vec3 params;

float targetFace() { return params.x; }
float targetTotalPixels() { return params.y; }
float sourceTotalPixels() { return params.z; }

float PI = 3.141592653589793;

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

#include "decodePS"
#include "encodePS"

//-- supported projections

vec3 modifySeams(vec3 dir, float scale) {
    vec3 adir = abs(dir);
    float M = max(max(adir.x, adir.y), adir.z);
    return dir / M * vec3(
        adir.x == M ? 1.0 : scale,
        adir.y == M ? 1.0 : scale,
        adir.z == M ? 1.0 : scale
    );
}

vec2 toSpherical(vec3 dir) {
    return vec2(dir.xz == vec2(0.0) ? 0.0 : atan(dir.x, dir.z), asin(dir.y));
}

vec3 fromSpherical(vec2 uv) {
    return vec3(cos(uv.y) * sin(uv.x),
                sin(uv.y),
                cos(uv.y) * cos(uv.x));
}

vec3 getDirectionEquirect() {
    return fromSpherical((vec2(vUv0.x, 1.0 - vUv0.y) * 2.0 - 1.0) * vec2(PI, PI * 0.5));
}

// octahedral code, based on https://jcgt.org/published/0003/02/01/
// "Survey of Efficient Representations for Independent Unit Vectors" by Cigolle, Donow, Evangelakos, Mara, McGuire, Meyer

float signNotZero(float k){
    return(k >= 0.0) ? 1.0 : -1.0;
}

vec2 signNotZero(vec2 v) {
    return vec2(signNotZero(v.x), signNotZero(v.y));
}

// Returns a unit vector. Argument o is an octahedral vector packed via octEncode, on the [-1, +1] square
vec3 octDecode(vec2 o) {
    vec3 v = vec3(o.x, 1.0 - abs(o.x) - abs(o.y), o.y);
    if (v.y < 0.0) {
        v.xz = (1.0 - abs(v.zx)) * signNotZero(v.xz);
    }
    return normalize(v);
}

vec3 getDirectionOctahedral() {
    return octDecode(vec2(vUv0.x, 1.0 - vUv0.y) * 2.0 - 1.0);
}

// Assumes that v is a unit vector. The result is an octahedral vector on the [-1, +1] square
vec2 octEncode(in vec3 v) {
    float l1norm = abs(v.x) + abs(v.y) + abs(v.z);
    vec2 result = v.xz * (1.0 / l1norm);
    if (v.y < 0.0) {
        result = (1.0 - abs(result.yx)) * signNotZero(result.xy);
    }
    return result;
}

/////////////////////////////////////////////////////////////////////

#ifdef CUBEMAP_SOURCE
    vec4 sampleCubemap(vec3 dir) {
        return textureCube(sourceCube, modifySeams(dir, 1.0));
    }

    vec4 sampleCubemap(vec2 sph) {
        return sampleCubemap(fromSpherical(sph));
    }

    vec4 sampleCubemap(vec3 dir, float mipLevel) {
        return textureCubeLod(sourceCube, modifySeams(dir, 1.0), mipLevel);
    }

    vec4 sampleCubemap(vec2 sph, float mipLevel) {
        return sampleCubemap(fromSpherical(sph), mipLevel);
    }
#else

    vec4 sampleEquirect(vec2 sph) {
        vec2 uv = sph / vec2(PI * 2.0, PI) + 0.5;
        return texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));
    }

    vec4 sampleEquirect(vec3 dir) {
        return sampleEquirect(toSpherical(dir));
    }

    vec4 sampleEquirect(vec2 sph, float mipLevel) {
        vec2 uv = sph / vec2(PI * 2.0, PI) + 0.5;
        return texture2DLod(sourceTex, vec2(uv.x, 1.0 - uv.y), mipLevel);
    }

    vec4 sampleEquirect(vec3 dir, float mipLevel) {
        return sampleEquirect(toSpherical(dir), mipLevel);
    }

    vec4 sampleOctahedral(vec3 dir) {
        vec2 uv = octEncode(dir) * 0.5 + 0.5;
        return texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));
    }

    vec4 sampleOctahedral(vec2 sph) {
        return sampleOctahedral(fromSpherical(sph));
    }

    vec4 sampleOctahedral(vec3 dir, float mipLevel) {
        vec2 uv = octEncode(dir) * 0.5 + 0.5;
        return texture2DLod(sourceTex, vec2(uv.x, 1.0 - uv.y), mipLevel);
    }

    vec4 sampleOctahedral(vec2 sph, float mipLevel) {
        return sampleOctahedral(fromSpherical(sph), mipLevel);
    }

#endif

vec3 getDirectionCubemap() {
    vec2 st = vUv0 * 2.0 - 1.0;
    float face = targetFace();

    vec3 vec;
    if (face == 0.0) {
        vec = vec3(1, -st.y, -st.x);
    } else if (face == 1.0) {
        vec = vec3(-1, -st.y, st.x);
    } else if (face == 2.0) {
        vec = vec3(st.x, 1, st.y);
    } else if (face == 3.0) {
        vec = vec3(st.x, -1, -st.y);
    } else if (face == 4.0) {
        vec = vec3(st.x, -st.y, 1);
    } else {
        vec = vec3(-st.x, -st.y, -1);
    }

    return normalize(modifySeams(vec, 1.0));
}

mat3 matrixFromVector(vec3 n) { // frisvad
    float a = 1.0 / (1.0 + n.z);
    float b = -n.x * n.y * a;
    vec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);
    vec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);
    return mat3(b1, b2, n);
}

mat3 matrixFromVectorSlow(vec3 n) {
    vec3 up = (1.0 - abs(n.y) <= 0.0000001) ? vec3(0.0, 0.0, n.y > 0.0 ? 1.0 : -1.0) : vec3(0.0, 1.0, 0.0);
    vec3 x = normalize(cross(up, n));
    vec3 y = cross(n, x);
    return mat3(x, y, n);
}

vec4 reproject() {
    if ({NUM_SAMPLES} <= 1) {
        // single sample
        return {ENCODE_FUNC}({DECODE_FUNC}({SOURCE_FUNC}({TARGET_FUNC}())));
    } else {
        // multi sample
        vec3 t = {TARGET_FUNC}();
        vec3 tu = dFdx(t);
        vec3 tv = dFdy(t);

        vec3 result = vec3(0.0);
        for (float u = 0.0; u < {NUM_SAMPLES_SQRT}; ++u) {
            for (float v = 0.0; v < {NUM_SAMPLES_SQRT}; ++v) {
                result += {DECODE_FUNC}({SOURCE_FUNC}(normalize(t +
                                                            tu * (u / {NUM_SAMPLES_SQRT} - 0.5) +
                                                            tv * (v / {NUM_SAMPLES_SQRT} - 0.5))));
            }
        }
        return {ENCODE_FUNC}(result / ({NUM_SAMPLES_SQRT} * {NUM_SAMPLES_SQRT}));
    }
}

vec4 unpackFloat = vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0);

#ifdef USE_SAMPLES_TEX
    void unpackSample(int i, out vec3 L, out float mipLevel) {
        float u = (float(i * 4) + 0.5) * samplesTexInverseSize.x;
        float v = (floor(u) + 0.5) * samplesTexInverseSize.y;

        vec4 raw;
        raw.x = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;
        raw.y = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;
        raw.z = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;
        raw.w = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat);

        L.xyz = raw.xyz * 2.0 - 1.0;
        mipLevel = raw.w * 8.0;
    }

    // convolve an environment given pre-generated samples
    vec4 prefilterSamples() {
        // construct vector space given target direction
        mat3 vecSpace = matrixFromVectorSlow({TARGET_FUNC}());

        vec3 L;
        float mipLevel;

        vec3 result = vec3(0.0);
        float totalWeight = 0.0;
        for (int i = 0; i < {NUM_SAMPLES}; ++i) {
            unpackSample(i, L, mipLevel);
            result += {DECODE_FUNC}({SOURCE_FUNC}(vecSpace * L, mipLevel)) * L.z;
            totalWeight += L.z;
        }

        return {ENCODE_FUNC}(result / totalWeight);
    }

    // unweighted version of prefilterSamples
    vec4 prefilterSamplesUnweighted() {
        // construct vector space given target direction
        mat3 vecSpace = matrixFromVectorSlow({TARGET_FUNC}());

        vec3 L;
        float mipLevel;

        vec3 result = vec3(0.0);
        float totalWeight = 0.0;
        for (int i = 0; i < {NUM_SAMPLES}; ++i) {
            unpackSample(i, L, mipLevel);
            result += {DECODE_FUNC}({SOURCE_FUNC}(vecSpace * L, mipLevel));
        }

        return {ENCODE_FUNC}(result / float({NUM_SAMPLES}));
    }
#endif

void main(void) {
    gl_FragColor = {PROCESS_FUNC}();
}
`,u1=`
attribute vec2 vertex_position;
uniform vec4 uvMod;
varying vec2 vUv0;

void main(void) {
    gl_Position = vec4(vertex_position, 0.5, 1.0);
    vUv0 = getImageEffectUV((vertex_position.xy * 0.5 + 0.5) * uvMod.xy + uvMod.zw);
}
`,p1=`
uniform highp sampler2D uSceneDepthMap;

#ifndef SCREENSIZE
    #define SCREENSIZE
    uniform vec4 uScreenSize;
#endif

#ifndef VIEWMATRIX
    #define VIEWMATRIX
    uniform mat4 matrix_view;
#endif

#ifndef LINEARIZE_DEPTH
    #define LINEARIZE_DEPTH
    
    #ifndef CAMERAPLANES
        #define CAMERAPLANES
        uniform vec4 camera_params; // x: 1 / camera_far,      y: camera_far,     z: camera_near,        w: is_ortho
    #endif

    float linearizeDepth(float z) {
        if (camera_params.w == 0.0)
            return (camera_params.z * camera_params.y) / (camera_params.y + z * (camera_params.z - camera_params.y));
        else
            return camera_params.z + z * (camera_params.y - camera_params.z);
    }
#endif

float delinearizeDepth(float linearDepth) {
    if (camera_params.w == 0.0) {
        return (camera_params.y * (camera_params.z - linearDepth)) / (linearDepth * (camera_params.z - camera_params.y));
    } else {
        return (linearDepth - camera_params.z) / (camera_params.y - camera_params.z);
    }
}

// Retrieves rendered linear camera depth by UV
float getLinearScreenDepth(vec2 uv) {
    #ifdef SCENE_DEPTHMAP_LINEAR
        #ifdef SCENE_DEPTHMAP_FLOAT
            return texture2D(uSceneDepthMap, uv).r;
        #else

            ivec2 textureSize = textureSize(uSceneDepthMap, 0);
            ivec2 texel = ivec2(uv * vec2(textureSize));
            vec4 data = texelFetch(uSceneDepthMap, texel, 0);

            uint intBits = 
                (uint(data.r * 255.0) << 24u) |
                (uint(data.g * 255.0) << 16u) |
                (uint(data.b * 255.0) << 8u) |
                uint(data.a * 255.0);

            return uintBitsToFloat(intBits);
        #endif
    #else
        return linearizeDepth(texture2D(uSceneDepthMap, uv).r);
    #endif
}

#ifndef VERTEXSHADER
    // Retrieves rendered linear camera depth under the current pixel
    float getLinearScreenDepth() {
        vec2 uv = gl_FragCoord.xy * uScreenSize.zw;
        return getLinearScreenDepth(uv);
    }
#endif

// Generates linear camera depth for the given world position
float getLinearDepth(vec3 pos) {
    return -(matrix_view * vec4(pos, 1.0)).z;
}
`,m1=`

// function which selects a shadow projection matrix index based on cascade distances 
int getShadowCascadeIndex(vec4 shadowCascadeDistances, int shadowCascadeCount) {

    // depth in 0 .. far plane range
    float depth = 1.0 / gl_FragCoord.w;

    // 1.0 if depth >= distance, 0.0 otherwise
    vec4 comparisons = step(shadowCascadeDistances, vec4(depth));

    // sum is the index
    int cascadeIndex = int(dot(comparisons, vec4(1.0)));

    // limit to actual number of used cascades
    return min(cascadeIndex, shadowCascadeCount - 1);
}

// function which modifies cascade index to dither between cascades
int ditherShadowCascadeIndex(int cascadeIndex, vec4 shadowCascadeDistances, int shadowCascadeCount, float blendFactor) {
 
    if (cascadeIndex < shadowCascadeCount - 1) {
        float currentRangeEnd = shadowCascadeDistances[cascadeIndex];
        float transitionStart = blendFactor * currentRangeEnd; // Start overlap factor away from the end distance
        float depth = 1.0 / gl_FragCoord.w;

        if (depth > transitionStart) {
            // Calculate a transition factor (0.0 to 1.0) within the overlap range
            float transitionFactor = smoothstep(transitionStart, currentRangeEnd, depth);

            // Add pseudo-random dithering
            // TODO: replace by user selectable dithering method
            float dither = fract(sin(dot(gl_FragCoord.xy, vec2(12.9898, 78.233))) * 43758.5453);
            if (dither < transitionFactor) {
                cascadeIndex += 1;
            }
        }
    }

    return cascadeIndex;
}

vec3 fadeShadow(vec3 shadowCoord, vec4 shadowCascadeDistances) {                  
    // if the pixel is past the shadow distance, remove shadow
    // this enforces straight line instead of corner of shadow which moves when camera rotates  
    float depth = 1.0 / gl_FragCoord.w;
    if (depth > shadowCascadeDistances.w) {
        shadowCoord.z = -9999999.0;
    }

    return shadowCoord;
}
`,_1=`

// ------ VSM Shared ------

float linstep(float a, float b, float v) {
    return saturate((v - a) / (b - a));
}

float reduceLightBleeding(float pMax, float amount) {
   // Remove the [0, amount] tail and linearly rescale (amount, 1].
   return linstep(amount, 1.0, pMax);
}

float chebyshevUpperBound(vec2 moments, float mean, float minVariance, float lightBleedingReduction) {
    // Compute variance
    float variance = moments.y - (moments.x * moments.x);
    variance = max(variance, minVariance);

    // Compute probabilistic upper bound
    float d = mean - moments.x;
    float pMax = variance / (variance + (d * d));

    pMax = reduceLightBleeding(pMax, lightBleedingReduction);

    // One-tailed Chebyshev
    return (mean <= moments.x ? 1.0 : pMax);
}

float calculateEVSM(vec3 moments, float Z, float vsmBias, float exponent) {
    Z = 2.0 * Z - 1.0;
    float warpedDepth = exp(exponent * Z);

    moments.xy += vec2(warpedDepth, warpedDepth*warpedDepth) * (1.0 - moments.z);

    float VSMBias = vsmBias;//0.01 * 0.25;
    float depthScale = VSMBias * exponent * warpedDepth;
    float minVariance1 = depthScale * depthScale;
    return chebyshevUpperBound(moments.xy, warpedDepth, minVariance1, 0.1);
}

// ------ VSM 16 ------

float VSM16(TEXTURE_ACCEPT(tex), vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {
    vec3 moments = texture2DLod(tex, texCoords, 0.0).xyz;
    return calculateEVSM(moments, Z, vsmBias, exponent);
}

float getShadowVSM16(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, float exponent) {
    return VSM16(TEXTURE_PASS(shadowMap), shadowCoord.xy, shadowParams.x, shadowCoord.z, shadowParams.y, exponent);
}

float getShadowSpotVSM16(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, float exponent, vec3 lightDir) {
    return VSM16(TEXTURE_PASS(shadowMap), shadowCoord.xy, shadowParams.x, length(lightDir) * shadowParams.w + shadowParams.z, shadowParams.y, exponent);
}

// ------ VSM 32 ------

float VSM32(TEXTURE_ACCEPT(tex), vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {

    #ifdef CAPS_TEXTURE_FLOAT_FILTERABLE
        vec3 moments = texture2DLod(tex, texCoords, 0.0).xyz;
    #else
        // manual bilinear filtering
        float pixelSize = 1.0 / resolution;
        texCoords -= vec2(pixelSize);
        vec3 s00 = texture2DLod(tex, texCoords, 0.0).xyz;
        vec3 s10 = texture2DLod(tex, texCoords + vec2(pixelSize, 0), 0.0).xyz;
        vec3 s01 = texture2DLod(tex, texCoords + vec2(0, pixelSize), 0.0).xyz;
        vec3 s11 = texture2DLod(tex, texCoords + vec2(pixelSize), 0.0).xyz;
        vec2 fr = fract(texCoords * resolution);
        vec3 h0 = mix(s00, s10, fr.x);
        vec3 h1 = mix(s01, s11, fr.x);
        vec3 moments = mix(h0, h1, fr.y);
    #endif

    return calculateEVSM(moments, Z, vsmBias, exponent);
}

float getShadowVSM32(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, float exponent) {
    return VSM32(TEXTURE_PASS(shadowMap), shadowCoord.xy, shadowParams.x, shadowCoord.z, shadowParams.y, exponent);
}

float getShadowSpotVSM32(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, float exponent, vec3 lightDir) {
    float Z = length(lightDir) * shadowParams.w + shadowParams.z;
    return VSM32(TEXTURE_PASS(shadowMap), shadowCoord.xy, shadowParams.x, Z, shadowParams.y, exponent);
}
`,g1=`
// ----- Directional/Spot Sampling -----

float getShadowPCF1x1(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
    return textureShadow(shadowMap, shadowCoord);
}

float getShadowSpotPCF1x1(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
    return textureShadow(shadowMap, shadowCoord);
}

// ----- Omni Sampling -----

#ifndef WEBGPU

float getShadowOmniPCF1x1(samplerCubeShadow shadowMap, vec3 shadowCoord, vec4 shadowParams, vec3 lightDir) {
    float shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;
    return texture(shadowMap, vec4(lightDir, shadowZ));
}

#endif
`,S1=`
// ----- Directional/Spot Sampling -----

float _getShadowPCF3x3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec3 shadowParams) {
    float z = shadowCoord.z;
    vec2 uv = shadowCoord.xy * shadowParams.x; // 1 unit - 1 texel
    float shadowMapSizeInv = 1.0 / shadowParams.x;
    vec2 base_uv = floor(uv + 0.5);
    float s = (uv.x + 0.5 - base_uv.x);
    float t = (uv.y + 0.5 - base_uv.y); 
    base_uv -= vec2(0.5);
    base_uv *= shadowMapSizeInv;

    float sum = 0.0;

    float uw0 = (3.0 - 2.0 * s);
    float uw1 = (1.0 + 2.0 * s);

    float u0 = (2.0 - s) / uw0 - 1.0;
    float u1 = s / uw1 + 1.0;

    float vw0 = (3.0 - 2.0 * t);
    float vw1 = (1.0 + 2.0 * t);

    float v0 = (2.0 - t) / vw0 - 1.0;
    float v1 = t / vw1 + 1.0;

    u0 = u0 * shadowMapSizeInv + base_uv.x;
    v0 = v0 * shadowMapSizeInv + base_uv.y;

    u1 = u1 * shadowMapSizeInv + base_uv.x;
    v1 = v1 * shadowMapSizeInv + base_uv.y;

    sum += uw0 * vw0 * textureShadow(shadowMap, vec3(u0, v0, z));
    sum += uw1 * vw0 * textureShadow(shadowMap, vec3(u1, v0, z));
    sum += uw0 * vw1 * textureShadow(shadowMap, vec3(u0, v1, z));
    sum += uw1 * vw1 * textureShadow(shadowMap, vec3(u1, v1, z));

    sum *= 1.0f / 16.0;
    return sum;
}

float getShadowPCF3x3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
    return _getShadowPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);
}

float getShadowSpotPCF3x3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
    return _getShadowPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);
}

// ----- Omni Sampling -----

#ifndef WEBGPU

float getShadowOmniPCF3x3(samplerCubeShadow shadowMap, vec4 shadowParams, vec3 dir) {
    
    // Calculate shadow depth from the light direction
    float shadowZ = length(dir) * shadowParams.w + shadowParams.z;

    // offset
    float z = 1.0 / float(textureSize(shadowMap, 0));
    vec3 tc = normalize(dir);

    // average 4 samples - not a strict 3x3 PCF but that's tricky with cubemaps
    mediump vec4 shadows;
    shadows.x = texture(shadowMap, vec4(tc + vec3( z, z, z), shadowZ));
    shadows.y = texture(shadowMap, vec4(tc + vec3(-z,-z, z), shadowZ));
    shadows.z = texture(shadowMap, vec4(tc + vec3(-z, z,-z), shadowZ));
    shadows.w = texture(shadowMap, vec4(tc + vec3( z,-z,-z), shadowZ));

    return dot(shadows, vec4(0.25));
}

float getShadowOmniPCF3x3(samplerCubeShadow shadowMap, vec3 shadowCoord, vec4 shadowParams, vec3 lightDir) {
    return getShadowOmniPCF3x3(shadowMap, shadowParams, lightDir);
}

#endif
`,y1=`
float _getShadowPCF5x5(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec3 shadowParams) {
    // http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/

    float z = shadowCoord.z;
    vec2 uv = shadowCoord.xy * shadowParams.x; // 1 unit - 1 texel
    float shadowMapSizeInv = 1.0 / shadowParams.x;
    vec2 base_uv = floor(uv + 0.5);
    float s = (uv.x + 0.5 - base_uv.x);
    float t = (uv.y + 0.5 - base_uv.y);
    base_uv -= vec2(0.5);
    base_uv *= shadowMapSizeInv;


    float uw0 = (4.0 - 3.0 * s);
    float uw1 = 7.0;
    float uw2 = (1.0 + 3.0 * s);

    float u0 = (3.0 - 2.0 * s) / uw0 - 2.0;
    float u1 = (3.0 + s) / uw1;
    float u2 = s / uw2 + 2.0;

    float vw0 = (4.0 - 3.0 * t);
    float vw1 = 7.0;
    float vw2 = (1.0 + 3.0 * t);

    float v0 = (3.0 - 2.0 * t) / vw0 - 2.0;
    float v1 = (3.0 + t) / vw1;
    float v2 = t / vw2 + 2.0;

    float sum = 0.0;

    u0 = u0 * shadowMapSizeInv + base_uv.x;
    v0 = v0 * shadowMapSizeInv + base_uv.y;

    u1 = u1 * shadowMapSizeInv + base_uv.x;
    v1 = v1 * shadowMapSizeInv + base_uv.y;

    u2 = u2 * shadowMapSizeInv + base_uv.x;
    v2 = v2 * shadowMapSizeInv + base_uv.y;

    sum += uw0 * vw0 * textureShadow(shadowMap, vec3(u0, v0, z));
    sum += uw1 * vw0 * textureShadow(shadowMap, vec3(u1, v0, z));
    sum += uw2 * vw0 * textureShadow(shadowMap, vec3(u2, v0, z));

    sum += uw0 * vw1 * textureShadow(shadowMap, vec3(u0, v1, z));
    sum += uw1 * vw1 * textureShadow(shadowMap, vec3(u1, v1, z));
    sum += uw2 * vw1 * textureShadow(shadowMap, vec3(u2, v1, z));

    sum += uw0 * vw2 * textureShadow(shadowMap, vec3(u0, v2, z));
    sum += uw1 * vw2 * textureShadow(shadowMap, vec3(u1, v2, z));
    sum += uw2 * vw2 * textureShadow(shadowMap, vec3(u2, v2, z));

    sum *= 1.0f / 144.0;
    sum = saturate(sum);

    return sum;
}

float getShadowPCF5x5(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
    return _getShadowPCF5x5(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);
}

float getShadowSpotPCF5x5(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
    return _getShadowPCF5x5(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);
}
`,v1=`

/**
 * PCSS is a shadow sampling method that provides contact hardening soft shadows, used for omni and spot lights.
 * Based on: 
 * - https://www.gamedev.net/tutorials/programming/graphics/effect-area-light-shadows-part-1-pcss-r4971/
 * - https://github.com/pboechat/PCSS 
 */

#define PCSS_SAMPLE_COUNT 16

uniform float pcssDiskSamples[PCSS_SAMPLE_COUNT];
uniform float pcssSphereSamples[PCSS_SAMPLE_COUNT];

vec2 vogelDisk(int sampleIndex, float count, float phi, float r) {
    const float GoldenAngle = 2.4;
    float theta = float(sampleIndex) * GoldenAngle + phi;

    float sine = sin(theta);
    float cosine = cos(theta);
    return vec2(r * cosine, r * sine);
}

vec3 vogelSphere(int sampleIndex, float count, float phi, float r) {
    const float GoldenAngle = 2.4;
    float theta = float(sampleIndex) * GoldenAngle + phi;

    float weight = float(sampleIndex) / count;
    return vec3(cos(theta) * r, weight, sin(theta) * r);
}

float noise(vec2 screenPos) {
    const float PHI = 1.61803398874989484820459;  // Φ = Golden Ratio   
    return fract(sin(dot(screenPos * PHI, screenPos)) * screenPos.x);
}

float viewSpaceDepth(float depth, mat4 invProjection) {
    float z = depth * 2.0 - 1.0;
    vec4 clipSpace = vec4(0.0, 0.0, z, 1.0);
    vec4 viewSpace = invProjection * clipSpace;
    return viewSpace.z;
}

float PCSSBlockerDistance(TEXTURE_ACCEPT(shadowMap), vec2 sampleCoords[PCSS_SAMPLE_COUNT], vec2 shadowCoords, vec2 searchSize, float z, vec4 cameraParams) {

    float blockers = 0.0;
    float averageBlocker = 0.0;
    for (int i = 0; i < PCSS_SAMPLE_COUNT; i++) {
        vec2 offset = sampleCoords[i] * searchSize;
        vec2 sampleUV = shadowCoords + offset;

        float blocker = texture2DLod(shadowMap, sampleUV, 0.0).r;
        float isBlocking = step(blocker, z);
        blockers += isBlocking;
        averageBlocker += blocker * isBlocking;
    }

    if (blockers > 0.0)
        return averageBlocker / blockers;
    return -1.0;
}

float PCSS(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoords, vec4 cameraParams, vec2 shadowSearchArea) {
    float receiverDepth = linearizeDepthWithParams(shadowCoords.z, cameraParams);

    vec2 samplePoints[PCSS_SAMPLE_COUNT];
    const float PI = 3.141592653589793;
    float noise = noise( gl_FragCoord.xy ) * 2.0 * PI;
    for (int i = 0; i < PCSS_SAMPLE_COUNT; i++) {
        float pcssPresample = pcssDiskSamples[i];
        samplePoints[i] = vogelDisk(i, float(PCSS_SAMPLE_COUNT), noise, pcssPresample);
    }

    float averageBlocker = PCSSBlockerDistance(TEXTURE_PASS(shadowMap), samplePoints, shadowCoords.xy, shadowSearchArea, receiverDepth, cameraParams);
    if (averageBlocker == -1.0) {
        return 1.0;
    } else {
        float depthDifference = (receiverDepth - averageBlocker) / 3.0;
        vec2 filterRadius = depthDifference * shadowSearchArea;

        float shadow = 0.0;

        for (int i = 0; i < PCSS_SAMPLE_COUNT; i ++)
        {
            vec2 sampleUV = samplePoints[i] * filterRadius;
            sampleUV = shadowCoords.xy + sampleUV;

            float depth = texture2DLod(shadowMap, sampleUV, 0.0).r;
            shadow += step(receiverDepth, depth);
        }
        return shadow / float(PCSS_SAMPLE_COUNT);
    } 
}

#ifndef WEBGPU

float PCSSCubeBlockerDistance(samplerCube shadowMap, vec3 lightDirNorm, vec3 samplePoints[PCSS_SAMPLE_COUNT], float z, float shadowSearchArea) {
    float blockers = 0.0;
    float averageBlocker = 0.0;
    for (int i = 0; i < PCSS_SAMPLE_COUNT; i++) {
        vec3 sampleDir = lightDirNorm + samplePoints[i] * shadowSearchArea;
        sampleDir = normalize(sampleDir);

        float blocker = textureCubeLod(shadowMap, sampleDir, 0.0).r;
        float isBlocking = step(blocker, z);
        blockers += isBlocking;
        averageBlocker += blocker * isBlocking;
    }

    if (blockers > 0.0)
        return averageBlocker / blockers;
    return -1.0;
}

float PCSSCube(samplerCube shadowMap, vec4 shadowParams, vec3 shadowCoords, vec4 cameraParams, float shadowSearchArea, vec3 lightDir) {
    
    vec3 samplePoints[PCSS_SAMPLE_COUNT];
    const float PI = 3.141592653589793;
    float noise = noise( gl_FragCoord.xy ) * 2.0 * PI;
    for (int i = 0; i < PCSS_SAMPLE_COUNT; i++) {
        float r = pcssSphereSamples[i];
        samplePoints[i] = vogelSphere(i, float(PCSS_SAMPLE_COUNT), noise, r);
    }

    float receiverDepth = length(lightDir) * shadowParams.w + shadowParams.z;
    vec3 lightDirNorm = normalize(lightDir);
    
    float averageBlocker = PCSSCubeBlockerDistance(shadowMap, lightDirNorm, samplePoints, receiverDepth, shadowSearchArea);
    if (averageBlocker == -1.0) {
        return 1.0;
    } else {

        float filterRadius = ((receiverDepth - averageBlocker) / averageBlocker) * shadowSearchArea;

        float shadow = 0.0;
        for (int i = 0; i < PCSS_SAMPLE_COUNT; i++)
        {
            vec3 offset = samplePoints[i] * filterRadius;
            vec3 sampleDir = lightDirNorm + offset;
            sampleDir = normalize(sampleDir);

            float depth = textureCubeLod(shadowMap, sampleDir, 0.0).r;
            shadow += step(receiverDepth, depth);
        }
        return shadow / float(PCSS_SAMPLE_COUNT);
    }
}

float getShadowOmniPCSS(samplerCube shadowMap, vec3 shadowCoord, vec4 shadowParams, vec4 cameraParams, vec2 shadowSearchArea, vec3 lightDir) {
    return PCSSCube(shadowMap, shadowParams, shadowCoord, cameraParams, shadowSearchArea.x, lightDir);
}

#endif

float getShadowSpotPCSS(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, vec4 cameraParams, vec2 shadowSearchArea, vec3 lightDir) {
    return PCSS(TEXTURE_PASS(shadowMap), shadowCoord, cameraParams, shadowSearchArea);
}

`,x1=`

highp float fractSinRand(const in vec2 uv) {
    const float PI = 3.141592653589793;
    const highp float a = 12.9898, b = 78.233, c = 43758.5453;
    highp float dt = dot(uv.xy, vec2(a, b)), sn = mod(dt, PI);
    return fract(sin(sn) * c);
}

// struct to hold precomputed constants and current state
struct VogelDiskData {
    float invNumSamples;
    float initialAngle;
    float currentPointId;
};

// prepare the Vogel disk constants and initialize the current state in the struct
void prepareDiskConstants(out VogelDiskData data, int sampleCount, float randomSeed) {
    const float pi2 = 6.28318530718;
    data.invNumSamples = 1.0 / float(sampleCount);
    data.initialAngle = randomSeed * pi2;
    data.currentPointId = 0.0;
}


vec2 generateDiskSample(inout VogelDiskData data) {
    const float GOLDEN_ANGLE = 2.399963;
    float r = sqrt((data.currentPointId + 0.5) * data.invNumSamples);
    float theta = data.currentPointId * GOLDEN_ANGLE + data.initialAngle;

    vec2 offset = vec2(cos(theta), sin(theta)) * pow(r, 1.33);

    data.currentPointId += 1.0;
    return offset;
}

void PCSSFindBlocker(TEXTURE_ACCEPT(shadowMap), out float avgBlockerDepth, out int numBlockers,
    vec2 shadowCoords, float z, int shadowBlockerSamples, float penumbraSize, float invShadowMapSize, float randomSeed) {

    VogelDiskData diskData;
    prepareDiskConstants(diskData, shadowBlockerSamples, randomSeed);

    float searchWidth = penumbraSize * invShadowMapSize;
    float blockerSum = 0.0;
    numBlockers = 0;

    for( int i = 0; i < shadowBlockerSamples; ++i ) {
        vec2 diskUV = generateDiskSample(diskData);
        vec2 sampleUV = shadowCoords + diskUV * searchWidth;
        float shadowMapDepth = texture2DLod(shadowMap, sampleUV, 0.0).r;
        if ( shadowMapDepth < z ) {
            blockerSum += shadowMapDepth;
            numBlockers++;
        }
    }
    avgBlockerDepth = blockerSum / float(numBlockers);
}

float PCSSFilter(TEXTURE_ACCEPT(shadowMap), vec2 uv, float receiverDepth, int shadowSamples, float filterRadius, float randomSeed) {

    VogelDiskData diskData;
    prepareDiskConstants(diskData, shadowSamples, randomSeed);

    float sum = 0.0;
    for (int i = 0; i < shadowSamples; i++) {
        vec2 offsetUV = generateDiskSample(diskData) * filterRadius;
        float depth = texture2DLod(shadowMap, uv + offsetUV, 0.0).r;
        sum += step(receiverDepth, depth);
    }
    return sum / float(shadowSamples);
}

float getPenumbra(float dblocker, float dreceiver, float penumbraSize, float penumbraFalloff) {
    float dist = dreceiver - dblocker;
    float penumbra = 1.0 - pow(1.0 - dist, penumbraFalloff);
    return penumbra * penumbraSize;
}

float PCSSDirectional(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoords, vec4 cameraParams, vec4 softShadowParams) {

    float receiverDepth = shadowCoords.z;
    float randomSeed = fractSinRand(gl_FragCoord.xy);
    int shadowSamples = int(softShadowParams.x);
    int shadowBlockerSamples = int(softShadowParams.y);
    float penumbraSize = softShadowParams.z;
    float penumbraFalloff = softShadowParams.w;

    // normalized inverse shadow map size to preserve the shadow softness regardless of the shadow resolution
    int shadowMapSize = textureSize(shadowMap, 0).x;
    float invShadowMapSize = 1.0 / float(shadowMapSize);
    invShadowMapSize *= float(shadowMapSize) / 2048.0;

    float penumbra;

    // contact hardening path
    if (shadowBlockerSamples > 0) {

        // find average blocker depth
        float avgBlockerDepth = 0.0;
        int numBlockers = 0;
        PCSSFindBlocker(TEXTURE_PASS(shadowMap), avgBlockerDepth, numBlockers, shadowCoords.xy, receiverDepth, shadowBlockerSamples, penumbraSize, invShadowMapSize, randomSeed);

        // early out when no blockers are present
        if (numBlockers < 1)
            return 1.0f;

        // penumbra size is based on the blocker depth
        penumbra = getPenumbra(avgBlockerDepth, shadowCoords.z, penumbraSize, penumbraFalloff);

    } else {

        // constant filter size, no contact hardening
        penumbra = penumbraSize;
    }

    float filterRadius = penumbra * invShadowMapSize;

    // filtering
    return PCSSFilter(TEXTURE_PASS(shadowMap), shadowCoords.xy, receiverDepth, shadowSamples, filterRadius, randomSeed);
}

float getShadowPCSS(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, vec4 cameraParams, vec4 softShadowParams, vec3 lightDir) {
    return PCSSDirectional(TEXTURE_PASS(shadowMap), shadowCoord, cameraParams, softShadowParams);
}

`,T1=`
attribute float vertex_boneIndices;

uniform highp sampler2D texture_poseMap;

mat4 getBoneMatrix(const in float indexFloat) {

    int width = textureSize(texture_poseMap, 0).x;
    int index = int(indexFloat + 0.5) * 3;
    int iy = index / width;
    int ix = index % width;

    // read elements of 4x3 matrix
    vec4 v1 = texelFetch(texture_poseMap, ivec2(ix + 0, iy), 0);
    vec4 v2 = texelFetch(texture_poseMap, ivec2(ix + 1, iy), 0);
    vec4 v3 = texelFetch(texture_poseMap, ivec2(ix + 2, iy), 0);

    // transpose to 4x4 matrix
    return mat4(
        v1.x, v2.x, v3.x, 0,
        v1.y, v2.y, v3.y, 0,
        v1.z, v2.z, v3.z, 0,
        v1.w, v2.w, v3.w, 1
    );
}
`,w1=`

attribute vec4 vertex_boneWeights;
attribute vec4 vertex_boneIndices;

uniform highp sampler2D texture_poseMap;

void getBoneMatrix(const in int width, const in int index, out vec4 v1, out vec4 v2, out vec4 v3) {

    int v = index / width;
    int u = index % width;

    v1 = texelFetch(texture_poseMap, ivec2(u + 0, v), 0);
    v2 = texelFetch(texture_poseMap, ivec2(u + 1, v), 0);
    v3 = texelFetch(texture_poseMap, ivec2(u + 2, v), 0);
}

mat4 getSkinMatrix(const in vec4 indicesFloat, const in vec4 weights) {

    int width = textureSize(texture_poseMap, 0).x;
    ivec4 indices = ivec4(indicesFloat + 0.5) * 3;

    // get 4 bone matrices
    vec4 a1, a2, a3;
    getBoneMatrix(width, indices.x, a1, a2, a3);

    vec4 b1, b2, b3;
    getBoneMatrix(width, indices.y, b1, b2, b3);

    vec4 c1, c2, c3;
    getBoneMatrix(width, indices.z, c1, c2, c3);

    vec4 d1, d2, d3;
    getBoneMatrix(width, indices.w, d1, d2, d3);

    // multiply them by weights and add up to get final 4x3 matrix
    vec4 v1 = a1 * weights.x + b1 * weights.y + c1 * weights.z + d1 * weights.w;
    vec4 v2 = a2 * weights.x + b2 * weights.y + c2 * weights.z + d2 * weights.w;
    vec4 v3 = a3 * weights.x + b3 * weights.y + c3 * weights.z + d3 * weights.w;

    // add up weights
    float one = dot(weights, vec4(1.0));

    // transpose to 4x4 matrix
    return mat4(
        v1.x, v2.x, v3.x, 0,
        v1.y, v2.y, v3.y, 0,
        v1.z, v2.z, v3.z, 0,
        v1.w, v2.w, v3.w, one
    );
}
`,E1=`
    #define LIT_SKYBOX_INTENSITY

    #include "envProcPS"
    #include "gammaPS"
    #include "tonemappingPS"

    #ifdef PREPASS_PASS
        varying float vLinearDepth;
        #include "floatAsUintPS"
    #endif

    varying vec3 vViewDir;
    uniform float skyboxHighlightMultiplier;

    #ifdef SKY_CUBEMAP

        uniform samplerCube texture_cubeMap;

        #ifdef SKYMESH
            varying vec3 vWorldPos;
            uniform mat3 cubeMapRotationMatrix;
            uniform vec3 projectedSkydomeCenter;
        #endif

    #else // env-atlas

        #include "sphericalPS"
        #include "envAtlasPS"

        uniform sampler2D texture_envAtlas;
        uniform float mipLevel;

    #endif

    void main(void) {

        #ifdef PREPASS_PASS

            // output linear depth during prepass
            gl_FragColor = float2vec4(vLinearDepth);

        #else

            #ifdef SKY_CUBEMAP

                #ifdef SKYMESH

                    // get vector from world space pos to tripod origin
                    vec3 envDir = normalize(vWorldPos - projectedSkydomeCenter);
                    vec3 dir = envDir * cubeMapRotationMatrix;

                #else

                    vec3 dir = vViewDir;

                #endif

                dir.x *= -1.0;
                vec3 linear = {SKYBOX_DECODE_FNC}(textureCube(texture_cubeMap, dir));

            #else // env-atlas

                vec3 dir = vViewDir * vec3(-1.0, 1.0, 1.0);
                vec2 uv = toSphericalUv(normalize(dir));

                vec3 linear = {SKYBOX_DECODE_FNC}(texture2D(texture_envAtlas, mapRoughnessUv(uv, mipLevel)));

            #endif

            // our HDR encodes values up to 64, so allow extra brightness for the clipped values
            if (any(greaterThanEqual(linear, vec3(64.0)))) {
                linear *= skyboxHighlightMultiplier;
            }

            gl_FragColor = vec4(gammaCorrectOutput(toneMap(processEnvironment(linear))), 1.0);

        #endif
    }
`,b1=`
attribute vec4 aPosition;

uniform mat4 matrix_view;
uniform mat4 matrix_projectionSkybox;
uniform mat3 cubeMapRotationMatrix;

varying vec3 vViewDir;

#ifdef PREPASS_PASS
    // when skydome renders depth during prepass, generate linear depth
    varying float vLinearDepth;
#endif

#ifdef SKYMESH
    uniform mat4 matrix_model;
    varying vec3 vWorldPos;
#endif

void main(void) {

    mat4 view = matrix_view;

    #ifdef SKYMESH

        vec4 worldPos = matrix_model * aPosition;
        vWorldPos = worldPos.xyz;
        gl_Position = matrix_projectionSkybox * (view * worldPos);

        #ifdef PREPASS_PASS
            // linear depth from the worldPosition, see getLinearDepth
            vLinearDepth = -(matrix_view * vec4(vWorldPos, 1.0)).z;
        #endif

    #else

        view[3][0] = view[3][1] = view[3][2] = 0.0;
        gl_Position = matrix_projectionSkybox * (view * aPosition);
        vViewDir = aPosition.xyz * cubeMapRotationMatrix;

        #ifdef PREPASS_PASS
            // for infinite skybox, use negative gl_Position.w to get positive linear depth
            vLinearDepth = -gl_Position.w;
        #endif
    #endif

    // Force skybox to far Z, regardless of the clip planes on the camera
    // Subtract a tiny fudge factor to ensure floating point errors don't
    // still push pixels beyond far Z. See:
    // https://community.khronos.org/t/skybox-problem/61857

    gl_Position.z = gl_Position.w - 1.0e-7;
}
`,A1=`

#ifdef STD_SPECULAR_CONSTANT
uniform vec3 material_specular;
#endif

void getSpecularity() {
    vec3 specularColor = vec3(1,1,1);

    #ifdef STD_SPECULAR_CONSTANT
    specularColor *= material_specular;
    #endif

    #ifdef STD_SPECULAR_TEXTURE
    specularColor *= {STD_SPECULAR_TEXTURE_DECODE}(texture2DBias({STD_SPECULAR_TEXTURE_NAME}, {STD_SPECULAR_TEXTURE_UV}, textureBias)).{STD_SPECULAR_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_SPECULAR_VERTEX
    specularColor *= saturate(vVertexColor.{STD_SPECULAR_VERTEX_CHANNEL});
    #endif

    dSpecularity = specularColor;
}
`,C1=`
// equirectangular helper functions
vec2 toSpherical(vec3 dir) {
    return vec2(dir.xz == vec2(0.0) ? 0.0 : atan(dir.x, dir.z), asin(dir.y));
}

vec2 toSphericalUv(vec3 dir) {
    const float PI = 3.141592653589793;
    vec2 uv = toSpherical(dir) / vec2(PI * 2.0, PI) + 0.5;
    return vec2(uv.x, 1.0 - uv.y);
}
`,P1=`

#ifdef STD_SPECULARITYFACTOR_CONSTANT
uniform float material_specularityFactor;
#endif

void getSpecularityFactor() {
    float specularityFactor = 1.0;

    #ifdef STD_SPECULARITYFACTOR_CONSTANT
    specularityFactor *= material_specularityFactor;
    #endif

    #ifdef STD_SPECULARITYFACTOR_TEXTURE
    specularityFactor *= texture2DBias({STD_SPECULARITYFACTOR_TEXTURE_NAME}, {STD_SPECULARITYFACTOR_TEXTURE_UV}, textureBias).{STD_SPECULARITYFACTOR_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_SPECULARITYFACTOR_VERTEX
    specularityFactor *= saturate(vVertexColor.{STD_SPECULARITYFACTOR_VERTEX_CHANNEL});
    #endif

    dSpecularityFactor = specularityFactor;
}
`,D1=`
float getSpotEffect(vec3 lightSpotDir, float lightInnerConeAngle, float lightOuterConeAngle, vec3 lightDirNorm) {
    float cosAngle = dot(lightDirNorm, lightSpotDir);
    return smoothstep(lightOuterConeAngle, lightInnerConeAngle, cosAngle);
}
`,I1=`
    nineSlicedUv = vec2(vUv0.x, 1.0 - vUv0.y);
`,M1=`
    vec2 tileMask = step(vMask, vec2(0.99999));
    vec2 tileSize = 0.5 * (innerOffset.xy + innerOffset.zw);
    vec2 tileScale = vec2(1.0) / (vec2(1.0) - tileSize);
    vec2 clampedUv = mix(innerOffset.xy * 0.5, vec2(1.0) - innerOffset.zw * 0.5, fract((vTiledUv - tileSize) * tileScale));
    clampedUv = clampedUv * atlasRect.zw + atlasRect.xy;
    nineSlicedUv = vUv0 * tileMask + clampedUv * (vec2(1.0) - tileMask);
    nineSlicedUv.y = 1.0 - nineSlicedUv.y;
    
`,L1=`

    // globals
    float dAlpha = 1.0;

    // all passes handle opacity
    #if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
        #ifdef STD_OPACITY_TEXTURE_ALLOCATE
            uniform sampler2D texture_opacityMap;
        #endif
    #endif

    #ifdef FORWARD_PASS // ----------------

        // globals
        vec3 dAlbedo;
        vec3 dNormalW;
        vec3 dSpecularity = vec3(0.0);
        float dGlossiness = 0.0;

        #ifdef LIT_REFRACTION
            float dTransmission;
            float dThickness;
        #endif

        #ifdef LIT_SCENE_COLOR
            uniform sampler2D uSceneColorMap;
        #endif

        #ifdef LIT_SCREEN_SIZE
            uniform vec4 uScreenSize;
        #endif

        #ifdef LIT_TRANSFORMS
            uniform mat4 matrix_viewProjection;
            uniform mat4 matrix_model;
        #endif

        // parallax
        #ifdef STD_HEIGHT_MAP
            vec2 dUvOffset;
            #ifdef STD_DIFFUSE_TEXTURE_ALLOCATE
                uniform sampler2D texture_heightMap;
            #endif
        #endif

        // diffuse
        #ifdef STD_DIFFUSE_TEXTURE_ALLOCATE
            uniform sampler2D texture_diffuseMap;
        #endif

        #ifdef STD_DIFFUSEDETAIL_TEXTURE_ALLOCATE
            uniform sampler2D texture_diffuseDetailMap;
        #endif

        // normal
        #ifdef STD_NORMAL_TEXTURE_ALLOCATE
            uniform sampler2D texture_normalMap;
        #endif

        #ifdef STD_NORMALDETAIL_TEXTURE_ALLOCATE
            uniform sampler2D texture_normalDetailMap;
        #endif

        // refraction
        #ifdef STD_THICKNESS_TEXTURE_ALLOCATE
            uniform sampler2D texture_thicknessMap;
        #endif
        #ifdef STD_REFRACTION_TEXTURE_ALLOCATE
            uniform sampler2D texture_refractionMap;
        #endif

        // iridescence
        #ifdef LIT_IRIDESCENCE
            float dIridescence;
            float dIridescenceThickness;

            #ifdef STD_IRIDESCENCE_THICKNESS_TEXTURE_ALLOCATE
                uniform sampler2D texture_iridescenceThicknessMap;
            #endif
            #ifdef STD_IRIDESCENCE_TEXTURE_ALLOCATE
                uniform sampler2D texture_iridescenceMap;
            #endif
        #endif

        #ifdef LIT_CLEARCOAT
            float ccSpecularity;
            float ccGlossiness;
            vec3 ccNormalW;
        #endif

        #ifdef LIT_GGX_SPECULAR
            float dAnisotropy;
            vec2 dAnisotropyRotation;
        #endif

        // specularity & glossiness
        #ifdef LIT_SPECULAR_OR_REFLECTION

            // sheen
            #ifdef LIT_SHEEN
                vec3 sSpecularity;
                float sGlossiness;

                #ifdef STD_SHEEN_TEXTURE_ALLOCATE
                    uniform sampler2D texture_sheenMap;
                #endif
                #ifdef STD_SHEENGLOSS_TEXTURE_ALLOCATE
                    uniform sampler2D texture_sheenGlossMap;
                #endif
            #endif

            // metalness
            #ifdef LIT_METALNESS
                float dMetalness;
                float dIor;

                #ifdef STD_METALNESS_TEXTURE_ALLOCATE
                    uniform sampler2D texture_metalnessMap;
                #endif
            #endif

            // specularity factor
            #ifdef LIT_SPECULARITY_FACTOR
                float dSpecularityFactor;

                #ifdef STD_SPECULARITYFACTOR_TEXTURE_ALLOCATE
                    uniform sampler2D texture_specularityFactorMap;
                #endif
            #endif

            // specular color
            #ifdef STD_SPECULAR_COLOR
                #ifdef STD_SPECULAR_TEXTURE_ALLOCATE
                    uniform sampler2D texture_specularMap;
                #endif
            #endif

            // gloss
            #ifdef STD_GLOSS_TEXTURE_ALLOCATE
                uniform sampler2D texture_glossMap;
            #endif
        #endif

        // ao
        #ifdef STD_AO
            float dAo;
            #ifdef STD_AO_TEXTURE_ALLOCATE
                uniform sampler2D texture_aoMap;
            #endif
            #ifdef STD_AODETAIL_TEXTURE_ALLOCATE
                uniform sampler2D texture_aoDetailMap;
            #endif
        #endif

        // emission
        vec3 dEmission;
        #ifdef STD_EMISSIVE_TEXTURE_ALLOCATE
            uniform sampler2D texture_emissiveMap;
        #endif

        // clearcoat
        #ifdef LIT_CLEARCOAT
            #ifdef STD_CLEARCOAT_TEXTURE_ALLOCATE
                uniform sampler2D texture_clearCoatMap;
            #endif
            #ifdef STD_CLEARCOATGLOSS_TEXTURE_ALLOCATE
                uniform sampler2D texture_clearCoatGlossMap;
            #endif
            #ifdef STD_CLEARCOATNORMAL_TEXTURE_ALLOCATE
                uniform sampler2D texture_clearCoatNormalMap;
            #endif
        #endif
        
        // anisotropy
        #ifdef LIT_GGX_SPECULAR
            #ifdef STD_ANISOTROPY_TEXTURE_ALLOCATE
                uniform sampler2D texture_anisotropyMap;
            #endif
        #endif

        // lightmap
        #if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
            vec3 dLightmap;
            #ifdef STD_LIGHT_TEXTURE_ALLOCATE
                uniform sampler2D texture_lightMap;
            #endif
        #endif
    #endif

    // front end outputs to lit shader
    #include "litShaderCorePS"
`,R1=`

    // all passes handle opacity
    #if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
        #include "opacityPS"

        #if defined(LIT_ALPHA_TEST)
            #include "alphaTestPS"
        #endif

        // dithering
        #if STD_OPACITY_DITHER != NONE
            #include "opacityDitherPS"
        #endif
    #endif

    #ifdef FORWARD_PASS // ----------------

        // parallax
        #ifdef STD_HEIGHT_MAP
            #include "parallaxPS"
        #endif

        // diffuse
        #include  "diffusePS"

        // normal
        #ifdef LIT_NEEDS_NORMAL
            #include "normalMapPS"
        #endif

        // refraction
        #ifdef LIT_REFRACTION
            #include "transmissionPS"
            #include "thicknessPS"
        #endif

        // iridescence
        #ifdef LIT_IRIDESCENCE
            #include "iridescencePS"
            #include "iridescenceThicknessPS"
        #endif

        // specularity & glossiness
        #ifdef LIT_SPECULAR_OR_REFLECTION

            // sheen
            #ifdef LIT_SHEEN
                #include "sheenPS"
                #include "sheenGlossPS"
            #endif

            // metalness
            #ifdef LIT_METALNESS
                #include "metalnessPS"
                #include "iorPS"
            #endif

            // specularity factor
            #ifdef LIT_SPECULARITY_FACTOR
                #include "specularityFactorPS"
            #endif

            // specular color
            #ifdef STD_SPECULAR_COLOR
                #include "specularPS"
            #else
                void getSpecularity() { 
                    dSpecularity = vec3(1);
                }
            #endif

            // gloss
            #include "glossPS"
        #endif

        // ao
        #ifdef STD_AO
            #include "aoPS"
        #endif

        // emission
        #include "emissivePS"

        // clearcoat
        #ifdef LIT_CLEARCOAT
            #include "clearCoatPS"
            #include "clearCoatGlossPS"
            #include "clearCoatNormalPS"
        #endif

        // anisotropy
        #if defined(LIT_SPECULAR) && defined(LIT_LIGHTING) && defined(LIT_GGX_SPECULAR)
            #include "anisotropyPS"
        #endif

        // lightmap
        #if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
            #include "lightmapPS"
        #endif
    #endif

    void evaluateFrontend() {

        // all passes handle opacity
        #if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
            getOpacity();

            #if defined(LIT_ALPHA_TEST)
                alphaTest(dAlpha);
            #endif

            #if STD_OPACITY_DITHER != NONE
                opacityDither(dAlpha, 0.0);
            #endif

            litArgs_opacity = dAlpha;
        #endif

        #ifdef FORWARD_PASS // ----------------

            // parallax
            #ifdef STD_HEIGHT_MAP
                getParallax();
            #endif

            // diffuse
            getAlbedo();
            litArgs_albedo = dAlbedo;

            // normal
            #ifdef LIT_NEEDS_NORMAL
                getNormal();
                litArgs_worldNormal = dNormalW;
            #endif

            // refraction
            #ifdef LIT_REFRACTION
                getRefraction();
                litArgs_transmission = dTransmission;

                getThickness();
                litArgs_thickness = dThickness;

                #ifdef LIT_DISPERSION
                    litArgs_dispersion = material_dispersion;
                #endif
            #endif

            // iridescence
            #ifdef LIT_IRIDESCENCE
                getIridescence();
                getIridescenceThickness();
                litArgs_iridescence_intensity = dIridescence;
                litArgs_iridescence_thickness = dIridescenceThickness;
            #endif

            // specularity & glossiness
            #ifdef LIT_SPECULAR_OR_REFLECTION

                // sheen
                #ifdef LIT_SHEEN
                    getSheen();
                    litArgs_sheen_specularity = sSpecularity;
                    getSheenGlossiness();
                    litArgs_sheen_gloss = sGlossiness;
                #endif

                // metalness
                #ifdef LIT_METALNESS
                    getMetalness();
                    litArgs_metalness = dMetalness;
                    getIor();
                    litArgs_ior = dIor;
                #endif

                // specularity factor
                #ifdef LIT_SPECULARITY_FACTOR
                    getSpecularityFactor();
                    litArgs_specularityFactor = dSpecularityFactor;
                #endif

                // gloss
                getGlossiness();
                getSpecularity();
                litArgs_specularity = dSpecularity;
                litArgs_gloss = dGlossiness;
            #endif

            // ao
            #ifdef STD_AO
                getAO();
                litArgs_ao = dAo;
            #endif

            // emission
            getEmission();
            litArgs_emission = dEmission;

            // clearcoat
            #ifdef LIT_CLEARCOAT
                getClearCoat();
                getClearCoatGlossiness();
                getClearCoatNormal();
                litArgs_clearcoat_specularity = ccSpecularity;
                litArgs_clearcoat_gloss = ccGlossiness;
                litArgs_clearcoat_worldNormal = ccNormalW;
            #endif

            // anisotropy
            #if defined(LIT_SPECULAR) && defined(LIT_LIGHTING) && defined(LIT_GGX_SPECULAR)
                getAnisotropy();
            #endif

            // lightmap
            #if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
                getLightMap();
                litArgs_lightmap = dLightmap;

                #ifdef STD_LIGHTMAP_DIR
                    litArgs_lightmapDir = dLightmapDir;
                #endif
            #endif
        #endif
    }
`,O1=`

#ifdef LIT_TANGENTS
    #define TBN_TANGENTS
#else
    #if defined(LIT_USE_NORMALS) || defined(LIT_USE_CLEARCOAT_NORMALS)
        #define TBN_DERIVATIVES
    #endif
#endif

#if defined(TBN_DERIVATIVES)
    uniform float tbnBasis;
#endif

void getTBN(vec3 tangent, vec3 binormal, vec3 normal) {

    #ifdef TBN_TANGENTS // tangents / binormals based TBN

        dTBN = mat3(normalize(tangent), normalize(binormal), normalize(normal));

    #elif defined(TBN_DERIVATIVES) // derivatives based TBN

        vec2 uv = {lightingUv};

        // get edge vectors of the pixel triangle
        vec3 dp1 = dFdx( vPositionW );
        vec3 dp2 = dFdy( vPositionW );
        vec2 duv1 = dFdx( uv );
        vec2 duv2 = dFdy( uv );

        // solve the linear system
        vec3 dp2perp = cross( dp2, normal );
        vec3 dp1perp = cross( normal, dp1 );
        vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
        vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;

        // construct a scale-invariant frame
        float denom = max( dot(T,T), dot(B,B) );
        float invmax = (denom == 0.0) ? 0.0 : tbnBasis / sqrt( denom );
        dTBN = mat3(T * invmax, -B * invmax, normal );

    #else // object space TBN

        vec3 B = cross(normal, vObjectSpaceUpW);
        vec3 T = cross(normal, B);

        if (dot(B,B)==0.0) // deal with case when vObjectSpaceUpW normal are parallel
        {
            float major=max(max(normal.x, normal.y), normal.z);

            if (normal.x == major)
            {
                B = cross(normal, vec3(0,1,0));
                T = cross(normal, B);
            }
            else if (normal.y == major)
            {
                B = cross(normal, vec3(0,0,1));
                T = cross(normal, B);
            }
            else if (normal.z == major)
            {
                B = cross(normal, vec3(1,0,0));
                T = cross(normal, B);
            }
        }

        dTBN = mat3(normalize(T), normalize(B), normalize(normal));

    #endif
}
`,F1=`
#ifdef STD_THICKNESS_CONSTANT
uniform float material_thickness;
#endif

void getThickness() {
    dThickness = 1.0;

    #ifdef STD_THICKNESS_CONSTANT
    dThickness *= material_thickness;
    #endif

    #ifdef STD_THICKNESS_TEXTURE
    dThickness *= texture2DBias({STD_THICKNESS_TEXTURE_NAME}, {STD_THICKNESS_TEXTURE_UV}, textureBias).{STD_THICKNESS_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_THICKNESS_VERTEX
    dThickness *= saturate(vVertexColor.{STD_THICKNESS_VERTEX_CHANNEL});
    #endif
}
`,N1=`

#if (TONEMAP == NONE)
    #include "tonemappingNonePS"
#elif TONEMAP == FILMIC
    #include "tonemappingFilmicPS"
#elif TONEMAP == LINEAR
    #include "tonemappingLinearPS"
#elif TONEMAP == HEJL
    #include "tonemappingHejlPS"
#elif TONEMAP == ACES
    #include "tonemappingAcesPS"
#elif TONEMAP == ACES2
    #include "tonemappingAces2PS"
#elif TONEMAP == NEUTRAL
    #include "tonemappingNeutralPS"
#endif

`,k1=`
uniform float exposure;

vec3 toneMap(vec3 color) {
    float tA = 2.51;
    float tB = 0.03;
    float tC = 2.43;
    float tD = 0.59;
    float tE = 0.14;
    vec3 x = color * exposure;
    return (x*(tA*x+tB))/(x*(tC*x+tD)+tE);
}
`,U1=`
uniform float exposure;

// ACES approximation by Stephen Hill

// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
const mat3 ACESInputMat = mat3(
    0.59719, 0.35458, 0.04823,
    0.07600, 0.90834, 0.01566,
    0.02840, 0.13383, 0.83777
);

// ODT_SAT => XYZ => D60_2_D65 => sRGB
const mat3 ACESOutputMat = mat3(
     1.60475, -0.53108, -0.07367,
    -0.10208,  1.10813, -0.00605,
    -0.00327, -0.07276,  1.07602
);

vec3 RRTAndODTFit(vec3 v) {
    vec3 a = v * (v + 0.0245786) - 0.000090537;
    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;
    return a / b;
}

vec3 toneMap(vec3 color) {
    color *= exposure / 0.6;
    color = color * ACESInputMat;

    // Apply RRT and ODT
    color = RRTAndODTFit(color);
    color = color * ACESOutputMat;

    // Clamp to [0, 1]
    color = clamp(color, 0.0, 1.0);

    return color;
}
`,B1=`
const float A =  0.15;
const float B =  0.50;
const float C =  0.10;
const float D =  0.20;
const float E =  0.02;
const float F =  0.30;
const float W =  11.2;

uniform float exposure;

vec3 uncharted2Tonemap(vec3 x) {
   return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec3 toneMap(vec3 color) {
    color = uncharted2Tonemap(color * exposure);
    vec3 whiteScale = 1.0 / uncharted2Tonemap(vec3(W,W,W));
    color = color * whiteScale;

    return color;
}
`,z1=`
uniform float exposure;

vec3 toneMap(vec3 color) {
    color *= exposure;
    const float  A = 0.22, B = 0.3, C = .1, D = 0.2, E = .01, F = 0.3;
    const float Scl = 1.25;

    vec3 h = max( vec3(0.0), color - vec3(0.004) );
    return (h*((Scl*A)*h+Scl*vec3(C*B,C*B,C*B))+Scl*vec3(D*E,D*E,D*E)) / (h*(A*h+vec3(B,B,B))+vec3(D*F,D*F,D*F)) - Scl*vec3(E/F,E/F,E/F);
}
`,V1=`
uniform float exposure;

vec3 toneMap(vec3 color) {
    return color * exposure;
}
`,G1=`
uniform float exposure;

vec3 toneMap(vec3 color) {

    color *= exposure;

    float startCompression = 0.8 - 0.04;
    float desaturation = 0.15;

    float x = min(color.r, min(color.g, color.b));
    float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
    color -= offset;

    float peak = max(color.r, max(color.g, color.b));
    if (peak < startCompression) return color;

    float d = 1. - startCompression;
    float newPeak = 1. - d * d / (peak + d - startCompression);
    color *= newPeak / peak;

    float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);
    return mix(color, newPeak * vec3(1, 1, 1), g);
}
`,H1=`
vec3 toneMap(vec3 color) {
    return color;
}
`,W1=`
#ifdef PIXELSNAP
uniform vec4 uScreenSize;
#endif

#ifdef SCREENSPACE
uniform float projectionFlipY;
#endif

vec4 evalWorldPosition(vec3 vertexPosition, mat4 modelMatrix) {

    vec3 localPos = getLocalPosition(vertexPosition);

    #ifdef NINESLICED
        // outer and inner vertices are at the same position, scale both
        localPos.xz *= outerScale;

        // offset inner vertices inside
        // (original vertices must be in [-1;1] range)
        vec2 positiveUnitOffset = clamp(vertexPosition.xz, vec2(0.0), vec2(1.0));
        vec2 negativeUnitOffset = clamp(-vertexPosition.xz, vec2(0.0), vec2(1.0));
        localPos.xz += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;

        vTiledUv = (localPos.xz - outerScale + innerOffset.xy) * -0.5 + 1.0; // uv = local pos - inner corner

        localPos.xz *= -0.5; // move from -1;1 to -0.5;0.5
        localPos = localPos.xzy;
    #endif

    vec4 posW = modelMatrix * vec4(localPos, 1.0);

    #ifdef SCREENSPACE
        posW.zw = vec2(0.0, 1.0);
    #endif

    return posW;
}

vec4 getPosition() {

    dModelMatrix = getModelMatrix();

    vec4 posW = evalWorldPosition(vertex_position.xyz, dModelMatrix);
    dPositionW = posW.xyz;

    vec4 screenPos;
    #ifdef UV1LAYOUT
        screenPos = vec4(vertex_texCoord1.xy * 2.0 - 1.0, 0.5, 1);
        #ifdef WEBGPU
            screenPos.y *= -1.0;
        #endif
    #else
        #ifdef SCREENSPACE
            screenPos = posW;
            screenPos.y *= projectionFlipY;
        #else
            screenPos = matrix_viewProjection * posW;
        #endif

        #ifdef PIXELSNAP
            // snap vertex to a pixel boundary
            screenPos.xy = (screenPos.xy * 0.5) + 0.5;
            screenPos.xy *= uScreenSize.xy;
            screenPos.xy = floor(screenPos.xy);
            screenPos.xy *= uScreenSize.zw;
            screenPos.xy = (screenPos.xy * 2.0) - 1.0;
        #endif
    #endif

    return screenPos;
}

vec3 getWorldPosition() {
    return dPositionW;
}
`,$1=`

attribute vec4 vertex_position;

uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;

#ifdef MORPHING
    uniform vec2 morph_tex_params;
    attribute uint morph_vertex_id;

    ivec2 getTextureMorphCoords() {

        // turn morph_vertex_id into int grid coordinates
        ivec2 textureSize = ivec2(morph_tex_params);
        int morphGridV = int(morph_vertex_id) / textureSize.x;
        int morphGridU = int(morph_vertex_id) - (morphGridV * textureSize.x);
        #ifdef WEBGPU
            // flipY
            morphGridV = textureSize.y - morphGridV - 1;
        #endif
        return ivec2(morphGridU, morphGridV);
    }

    #ifdef MORPHING_POSITION
        #ifdef MORPHING_INT
            uniform vec3 aabbSize;
            uniform vec3 aabbMin;
            uniform usampler2D morphPositionTex;
        #else
            uniform highp sampler2D morphPositionTex;
        #endif
    #endif
#endif

#ifdef defined(BATCH)
    #include "skinBatchVS"

    mat4 getModelMatrix() {
        return getBoneMatrix(vertex_boneIndices);
    }

#elif defined(SKIN)
    #include "skinVS"

    mat4 getModelMatrix() {
        return matrix_model * getSkinMatrix(vertex_boneIndices, vertex_boneWeights);
    }

#elif defined(INSTANCING)

    #include "transformInstancingVS"

#else

    mat4 getModelMatrix() {
        return matrix_model;
    }

#endif

vec3 getLocalPosition(vec3 vertexPosition) {

    vec3 localPos = vertexPosition;

    #ifdef MORPHING_POSITION

        ivec2 morphUV = getTextureMorphCoords();

        #ifdef MORPHING_INT
            vec3 morphPos = vec3(texelFetch(morphPositionTex, ivec2(morphUV), 0).xyz) / 65535.0 * aabbSize + aabbMin;
        #else
            vec3 morphPos = texelFetch(morphPositionTex, ivec2(morphUV), 0).xyz;
        #endif

        localPos += morphPos;

    #endif

    return localPos;
}

`,X1=`

attribute vec4 instance_line1;
attribute vec4 instance_line2;
attribute vec4 instance_line3;
attribute vec4 instance_line4;

mat4 getModelMatrix() {
    return matrix_model * mat4(instance_line1, instance_line2, instance_line3, instance_line4);
}
`,q1=`

#ifdef STD_REFRACTION_CONSTANT
uniform float material_refraction;
#endif

void getRefraction() {
    float refraction = 1.0;

    #ifdef STD_REFRACTION_CONSTANT
    refraction = material_refraction;
    #endif

    #ifdef STD_REFRACTION_TEXTURE
    refraction *= texture2DBias({STD_REFRACTION_TEXTURE_NAME}, {STD_REFRACTION_TEXTURE_UV}, textureBias).{STD_REFRACTION_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_REFRACTION_VERTEX
    refraction *= saturate(vVertexColor.{STD_REFRACTION_VERTEX_CHANNEL});
    #endif

    dTransmission = refraction;
}
`,j1=`
uniform float twoSidedLightingNegScaleFactor;
void handleTwoSidedLighting() {
    dTBN[2] *= gl_FrontFacing ? twoSidedLightingNegScaleFactor : -twoSidedLightingNegScaleFactor;
}
`,Y1=`
#ifdef NINESLICED
    vec2 getUv0() {
        vec2 uv = vertex_position.xz;

        // offset inner vertices inside
        // (original vertices must be in [-1;1] range)
        vec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));
        vec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));
        uv += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;

        uv = uv * -0.5 + 0.5;
        uv = uv * atlasRect.zw + atlasRect.xy;

        vMask = vertex_texCoord0.xy;

        return uv;
    }
#else
    vec2 getUv0() {
        return vertex_texCoord0;
    }
#endif
`,K1=`
vec2 getUv1() {
    return vertex_texCoord1;
}
`,Z1=`
vUV{TRANSFORM_UV_{i}}_{TRANSFORM_ID_{i}} = vec2(
    dot(vec3(uv{TRANSFORM_UV_{i}}, 1), {TRANSFORM_NAME_{i}}0),
    dot(vec3(uv{TRANSFORM_UV_{i}}, 1), {TRANSFORM_NAME_{i}}1)
);
`,Q1=`
    uniform vec3 {TRANSFORM_NAME_{i}}0;
    uniform vec3 {TRANSFORM_NAME_{i}}1;
`,J1=`
void getViewDir() {
    dViewDirW = normalize(view_position - vPositionW);
}
`,eD={alphaTestPS:QA,ambientPS:JA,anisotropyPS:eC,aoPS:tC,aoDiffuseOccPS:sC,aoSpecOccPS:iC,bakeDirLmEndPS:rC,bakeLmEndPS:aC,basePS:nC,baseNineSlicedPS:oC,baseNineSlicedTiledPS:lC,bayerPS:hC,blurVSMPS:cC,clearCoatPS:dC,clearCoatGlossPS:fC,clearCoatNormalPS:uC,clusteredLightCookiesPS:mC,clusteredLightShadowsPS:_C,clusteredLightUtilsPS:pC,clusteredLightPS:gC,combinePS:SC,cookieBlit2DPS:yC,cookieBlitCubePS:vC,cookieBlitVS:xC,cookiePS:TC,cubeMapProjectPS:wC,cubeMapRotatePS:EC,debugOutputPS:bC,debugProcessFrontendPS:AC,detailModesPS:PC,diffusePS:DC,decodePS:CC,emissivePS:IC,encodePS:MC,endPS:LC,envAtlasPS:RC,envProcPS:OC,falloffInvSquaredPS:FC,falloffLinearPS:NC,floatAsUintPS:kC,fogPS:UC,fresnelSchlickPS:BC,frontendCodePS:"",frontendDeclPS:"",fullscreenQuadVS:zC,gammaPS:VC,gles3PS:KS,gles3VS:ZS,glossPS:GC,gsplatCenterVS:HC,gsplatCornerVS:JC,gsplatColorVS:WC,gsplatCommonVS:$C,gsplatCompressedDataVS:XC,gsplatCompressedSHVS:qC,gsplatEvalSHVS:jC,gsplatQuatToMat3VS:YC,gsplatSogsColorVS:KC,gsplatSogsDataVS:ZC,gsplatSogsSHVS:QC,gsplatDataVS:eP,gsplatOutputVS:tP,gsplatPS:sP,gsplatSHVS:iP,gsplatSourceVS:rP,gsplatVS:aP,quadVS:nP,immediateLinePS:oP,immediateLineVS:lP,iridescenceDiffractionPS:hP,iridescencePS:cP,iridescenceThicknessPS:dP,iorPS:fP,lightDeclarationPS:uP,lightDiffuseLambertPS:pP,lightDirPointPS:mP,lightEvaluationPS:_P,lightFunctionLightPS:gP,lightFunctionShadowPS:SP,lightingPS:yP,lightmapAddPS:vP,lightmapPS:xP,lightSpecularAnisoGGXPS:TP,lightSpecularBlinnPS:wP,lightSheenPS:EP,linearizeDepthPS:bP,litForwardBackendPS:AP,litForwardDeclarationPS:CP,litForwardMainPS:PP,litForwardPostCodePS:DP,litForwardPreCodePS:IP,litMainPS:MP,litMainVS:LP,litOtherMainPS:RP,litShaderArgsPS:OP,litShaderCorePS:FP,litShadowMainPS:NP,litUserDeclarationPS:"",litUserDeclarationVS:"",litUserCodePS:"",litUserCodeVS:"",litUserMainStartPS:"",litUserMainStartVS:"",litUserMainEndPS:"",litUserMainEndVS:"",ltcPS:kP,metalnessPS:UP,metalnessModulatePS:zP,morphPS:VP,morphVS:GP,msdfPS:BP,msdfVS:HP,normalVS:WP,normalCoreVS:$P,normalMapPS:XP,opacityPS:qP,opacityDitherPS:jP,outputPS:YP,outputAlphaPS:KP,outputTex2DPS:ZP,sheenPS:QP,sheenGlossPS:JP,parallaxPS:e1,pickPS:t1,reflDirPS:s1,reflDirAnisoPS:i1,reflectionCCPS:r1,reflectionCubePS:a1,reflectionEnvHQPS:n1,reflectionEnvPS:o1,reflectionSpherePS:l1,reflectionSheenPS:h1,refractionCubePS:c1,refractionDynamicPS:d1,reprojectPS:f1,reprojectVS:u1,screenDepthPS:p1,shadowCascadesPS:m1,shadowEVSMPS:_1,shadowPCF1PS:g1,shadowPCF3PS:S1,shadowPCF5PS:y1,shadowPCSSPS:v1,shadowSoftPS:x1,skinBatchVS:T1,skinVS:w1,skyboxPS:E1,skyboxVS:b1,specularPS:A1,sphericalPS:C1,specularityFactorPS:P1,spotPS:D1,startNineSlicedPS:I1,startNineSlicedTiledPS:M1,stdDeclarationPS:L1,stdFrontEndPS:R1,TBNPS:O1,thicknessPS:F1,tonemappingPS:N1,tonemappingAcesPS:k1,tonemappingAces2PS:U1,tonemappingFilmicPS:B1,tonemappingHejlPS:z1,tonemappingLinearPS:V1,tonemappingNeutralPS:G1,tonemappingNonePS:H1,transformVS:W1,transformCoreVS:$1,transformInstancingVS:X1,transmissionPS:q1,twoSidedLightingPS:j1,uv0VS:Y1,uv1VS:K1,uvTransformVS:Z1,uvTransformUniformsPS:Q1,viewDirPS:J1,webgpuPS:QS,webgpuVS:JS},tD=`
uniform alpha_ref: f32;

fn alphaTest(a: f32) {
    if (a < uniform.alpha_ref) {
        discard;
    }
}
`,sD=`

#if LIT_AMBIENT_SOURCE == AMBIENTSH
    uniform ambientSH: array<vec3f, 9>;
#endif

#if LIT_AMBIENT_SOURCE == ENVALATLAS
    #include "envAtlasPS"

    #ifndef ENV_ATLAS
        #define ENV_ATLAS
        var texture_envAtlas: texture_2d<f32>;
        var texture_envAtlasSampler: sampler;
    #endif
#endif

fn addAmbient(worldNormal: vec3f) {
    #ifdef LIT_AMBIENT_SOURCE == AMBIENTSH

        let n: vec3f = cubeMapRotate(worldNormal);
        let color: vec3f =
            uniform.ambientSH[0] +
            uniform.ambientSH[1] * n.x +
            uniform.ambientSH[2] * n.y +
            uniform.ambientSH[3] * n.z +
            uniform.ambientSH[4] * n.x * n.z +
            uniform.ambientSH[5] * n.z * n.y +
            uniform.ambientSH[6] * n.y * n.x +
            uniform.ambientSH[7] * (3.0 * n.z * n.z - 1.0) +
            uniform.ambientSH[8] * (n.x * n.x - n.y * n.y);

        dDiffuseLight += processEnvironment(max(color, vec3f(0.0)));

    #endif

    #if LIT_AMBIENT_SOURCE == ENVALATLAS

        let dir: vec3f = normalize(cubeMapRotate(worldNormal) * vec3f(-1.0, 1.0, 1.0));
        let uv: vec2f = mapUv(toSphericalUv(dir), vec4f(128.0, 256.0 + 128.0, 64.0, 32.0) / atlasSize);

        let raw: vec4f = textureSample(texture_envAtlas, texture_envAtlasSampler, uv);
        let linear: vec3f = {ambientDecode}(raw);
        dDiffuseLight += processEnvironment(linear);

    #endif

    #if LIT_AMBIENT_SOURCE == CONSTANT

        dDiffuseLight += uniform.light_globalAmbient;

    #endif
}
`,iD=`
#ifdef LIT_GGX_SPECULAR
    uniform material_anisotropyIntensity: f32;
    uniform material_anisotropyRotation: vec2f;
#endif

fn getAnisotropy() {
    dAnisotropy = 0.0;
    dAnisotropyRotation = vec2f(1.0, 0.0);

#ifdef LIT_GGX_SPECULAR
    dAnisotropy = uniform.material_anisotropyIntensity;
    dAnisotropyRotation = uniform.material_anisotropyRotation;
#endif

#ifdef STD_ANISOTROPY_TEXTURE
    let anisotropyTex: vec3f = textureSampleBias({STD_ANISOTROPY_TEXTURE_NAME}, {STD_ANISOTROPY_TEXTURE_NAME}Sampler, {STD_ANISOTROPY_TEXTURE_UV}, uniform.textureBias).rgb;
    dAnisotropy *= anisotropyTex.b;

    let anisotropyRotationFromTex: vec2f = anisotropyTex.rg * 2.0 - vec2f(1.0);
    let rotationMatrix: mat2x2f = mat2x2f(dAnisotropyRotation.x, dAnisotropyRotation.y, -dAnisotropyRotation.y, dAnisotropyRotation.x);
    dAnisotropyRotation = rotationMatrix * anisotropyRotationFromTex;
#endif

    dAnisotropy = clamp(dAnisotropy, 0.0, 1.0);
}
`,rD=`

#if defined(STD_AO_TEXTURE) || defined(STD_AO_VERTEX)
    uniform material_aoIntensity: f32;
#endif

#ifdef STD_AODETAIL_TEXTURE
    #include "detailModesPS"
#endif

fn getAO() {
    dAo = 1.0;

    #ifdef STD_AO_TEXTURE
        var aoBase: f32 = textureSampleBias({STD_AO_TEXTURE_NAME}, {STD_AO_TEXTURE_NAME}Sampler, {STD_AO_TEXTURE_UV}, uniform.textureBias).{STD_AO_TEXTURE_CHANNEL};

        #ifdef STD_AODETAIL_TEXTURE
            var aoDetail: f32 = textureSampleBias({STD_AODETAIL_TEXTURE_NAME}, {STD_AODETAIL_TEXTURE_NAME}Sampler, {STD_AODETAIL_TEXTURE_UV}, uniform.textureBias).{STD_AODETAIL_TEXTURE_CHANNEL};
            aoBase = detailMode_{STD_AODETAIL_DETAILMODE}(vec3f(aoBase), vec3f(aoDetail)).r;
        #endif

        dAo = dAo * aoBase;
    #endif

    #ifdef STD_AO_VERTEX
        dAo = dAo * saturate(vVertexColor.{STD_AO_VERTEX_CHANNEL});
    #endif

    #if defined(STD_AO_TEXTURE) || defined(STD_AO_VERTEX)
        dAo = mix(1.0, dAo, uniform.material_aoIntensity);
    #endif
}
`,aD=`
fn occludeDiffuse(ao: f32) {
    dDiffuseLight = dDiffuseLight * ao;
}
`,nD=`

#if LIT_OCCLUDE_SPECULAR != NONE
    #ifdef LIT_OCCLUDE_SPECULAR_FLOAT
        uniform material_occludeSpecularIntensity: f32;
    #endif
#endif

fn occludeSpecular(gloss: f32, ao: f32, worldNormal: vec3f, viewDir: vec3f) {

    #if LIT_OCCLUDE_SPECULAR == AO
        #ifdef LIT_OCCLUDE_SPECULAR_FLOAT
            var specOcc: f32 = mix(1.0, ao, uniform.material_occludeSpecularIntensity);
        #else
            var specOcc: f32 = ao;
        #endif
    #endif

    #if LIT_OCCLUDE_SPECULAR == GLOSSDEPENDENT

        // approximated specular occlusion from AO
        // http://research.tri-ace.com/Data/cedec2011_RealtimePBR_Implementation_e.pptx
        var specPow: f32 = exp2(gloss * 11.0);
        var specOcc: f32 = saturate(pow(dot(worldNormal, viewDir) + ao, 0.01 * specPow) - 1.0 + ao);

        #ifdef LIT_OCCLUDE_SPECULAR_FLOAT
            specOcc = mix(1.0, specOcc, uniform.material_occludeSpecularIntensity);
        #endif
    #endif

    #if LIT_OCCLUDE_SPECULAR != NONE
        dSpecularLight = dSpecularLight * specOcc;
        dReflection = dReflection * specOcc;

        #ifdef LIT_SHEEN
            sSpecularLight = sSpecularLight * specOcc;
            sReflection = sReflection * specOcc;
        #endif
    #endif
}
`,oD=`
    let dirLm = textureSample(texture_dirLightMap, texture_dirLightMapSampler, vUv1);

    if (uniform.bakeDir > 0.5) {
        if (dAtten > 0.00001) {
            let unpacked_dir = dirLm.xyz * 2.0 - vec3f(1.0);
            dAtten = clamp(dAtten, 0.0, 1.0);
            let combined_dir = dLightDirNormW.xyz * dAtten + unpacked_dir * dirLm.w;
            let finalRgb = normalize(combined_dir) * 0.5 + vec3f(0.5);
            let finalA = max(dirLm.w + dAtten, 1.0 / 255.0);
            output.color = vec4f(finalRgb, finalA);
        } else {
            output.color = dirLm;
        }
    } else {
        let alpha_min = select(0.0, 1.0 / 255.0, dAtten > 0.00001);
        let finalA = max(dirLm.w, alpha_min);
        output.color = vec4f(dirLm.rgb, finalA);
    }
`,lD=`

#ifdef LIT_LIGHTMAP_BAKING_ADD_AMBIENT
    // diffuse light stores accumulated AO, apply contrast and brightness to it
    // and multiply ambient light color by the AO
    dDiffuseLight = ((dDiffuseLight - 0.5) * max(uniform.ambientBakeOcclusionContrast + 1.0, 0.0)) + 0.5;
    dDiffuseLight = dDiffuseLight + vec3f(uniform.ambientBakeOcclusionBrightness);
    dDiffuseLight = saturate3(dDiffuseLight);
    dDiffuseLight = dDiffuseLight * dAmbientLight;
#endif

#ifdef LIGHTMAP_RGBM
    // encode to RGBM
    var temp_color_rgbm = vec4f(dDiffuseLight, 1.0);
    temp_color_rgbm = vec4f(pow(temp_color_rgbm.rgb, vec3f(0.5)), temp_color_rgbm.a);
    temp_color_rgbm = vec4f(temp_color_rgbm.rgb / 8.0, temp_color_rgbm.a);
    let max_g_b = max(temp_color_rgbm.g, max(temp_color_rgbm.b, 1.0 / 255.0));
    let max_rgb = max(temp_color_rgbm.r, max_g_b);
    temp_color_rgbm.a = clamp(max_rgb, 0.0, 1.0);
    temp_color_rgbm.a = ceil(temp_color_rgbm.a * 255.0) / 255.0;
    temp_color_rgbm = vec4f(temp_color_rgbm.rgb / temp_color_rgbm.a, temp_color_rgbm.a);
    output.color = temp_color_rgbm;
#else
    output.color = vec4f(dDiffuseLight, 1.0);
#endif
`,hD=`
uniform view_position: vec3f;

uniform light_globalAmbient: vec3f;

fn square(x: f32) -> f32 {
    return x*x;
}

fn saturate(x: f32) -> f32 {
    return clamp(x, 0.0, 1.0);
}

fn saturate3(x: vec3f) -> vec3f {
    return clamp(x, vec3f(0.0), vec3f(1.0));
}
`,cD=`
#define NINESLICED

varying vMask: vec2f;
varying vTiledUv: vec2f;

uniform innerOffset: vec4f;
uniform outerScale: vec2f;
uniform atlasRect: vec4f;

var<private> nineSlicedUv: vec2f;
`,dD=`
#define NINESLICED
#define NINESLICETILED

varying vMask: vec2f;
varying vTiledUv: vec2f;

uniform innerOffset: vec4f;
uniform outerScale: vec2f;
uniform atlasRect: vec4f;

var<private> nineSlicedUv: vec2f;
`,fD=`
// 2x2 bayer matrix [1 2][3 0], p in [0,1]
fn bayer2(p: vec2f) -> f32 {
    return (2.0 * p.y + p.x + 1.0) % 4.0;
}

// 4x4 matrix, p - pixel coordinate
fn bayer4(p: vec2f) -> f32 {
    let p1: vec2f = p % vec2f(2.0);
    let p2: vec2f = floor(0.5 * (p % vec2f(4.0)));
    return 4.0 * bayer2(p1) + bayer2(p2);
}

// 8x8 matrix, p - pixel coordinate
fn bayer8(p: vec2f) -> f32 {
    let p1: vec2f = p % vec2f(2.0);
    let p2: vec2f = floor(0.5 * (p % vec2f(4.0)));
    let p4: vec2f = floor(0.25 * (p % vec2f(8.0)));
    return 4.0 * (4.0 * bayer2(p1) + bayer2(p2)) + bayer2(p4);
}
`,uD=`
varying vUv0: vec2f;

var source: texture_2d<f32>;
var sourceSampler: sampler;

#ifdef GAUSS
    uniform weight: array<f32, {SAMPLES}>;
#endif
uniform pixelOffset: vec2f;

@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
    var output: FragmentOutput;
    var moments: vec3f = vec3f(0.0);
    let uv: vec2f = input.vUv0 - uniform.pixelOffset * (f32({SAMPLES}) * 0.5);

    for (var i: i32 = 0; i < {SAMPLES}; i = i + 1) {
        let c: vec4f = textureSample(source, sourceSampler, uv + uniform.pixelOffset * f32(i));

        #ifdef GAUSS
            moments = moments + c.xyz * uniform.weight[i].element;
        #else
            moments = moments + c.xyz;
        #endif
    }

    #ifndef GAUSS
        moments = moments * (1.0 / f32({SAMPLES}));
    #endif

    output.color = vec4f(moments, 1.0);
    return output;
}
`,pD=`
uniform material_clearCoat: f32;

fn getClearCoat() {
    ccSpecularity = uniform.material_clearCoat;

    #ifdef STD_CLEARCOAT_TEXTURE
    ccSpecularity = ccSpecularity * textureSampleBias({STD_CLEARCOAT_TEXTURE_NAME}, {STD_CLEARCOAT_TEXTURE_NAME}Sampler, {STD_CLEARCOAT_TEXTURE_UV}, uniform.textureBias).{STD_CLEARCOAT_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_CLEARCOAT_VERTEX
    ccSpecularity = ccSpecularity * saturate(vVertexColor.{STD_CLEARCOAT_VERTEX_CHANNEL});
    #endif
}
`,mD=`
    uniform material_clearCoatGloss: f32;

fn getClearCoatGlossiness() {
    ccGlossiness = uniform.material_clearCoatGloss;

    #ifdef STD_CLEARCOATGLOSS_TEXTURE
    ccGlossiness = ccGlossiness * textureSampleBias({STD_CLEARCOATGLOSS_TEXTURE_NAME}, {STD_CLEARCOATGLOSS_TEXTURE_NAME}Sampler, {STD_CLEARCOATGLOSS_TEXTURE_UV}, uniform.textureBias).{STD_CLEARCOATGLOSS_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_CLEARCOATGLOSS_VERTEX
    ccGlossiness = ccGlossiness * saturate(vVertexColor.{STD_CLEARCOATGLOSS_VERTEX_CHANNEL});
    #endif

    #ifdef STD_CLEARCOATGLOSS_INVERT
    ccGlossiness = 1.0 - ccGlossiness;
    #endif

    ccGlossiness += 0.0000001;
}
`,_D=`
#ifdef STD_CLEARCOATNORMAL_TEXTURE
    uniform material_clearCoatBumpiness: f32;
#endif

fn getClearCoatNormal() {
#ifdef STD_CLEARCOATNORMAL_TEXTURE
    var normalMap: vec3f = {STD_CLEARCOATNORMAL_TEXTURE_DECODE}(textureSampleBias({STD_CLEARCOATNORMAL_TEXTURE_NAME}, {STD_CLEARCOATNORMAL_TEXTURE_NAME}Sampler, {STD_CLEARCOATNORMAL_TEXTURE_UV}, uniform.textureBias));
    normalMap = mix(vec3f(0.0, 0.0, 1.0), normalMap, uniform.material_clearCoatBumpiness);
    ccNormalW = normalize(dTBN * normalMap);
#else
    ccNormalW = dVertexNormalW;
#endif
}
`,gD=`
struct FaceCoords {
    uv: vec2f,          // Original return value
    faceIndex: f32,    // Was out parameter
    tileOffset: vec2f, // Was out parameter
}

// Converts unnormalized direction vector to a cubemap face index [0..5] and uv coordinates within the face in [0..1] range.
// Additionally offset to a tile in atlas within 3x3 subdivision is provided
fn getCubemapFaceCoordinates(dir: vec3f) -> FaceCoords {
    var faceIndex: f32;
    var tileOffset: vec2f;
    var uv: vec2f; // This is the face UV [0..1]
    let vAbs: vec3f = abs(dir);
    var ma: f32;

    if (vAbs.z >= vAbs.x && vAbs.z >= vAbs.y) {   // front / back

        let is_neg_z = dir.z < 0.0;
        faceIndex = select(4.0, 5.0, is_neg_z);
        ma = 0.5 / vAbs.z;
        uv = vec2f(select(dir.x, -dir.x, is_neg_z), -dir.y);
        tileOffset = vec2f(2.0, select(0.0, 1.0, is_neg_z));

    } else if (vAbs.y >= vAbs.x) {  // top index 2, bottom index 3

        let is_neg_y = dir.y < 0.0;
        faceIndex = select(2.0, 3.0, is_neg_y);
        ma = 0.5 / vAbs.y;
        uv = vec2f(dir.x, select(dir.z, -dir.z, is_neg_y));
        tileOffset = vec2f(1.0, select(0.0, 1.0, is_neg_y));

    } else {    // left / right

        let is_neg_x = dir.x < 0.0;
        faceIndex = select(0.0, 1.0, is_neg_x);
        ma = 0.5 / vAbs.x;
        uv = vec2f(select(-dir.z, dir.z, is_neg_x), -dir.y);
        tileOffset = vec2f(0.0, select(0.0, 1.0, is_neg_x));
    }

    uv = uv * ma + 0.5;
    return FaceCoords(uv, faceIndex, tileOffset);
}

// converts unnormalized direction vector to a texture coordinate for a cubemap face stored within texture atlas described by the viewport
fn getCubemapAtlasCoordinates(omniAtlasViewport: vec3f, shadowEdgePixels: f32, shadowTextureResolution: f32, dir: vec3f) -> vec2f {

    let faceData: FaceCoords = getCubemapFaceCoordinates(dir);
    var uv: vec2f = faceData.uv;
    let tileOffset: vec2f = faceData.tileOffset;

    // move uv coordinates inwards inside to compensate for larger fov when rendering shadow into atlas
    let atlasFaceSize: f32 = omniAtlasViewport.z;
    let tileSize: f32 = shadowTextureResolution * atlasFaceSize;
    var offset: f32 = shadowEdgePixels / tileSize;
    uv = uv * (1.0 - offset * 2.0) + offset;

    // scale uv coordinates to cube face area within the viewport
    uv = uv * atlasFaceSize;

    // offset into face of the atlas (3x3 grid)
    uv = uv + tileOffset * atlasFaceSize;

    // offset into the atlas viewport
    uv = uv + omniAtlasViewport.xy;

    return uv;
}
`,SD=`
fn _getCookieClustered(tex: texture_2d<f32>, texSampler: sampler, uv: vec2f, intensity: f32, cookieChannel: vec4f) -> vec3f {
    let pixel: vec4f = mix(vec4f(1.0), textureSampleLevel(tex, texSampler, uv, 0.0), intensity);
    let isRgb: bool = dot(cookieChannel.rgb, vec3f(1.0)) == 3.0;
    return select(vec3f(dot(pixel, cookieChannel)), pixel.rgb, isRgb);
}

// getCookie2D for clustered lighting including channel selector
fn getCookie2DClustered(tex: texture_2d<f32>, texSampler: sampler, transform: mat4x4f, worldPosition: vec3f, intensity: f32, cookieChannel: vec4f) -> vec3f {
    let projPos: vec4f = transform * vec4f(worldPosition, 1.0);
    return _getCookieClustered(tex, texSampler, projPos.xy / projPos.w, intensity, cookieChannel);
}

// getCookie for clustered omni light with the cookie texture being stored in the cookie atlas
fn getCookieCubeClustered(tex: texture_2d<f32>, texSampler: sampler, dir: vec3f, intensity: f32, cookieChannel: vec4f, shadowTextureResolution: f32, shadowEdgePixels: f32, omniAtlasViewport: vec3f) -> vec3f {
    let uv: vec2f = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);
    return _getCookieClustered(tex, texSampler, uv, intensity, cookieChannel);
}
`,yD=`

fn _getShadowCoordPerspZbuffer(shadowMatrix: mat4x4f, shadowParams: vec4f, wPos: vec3f) -> vec3f {
    var projPos = shadowMatrix * vec4f(wPos, 1.0);
    return projPos.xyz / projPos.w;
    // depth bias is already applied on render
}

fn getShadowCoordPerspZbufferNormalOffset(shadowMatrix: mat4x4f, shadowParams: vec4f, normal: vec3f) -> vec3f {
    let wPos: vec3f = vPositionW + normal * shadowParams.y;
    return _getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, wPos);
}

fn normalOffsetPointShadow(shadowParams: vec4f, lightPos: vec3f, lightDir: vec3f, lightDirNorm: vec3f, normal: vec3f) -> vec3f {
    let distScale: f32 = length(lightDir);
    let wPos: vec3f = vPositionW + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale; //0.02
    let dir: vec3f = wPos - lightPos;
    return dir;
}

#if defined(CLUSTER_SHADOW_TYPE_PCF1)

    fn getShadowOmniClusteredPCF1(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowParams: vec4f, omniAtlasViewport: vec3f, shadowEdgePixels: f32, lightDir: vec3f) -> f32 {

        let shadowTextureResolution: f32 = shadowParams.x;
        let uv: vec2f = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);

        let shadowZ: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
        return textureSampleCompareLevel(shadowMap, shadowMapSampler, uv, shadowZ);
    }

#endif

#if defined(CLUSTER_SHADOW_TYPE_PCF3)

    fn getShadowOmniClusteredPCF3(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowParams: vec4f, omniAtlasViewport: vec3f, shadowEdgePixels: f32, lightDir: vec3f) -> f32 {

        let shadowTextureResolution: f32 = shadowParams.x;
        let uv: vec2f = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);

        let shadowZ: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
        let shadowCoord: vec3f = vec3f(uv, shadowZ);
        return getShadowPCF3x3(shadowMap, shadowMapSampler, shadowCoord, shadowParams);
    }

#endif

#if defined(CLUSTER_SHADOW_TYPE_PCF5)

    fn getShadowOmniClusteredPCF5(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowParams: vec4f, omniAtlasViewport: vec3f, shadowEdgePixels: f32, lightDir: vec3f) -> f32 {

        let shadowTextureResolution: f32 = shadowParams.x;
        let uv: vec2f = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);

        let shadowZ: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
        let shadowCoord: vec3f = vec3f(uv, shadowZ);
        return getShadowPCF5x5(shadowMap, shadowMapSampler, shadowCoord, shadowParams);
    }

#endif

// Clustered Spot Sampling using atlas

#if defined(CLUSTER_SHADOW_TYPE_PCF1)

    fn getShadowSpotClusteredPCF1(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
        return textureSampleCompareLevel(shadowMap, shadowMapSampler, shadowCoord.xy, shadowCoord.z);
    }

#endif

    #if defined(CLUSTER_SHADOW_TYPE_PCF3)

    fn getShadowSpotClusteredPCF3(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
        return getShadowSpotPCF3x3(shadowMap, shadowMapSampler, shadowCoord, shadowParams);
    }

#endif

    #if defined(CLUSTER_SHADOW_TYPE_PCF5)

    fn getShadowSpotClusteredPCF5(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
        return getShadowPCF5x5(shadowMap, shadowMapSampler, shadowCoord, shadowParams);
    }

#endif
`,vD=`

#include "lightBufferDefinesPS"

// include this before shadow / cookie code
#include "clusteredLightUtilsPS"

#ifdef CLUSTER_COOKIES
    #include "clusteredLightCookiesPS"
#endif

#ifdef CLUSTER_SHADOWS
    #include "clusteredLightShadowsPS"
#endif

var clusterWorldTexture: texture_2d<f32>;
var lightsTexture: texture_2d<f32>;

#ifdef CLUSTER_SHADOWS
    // TODO: when VSM shadow is supported, it needs to use sampler2D in webgl2
    var shadowAtlasTexture: texture_depth_2d;
    var shadowAtlasTextureSampler: sampler_comparison;
#endif

#ifdef CLUSTER_COOKIES
    var cookieAtlasTexture: texture_2d<f32>;
    var cookieAtlasTextureSampler: sampler;
#endif

uniform clusterMaxCells: i32;

// 1.0 if clustered lighting can be skipped (0 lights in the clusters)
uniform clusterSkip: f32;

uniform clusterCellsCountByBoundsSize: vec3f;
uniform clusterTextureSize: vec3f;
uniform clusterBoundsMin: vec3f;
uniform clusterBoundsDelta: vec3f;
uniform clusterCellsDot: vec3f;
uniform clusterCellsMax: vec3f;
uniform shadowAtlasParams: vec2f;

// structure storing light properties of a clustered light
// it's sorted to have all vectors aligned to 4 floats to limit padding
struct ClusterLightData {

    // 32bit of flags
    flags: u32,

    // area light sizes / orientation
    halfWidth: vec3f,

    isSpot: bool,

    // area light sizes / orientation
    halfHeight: vec3f,

    // light index
    lightIndex: i32,

    // world space position
    position: vec3f,

    // area light shape
    shape: u32,

    // world space direction (spot light only)
    direction: vec3f,

    // light follow mode
    falloffModeLinear: bool,

    // color
    color: vec3f,

    // 0.0 if the light doesn't cast shadows
    shadowIntensity: f32,

    // atlas viewport for omni light shadow and cookie (.xy is offset to the viewport slot, .z is size of the face in the atlas)
    omniAtlasViewport: vec3f,

    // range of the light
    range: f32,

    // channel mask - one of the channels has 1, the others are 0
    cookieChannelMask: vec4f,

    // compressed biases, two haf-floats stored in a float
    biasesData: f32,

    // shadow bias values
    shadowBias: f32,
    shadowNormalBias: f32,

    // compressed angles, two haf-floats stored in a float
    anglesData: f32,

    // spot light inner and outer angle cosine
    innerConeAngleCos: f32,
    outerConeAngleCos: f32,

    // intensity of the cookie
    cookieIntensity: f32,

    // light mask
    //float mask;
    isDynamic: bool,
    isLightmapped: bool
}

// Note: on some devices (tested on Pixel 3A XL), this matrix when stored inside the light struct has lower precision compared to
// when stored outside, so we store it outside to avoid spot shadow flickering. This might need to be done to other / all members
// of the structure if further similar issues are observed.

// shadow (spot light only) / cookie projection matrix
var<private> lightProjectionMatrix: mat4x4f;

fn sampleLightTextureF(lightIndex: i32, index: i32) -> vec4f {
    return textureLoad(lightsTexture, vec2<i32>(index, lightIndex), 0);
}

fn decodeClusterLightCore(clusterLightData: ptr<function, ClusterLightData>, lightIndex: f32) {

    // light index
    clusterLightData.lightIndex = i32(lightIndex);

    // sample data encoding half-float values into 32bit uints
    let halfData: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_COLOR_ANGLES_BIAS});

    // store floats we decode later as needed
    clusterLightData.anglesData = halfData.z;
    clusterLightData.biasesData = halfData.w;

    // decompress color half-floats
    let colorRG: vec2f = unpack2x16float(bitcast<u32>(halfData.x));
    let colorB_: vec2f = unpack2x16float(bitcast<u32>(halfData.y));
    clusterLightData.color = vec3f(colorRG, colorB_.x) * {LIGHT_COLOR_DIVIDER};

    // position and range, full floats
    let lightPosRange: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_POSITION_RANGE});
    clusterLightData.position = lightPosRange.xyz;
    clusterLightData.range = lightPosRange.w;

    // spot direction & flags data
    let lightDir_Flags: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_DIRECTION_FLAGS});

    // spot light direction
    clusterLightData.direction = lightDir_Flags.xyz;

    // 32bit flags
    let flags_uint: u32 = bitcast<u32>(lightDir_Flags.w);
    clusterLightData.flags = flags_uint;
    clusterLightData.isSpot = (flags_uint & (1u << 30u)) != 0u;
    clusterLightData.shape = (flags_uint >> 28u) & 0x3u;
    clusterLightData.falloffModeLinear = (flags_uint & (1u << 27u)) == 0u;
    clusterLightData.shadowIntensity = f32((flags_uint >> 0u) & 0xFFu) / 255.0;
    clusterLightData.cookieIntensity = f32((flags_uint >> 8u) & 0xFFu) / 255.0;
    clusterLightData.isDynamic = (flags_uint & (1u << 22u)) != 0u;
    clusterLightData.isLightmapped = (flags_uint & (1u << 21u)) != 0u;
}

fn decodeClusterLightSpot(clusterLightData: ptr<function, ClusterLightData>) {
    // spot light cos angles
    let angles: vec2f = unpack2x16float(bitcast<u32>(clusterLightData.anglesData));
    clusterLightData.innerConeAngleCos = angles.x;
    clusterLightData.outerConeAngleCos = angles.y;
}

fn decodeClusterLightOmniAtlasViewport(clusterLightData: ptr<function, ClusterLightData>) {
    clusterLightData.omniAtlasViewport = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_PROJ_MAT_0}).xyz;
}

fn decodeClusterLightAreaData(clusterLightData: ptr<function, ClusterLightData>) {
    clusterLightData.halfWidth = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_AREA_DATA_WIDTH}).xyz;
    clusterLightData.halfHeight = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_AREA_DATA_HEIGHT}).xyz;
}

fn decodeClusterLightProjectionMatrixData(clusterLightData: ptr<function, ClusterLightData>) {
    // shadow matrix
    let m0: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_PROJ_MAT_0});
    let m1: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_PROJ_MAT_1});
    let m2: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_PROJ_MAT_2});
    let m3: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_PROJ_MAT_3});
    lightProjectionMatrix = mat4x4f(m0, m1, m2, m3);
}

fn decodeClusterLightShadowData(clusterLightData: ptr<function, ClusterLightData>) {
    // shadow biases
    let biases: vec2f = unpack2x16float(bitcast<u32>(clusterLightData.biasesData));
    clusterLightData.shadowBias = biases.x;
    clusterLightData.shadowNormalBias = biases.y;
}

fn decodeClusterLightCookieData(clusterLightData: ptr<function, ClusterLightData>) {

    // extract channel mask from flags
    let cookieFlags: u32 = (clusterLightData.flags >> 23u) & 0x0Fu;  // 4bits, each bit enables a channel
    let mask_uvec: vec4<u32> = vec4<u32>(cookieFlags) & vec4<u32>(1u, 2u, 4u, 8u);
    clusterLightData.cookieChannelMask = step(vec4f(1.0), vec4f(mask_uvec)); // Normalize to 0.0 or 1.0
}

fn evaluateLight(
    light: ptr<function, ClusterLightData>,
    worldNormal: vec3f,
    viewDir: vec3f,
    reflectionDir: vec3f,
#if defined(LIT_CLEARCOAT)
    clearcoatReflectionDir: vec3f,
#endif
    gloss: f32,
    specularity: vec3f,
    geometricNormal: vec3f,
    tbn: mat3x3f,
#if defined(LIT_IRIDESCENCE)
    iridescenceFresnel: vec3f,
#endif
    clearcoat_worldNormal: vec3f,
    clearcoat_gloss: f32,
    sheen_gloss: f32,
    iridescence_intensity: f32
) {

    var cookieAttenuation: vec3f = vec3f(1.0);
    var diffuseAttenuation: f32 = 1.0;
    var falloffAttenuation: f32 = 1.0;

    // evaluate omni part of the light
    let lightDirW: vec3f = evalOmniLight(light.position);
    let lightDirNormW: vec3f = normalize(lightDirW);

    #ifdef CLUSTER_AREALIGHTS

    // distance attenuation
    if (light.shape != {LIGHTSHAPE_PUNCTUAL}) { // area light

        // area lights
        decodeClusterLightAreaData(light);

        // handle light shape
        if (light.shape == {LIGHTSHAPE_RECT}) {
            calcRectLightValues(light.position, light.halfWidth, light.halfHeight);
        } else if (light.shape == {LIGHTSHAPE_DISK}) {
            calcDiskLightValues(light.position, light.halfWidth, light.halfHeight);
        } else { // sphere
            calcSphereLightValues(light.position, light.halfWidth, light.halfHeight);
        }

        falloffAttenuation = getFalloffWindow(light.range, lightDirW);

    } else

    #endif

    {   // punctual light

        if (light.falloffModeLinear) {
            falloffAttenuation = getFalloffLinear(light.range, lightDirW);
        } else {
            falloffAttenuation = getFalloffInvSquared(light.range, lightDirW);
        }
    }

    if (falloffAttenuation > 0.00001) {

        #ifdef CLUSTER_AREALIGHTS

        if (light.shape != {LIGHTSHAPE_PUNCTUAL}) { // area light

            // handle light shape
            if (light.shape == {LIGHTSHAPE_RECT}) {
                diffuseAttenuation = getRectLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
            } else if (light.shape == {LIGHTSHAPE_DISK}) {
                diffuseAttenuation = getDiskLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
            } else { // sphere
                diffuseAttenuation = getSphereLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
            }

        } else

        #endif

        {
            falloffAttenuation = falloffAttenuation * getLightDiffuse(worldNormal, viewDir, lightDirNormW);
        }

        // spot light falloff
        if (light.isSpot) {
            decodeClusterLightSpot(light);
            falloffAttenuation = falloffAttenuation * getSpotEffect(light.direction, light.innerConeAngleCos, light.outerConeAngleCos, lightDirNormW);
        }

        #if defined(CLUSTER_COOKIES) || defined(CLUSTER_SHADOWS)

        if (falloffAttenuation > 0.00001) {

            // shadow / cookie
            if (light.shadowIntensity > 0.0 || light.cookieIntensity > 0.0) {

                // shared shadow / cookie data depends on light type
                if (light.isSpot) {
                    decodeClusterLightProjectionMatrixData(light);
                } else {
                    decodeClusterLightOmniAtlasViewport(light);
                }

                let shadowTextureResolution: f32 = uniform.shadowAtlasParams.x;
                let shadowEdgePixels: f32 = uniform.shadowAtlasParams.y;

                #ifdef CLUSTER_COOKIES

                // cookie
                if (light.cookieIntensity > 0.0) {
                    decodeClusterLightCookieData(light);

                    if (light.isSpot) {
                        // !!!!!!!!!!! TEXTURE_PASS likely needs sampler. Assuming cookieAtlasTextureSampler exists.
                        cookieAttenuation = getCookie2DClustered(cookieAtlasTexture, cookieAtlasTextureSampler, lightProjectionMatrix, vPositionW, light.cookieIntensity, light.cookieChannelMask);
                    } else {
                        // !!!!!!!!!!! TEXTURE_PASS likely needs sampler. Assuming cookieAtlasTextureSampler exists.
                        cookieAttenuation = getCookieCubeClustered(cookieAtlasTexture, cookieAtlasTextureSampler, lightDirW, light.cookieIntensity, light.cookieChannelMask, shadowTextureResolution, shadowEdgePixels, light.omniAtlasViewport);
                    }
                }

                #endif

                #ifdef CLUSTER_SHADOWS

                // shadow
                if (light.shadowIntensity > 0.0) {
                    decodeClusterLightShadowData(light);

                    let shadowParams: vec4f = vec4f(shadowTextureResolution, light.shadowNormalBias, light.shadowBias, 1.0 / light.range);

                    if (light.isSpot) {

                        // spot shadow
                        let shadowCoord: vec3f = getShadowCoordPerspZbufferNormalOffset(lightProjectionMatrix, shadowParams, geometricNormal);

                        // !!!!!!!!!!! SHADOWMAP_PASS needs texture and sampler_comparison.
                        // !!!!!!!!!!! Shadow functions need update for WGSL textureSampleCompare etc. Assuming these are handled in includes.
                        #if defined(CLUSTER_SHADOW_TYPE_PCF1)
                            let shadow: f32 = getShadowSpotClusteredPCF1(shadowAtlasTexture, shadowAtlasTextureSampler, shadowCoord, shadowParams);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF3)
                            let shadow: f32 = getShadowSpotClusteredPCF3(shadowAtlasTexture, shadowAtlasTextureSampler, shadowCoord, shadowParams);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF5)
                            let shadow: f32 = getShadowSpotClusteredPCF5(shadowAtlasTexture, shadowAtlasTextureSampler, shadowCoord, shadowParams);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCSS)
                            let shadow: f32 = getShadowSpotClusteredPCSS(shadowAtlasTexture, shadowAtlasTextureSampler, shadowCoord, shadowParams);
                        #endif
                        falloffAttenuation = falloffAttenuation * mix(1.0, shadow, light.shadowIntensity);

                    } else {

                        // omni shadow
                        let dir: vec3f = normalOffsetPointShadow(shadowParams, light.position, lightDirW, lightDirNormW, geometricNormal);  // normalBias adjusted for distance

                        // !!!!!!!!!!! SHADOWMAP_PASS needs texture and sampler_comparison.
                        // !!!!!!!!!!! Shadow functions need update for WGSL textureSampleCompare etc. Assuming these are handled in includes.
                        #if defined(CLUSTER_SHADOW_TYPE_PCF1)
                            let shadow: f32 = getShadowOmniClusteredPCF1(shadowAtlasTexture, shadowAtlasTextureSampler, shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF3)
                            let shadow: f32 = getShadowOmniClusteredPCF3(shadowAtlasTexture, shadowAtlasTextureSampler, shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF5)
                            let shadow: f32 = getShadowOmniClusteredPCF5(shadowAtlasTexture, shadowAtlasTextureSampler, shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
                        #endif
                        falloffAttenuation = falloffAttenuation * mix(1.0, shadow, light.shadowIntensity);
                    }
                }

                #endif
            }
        }

        #endif

        // diffuse / specular / clearcoat
        #ifdef CLUSTER_AREALIGHTS

        if (light.shape != {LIGHTSHAPE_PUNCTUAL}) { // area light

            // area light diffuse
            {
                var areaDiffuse: vec3f = (diffuseAttenuation * falloffAttenuation) * light.color * cookieAttenuation;

                #if defined(LIT_SPECULAR)
                    areaDiffuse = mix(areaDiffuse, vec3f(0.0), dLTCSpecFres);
                #endif

                // area light diffuse - it does not mix diffuse lighting into specular attenuation
                dDiffuseLight = dDiffuseLight + areaDiffuse;
            }

            // specular and clear coat are material settings and get included by a define based on the material
            #ifdef LIT_SPECULAR

                // area light specular
                var areaLightSpecular: f32; // Use var because assigned in if/else

                if (light.shape == {LIGHTSHAPE_RECT}) {
                    areaLightSpecular = getRectLightSpecular(worldNormal, viewDir);
                } else if (light.shape == {LIGHTSHAPE_DISK}) {
                    areaLightSpecular = getDiskLightSpecular(worldNormal, viewDir);
                } else { // sphere
                    areaLightSpecular = getSphereLightSpecular(worldNormal, viewDir);
                }

                dSpecularLight = dSpecularLight + dLTCSpecFres * areaLightSpecular * falloffAttenuation * light.color * cookieAttenuation;

                #ifdef LIT_CLEARCOAT

                    // area light specular clear coat
                    var areaLightSpecularCC: f32; // Use var because assigned in if/else

                    if (light.shape == {LIGHTSHAPE_RECT}) {
                        areaLightSpecularCC = getRectLightSpecular(clearcoat_worldNormal, viewDir);
                    } else if (light.shape == {LIGHTSHAPE_DISK}) {
                        areaLightSpecularCC = getDiskLightSpecular(clearcoat_worldNormal, viewDir);
                    } else { // sphere
                        areaLightSpecularCC = getSphereLightSpecular(clearcoat_worldNormal, viewDir);
                    }

                    ccSpecularLight = ccSpecularLight + ccLTCSpecFres * areaLightSpecularCC * falloffAttenuation * light.color  * cookieAttenuation;

                #endif

            #endif

        } else

        #endif

        {    // punctual light

            // punctual light diffuse
            {
                var punctualDiffuse: vec3f = falloffAttenuation * light.color * cookieAttenuation;

                #if defined(CLUSTER_AREALIGHTS)
                #if defined(LIT_SPECULAR)
                    punctualDiffuse = mix(punctualDiffuse, vec3f(0.0), specularity);
                #endif
                #endif

                dDiffuseLight = dDiffuseLight + punctualDiffuse;
            }

            // specular and clear coat are material settings and get included by a define based on the material
            #ifdef LIT_SPECULAR

                let halfDir: vec3f = normalize(-lightDirNormW + viewDir);

                // specular
                #ifdef LIT_SPECULAR_FRESNEL
                    dSpecularLight = dSpecularLight +
                        getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, lightDirNormW, gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation *
                        getFresnel(
                            dot(viewDir, halfDir),
                            gloss,
                            specularity
                        #if defined(LIT_IRIDESCENCE)
                            , iridescenceFresnel,
                            iridescence_intensity
                        #endif
                            );
                #else
                    dSpecularLight = dSpecularLight + getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, lightDirNormW, gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation * specularity;
                #endif

                #ifdef LIT_CLEARCOAT
                    #ifdef LIT_SPECULAR_FRESNEL
                        ccSpecularLight = ccSpecularLight + getLightSpecular(halfDir, clearcoatReflectionDir, clearcoat_worldNormal, viewDir, lightDirNormW, clearcoat_gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation * getFresnelCC(dot(viewDir, halfDir));
                    #else
                        ccSpecularLight = ccSpecularLight + getLightSpecular(halfDir, clearcoatReflectionDir, clearcoat_worldNormal, viewDir, lightDirNormW, clearcoat_gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation;
                    #endif
                #endif

                #ifdef LIT_SHEEN
                    sSpecularLight = sSpecularLight + getLightSpecularSheen(halfDir, worldNormal, viewDir, lightDirNormW, sheen_gloss) * falloffAttenuation * light.color * cookieAttenuation;
                #endif

            #endif
        }
    }

    // Write to global attenuation values (for lightmapper)
    dAtten = falloffAttenuation;
    dLightDirNormW = lightDirNormW;
}


fn evaluateClusterLight(
    lightIndex: f32,
    worldNormal: vec3f,
    viewDir: vec3f,
    reflectionDir: vec3f,
#if defined(LIT_CLEARCOAT)
    clearcoatReflectionDir: vec3f,
#endif
    gloss: f32,
    specularity: vec3f,
    geometricNormal: vec3f,
    tbn: mat3x3f,
#if defined(LIT_IRIDESCENCE)
    iridescenceFresnel: vec3f,
#endif
    clearcoat_worldNormal: vec3f,
    clearcoat_gloss: f32,
    sheen_gloss: f32,
    iridescence_intensity: f32
) {

    // decode core light data from textures
    var clusterLightData: ClusterLightData;
    decodeClusterLightCore(&clusterLightData, lightIndex);

    // evaluate light if it uses accepted light mask
    #ifdef CLUSTER_MESH_DYNAMIC_LIGHTS
        let acceptLightMask: bool = clusterLightData.isDynamic;
    #else
        let acceptLightMask: bool = clusterLightData.isLightmapped;
    #endif

    if (acceptLightMask) {
        evaluateLight(
            &clusterLightData,
            worldNormal,
            viewDir,
            reflectionDir,
#if defined(LIT_CLEARCOAT)
            clearcoatReflectionDir,
#endif
            gloss,
            specularity,
            geometricNormal,
            tbn,
#if defined(LIT_IRIDESCENCE)
            iridescenceFresnel,
#endif
            clearcoat_worldNormal,
            clearcoat_gloss,
            sheen_gloss,
            iridescence_intensity
        );
    }
}


fn addClusteredLights(
    worldNormal: vec3f,
    viewDir: vec3f,
    reflectionDir: vec3f,
#if defined(LIT_CLEARCOAT)
    clearcoatReflectionDir: vec3f,
#endif
    gloss: f32,
    specularity: vec3f,
    geometricNormal: vec3f,
    tbn: mat3x3f,
#if defined(LIT_IRIDESCENCE)
    iridescenceFresnel: vec3f,
#endif
    clearcoat_worldNormal: vec3f,
    clearcoat_gloss: f32,
    sheen_gloss: f32,
    iridescence_intensity: f32
) {

    // skip lights if no lights at all
    if (uniform.clusterSkip > 0.5) {
        return;
    }

    // world space position to 3d integer cell cordinates in the cluster structure
    let cellCoords: vec3f = floor((vPositionW - uniform.clusterBoundsMin) * uniform.clusterCellsCountByBoundsSize);

    // no lighting when cell coordinate is out of range
    if (!(any(cellCoords < vec3f(0.0)) || any(cellCoords >= uniform.clusterCellsMax))) {

        // cell index (mapping from 3d cell coordinates to linear memory)
        let cellIndex: f32 = dot(uniform.clusterCellsDot, cellCoords);

        // convert cell index to uv coordinates
        let clusterV: f32 = floor(cellIndex * uniform.clusterTextureSize.y);
        let clusterU: f32 = cellIndex - (clusterV * uniform.clusterTextureSize.x);

        // loop over maximum number of light cells
        for (var lightCellIndex: i32 = 0; lightCellIndex < uniform.clusterMaxCells; lightCellIndex = lightCellIndex + 1) {

            // using a single channel texture with data in red channel
            let lightIndexPacked: f32 = textureLoad(clusterWorldTexture, vec2<i32>(i32(clusterU) + lightCellIndex, i32(clusterV)), 0).r;

            if (lightIndexPacked <= 0.0) {
                break;
            }

            evaluateClusterLight(
                lightIndexPacked * 255.0,
                worldNormal,
                viewDir,
                reflectionDir,
#if defined(LIT_CLEARCOAT)
                clearcoatReflectionDir,
#endif
                gloss,
                specularity,
                geometricNormal,
                tbn,
#if defined(LIT_IRIDESCENCE)
                iridescenceFresnel,
#endif
                clearcoat_worldNormal,
                clearcoat_gloss,
                sheen_gloss,
                iridescence_intensity
            );
        }
    }
}`,xD=`
fn combineColor(albedo: vec3f, sheenSpecularity: vec3f, clearcoatSpecularity: f32) -> vec3f {
    var ret: vec3f = vec3f(0.0);

    #ifdef LIT_OLD_AMBIENT
        ret = ret + ((dDiffuseLight - uniform.light_globalAmbient) * albedo + uniform.material_ambient * uniform.light_globalAmbient);
    #else
        ret = ret + (albedo * dDiffuseLight);
    #endif // LIT_OLD_AMBIENT
    #ifdef LIT_SPECULAR
        ret = ret + dSpecularLight;
    #endif // LIT_SPECULAR
    #ifdef LIT_REFLECTIONS
        ret = ret + (dReflection.rgb * dReflection.a);
    #endif // LIT_REFLECTIONS

    #ifdef LIT_SHEEN
        let sheenScaling: f32 = 1.0 - max(max(sheenSpecularity.r, sheenSpecularity.g), sheenSpecularity.b) * 0.157;
        ret = ret * sheenScaling + (sSpecularLight + sReflection.rgb) * sheenSpecularity;
    #endif // LIT_SHEEN
    #ifdef LIT_CLEARCOAT
        let clearCoatScaling: f32 = 1.0 - ccFresnel * clearcoatSpecularity;
        ret = ret * clearCoatScaling + (ccSpecularLight + ccReflection) * clearcoatSpecularity;
    #endif // LIT_CLEARCOAT

    return ret;
}
`,TD=`
    varying uv0: vec2f;

    var blitTexture: texture_2d<f32>;
    var blitTextureSampler : sampler;

    @fragment
    fn fragmentMain(input : FragmentInput) -> FragmentOutput {
        var output: FragmentOutput;
        output.color = textureSample(blitTexture, blitTextureSampler, input.uv0);
        return output;
    }
`,wD=`
    varying uv0: vec2f;
    uniform invViewProj: mat4x4<f32>;
    var blitTexture: texture_cube<f32>;
    var blitTextureSampler : sampler;

    @fragment
    fn fragmentMain(input : FragmentInput) -> FragmentOutput {
        var output: FragmentOutput;
        var projPos = vec4f(input.uv0 * 2.0 - 1.0, 0.5, 1.0);
        var worldPos = uniform.invViewProj * projPos;
        output.color = textureSample(blitTexture, blitTextureSampler, worldPos.xyz);
        return output;
    }
`,ED=`
    attribute vertex_position: vec2f;
    varying uv0: vec2f;

    @vertex
    fn vertexMain(input: VertexInput) -> VertexOutput {
        var output: VertexOutput;
        output.position = vec4f(input.vertex_position, 0.5, 1.0);
        output.uv0 = input.vertex_position * 0.5 + vec2f(0.5, 0.5);
        output.uv0.y = 1.0 - output.uv0.y;
        return output;
    }
`,bD=`

#if LIT_CUBEMAP_PROJECTION == BOX
    uniform envBoxMin: vec3f;
    uniform envBoxMax: vec3f;
#endif

fn cubeMapProject(nrdir: vec3f) -> vec3f {

    #if LIT_CUBEMAP_PROJECTION == NONE
        return cubeMapRotate(nrdir);
    #endif

    #if LIT_CUBEMAP_PROJECTION == BOX

        let nrdir_rotated: vec3f = cubeMapRotate(nrdir);

        let rbmax: vec3f = (uniform.envBoxMax - vPositionW) / nrdir_rotated;
        let rbmin: vec3f = (uniform.envBoxMin - vPositionW) / nrdir_rotated;

        let rbminmax: vec3f = select(rbmin, rbmax, nrdir_rotated > vec3f(0.0));
        let fa: f32 = min(min(rbminmax.x, rbminmax.y), rbminmax.z);

        let posonbox: vec3f = vPositionW + nrdir_rotated * fa;
        let envBoxPos: vec3f = (uniform.envBoxMin + uniform.envBoxMax) * 0.5;
        return normalize(posonbox - envBoxPos);

    #endif
}
`,AD=`
#ifdef CUBEMAP_ROTATION
uniform cubeMapRotationMatrix: mat3x3f;
#endif

fn cubeMapRotate(refDir: vec3f) -> vec3f {
#ifdef CUBEMAP_ROTATION
    return refDir * uniform.cubeMapRotationMatrix;
#else
    return refDir;
#endif
}
`,CD=`
#ifdef DEBUG_ALBEDO_PASS
output.color = vec4(gammaCorrectOutput(dAlbedo), 1.0);
#endif

#ifdef DEBUG_UV0_PASS
output.color = vec4f(litArgs_albedo , 1.0);
#endif

#ifdef DEBUG_WORLD_NORMAL_PASS
output.color = vec4f(litArgs_worldNormal * 0.5 + 0.5, 1.0);
#endif

#ifdef DEBUG_OPACITY_PASS
output.color = vec4f(vec3f(litArgs_opacity) , 1.0);
#endif

#ifdef DEBUG_SPECULARITY_PASS
output.color = vec4f(litArgs_specularity, 1.0);
#endif

#ifdef DEBUG_GLOSS_PASS
output.color = vec4f(vec3f(litArgs_gloss) , 1.0);
#endif

#ifdef DEBUG_METALNESS_PASS
output.color = vec4f(vec3f(litArgs_metalness) , 1.0);
#endif

#ifdef DEBUG_AO_PASS
output.color = vec4f(vec3f(litArgs_ao) , 1.0);
#endif

#ifdef DEBUG_EMISSION_PASS
output.color = vec4f(gammaCorrectOutput(litArgs_emission), 1.0);
#endif
`,PD=`
#ifdef DEBUG_LIGHTING_PASS
    litArgs_albedo = vec3f(0.5);
#endif

#ifdef DEBUG_UV0_PASS
#ifdef VARYING_VUV0
    litArgs_albedo = vec3f(vUv0, 0.0);
#else
    litArgs_albedo = vec3f(0.0);
#endif
#endif
`,DD=`

#ifndef _DECODE_INCLUDED_
#define _DECODE_INCLUDED_

fn decodeLinear(raw: vec4f) -> vec3f {
    return raw.rgb;
}

fn decodeGammaFloat(raw: f32) -> f32 {
    return pow(raw, 2.2);
}

fn decodeGamma3(raw: vec3f) -> vec3f {
    return pow(raw, vec3f(2.2));
}

fn decodeGamma(raw: vec4f) -> vec3f {
    return pow(raw.xyz, vec3f(2.2));
}

fn decodeRGBM(raw: vec4f) -> vec3f {
    let color = (8.0 * raw.a) * raw.rgb;
    return color * color;
}

fn decodeRGBP(raw: vec4f) -> vec3f {
    let color = raw.rgb * (-raw.a * 7.0 + 8.0);
    return color * color;
}

fn decodeRGBE(raw: vec4f) -> vec3f {
    return select(vec3f(0.0), raw.xyz * pow(2.0, raw.w * 255.0 - 128.0), raw.a != 0.0);
}

fn passThrough(raw: vec4f) -> vec4f {
    return raw;
}

fn unpackNormalXYZ(nmap: vec4f) -> vec3f {
    return nmap.xyz * 2.0 - 1.0;
}

fn unpackNormalXY(nmap: vec4f) -> vec3f {
    var xy = nmap.wy * 2.0 - 1.0;
    return vec3f(xy, sqrt(1.0 - clamp(dot(xy, xy), 0.0, 1.0)));
}

#endif
`,ID=`

#ifndef _DETAILMODES_INCLUDED_
#define _DETAILMODES_INCLUDED_

fn detailMode_mul(c1: vec3f, c2: vec3f) -> vec3f {
    return c1 * c2;
}

fn detailMode_add(c1: vec3f, c2: vec3f) -> vec3f {
    return c1 + c2;
}

// https://en.wikipedia.org/wiki/Blend_modes#Screen
fn detailMode_screen(c1: vec3f, c2: vec3f) -> vec3f {
    return 1.0 - (1.0 - c1)*(1.0 - c2);
}

// https://en.wikipedia.org/wiki/Blend_modes#Overlay
fn detailMode_overlay(c1: vec3f, c2: vec3f) -> vec3f {
    return mix(1.0 - 2.0 * (1.0 - c1)*(1.0 - c2), 2.0 * c1 * c2, step(c1, vec3f(0.5)));
}

fn detailMode_min(c1: vec3f, c2: vec3f) -> vec3f {
    return min(c1, c2);
}

fn detailMode_max(c1: vec3f, c2: vec3f) -> vec3f {
    return max(c1, c2);
}

#endif
`,MD=`
uniform material_diffuse: vec3f;

#ifdef STD_DIFFUSEDETAIL_TEXTURE
    #include "detailModesPS"
#endif

fn getAlbedo() {
    dAlbedo = uniform.material_diffuse.rgb;

    #ifdef STD_DIFFUSE_TEXTURE
        var albedoTexture: vec3f = {STD_DIFFUSE_TEXTURE_DECODE}(textureSampleBias({STD_DIFFUSE_TEXTURE_NAME}, {STD_DIFFUSE_TEXTURE_NAME}Sampler, {STD_DIFFUSE_TEXTURE_UV}, uniform.textureBias)).{STD_DIFFUSE_TEXTURE_CHANNEL};

        #ifdef STD_DIFFUSEDETAIL_TEXTURE
            var albedoDetail: vec3f = {STD_DIFFUSEDETAIL_TEXTURE_DECODE}(textureSampleBias({STD_DIFFUSEDETAIL_TEXTURE_NAME}, {STD_DIFFUSEDETAIL_TEXTURE_NAME}Sampler, {STD_DIFFUSEDETAIL_TEXTURE_UV}, uniform.textureBias)).{STD_DIFFUSEDETAIL_TEXTURE_CHANNEL};
            albedoTexture = detailMode_{STD_DIFFUSEDETAIL_DETAILMODE}(albedoTexture, albedoDetail);
        #endif

        dAlbedo = dAlbedo * albedoTexture;
    #endif

    #ifdef STD_DIFFUSE_VERTEX
        dAlbedo = dAlbedo * gammaCorrectInputVec3(saturate3(vVertexColor.{STD_DIFFUSE_VERTEX_CHANNEL}));
    #endif
}
`,LD=`
uniform material_emissive: vec3f;
uniform material_emissiveIntensity: f32;

fn getEmission() {
    dEmission = uniform.material_emissive * uniform.material_emissiveIntensity;

    #ifdef STD_EMISSIVE_TEXTURE
    dEmission *= {STD_EMISSIVE_TEXTURE_DECODE}(textureSampleBias({STD_EMISSIVE_TEXTURE_NAME}, {STD_EMISSIVE_TEXTURE_NAME}Sampler, {STD_EMISSIVE_TEXTURE_UV}, uniform.textureBias)).{STD_EMISSIVE_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_EMISSIVE_VERTEX
    dEmission = dEmission * gammaCorrectInputVec3(saturate3(vVertexColor.{STD_EMISSIVE_VERTEX_CHANNEL}));
    #endif
}
`,RD=`
fn encodeLinear(source: vec3f) -> vec4f {
    return vec4f(source, 1.0);
}

fn encodeGamma(source: vec3f) -> vec4f {
    return vec4f(pow(source + vec3f(0.0000001), vec3f(1.0 / 2.2)), 1.0);
}

fn encodeRGBM(source: vec3f) -> vec4f {
    var color: vec3f = pow(source, vec3f(0.5));
    color *= 1.0 / 8.0;

    var a: f32 = saturate(max(max(color.r, color.g), max(color.b, 1.0 / 255.0)));
    a = ceil(a * 255.0) / 255.0;

    color /= a;
    return vec4f(color, a);
}

fn encodeRGBP(source: vec3f) -> vec4f {
    // convert incoming linear to gamma(ish)
    var gamma: vec3f = pow(source, vec3f(0.5));

    // calculate the maximum component clamped to 1..8
    var maxVal: f32 = min(8.0, max(1.0, max(gamma.x, max(gamma.y, gamma.z))));

    // calculate storage factor
    var v: f32 = 1.0 - ((maxVal - 1.0) / 7.0);

    // round the value for storage in 8bit channel
    v = ceil(v * 255.0) / 255.0;

    return vec4f(gamma / (-v * 7.0 + 8.0), v);
}

fn encodeRGBE(source: vec3f) -> vec4f {
    var maxVal: f32 = max(source.x, max(source.y, source.z));
    if (maxVal < 1e-32) {
        return vec4f(0.0, 0.0, 0.0, 0.0);
    } else {
        var e: f32 = ceil(log2(maxVal));
        return vec4f(source / pow(2.0, e), (e + 128.0) / 255.0);
    }
}
`,OD=`
    var finalRgb: vec3f = combineColor(litArgs_albedo, litArgs_sheen_specularity, litArgs_clearcoat_specularity);

    finalRgb = finalRgb + litArgs_emission;
    finalRgb = addFog(finalRgb);
    finalRgb = toneMap(finalRgb);
    finalRgb = gammaCorrectOutput(finalRgb);
    output.color = vec4f(finalRgb, output.color.a);
`,FD=`

#ifndef _ENVATLAS_INCLUDED_
#define _ENVATLAS_INCLUDED_

// the envAtlas is fixed at 512 pixels. every equirect is generated with 1 pixel boundary.
const atlasSize : f32 = 512.0;
const seamSize : f32 = 1.0 / atlasSize;

// map a normalized equirect UV to the given rectangle (taking 1 pixel seam into account).
fn mapUv(uv : vec2f, rect : vec4f) -> vec2f {
    return vec2f(mix(rect.x + seamSize, rect.x + rect.z - seamSize, uv.x),
                 mix(rect.y + seamSize, rect.y + rect.w - seamSize, uv.y));
}

// map a normalized equirect UV and roughness level to the correct atlas rect.
fn mapRoughnessUv(uv : vec2f, level : f32) -> vec2f {
    let t : f32 = 1.0 / exp2(level);
    return mapUv(uv, vec4f(0.0, 1.0 - t, t, t * 0.5));
}

// map shiny level UV
fn mapShinyUv(uv : vec2f, level : f32) -> vec2f {
    let t : f32 = 1.0 / exp2(level);
    return mapUv(uv, vec4f(1.0 - t, 1.0 - t, t, t * 0.5));
}

#endif
`,ND=`
#ifdef LIT_SKYBOX_INTENSITY
    uniform skyboxIntensity : f32;
#endif

fn processEnvironment(color : vec3f) -> vec3f {
    #ifdef LIT_SKYBOX_INTENSITY
        return color * uniform.skyboxIntensity;
    #else
        return color;
    #endif
}
`,kD=`
fn getFalloffWindow(lightRadius: f32, lightDir: vec3f) -> f32 {
    let sqrDist: f32 = dot(lightDir, lightDir);
    let invRadius: f32 = 1.0 / lightRadius;
    return square(saturate(1.0 - square(sqrDist * square(invRadius))));
}

fn getFalloffInvSquared(lightRadius: f32, lightDir: vec3f) -> f32 {
    let sqrDist: f32 = dot(lightDir, lightDir);
    var falloff: f32 = 1.0 / (sqrDist + 1.0);
    let invRadius: f32 = 1.0 / lightRadius;

    falloff = falloff * 16.0;
    falloff = falloff * square(saturate(1.0 - square(sqrDist * square(invRadius))));

    return falloff;
}
`,UD=`
fn getFalloffLinear(lightRadius: f32, lightDir: vec3f) -> f32 {
    let d: f32 = length(lightDir);
    return max(((lightRadius - d) / lightRadius), 0.0);
}
`,BD=`

#ifndef FLOAT_AS_UINT
#define FLOAT_AS_UINT

// encode float value to RGBA8 representation (0.0-1.0 range)
fn float2uint(value: f32) -> vec4f {
    let intBits = bitcast<u32>(value);
    return vec4f(
        f32((intBits >> 24u) & 0xffu),
        f32((intBits >> 16u) & 0xffu),
        f32((intBits >> 8u) & 0xffu),
        f32(intBits & 0xffu)
    ) / 255.0;
}

// decode RGBA8 value to float
fn uint2float(value: vec4f) -> f32 {
    let rgba_u32 = vec4<u32>(value * 255.0);
    let intBits: u32 =
        (rgba_u32.r << 24u) |
        (rgba_u32.g << 16u) |
        (rgba_u32.b << 8u)  |
         rgba_u32.a;
    return bitcast<f32>(intBits);
}

// store a single float value in vec4, assuming either RGBA8 or float renderable texture
fn float2vec4(value: f32) -> vec4f {
    #if defined(CAPS_TEXTURE_FLOAT_RENDERABLE)
        return vec4f(value, 1.0, 1.0, 1.0);
    #else
        return float2uint(value);
    #endif
}

#endif // FLOAT_AS_UINT
`,zD=`

var<private> dBlendModeFogFactor : f32 = 1.0;

#if (FOG != NONE)
    uniform fog_color : vec3f;
    
    #if (FOG == LINEAR)
        uniform fog_start : f32;
        uniform fog_end : f32;
    #else
        uniform fog_density : f32;
    #endif
#endif

fn getFogFactor() -> f32 {

    let depth = pcPosition.z / pcPosition.w;

    var fogFactor : f32 = 0.0;

    #if (FOG == LINEAR)
        fogFactor = (uniform.fog_end - depth) / (uniform.fog_end - uniform.fog_start);
    #elif (FOG == EXP)
        fogFactor = exp(-depth * uniform.fog_density);
    #elif (FOG == EXP2)
        fogFactor = exp(-depth * depth * uniform.fog_density * uniform.fog_density);
    #endif

    return clamp(fogFactor, 0.0, 1.0);
}

fn addFog(color : vec3f) -> vec3f {
    #if (FOG != NONE)
        return mix(uniform.fog_color * dBlendModeFogFactor, color, getFogFactor());
    #else
        return color;
    #endif
}
`,VD=`
// Schlick's approximation
fn getFresnel(
        cosTheta: f32,
        gloss: f32,
        specularity: vec3f
    #if defined(LIT_IRIDESCENCE)
        , iridescenceFresnel: vec3f,
        iridescenceIntensity: f32
    #endif
) -> vec3f {
    let fresnel: f32 = pow(1.0 - saturate(cosTheta), 5.0);
    let glossSq: f32 = gloss * gloss;
    let ret: vec3f = specularity + (max(vec3f(glossSq), specularity) - specularity) * fresnel;

    #if defined(LIT_IRIDESCENCE)
        return mix(ret, iridescenceFresnel, iridescenceIntensity);
    #else
        return ret;
    #endif
}

fn getFresnelCC(cosTheta: f32) -> f32 {
    let fresnel: f32 = pow(1.0 - saturate(cosTheta), 5.0);
    return 0.04 + (1.0 - 0.04) * fresnel;
}`,GD=`
attribute vertex_position: vec2f;

varying vUv0: vec2f;

@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
    var output: VertexOutput;
    output.position = vec4f(input.vertex_position, 0.5, 1.0);
    output.vUv0 = input.vertex_position.xy * 0.5 + vec2f(0.5);
    return output;
}
`,HD=`

#include "decodePS"

#if (GAMMA == SRGB)

    fn gammaCorrectInput(color: f32) -> f32 {
        return decodeGammaFloat(color);
    }

    fn gammaCorrectInputVec3(color: vec3f) -> vec3f {
        return decodeGamma3(color);
    }

    fn gammaCorrectInputVec4(color: vec4f) -> vec4f {
        return vec4f(decodeGamma3(color.xyz), color.w);
    }

    fn gammaCorrectOutput(color: vec3f) -> vec3f {
        return pow(color + 0.0000001, vec3f(1.0 / 2.2));
    }

#else // NONE

    fn gammaCorrectInput(color: f32) -> f32 {
        return color;
    }

    fn gammaCorrectInputVec3(color: vec3f) -> vec3f {
        return color;
    }

    fn gammaCorrectInputVec4(color: vec4f) -> vec4f {
        return color;
    }

    fn gammaCorrectOutput(color: vec3f) -> vec3f {
        return color;
    }

#endif
`,WD=`
#ifdef STD_GLOSS_CONSTANT
    uniform material_gloss: f32;
#endif

fn getGlossiness() {
    dGlossiness = 1.0;

    #ifdef STD_GLOSS_CONSTANT
    dGlossiness = dGlossiness * uniform.material_gloss;
    #endif

    #ifdef STD_GLOSS_TEXTURE
    dGlossiness = dGlossiness * textureSampleBias({STD_GLOSS_TEXTURE_NAME}, {STD_GLOSS_TEXTURE_NAME}Sampler, {STD_GLOSS_TEXTURE_UV}, uniform.textureBias).{STD_GLOSS_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_GLOSS_VERTEX
    dGlossiness = dGlossiness * saturate(vVertexColor.{STD_GLOSS_VERTEX_CHANNEL});
    #endif

    #ifdef STD_GLOSS_INVERT
    dGlossiness = 1.0 - dGlossiness;
    #endif

    dGlossiness = dGlossiness + 0.0000001;
}
`,$D=`
uniform matrix_model: mat4x4f;
uniform matrix_view: mat4x4f;
uniform matrix_projection: mat4x4f;

// project the model space gaussian center to view and clip space
fn initCenter(modelCenter: vec3f, center: ptr<function, SplatCenter>) -> bool {
    let modelView: mat4x4f = uniform.matrix_view * uniform.matrix_model;
    let centerView: vec4f = modelView * vec4f(modelCenter, 1.0);

    // early out if splat is behind the camera
    if (centerView.z > 0.0) {
        return false;
    }

    var centerProj: vec4f = uniform.matrix_projection * centerView;

    // ensure gaussians are not clipped by camera near and far
    centerProj.z = clamp(centerProj.z, 0.0, abs(centerProj.w));

    center.view = centerView.xyz / centerView.w;
    center.proj = centerProj;
    center.projMat00 = uniform.matrix_projection[0][0];
    center.modelView = modelView;
    return true;
}
`,XD=`

var splatColor: texture_2d<f32>;

fn readColor(source: ptr<function, SplatSource>) -> vec4f {
    return textureLoad(splatColor, source.uv, 0);
}
`,qD=`

// stores the source UV and order of the splat
struct SplatSource {
    order: u32,         // render order
    id: u32,            // splat id
    uv: vec2<i32>,      // splat uv
    cornerUV: vec2f,    // corner coordinates for this vertex of the gaussian (-1, -1)..(1, 1)
}

// stores the camera and clip space position of the gaussian center
struct SplatCenter {
    view: vec3f,          // center in view space
    proj: vec4f,          // center in clip space
    modelView: mat4x4f,   // model-view matrix
    projMat00: f32,       // elememt [0][0] of the projection matrix
}

// stores the offset from center for the current gaussian
struct SplatCorner {
    offset: vec2f,        // corner offset from center in clip space
    uv: vec2f,            // corner uv
    #if GSPLAT_AA
        aaFactor: f32, // for scenes generated with antialiasing
    #endif
}

#include "gsplatEvalSHVS"
#include "gsplatQuatToMat3VS"

#if GSPLAT_COMPRESSED_DATA
    #include "gsplatCompressedDataVS"
    #if SH_BANDS > 0
        #include "gsplatCompressedSHVS"
    #endif
#elif GSPLAT_SOGS_DATA
    #include "gsplatSogsDataVS"
    #include "gsplatSogsColorVS"
    #if SH_BANDS > 0
        #include "gsplatSogsSHVS"
    #endif
#else
    #include "gsplatDataVS"
    #include "gsplatColorVS"
    #if SH_BANDS > 0
        #include "gsplatSHVS"
    #endif
#endif

#include "gsplatSourceVS"
#include "gsplatCenterVS"
#include "gsplatCornerVS"
#include "gsplatOutputVS"

// modify the gaussian corner so it excludes gaussian regions with alpha less than 1/255
fn clipCorner(corner: ptr<function, SplatCorner>, alpha: f32) {
    let clip: f32 = min(1.0, sqrt(-log(1.0 / (255.0 * alpha))) / 2.0);
    corner.offset = corner.offset * clip;
    corner.uv = corner.uv * clip;
}

`,jD=`
var packedTexture: texture_2d<u32>;
var chunkTexture: texture_2d<f32>;

// work values
var<private> chunkDataA: vec4f;    // x: min_x, y: min_y, z: min_z, w: max_x
var<private> chunkDataB: vec4f;    // x: max_y, y: max_z, z: scale_min_x, w: scale_min_y
var<private> chunkDataC: vec4f;    // x: scale_min_z, y: scale_max_x, z: scale_max_y, w: scale_max_z
var<private> chunkDataD: vec4f;    // x: min_r, y: min_g, z: min_b, w: max_r
var<private> chunkDataE: vec4f;    // x: max_g, y: max_b, z: unused, w: unused
var<private> packedData: vec4u;    // x: position bits, y: rotation bits, z: scale bits, w: color bits

fn unpack111011(bits: u32) -> vec3f {
    return (vec3f((vec3<u32>(bits) >> vec3<u32>(21u, 11u, 0u)) & vec3<u32>(0x7ffu, 0x3ffu, 0x7ffu))) / vec3f(2047.0, 1023.0, 2047.0);
}

fn unpack8888(bits: u32) -> vec4f {
    return vec4f(
        f32((bits >> 24u) & 0xffu),
        f32((bits >> 16u) & 0xffu),
        f32((bits >> 8u)  & 0xffu),
        f32(bits         & 0xffu)
    ) / 255.0;
}

const norm_const: f32 = 1.0 / (sqrt(2.0) * 0.5);

fn unpackRotation(bits: u32) -> vec4f {
    let a = (f32((bits >> 20u) & 0x3ffu) / 1023.0 - 0.5) * norm_const;
    let b = (f32((bits >> 10u) & 0x3ffu) / 1023.0 - 0.5) * norm_const;
    let c = (f32(bits & 0x3ffu) / 1023.0 - 0.5) * norm_const;
    let m = sqrt(1.0 - (a * a + b * b + c * c));

    let mode = bits >> 30u;
    if (mode == 0u) { return vec4f(m, a, b, c); }
    if (mode == 1u) { return vec4f(a, m, b, c); }
    if (mode == 2u) { return vec4f(a, b, m, c); }
    return vec4f(a, b, c, m);
}

// read center
fn readCenter(source: ptr<function, SplatSource>) -> vec3f {
    let tex_size_u = textureDimensions(chunkTexture, 0);
    let w: u32 = tex_size_u.x / 5u;
    let chunkId: u32 = source.id / 256u;
    let chunkUV: vec2<i32> = vec2<i32>(i32((chunkId % w) * 5u), i32(chunkId / w));

    // read chunk and packed compressed data
    chunkDataA = textureLoad(chunkTexture, chunkUV + vec2<i32>(0, 0), 0);
    chunkDataB = textureLoad(chunkTexture, chunkUV + vec2<i32>(1, 0), 0);
    chunkDataC = textureLoad(chunkTexture, chunkUV + vec2<i32>(2, 0), 0);
    chunkDataD = textureLoad(chunkTexture, chunkUV + vec2<i32>(3, 0), 0);
    chunkDataE = textureLoad(chunkTexture, chunkUV + vec2<i32>(4, 0), 0);
    packedData = textureLoad(packedTexture, source.uv, 0);

    return mix(chunkDataA.xyz, vec3f(chunkDataA.w, chunkDataB.xy), unpack111011(packedData.x));
}

fn readColor(source: ptr<function, SplatSource>) -> vec4f {
    let r = unpack8888(packedData.w);
    return vec4f(mix(chunkDataD.xyz, vec3f(chunkDataD.w, chunkDataE.xy), r.rgb), r.w);
}

fn getRotation() -> vec4f {
    return unpackRotation(packedData.y);
}

fn getScale() -> vec3f {
    return exp(mix(vec3f(chunkDataB.zw, chunkDataC.x), chunkDataC.yzw, unpack111011(packedData.z)));
}

// given a rotation matrix and scale vector, compute 3d covariance A and B
fn readCovariance(source: ptr<function, SplatSource>, covA_ptr: ptr<function, vec3f>, covB_ptr: ptr<function, vec3f>) {
    let rot = quatToMat3(getRotation());
    let scale = getScale();

    // M = S * R
    let M = transpose(mat3x3f(
        scale.x * rot[0],
        scale.y * rot[1],
        scale.z * rot[2]
    ));

    *covA_ptr = vec3f(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
    *covB_ptr = vec3f(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}
`,YD=`
#if SH_BANDS > 0

var shTexture0: texture_2d<u32>;
var shTexture1: texture_2d<u32>;
var shTexture2: texture_2d<u32>;

fn unpack8888s(bits: u32) -> vec4f {
    let unpacked_u = (vec4<u32>(bits) >> vec4<u32>(0u, 8u, 16u, 24u)) & vec4<u32>(0xffu);
    return vec4f(unpacked_u) * (8.0 / 255.0) - 4.0;
}

fn readSHData(source: ptr<function, SplatSource>, sh: ptr<function, array<vec3f, 15>>, scale: ptr<function, f32>) {
    // read the sh coefficients
    let shData0: vec4<u32> = textureLoad(shTexture0, source.uv, 0);
    let shData1: vec4<u32> = textureLoad(shTexture1, source.uv, 0);
    let shData2: vec4<u32> = textureLoad(shTexture2, source.uv, 0);

    let r0 = unpack8888s(shData0.x);
    let r1 = unpack8888s(shData0.y);
    let r2 = unpack8888s(shData0.z);
    let r3 = unpack8888s(shData0.w);

    let g0 = unpack8888s(shData1.x);
    let g1 = unpack8888s(shData1.y);
    let g2 = unpack8888s(shData1.z);
    let g3 = unpack8888s(shData1.w);

    let b0 = unpack8888s(shData2.x);
    let b1 = unpack8888s(shData2.y);
    let b2 = unpack8888s(shData2.z);
    let b3 = unpack8888s(shData2.w);

    sh[0] =  vec3f(r0.x, g0.x, b0.x);
    sh[1] =  vec3f(r0.y, g0.y, b0.y);
    sh[2] =  vec3f(r0.z, g0.z, b0.z);
    sh[3] =  vec3f(r0.w, g0.w, b0.w);
    sh[4] =  vec3f(r1.x, g1.x, b1.x);
    sh[5] =  vec3f(r1.y, g1.y, b1.y);
    sh[6] =  vec3f(r1.z, g1.z, b1.z);
    sh[7] =  vec3f(r1.w, g1.w, b1.w);
    sh[8] =  vec3f(r2.x, g2.x, b2.x);
    sh[9] =  vec3f(r2.y, g2.y, b2.y);
    sh[10] = vec3f(r2.z, g2.z, b2.z);
    sh[11] = vec3f(r2.w, g2.w, b2.w);
    sh[12] = vec3f(r3.x, g3.x, b3.x);
    sh[13] = vec3f(r3.y, g3.y, b3.y);
    sh[14] = vec3f(r3.z, g3.z, b3.z);

    *scale = 1.0;
}

#endif
`,KD=`
    #if SH_BANDS == 1
        const SH_COEFFS: i32 = 3;
    #elif SH_BANDS == 2
        const SH_COEFFS: i32 = 8;
    #elif SH_BANDS == 3
        const SH_COEFFS: i32 = 15;
    #else
        const SH_COEFFS: i32 = 0;
    #endif

    #if SH_BANDS > 0

    const SH_C1: f32 = 0.4886025119029199;

    #if SH_BANDS > 1
        const SH_C2_0: f32 = 1.0925484305920792;
        const SH_C2_1: f32 = -1.0925484305920792;
        const SH_C2_2: f32 = 0.31539156525252005;
        const SH_C2_3: f32 = -1.0925484305920792;
        const SH_C2_4: f32 = 0.5462742152960396;
    #endif

    #if SH_BANDS > 2
        const SH_C3_0: f32 = -0.5900435899266435;
        const SH_C3_1: f32 = 2.890611442640554;
        const SH_C3_2: f32 = -0.4570457994644658;
        const SH_C3_3: f32 = 0.3731763325901154;
        const SH_C3_4: f32 = -0.4570457994644658;
        const SH_C3_5: f32 = 1.445305721320277;
        const SH_C3_6: f32 = -0.5900435899266435;
    #endif

    // see https://github.com/graphdeco-inria/gaussian-splatting/blob/main/utils/sh_utils.py
    fn evalSH(sh: ptr<function, array<vec3f, SH_COEFFS>>, dir: vec3f) -> vec3f {
        let x = dir.x;
        let y = dir.y;
        let z = dir.z;

        // 1st degree
        var result = SH_C1 * (-sh[0] * y + sh[1] * z - sh[2] * x);

        #if SH_BANDS > 1
            // 2nd degree
            let xx = x * x;
            let yy = y * y;
            let zz = z * z;
            let xy = x * y;
            let yz = y * z;
            let xz = x * z;

            result = result + (
                sh[3] * (SH_C2_0 * xy) +
                sh[4] * (SH_C2_1 * yz) +
                sh[5] * (SH_C2_2 * (2.0 * zz - xx - yy)) +
                sh[6] * (SH_C2_3 * xz) +
                sh[7] * (SH_C2_4 * (xx - yy))
            );
        #endif

        #if SH_BANDS > 2
            // 3rd degree
            result = result + (
                sh[8]  * (SH_C3_0 * y * (3.0 * xx - yy)) +
                sh[9]  * (SH_C3_1 * xy * z) +
                sh[10] * (SH_C3_2 * y * (4.0 * zz - xx - yy)) +
                sh[11] * (SH_C3_3 * z * (2.0 * zz - 3.0 * xx - 3.0 * yy)) +
                sh[12] * (SH_C3_4 * x * (4.0 * zz - xx - yy)) +
                sh[13] * (SH_C3_5 * z * (xx - yy)) +
                sh[14] * (SH_C3_6 * x * (xx - 3.0 * yy))
            );
        #endif

        return result;
    }
    #endif
`,ZD=`
fn quatToMat3(R: vec4<f32>) -> mat3x3<f32> {
    let R2: vec4<f32> = R + R;
    let X: f32       = R2.x * R.w;
    let Y: vec4<f32> = R2.y * R;
    let Z: vec4<f32> = R2.z * R;
    let W: f32       = R2.w * R.w;

    return mat3x3<f32>(
        1.0 - Z.z - W,  Y.z + X,      Y.w - Z.x,
        Y.z - X,        1.0 - Y.y - W, Z.w + Y.x,
        Y.w + Z.x,      Z.w - Y.x,     1.0 - Y.y - Z.z
    );
}
`,QD=`
var sh0: texture_2d<f32>;

uniform sh0_mins: vec4f;
uniform sh0_maxs: vec4f;

const SH_C0: f32 = 0.28209479177387814;

fn readColor(source: ptr<function, SplatSource>) -> vec4f {
    let clr: vec4f = mix(uniform.sh0_mins, uniform.sh0_maxs, textureLoad(sh0, source.uv, 0));
    return vec4f(vec3f(0.5) + clr.xyz * SH_C0, 1.0 / (1.0 + exp(-clr.w)));
}
`,JD=`
var packedTexture: texture_2d<u32>;

uniform means_mins: vec3f;
uniform means_maxs: vec3f;

uniform scales_mins: vec3f;
uniform scales_maxs: vec3f;

fn unpackU32(u: u32) -> vec4f {
    return vec4f(
        f32((u >> 24u) & 0xFFu) / 255.0,
        f32((u >> 16u) & 0xFFu) / 255.0,
        f32((u >> 8u) & 0xFFu) / 255.0,
        f32(u & 0xFFu) / 255.0
    );
}

var<private> packedSample: vec4<u32>;

// read the model-space center of the gaussian
fn readCenter(source: ptr<function, SplatSource>) -> vec3f {

    packedSample = textureLoad(packedTexture, source.uv, 0);

    let l: vec3f = unpackU32(packedSample.x).xyz;
    let u: vec3f = unpackU32(packedSample.y).xyz;
    let n: vec3f = (l * 255.0 + u * 255.0 * 256.0) / 65535.0;
    let v: vec3f = mix(uniform.means_mins, uniform.means_maxs, n);

    return sign(v) * (exp(abs(v)) - 1.0);
}

const norm: f32 = 2.0 / sqrt(2.0);

// sample covariance vectors
fn readCovariance(source: ptr<function, SplatSource>, covA_ptr: ptr<function, vec3f>, covB_ptr: ptr<function, vec3f>) {
    let qdata: vec4f = unpackU32(packedSample.z);
    let sdata: vec3f = unpackU32(packedSample.w).xyz;

    let abc: vec3f = (qdata.xyz - 0.5) * norm;
    let d: f32 = sqrt(max(0.0, 1.0 - dot(abc, abc)));

    let mode: u32 = u32(qdata.w * 255.0 + 0.5) - 252u;

    var quat: vec4f;
    if (mode == 0u) {
        quat = vec4f(d, abc);
    } else if (mode == 1u) {
        quat = vec4f(abc.x, d, abc.y, abc.z);
    } else if (mode == 2u) {
        quat = vec4f(abc.x, abc.y, d, abc.z);
    } else {
        quat = vec4f(abc.x, abc.y, abc.z, d);
    }


    let rot: mat3x3f = quatToMat3(quat);
    let scale: vec3f = exp(mix(uniform.scales_mins, uniform.scales_maxs, sdata));

    // M = S * R
    let M: mat3x3f = transpose(mat3x3f(
        scale.x * rot[0],
        scale.y * rot[1],
        scale.z * rot[2]
    ));

    *covA_ptr = vec3f(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
    *covB_ptr = vec3f(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}
`,eI=`
var sh_centroids: texture_2d<f32>;

uniform shN_mins: f32;
uniform shN_maxs: f32;

fn readSHData(source: ptr<function, SplatSource>, sh: ptr<function, array<vec3f, SH_COEFFS>>, scale: ptr<function, f32>) {
    // extract spherical harmonics palette index
    let t: vec2<i32> = vec2<i32>(i32(packedSample.x & 255u), i32(packedSample.y & 255u));
    let n: i32 = t.x + t.y * 256;
    let u: i32 = (n % 64) * SH_COEFFS;
    let v: i32 = n / 64;

    // calculate offset into the centroids texture and read consecutive texels
    for (var i: i32 = 0; i < SH_COEFFS; i = i + 1) {
        sh[i] = mix(vec3f(uniform.shN_mins), vec3f(uniform.shN_maxs), textureLoad(sh_centroids, vec2<i32>(u + i, v), 0).xyz);
    }

    *scale = 1.0;
}
`,tI=`
uniform viewport: vec2f;                  // viewport dimensions
uniform camera_params: vec4f;             // 1 / far, far, near, isOrtho

// calculate the clip-space offset from the center for this gaussian
fn initCorner(source: ptr<function, SplatSource>, center: ptr<function, SplatCenter>, corner: ptr<function, SplatCorner>) -> bool {
    // get covariance
    var covA: vec3f;
    var covB: vec3f;
    readCovariance(source, &covA, &covB);

    let Vrk = mat3x3f(
        vec3f(covA.x, covA.y, covA.z),
        vec3f(covA.y, covB.x, covB.y),
        vec3f(covA.z, covB.y, covB.z)
    );

    let focal = uniform.viewport.x * center.projMat00;

    let v = select(center.view.xyz, vec3f(0.0, 0.0, 1.0), uniform.camera_params.w == 1.0);
    let J1 = focal / v.z;
    let J2 = -J1 / v.z * v.xy;
    let J = mat3x3f(
        vec3f(J1, 0.0, J2.x),
        vec3f(0.0, J1, J2.y),
        vec3f(0.0, 0.0, 0.0)
    );

    let W = transpose(mat3x3f(center.modelView[0].xyz, center.modelView[1].xyz, center.modelView[2].xyz));
    let T = W * J;
    let cov = transpose(T) * Vrk * T;

    #if GSPLAT_AA
        // calculate AA factor
        let detOrig = cov[0][0] * cov[1][1] - cov[0][1] * cov[1][0]; // Using [0][1] * [1][0] as matrix might not be perfectly symmetric numerically
        let detBlur = (cov[0][0] + 0.3) * (cov[1][1] + 0.3) - cov[0][1] * cov[1][0];
        corner.aaFactor = sqrt(detOrig / detBlur);
    #endif

    let diagonal1 = cov[0][0] + 0.3;
    let offDiagonal = cov[0][1];
    let diagonal2 = cov[1][1] + 0.3;

    let mid = 0.5 * (diagonal1 + diagonal2);
    let radius = length(vec2f((diagonal1 - diagonal2) / 2.0, offDiagonal));
    let lambda1 = mid + radius;
    let lambda2 = max(mid - radius, 0.1);

    // Use the smaller viewport dimension to limit the kernel size relative to the screen resolution.
    let vmin = min(1024.0, min(uniform.viewport.x, uniform.viewport.y));

    let l1 = 2.0 * min(sqrt(2.0 * lambda1), vmin);
    let l2 = 2.0 * min(sqrt(2.0 * lambda2), vmin);

    // early-out gaussians smaller than 2 pixels
    if (l1 < 2.0 && l2 < 2.0) {
        return false;
    }

    let c = center.proj.ww / uniform.viewport;

    // cull against frustum x/y axes
    if (any((abs(center.proj.xy) - vec2f(max(l1, l2)) * c) > center.proj.ww)) {
        return false;
    }

    let diagonalVector = normalize(vec2f(offDiagonal, lambda1 - diagonal1));
    let v1 = l1 * diagonalVector;
    let v2 = l2 * vec2f(diagonalVector.y, -diagonalVector.x); // Swizzle

    corner.offset = (source.cornerUV.x * v1 + source.cornerUV.y * v2) * c;
    corner.uv = source.cornerUV;

    return true;
}
`,sI=`
var transformA: texture_2d<u32>;
var transformB: texture_2d<f32>;

// work values
var<private> tAw: u32;

// read the model-space center of the gaussian
fn readCenter(source: ptr<function, SplatSource>) -> vec3f {
    // read transform data
    let tA: vec4<u32> = textureLoad(transformA, source.uv, 0);
    tAw = tA.w;
    return bitcast<vec3f>(tA.xyz);
}

fn unpackRotation(packed: vec3f) -> vec4f {
    return vec4f(packed.xyz, sqrt(max(0.0, 1.0 - dot(packed, packed))));
}

// sample covariance vectors
fn readCovariance(source: ptr<function, SplatSource>, covA_ptr: ptr<function, vec3f>, covB_ptr: ptr<function, vec3f>) {
    let tB: vec4f = textureLoad(transformB, source.uv, 0);

    let rot: mat3x3f = quatToMat3(unpackRotation(vec3f(unpack2x16float(bitcast<u32>(tAw)), tB.w)).wxyz);
    let scale: vec3f = tB.xyz;

    // M = S * R
    let M = transpose(mat3x3f(
        scale.x * rot[0],
        scale.y * rot[1],
        scale.z * rot[2]
    ));

    *covA_ptr = vec3f(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
    *covB_ptr = vec3f(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}
`,iI=`

#include "tonemappingPS"
#include "decodePS"
#include "gammaPS"

// prepare the output color for the given gamma-space color
fn prepareOutputFromGamma(gammaColor: vec3f) -> vec3f {
    #if TONEMAP == NONE
        #if GAMMA == NONE
            // convert to linear space
            return decodeGamma3(gammaColor);
        #else 
            // output gamma space color directly
            return gammaColor;
        #endif
    #else
        // apply tonemapping in linear space and output to linear or
        // gamma (which is handled by gammaCorrectOutput)
        return gammaCorrectOutput(toneMap(decodeGamma3(gammaColor)));
    #endif
}
`,rI=`

#ifndef DITHER_NONE
    #include "bayerPS"
    #include "opacityDitherPS"
    varying id: f32;
#endif

#ifdef PICK_PASS
    #include "pickPS"
#endif

#if defined(SHADOW_PASS) || defined(PICK_PASS) || defined(PREPASS_PASS)
    uniform alphaClip: f32;
#endif

#ifdef PREPASS_PASS
    varying vLinearDepth: f32;
    #include "floatAsUintPS"
#endif

// Fast approximate e^x based on https://nic.schraudolph.org/pubs/Schraudolph99.pdf
const EXP_A: f32      = 12102203.0;   // ≈ 2^23 / ln(2)
const EXP_BC_RMS: i32 = 1064866808;   // (127 << 23) - 60801 * 8
fn fastExp(x: f32) -> f32 {
    var i: i32 = i32(EXP_A * x) + EXP_BC_RMS;
    return bitcast<f32>(i);
}

varying gaussianUV: vec2f;
varying gaussianColor: vec4f;

@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
    var output: FragmentOutput;

    let A: f32 = dot(gaussianUV, gaussianUV);
    if (A > 1.0) {
        discard;
        return output;
    }

    // evaluate alpha
    var alpha: f32 = fastExp(-A * 4.0) * gaussianColor.a;

    #if defined(SHADOW_PASS) || defined(PICK_PASS) || defined(PREPASS_PASS)
        if (alpha < uniform.alphaClip) {
            discard;
            return output;
        }
    #endif

    #ifdef PICK_PASS

        output.color = getPickOutput();

    #elif SHADOW_PASS

        output.color = vec4f(0.0, 0.0, 0.0, 1.0);

    #elif PREPASS_PASS

        output.color = float2vec4(vLinearDepth);

    #else

        if (alpha < (1.0 / 255.0)) {
            discard;
            return output;
        }

        #ifndef DITHER_NONE
            opacityDither(&alpha, id * 0.013);
        #endif

        output.color = vec4f(input.gaussianColor.xyz, alpha);
    #endif

    return output;
}`,aI=`

#if SH_BANDS > 0

// unpack signed 11 10 11 bits
fn unpack111011s(bits: u32) -> vec3f {
    return (vec3f((vec3<u32>(bits) >> vec3<u32>(21u, 11u, 0u)) & vec3<u32>(0x7ffu, 0x3ffu, 0x7ffu)) / vec3f(2047.0, 1023.0, 2047.0)) * 2.0 - 1.0;
}

struct ScaleAndSH {
    scale: f32,
    a: vec3f,
    b: vec3f,
    c: vec3f
};

// fetch quantized spherical harmonic coefficients
fn fetchScale(t_in: vec4<u32>) -> ScaleAndSH {
    var result: ScaleAndSH;
    result.scale = bitcast<f32>(t_in.x);
    result.a = unpack111011s(t_in.y);
    result.b = unpack111011s(t_in.z);
    result.c = unpack111011s(t_in.w);
    return result;
}

struct SH {
    a: vec3f,
    b: vec3f,
    c: vec3f,
    d: vec3f
};

// fetch quantized spherical harmonic coefficients
fn fetch4(t_in: vec4<u32>) -> SH {
    var result: SH;
    result.a = unpack111011s(t_in.x);
    result.b = unpack111011s(t_in.y);
    result.c = unpack111011s(t_in.z);
    result.d = unpack111011s(t_in.w);
    return result;
}

fn fetch1(t_in: u32) -> vec3f {
    return unpack111011s(t_in);
}

#if SH_BANDS == 1
    var splatSH_1to3: texture_2d<u32>;

    fn readSHData(source: ptr<function, SplatSource>, sh: ptr<function, array<vec3f, 3>>, scale: ptr<function, f32>) {
        let result = fetchScale(textureLoad(splatSH_1to3, source.uv, 0));
        *scale = result.scale;
        sh[0] = result.a;
        sh[1] = result.b;
        sh[2] = result.c;
    }
#elif SH_BANDS == 2
    var splatSH_1to3: texture_2d<u32>;
    var splatSH_4to7: texture_2d<u32>;
    var splatSH_8to11: texture_2d<u32>;

    fn readSHData(source: ptr<function, SplatSource>, sh: ptr<function, array<vec3f, 8>>, scale: ptr<function, f32>) {
        let first: ScaleAndSH = fetchScale(textureLoad(splatSH_1to3, source.uv, 0));
        *scale = first.scale;
        sh[0] = first.a;
        sh[1] = first.b;
        sh[2] = first.c;

        let second: SH = fetch4(textureLoad(splatSH_4to7, source.uv, 0));
        sh[3] = second.a;
        sh[4] = second.b;
        sh[5] = second.c;
        sh[6] = second.d;

        sh[7] = fetch1(textureLoad(splatSH_8to11, source.uv, 0).x);
    }
#else
    var splatSH_1to3: texture_2d<u32>;
    var splatSH_4to7: texture_2d<u32>;
    var splatSH_8to11: texture_2d<u32>;
    var splatSH_12to15: texture_2d<u32>;

    fn readSHData(source: ptr<function, SplatSource>, sh: ptr<function, array<vec3f, 15>>, scale: ptr<function, f32>) {
        let first: ScaleAndSH = fetchScale(textureLoad(splatSH_1to3, source.uv, 0));
        *scale = first.scale;
        sh[0] = first.a;
        sh[1] = first.b;
        sh[2] = first.c;

        let second: SH = fetch4(textureLoad(splatSH_4to7, source.uv, 0));
        sh[3] = second.a;
        sh[4] = second.b;
        sh[5] = second.c;
        sh[6] = second.d;

        let third: SH = fetch4(textureLoad(splatSH_8to11, source.uv, 0));
        sh[7] = third.a;
        sh[8] = third.b;
        sh[9] = third.c;
        sh[10] = third.d;

        let fourth: SH = fetch4(textureLoad(splatSH_12to15, source.uv, 0));
        sh[11] = fourth.a;
        sh[12] = fourth.b;
        sh[13] = fourth.c;
        sh[14] = fourth.d;
    }
#endif

#endif
`,nI=`
attribute vertex_position: vec3f;         // xy: cornerUV, z: render order offset
attribute vertex_id_attrib: u32;          // render order base

uniform numSplats: u32;                   // total number of splats
var splatOrder: texture_2d<u32>;          // per-splat index to source gaussian

// initialize the splat source structure
fn initSource(source: ptr<function, SplatSource>) -> bool {
    let w: u32 = textureDimensions(splatOrder, 0).x;

    // calculate splat order
    source.order = vertex_id_attrib + u32(vertex_position.z);

    // return if out of range (since the last block of splats may be partially full)
    if (source.order >= uniform.numSplats) {
        return false;
    }

    let orderUV = vec2i(vec2u(source.order % w, source.order / w));

    // read splat id
    source.id = textureLoad(splatOrder, orderUV, 0).r;

    // map id to uv
    source.uv = vec2i(vec2u(source.id % w, source.id / w));

    // get the corner
    source.cornerUV = vertex_position.xy;

    return true;
}
`,oI=`
#include "gsplatCommonVS"

varying gaussianUV: vec2f;
varying gaussianColor: vec4f;

#ifndef DITHER_NONE
    varying id: f32;
#endif

const discardVec: vec4f = vec4f(0.0, 0.0, 2.0, 1.0);

#ifdef PREPASS_PASS
    varying vLinearDepth: f32;
#endif

@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
    var output: VertexOutput;

    // read gaussian details
    var source: SplatSource;
    if (!initSource(&source)) {
        output.position = discardVec;
        return output;
    }

    let modelCenter: vec3f = readCenter(&source);

    var center: SplatCenter;
    if (!initCenter(modelCenter, &center)) {
        output.position = discardVec;
        return output;
    }

    // project center to screen space
    var corner: SplatCorner;
    if (!initCorner(&source, &center, &corner)) {
        output.position = discardVec;
        return output;
    }

    // read color
    var clr: vec4f = readColor(&source);

    #if GSPLAT_AA
        // apply AA compensation
        clr.a = clr.a * corner.aaFactor;
    #endif

    // evaluate spherical harmonics
    #if SH_BANDS > 0
        // calculate the model-space view direction
        let modelView3x3 = mat3x3f(center.modelView[0].xyz, center.modelView[1].xyz, center.modelView[2].xyz);
        let dir = normalize(modelView3x3 * center.view);

        // read sh coefficients
        var sh: array<vec3f, SH_COEFFS>;
        var scale: f32;
        readSHData(&source, &sh, &scale);

        // evaluate
        clr = vec4f(clr.xyz + evalSH(&sh, dir) * scale, clr.a);
    #endif

    clipCorner(&corner, clr.w);

    // write output
    output.position = center.proj + vec4f(corner.offset, 0.0, 0.0);
    output.gaussianUV = corner.uv;
    output.gaussianColor = vec4f(prepareOutputFromGamma(max(clr.xyz, vec3f(0.0))), clr.w);

    #ifndef DITHER_NONE
        output.id = f32(source.id);
    #endif

    #ifdef PREPASS_PASS
        output.vLinearDepth = -center.view.z;
    #endif

    return output;
}
`,lI=`
    attribute aPosition: vec2f;
    varying uv0: vec2f;
    @vertex fn vertexMain(input: VertexInput) -> VertexOutput {
        var output: VertexOutput;
        output.position = vec4f(input.aPosition, 0.0, 1.0);
        output.uv0 = getImageEffectUV((input.aPosition + 1.0) * 0.5);
        return output;
    }
`,hI=`
// Indirect indexed draw call parameters
struct DrawIndexedIndirectArgs {
    indexCount: u32,        // Number of indices to draw
    instanceCount: u32,     // Number of instances to draw
    firstIndex: u32,        // Index of the first index in the index buffer
    baseVertex: i32,        // Offset added to each index before fetching vertex
    firstInstance: u32      // First instance ID
};

// Indirect non-indexed draw call parameters
struct DrawIndirectArgs {
    vertexCount: u32,       // Number of vertices to draw
    instanceCount: u32,     // Number of instances to draw
    firstVertex: u32,       // Index of the first vertex
    firstInstance: u32,     // First instance ID
    _pad: u32               // Padding to match indexed size (unused)
};
`,cI=`
    #include "gammaPS"
    varying color: vec4f;
    @fragment
    fn fragmentMain(input : FragmentInput) -> FragmentOutput {
        var output: FragmentOutput;
        output.color = vec4f(gammaCorrectOutput(decodeGamma3(input.color.rgb)), input.color.a);
        return output;
    }
`,dI=`
    attribute vertex_position: vec4f;
    attribute vertex_color: vec4f;
    uniform matrix_model: mat4x4f;
    uniform matrix_viewProjection: mat4x4f;
    varying color: vec4f;
    @vertex
    fn vertexMain(input : VertexInput) -> VertexOutput {
        var output : VertexOutput;
        output.color = input.vertex_color;
        output.position = uniform.matrix_viewProjection * uniform.matrix_model * input.vertex_position;
        return output;
    }
`,fI=`
uniform material_iridescenceRefractionIndex: f32;

fn iridescence_iorToFresnelScalar(transmittedIor: f32, incidentIor: f32) -> f32 {
    return pow((transmittedIor - incidentIor) / (transmittedIor + incidentIor), 2.0);
}

fn iridescence_iorToFresnelVec3(transmittedIor: vec3f, incidentIor: f32) -> vec3f {
    return pow((transmittedIor - vec3f(incidentIor)) / (transmittedIor + vec3f(incidentIor)), vec3f(2.0));
}

fn iridescence_fresnelToIor(f0: vec3f) -> vec3f {
    let sqrtF0: vec3f = sqrt(f0);
    return (vec3f(1.0) + sqrtF0) / (vec3f(1.0) - sqrtF0);
}

const XYZ_TO_REC709: mat3x3f = mat3x3f(
    vec3f(3.2404542, -1.5371385, -0.4985314),
    vec3f(-0.9692660,  1.8760108,  0.0415560),
    vec3f(0.0556434, -0.2040259,  1.0572252)
);

fn iridescence_sensitivity(opd: f32, shift: vec3f) -> vec3f {
    let PI: f32 = 3.141592653589793;
    let phase: f32 = 2.0 * PI * opd * 1.0e-9;
    const val: vec3f = vec3f(5.4856e-13, 4.4201e-13, 5.2481e-13);
    const pos: vec3f = vec3f(1.6810e+06, 1.7953e+06, 2.2084e+06);
    const var_: vec3f = vec3f(4.3278e+09, 9.3046e+09, 6.6121e+09);

    var xyz: vec3f = val * sqrt(2.0 * PI * var_) * cos(pos * phase + shift) * exp(-pow(phase, 2.0) * var_);
    xyz.x = xyz.x + 9.7470e-14 * sqrt(2.0 * PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(-4.5282e+09 * pow(phase, 2.0));
    xyz = xyz / vec3f(1.0685e-07);

    return XYZ_TO_REC709 * xyz;
}

fn iridescence_fresnelScalar(cosTheta: f32, f0: f32) -> f32 {
    let x: f32 = clamp(1.0 - cosTheta, 0.0, 1.0);
    let x2: f32 = x * x;
    let x5: f32 = x * x2 * x2;
    return f0 + (1.0 - f0) * x5;
}

fn iridescence_fresnelVec3(cosTheta: f32, f0: vec3f) -> vec3f {
    let x: f32 = clamp(1.0 - cosTheta, 0.0, 1.0);
    let x2: f32 = x * x;
    let x5: f32 = x * x2 * x2;
    return f0 + (vec3f(1.0) - f0) * x5;
}

fn calcIridescence(outsideIor: f32, cosTheta: f32, base_f0: vec3f, iridescenceThickness: f32) -> vec3f {
    let PI: f32 = 3.141592653589793;

    let iridescenceIor: f32 = mix(outsideIor, uniform.material_iridescenceRefractionIndex, smoothstep(0.0, 0.03, iridescenceThickness));
    let sinTheta2Sq: f32 = pow(outsideIor / iridescenceIor, 2.0) * (1.0 - pow(cosTheta, 2.0));
    let cosTheta2Sq: f32 = 1.0 - sinTheta2Sq;

    if (cosTheta2Sq < 0.0) {
        return vec3f(1.0);
    }

    let cosTheta2: f32 = sqrt(cosTheta2Sq);

    let r0: f32 = iridescence_iorToFresnelScalar(iridescenceIor, outsideIor);
    let r12: f32 = iridescence_fresnelScalar(cosTheta, r0);
    let r21: f32 = r12;
    let t121: f32 = 1.0 - r12;

    let phi12: f32 = select(0.0, PI, iridescenceIor < outsideIor);
    let phi21: f32 = PI - phi12;

    let baseIor: vec3f = iridescence_fresnelToIor(base_f0 + vec3f(0.0001));
    let r1: vec3f = iridescence_iorToFresnelVec3(baseIor, iridescenceIor);
    let r23: vec3f = iridescence_fresnelVec3(cosTheta2, r1);

    let phi23: vec3f = select(vec3f(0.0), vec3f(PI), baseIor < vec3f(iridescenceIor));
    let opd: f32 = 2.0 * iridescenceIor * iridescenceThickness * cosTheta2;
    let phi: vec3f = vec3f(phi21) + phi23; // Promote scalar phi21 to vec3f

    let r123Sq: vec3f = clamp(vec3f(r12) * r23, vec3f(1e-5), vec3f(0.9999));
    let r123: vec3f = sqrt(r123Sq);
    let rs: vec3f = pow(vec3f(t121), vec3f(2.0)) * r23 / (vec3f(1.0) - r123Sq);

    let c0: vec3f = vec3f(r12) + rs;
    var i_irid: vec3f = c0;

    var cm: vec3f = rs - vec3f(t121);

    cm = cm * r123;
    let sm1: vec3f = 2.0 * iridescence_sensitivity(1.0 * opd, 1.0 * phi);
    i_irid = i_irid + cm * sm1;

    cm = cm * r123;
    let sm2: vec3f = 2.0 * iridescence_sensitivity(2.0 * opd, 2.0 * phi);
    i_irid = i_irid + cm * sm2;

    return max(i_irid, vec3f(0.0));
}

fn getIridescenceDiffraction(cosTheta: f32, specularity: vec3f, iridescenceThickness: f32) -> vec3f {
    return calcIridescence(1.0, cosTheta, specularity, iridescenceThickness);
}
`,uI=`
#ifdef STD_IRIDESCENCE_CONSTANT
    uniform material_iridescence: f32;
#endif

fn getIridescence() {
    var iridescence = 1.0;

    #ifdef STD_IRIDESCENCE_CONSTANT
    iridescence = iridescence * uniform.material_iridescence;
    #endif

    #ifdef STD_IRIDESCENCE_TEXTURE
    iridescence = iridescence * textureSampleBias({STD_IRIDESCENCE_TEXTURE_NAME}, {STD_IRIDESCENCE_TEXTURE_NAME}Sampler, {STD_IRIDESCENCE_TEXTURE_UV}, uniform.textureBias).{STD_IRIDESCENCE_TEXTURE_CHANNEL};
    #endif

    dIridescence = iridescence; 
}
`,pI=`
uniform material_iridescenceThicknessMax: f32;

#ifdef STD_IRIDESCENCETHICKNESS_TEXTURE
    uniform material_iridescenceThicknessMin: f32;
#endif

fn getIridescenceThickness() {

    #ifdef STD_IRIDESCENCETHICKNESS_TEXTURE
        var blend: f32 = textureSampleBias({STD_IRIDESCENCETHICKNESS_TEXTURE_NAME}, {STD_IRIDESCENCETHICKNESS_TEXTURE_NAME}Sampler, {STD_IRIDESCENCETHICKNESS_TEXTURE_UV}, uniform.textureBias).{STD_IRIDESCENCETHICKNESS_TEXTURE_CHANNEL};
        var iridescenceThickness: f32 = mix(uniform.material_iridescenceThicknessMin, uniform.material_iridescenceThicknessMax, blend);
    #else
        var iridescenceThickness: f32 = uniform.material_iridescenceThicknessMax;
    #endif

    dIridescenceThickness = iridescenceThickness; 
}
`,mI=`
#ifdef STD_IOR_CONSTANT
    uniform material_refractionIndex: f32;
#endif

fn getIor() {
#ifdef STD_IOR_CONSTANT
    dIor = uniform.material_refractionIndex;
#else
    dIor = 1.0 / 1.5;
#endif
}
`,_I=`
#if defined(LIGHT{i})

    uniform light{i}_color: vec3f;

    #if LIGHT{i}TYPE == DIRECTIONAL
        uniform light{i}_direction: vec3f;
    #else

        #define LIT_CODE_LIGHTS_POINT // include functionality for point lights

        uniform light{i}_position: vec3f;
        uniform light{i}_radius: f32;

        #if LIGHT{i}TYPE == SPOT

            #define LIT_CODE_LIGHTS_SPOT // include functionality for spot lights

            uniform light{i}_direction: vec3f;
            uniform light{i}_innerConeAngle: f32;
            uniform light{i}_outerConeAngle: f32;
        #endif
    #endif

    // area lights
    #if LIGHT{i}SHAPE != PUNCTUAL

        #define LIT_CODE_FALLOFF_SQUARED // include functionality for inverse squared falloff

        #if LIGHT{i}TYPE == DIRECTIONAL
            uniform light{i}_position: vec3f;
        #endif
        uniform light{i}_halfWidth: vec3f;
        uniform light{i}_halfHeight: vec3f;
    #else

        #if LIGHT{i}FALLOFF == LINEAR
            #define LIT_CODE_FALLOFF_LINEAR // include functionality for linear falloff
        #endif

        #if LIGHT{i}FALLOFF == INVERSESQUARED
            #define LIT_CODE_FALLOFF_SQUARED // include functionality for inverse squared falloff
        #endif

    #endif

    // shadow casting
    #if defined(LIGHT{i}CASTSHADOW)

        uniform light{i}_shadowMatrix: mat4x4f;
        uniform light{i}_shadowIntensity: f32;
        uniform light{i}_shadowParams: vec4f; // width, height, bias, radius

        #if LIGHT{i}SHADOWTYPE == PCSS_32F
            uniform light{i}_shadowSearchArea: f32;
            uniform light{i}_cameraParams: vec4f;
            #if LIGHT{i}TYPE == DIRECTIONAL
                uniform light{i}_softShadowParams: vec4f;
            #endif
        #endif

        // directional (cascaded) shadows
        #if LIGHT{i}TYPE == DIRECTIONAL
            uniform light{i}_shadowMatrixPalette: array<mat4x4f, 4>;
            uniform light{i}_shadowCascadeDistances: vec4f;
            uniform light{i}_shadowCascadeCount: i32;
            uniform light{i}_shadowCascadeBlend: f32;
        #endif

        #if LIGHT{i}TYPE == OMNI
            NOT SUPPORTED
/*            #if defined(LIGHT{i}SHADOW_PCF)
                uniform samplerCubeShadow light{i}_shadowMap;
            #else
                uniform samplerCube light{i}_shadowMap;
            #endif
*/            
        #else
            #if defined(LIGHT{i}SHADOW_PCF)
                var light{i}_shadowMap: texture_depth_2d;
                var light{i}_shadowMapSampler: sampler_comparison;
            #else
                var light{i}_shadowMap: texture_2d<f32>;
                var light{i}_shadowMapSampler: sampler;
            #endif
        #endif

    #endif

    // cookie
    #if defined(LIGHT{i}COOKIE)

        #define LIT_CODE_COOKIE // include functionality for cookies

        #if LIGHT{i}TYPE == OMNI
            NOT SUPPORTED
/*        
            uniform samplerCube light{i}_cookie;
            uniform float light{i}_cookieIntensity;
            #if !defined(LIGHT{i}CASTSHADOW)
                uniform mat4 light{i}_shadowMatrix;
            #endif
*/
        #endif

        #if LIGHT{i}TYPE == SPOT
            NOT SUPPORTED
/*            uniform sampler2D light{i}_cookie;
            uniform float light{i}_cookieIntensity;
            #if !defined(LIGHT{i}CASTSHADOW)
                uniform mat4 light{i}_shadowMatrix;
            #endif
            #if defined(LIGHT{i}COOKIE_TRANSFORM)
                uniform vec4 light{i}_cookieMatrix;
                uniform vec2 light{i}_cookieOffset;
            #endif
*/
        #endif
    #endif
#endif
`,gI=`
fn getLightDiffuse(worldNormal: vec3f, viewDir: vec3f, lightDirNorm: vec3f) -> f32 {
    return max(dot(worldNormal, -lightDirNorm), 0.0);
}
`,SI=`
fn evalOmniLight(lightPosW: vec3f) -> vec3f {
    return vPositionW - lightPosW;
}
`,yI=`
#if defined(LIGHT{i})
    evaluateLight{i}(
        #if defined(LIT_IRIDESCENCE)
            iridescenceFresnel
        #endif
    );
#endif
`,vI=`
#if defined(LIGHT{i})

fn evaluateLight{i}(
    #if defined(LIT_IRIDESCENCE)
        iridescenceFresnel: vec3f
    #endif
) {
    // light color
    var lightColor: vec3f = uniform.light{i}_color;

    #if LIGHT{i}TYPE == DIRECTIONAL && !defined(LIT_SHADOW_CATCHER)
        // early return if the light color is black (used by shadow catcher - this way this light is very cheap)
        if (all(lightColor == vec3f(0.0, 0.0, 0.0))) {
            return;
        }
    #endif

    #if LIGHT{i}TYPE == DIRECTIONAL // directional light

        dLightDirNormW = uniform.light{i}_direction;
        dAtten = 1.0;

    #else // omni or spot light

        var lightDirW: vec3f = evalOmniLight(uniform.light{i}_position);
        dLightDirNormW = normalize(lightDirW);

        // cookie attenuation
        #if defined(LIGHT{i}COOKIE)

            #if LIGHT{i}TYPE == SPOT
                #ifdef LIGHT{i}COOKIE_FALLOFF
                    #ifdef LIGHT{i}COOKIE_TRANSFORM
                        var cookieAttenuation: vec3f = getCookie2DXform(uniform.light{i}_cookie, uniform.light{i}_shadowMatrix, uniform.light{i}_cookieIntensity, uniform.light{i}_cookieMatrix, uniform.light{i}_cookieOffset).{LIGHT{i}COOKIE_CHANNEL};
                    #else
                        var cookieAttenuation: vec3f = getCookie2D(uniform.light{i}_cookie, uniform.light{i}_shadowMatrix, uniform.light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
                    #endif
                #else
                    #ifdef LIGHT{i}COOKIE_TRANSFORM
                        var cookieAttenuation: vec3f = getCookie2DClipXform(uniform.light{i}_cookie, uniform.light{i}_shadowMatrix, uniform.light{i}_cookieIntensity, uniform.light{i}_cookieMatrix, uniform.light{i}_cookieOffset).{LIGHT{i}COOKIE_CHANNEL};
                    #else
                        var cookieAttenuation: vec3f = getCookie2DClip(uniform.light{i}_cookie, uniform.light{i}_shadowMatrix, uniform.light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
                    #endif
                #endif
            #endif

            #if LIGHT{i}TYPE == OMNI
                var cookieAttenuation: vec3f = getCookieCube(uniform.light{i}_cookie, uniform.light{i}_shadowMatrix, uniform.light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
            #endif

            // multiply light color by the cookie attenuation
            lightColor = lightColor * cookieAttenuation;

        #endif

        // distance falloff
        #if LIGHT{i}SHAPE == PUNCTUAL
            #if LIGHT{i}FALLOFF == LINEAR
                dAtten = getFalloffLinear(uniform.light{i}_radius, lightDirW);
            #else
                dAtten = getFalloffInvSquared(uniform.light{i}_radius, lightDirW);
            #endif
        #else
            // non punctual lights only gets the range window here
            dAtten = getFalloffWindow(uniform.light{i}_radius, lightDirW);
        #endif

        // spot light angle falloff
        #if LIGHT{i}TYPE == SPOT
            #if !defined(LIGHT{i}COOKIE) || defined(LIGHT{i}COOKIE_FALLOFF)
                dAtten = dAtten * getSpotEffect(uniform.light{i}_direction, uniform.light{i}_innerConeAngle, uniform.light{i}_outerConeAngle, dLightDirNormW);
            #endif
        #endif
    #endif

    if (dAtten < 0.00001) {
        return;
    }

    // evaluate area light values
    #if LIGHT{i}SHAPE != PUNCTUAL
        #if LIGHT{i}SHAPE == RECT
            calcRectLightValues(uniform.light{i}_position, uniform.light{i}_halfWidth, uniform.light{i}_halfHeight);
        #elif LIGHT{i}SHAPE == DISK
            calcDiskLightValues(uniform.light{i}_position, uniform.light{i}_halfWidth, uniform.light{i}_halfHeight);
        #elif LIGHT{i}SHAPE == SPHERE
            calcSphereLightValues(uniform.light{i}_position, uniform.light{i}_halfWidth, uniform.light{i}_halfHeight);
        #endif
    #endif

    // diffuse lighting - LTC lights do not mix diffuse lighting into attenuation that affects specular
    #if LIGHT{i}SHAPE != PUNCTUAL

        // attenDiffuse - separate diffuse attenuation for non-punctual light sources

        #if LIGHT{i}TYPE == DIRECTIONAL
            // NB: A better approximation perhaps using wrap lighting could be implemented here
            var attenDiffuse: f32 = getLightDiffuse(litArgs_worldNormal, dViewDirW, dLightDirNormW);
        #else
            // 16.0 is a constant that is in getFalloffInvSquared()
            #if LIGHT{i}SHAPE == RECT
                var attenDiffuse: f32 = getRectLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
            #elif LIGHT{i}SHAPE == DISK
                var attenDiffuse: f32 = getDiskLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
            #elif LIGHT{i}SHAPE == SPHERE
                var attenDiffuse: f32 = getSphereLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
            #endif
        #endif
    #else
        // one parameter is unused for punctual lights
        dAtten = dAtten * getLightDiffuse(litArgs_worldNormal, vec3(0.0), dLightDirNormW);
    #endif

    // apply the shadow attenuation
    #ifdef LIGHT{i}CASTSHADOW

        #if LIGHT{i}TYPE == DIRECTIONAL
            var shadow: f32 = getShadow{i}(vec3(0.0));
        #else
            var shadow: f32 = getShadow{i}(lightDirW);
        #endif

        // Apply shadow intensity to the shadow value
        shadow = mix(1.0, shadow, uniform.light{i}_shadowIntensity);

        dAtten = dAtten * shadow;

        #if defined(LIT_SHADOW_CATCHER) && LIGHT{i}TYPE == DIRECTIONAL
            // accumulate shadows for directional lights
            dShadowCatcher = dShadowCatcher * shadow;
        #endif            

    #endif

    #if LIGHT{i}SHAPE != PUNCTUAL
        // area light - they do not mix diffuse lighting into specular attenuation
        #ifdef LIT_SPECULAR
            dDiffuseLight = dDiffuseLight + (((attenDiffuse * dAtten) * lightColor) * (1.0 - dLTCSpecFres));
        #else
            dDiffuseLight = dDiffuseLight + ((attenDiffuse * dAtten) * lightColor);
        #endif                        
    #else
        // punctual light
        #if defined(AREA_LIGHTS) && defined(LIT_SPECULAR)
            dDiffuseLight = dDiffuseLight + ((dAtten * lightColor) * (1.0 - litArgs_specularity));
        #else
            dDiffuseLight = dDiffuseLight + (dAtten * lightColor);
        #endif
    #endif

    // specular lighting
    #ifdef LIGHT{i}AFFECT_SPECULARITY

        #if LIGHT{i}SHAPE != PUNCTUAL // area light

            #ifdef LIT_CLEARCOAT
                #if LIGHT{i}SHAPE == RECT
                    ccSpecularLight = ccSpecularLight + (ccLTCSpecFres * getRectLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor);
                #elif LIGHT{i}SHAPE == DISK
                    ccSpecularLight = ccSpecularLight + (ccLTCSpecFres * getDiskLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor);
                #elif LIGHT{i}SHAPE == SPHERE
                    ccSpecularLight = ccSpecularLight + (ccLTCSpecFres * getSphereLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor);
                #endif
            #endif

            #ifdef LIT_SPECULAR
                #if LIGHT{i}SHAPE == RECT
                    dSpecularLight = dSpecularLight + (dLTCSpecFres * getRectLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor);
                #elif LIGHT{i}SHAPE == DISK
                    dSpecularLight = dSpecularLight + (dLTCSpecFres * getDiskLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor);
                #elif LIGHT{i}SHAPE == SPHERE
                    dSpecularLight = dSpecularLight + (dLTCSpecFres * getSphereLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor);
                #endif
            #endif

        #else // punctual light

            // is fresnel needed
            #if LIGHT{i}TYPE == DIRECTIONAL && LIT_FRESNEL_MODEL != NONE
                #define LIGHT{i}FRESNEL
            #endif

            #ifdef LIT_SPECULAR
                var halfDirW: vec3f = normalize(-dLightDirNormW + dViewDirW);
            #endif

            // if LTC lights are present, specular must be accumulated with specularity (specularity is pre multiplied by punctual light fresnel)
            #ifdef LIT_CLEARCOAT
                var lightspecularCC: vec3f = getLightSpecular(halfDirW, ccReflDirW, litArgs_clearcoat_worldNormal, dViewDirW, dLightDirNormW, litArgs_clearcoat_gloss, dTBN) * dAtten * lightColor;
                #ifdef LIGHT{i}FRESNEL
                    lightspecularCC = lightspecularCC * getFresnelCC(dot(dViewDirW, halfDirW));
                #endif
                ccSpecularLight = ccSpecularLight + lightspecularCC;
            #endif

            #ifdef LIT_SHEEN
                sSpecularLight = sSpecularLight + (getLightSpecularSheen(halfDirW, litArgs_worldNormal, dViewDirW, dLightDirNormW, litArgs_sheen_gloss) * dAtten * lightColor);
            #endif

            #ifdef LIT_SPECULAR

                var lightSpecular: vec3f = getLightSpecular(halfDirW, dReflDirW, litArgs_worldNormal, dViewDirW, dLightDirNormW, litArgs_gloss, dTBN) * dAtten * lightColor;
                #ifdef LIGHT{i}FRESNEL

                    #if defined(LIT_IRIDESCENCE)
                        lightSpecular = lightSpecular * getFresnel(dot(dViewDirW, halfDirW), litArgs_gloss, litArgs_specularity, iridescenceFresnel, litArgs_iridescence_intensity);
                    #else
                        lightSpecular = lightSpecular * getFresnel(dot(dViewDirW, halfDirW), litArgs_gloss, litArgs_specularity);
                    #endif

                #else
                    lightSpecular = lightSpecular * litArgs_specularity;
                #endif
                
                dSpecularLight = dSpecularLight + lightSpecular;
            #endif
        #endif
    #endif
}
#endif
`,xI=`

// shadow casting functionality
#ifdef LIGHT{i}CASTSHADOW

    // generate shadow coordinates function, based on per light defines:
    // - _SHADOW_SAMPLE_NORMAL_OFFSET
    // - _SHADOW_SAMPLE_ORTHO
    // - _SHADOW_SAMPLE_POINT
    // - _SHADOW_SAMPLE_SOURCE_ZBUFFER
    fn getShadowSampleCoord{i}(shadowTransform: mat4x4f, shadowParams: vec4f, worldPosition: vec3f, lightPos: vec3f, lightDir: ptr<function, vec3f>, lightDirNorm: vec3f, normal: vec3f) -> vec3f {

        var surfacePosition = worldPosition;

        #ifdef LIGHT{i}_SHADOW_SAMPLE_POINT
            #ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
                let distScale: f32 = length(*lightDir);
                surfacePosition = surfacePosition + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale;
                *lightDir = surfacePosition - lightPos;
                return *lightDir;
            #endif
        #else
            #ifdef LIGHT{i}_SHADOW_SAMPLE_SOURCE_ZBUFFER
                #ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
                    surfacePosition = surfacePosition + normal * shadowParams.y;
                #endif
            #else
                #ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
                    #ifdef LIGHT{i}_SHADOW_SAMPLE_ORTHO
                        var distScale: f32 = 1.0;
                    #else
                        var distScale: f32 = abs(dot(vPositionW - lightPos, lightDirNorm));
                    #endif
                    surfacePosition = surfacePosition + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale;
                #endif
            #endif

            // Use var for modification
            var positionInShadowSpace: vec4f = shadowTransform * vec4f(surfacePosition, 1.0);
            #ifdef LIGHT{i}_SHADOW_SAMPLE_ORTHO
                positionInShadowSpace.z = saturate(positionInShadowSpace.z) - 0.0001;
            #else
                #ifdef LIGHT{i}_SHADOW_SAMPLE_SOURCE_ZBUFFER
                    positionInShadowSpace.xyz = positionInShadowSpace.xyz / positionInShadowSpace.w;
                #else
                    positionInShadowSpace.xy = positionInShadowSpace.xy / positionInShadowSpace.w;
                    positionInShadowSpace.z = length(*lightDir) * shadowParams.w;
                #endif
            #endif

            // this is currently unused
            #ifdef SHADOW_SAMPLE_Z_BIAS
                // positionInShadowSpace.z += getShadowBias(shadowParams.x, shadowParams.z);
            #endif

            surfacePosition = positionInShadowSpace.xyz;
        #endif

        return surfacePosition;
    }

    // shadow evaluation function
    fn getShadow{i}(lightDirW_in: vec3f) -> f32 {

        // directional shadow cascades
        #ifdef LIGHT{i}_SHADOW_CASCADES

            // select shadow cascade matrix
            var cascadeIndex: i32 = getShadowCascadeIndex(uniform.light{i}_shadowCascadeDistances, uniform.light{i}_shadowCascadeCount);

            #ifdef LIGHT{i}_SHADOW_CASCADE_BLEND
                cascadeIndex = ditherShadowCascadeIndex(cascadeIndex, uniform.light{i}_shadowCascadeDistances, uniform.light{i}_shadowCascadeCount, uniform.light{i}_shadowCascadeBlend);
            #endif

            var shadowMatrix: mat4x4f = uniform.light{i}_shadowMatrixPalette[cascadeIndex];

        #else

            var shadowMatrix: mat4x4f = uniform.light{i}_shadowMatrix;

        #endif

        var lightDirArg = lightDirW_in;

        #if LIGHT{i}TYPE == DIRECTIONAL
            // directional light does not have a position
            var shadowCoord: vec3f = getShadowSampleCoord{i}(shadowMatrix, uniform.light{i}_shadowParams, vPositionW, vec3f(0.0), &lightDirArg, dLightDirNormW, dVertexNormalW);
        #else
             var shadowCoord: vec3f = getShadowSampleCoord{i}(shadowMatrix, uniform.light{i}_shadowParams, vPositionW, uniform.light{i}_position, &lightDirArg, dLightDirNormW, dVertexNormalW);
        #endif


        // Fade directional shadow at the far distance
        #if LIGHT{i}TYPE == DIRECTIONAL
            shadowCoord = fadeShadow(shadowCoord, uniform.light{i}_shadowCascadeDistances);
        #endif

        // ----- sample the shadow -----

        #if LIGHT{i}TYPE == DIRECTIONAL // ----- directional light -----

            #if LIGHT{i}SHADOWTYPE == VSM_16F
                return getShadowVSM16(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, 5.54);
            #endif

            #if LIGHT{i}SHADOWTYPE == VSM_32F
                return getShadowVSM32(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, 15.0);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCSS_32F

                #if LIGHT{i}SHAPE != PUNCTUAL
                    let shadowSearchArea = vec2f(length(uniform.light{i}_halfWidth), length(uniform.light{i}_halfHeight)) * uniform.light{i}_shadowSearchArea;
                    return getShadowPCSS(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, uniform.light{i}_cameraParams, shadowSearchArea, lightDirW_in);
                #else
                    return getShadowPCSS(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, uniform.light{i}_cameraParams, uniform.light{i}_softShadowParams, lightDirW_in);
                #endif

            #endif

            #if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
                return getShadowPCF1x1(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
                return getShadowPCF3x3(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCF5_16F || LIGHT{i}SHADOWTYPE == PCF5_32F
                return getShadowPCF5x5(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
            #endif

        #endif


        #if LIGHT{i}TYPE == SPOT // ----- spot light -----

            #if LIGHT{i}SHADOWTYPE == VSM_16F
                return getShadowSpotVSM16(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, 5.54, lightDirW_in);
            #endif

            #if LIGHT{i}SHADOWTYPE == VSM_32F
                return getShadowSpotVSM32(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, 15.0, lightDirW_in);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCSS_32F

                #if LIGHT{i}SHAPE != PUNCTUAL
                    var shadowSearchArea: vec2f = vec2f(length(uniform.light{i}_halfWidth), length(uniform.light{i}_halfHeight)) * uniform.light{i}_shadowSearchArea;
                #else
                    var shadowSearchArea: vec2f = vec2f(uniform.light{i}_shadowSearchArea);
                #endif
                return getShadowSpotPCSS(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, uniform.light{i}_cameraParams, shadowSearchArea, lightDirW_in);

            #endif

            #if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
                return getShadowSpotPCF1x1(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
                return getShadowSpotPCF3x3(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCF5_16F || LIGHT{i}SHADOWTYPE == PCF5_32F
                return getShadowSpotPCF5x5(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
            #endif

        #endif


        #if LIGHT{i}TYPE == OMNI // ----- omni light -----

            #if LIGHT{i}SHADOWTYPE == PCSS_32F

                 var shadowSearchArea: vec2f; // Use var because assigned in if/else
                 #if LIGHT{i}SHAPE != PUNCTUAL
                    var shadowSearchArea: vec2f = vec2f(length(uniform.light{i}_halfWidth), length(uniform.light{i}_halfHeight)) * uniform.light{i}_shadowSearchArea;
                #else
                    var shadowSearchArea: vec2f = vec2f(uniform.light{i}_shadowSearchArea);
                #endif

                return getShadowOmniPCSS(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, uniform.light{i}_cameraParams, shadowSearchArea, lightDirW_in);

            #endif

            #if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
                return getShadowOmniPCF1x1(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, lightDirW_in);
            #endif

            #if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
                return getShadowOmniPCF3x3(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, lightDirW_in);
            #endif

        #endif
    }

#endif
`,TI=`

#ifdef LIT_CLUSTERED_LIGHTS
    // all this functionality that needs to be included for clustered lighting
    #define LIT_CODE_FALLOFF_LINEAR
    #define LIT_CODE_FALLOFF_SQUARED
    #define LIT_CODE_LIGHTS_POINT
    #define LIT_CODE_LIGHTS_SPOT
#endif

#ifdef AREA_LIGHTS
    var areaLightsLutTex1: texture_2d<f32>;
    var areaLightsLutTex1Sampler: sampler;
    var areaLightsLutTex2: texture_2d<f32>;
    var areaLightsLutTex2Sampler: sampler;
#endif

#ifdef LIT_LIGHTING
    #include "lightDiffuseLambertPS"

    // area lights
    #if defined(AREA_LIGHTS) || defined(LIT_CLUSTERED_AREA_LIGHTS)
        #include "ltcPS"
    #endif
#endif

#ifdef SHADOW_DIRECTIONAL
    #include "shadowCascadesPS"
#endif

#if defined(SHADOW_KIND_PCF1)
    #include "shadowPCF1PS"
#endif

#if defined(SHADOW_KIND_PCF3)
    #include "shadowPCF3PS"
#endif

#if defined(SHADOW_KIND_PCF5)
    #include "shadowPCF5PS"
#endif

#if defined(SHADOW_KIND_PCSS)
    #include "linearizeDepthPS"

    // omni / spot PCSS is not supported on WebGPU currently, as this is only for non-clustered lights
    // #include "shadowPCSSPS"
    #include "shadowSoftPS"
#endif

#if defined(SHADOW_KIND_VSM)
    #include "shadowEVSMPS"
#endif

#ifdef LIT_CODE_FALLOFF_LINEAR
    #include "falloffLinearPS"
#endif

#ifdef LIT_CODE_FALLOFF_SQUARED
    #include "falloffInvSquaredPS"
#endif

#ifdef LIT_CODE_LIGHTS_POINT
    #include "lightDirPointPS"
#endif

#ifdef LIT_CODE_LIGHTS_SPOT
    #include "spotPS"
#endif

#ifdef LIT_CODE_COOKIE
    #include "cookiePS"
#endif

// clustered lighting
#ifdef LIT_CLUSTERED_LIGHTS
    #include "clusteredLightPS"
#endif

#ifdef LIGHT_COUNT > 0
    // LOOP - generate shadow evaluation functions for all non-clustered lights
    #include "lightFunctionShadowPS, LIGHT_COUNT"

    // LOOP - generate light evaluation functions for all non-clustered lights
    #include "lightFunctionLightPS, LIGHT_COUNT"
#endif
`,wI=`
fn addLightMap(
    lightmap: vec3f,
    dir: vec3f,
    worldNormal: vec3f,
    viewDir: vec3f,
    reflectionDir: vec3f,
    gloss: f32,
    specularity: vec3f,
    vertexNormal: vec3f,
    tbn: mat3x3f
#if defined(LIT_IRIDESCENCE)
    , iridescenceFresnel: vec3f,
    iridescenceIntensity: f32
#endif
) {

    // directional lightmap
    #if defined(LIT_SPECULAR) && defined(LIT_DIR_LIGHTMAP)

        if (dot(dir, dir) < 0.0001) {
                dDiffuseLight = dDiffuseLight + lightmap;
        } else {
            let vlight: f32 = saturate(dot(dir, -vertexNormal));
            let flight: f32 = saturate(dot(dir, -worldNormal));
            let nlight: f32 = (flight / max(vlight, 0.01)) * 0.5;

            dDiffuseLight = dDiffuseLight + lightmap * nlight * 2.0;

            let halfDir: vec3f = normalize(-dir + viewDir);
            var specularLight: vec3f = lightmap * getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, dir, gloss, tbn);

            #ifdef LIT_SPECULAR_FRESNEL

                specularLight = specularLight *
                    getFresnel(dot(viewDir, halfDir),
                    gloss,
                    specularity
                #if defined(LIT_IRIDESCENCE)
                    , iridescenceFresnel,
                    iridescenceIntensity
                #endif
                    );
            #endif

            dSpecularLight = dSpecularLight + specularLight;
        }

    #else // non-directional lightmap

        dDiffuseLight = dDiffuseLight + lightmap;

    #endif
}
`,EI=`

#ifdef STD_LIGHTMAP_DIR
    var<private> dLightmapDir: vec3f;
    var texture_dirLightMap: texture_2d<f32>;
    var texture_dirLightMapSampler: sampler;
#endif

fn getLightMap() {

    dLightmap = vec3f(1.0);

    #ifdef STD_LIGHT_TEXTURE
        dLightmap = dLightmap * {STD_LIGHT_TEXTURE_DECODE}(textureSampleBias({STD_LIGHT_TEXTURE_NAME}, {STD_LIGHT_TEXTURE_NAME}Sampler, {STD_LIGHT_TEXTURE_UV}, uniform.textureBias)).{STD_LIGHT_TEXTURE_CHANNEL};

        #ifdef STD_LIGHTMAP_DIR
            var dir: vec3f = textureSampleBias(texture_dirLightMap, texture_dirLightMapSampler, {STD_LIGHT_TEXTURE_UV}, uniform.textureBias).xyz * 2.0 - 1.0;
            var dirDot = dot(dir, dir);
            dLightmapDir = select(vec3(0.0), dir / sqrt(dirDot), dirDot > 0.001);
        #endif
    #endif

    #ifdef STD_LIGHT_VERTEX
        dLightmap = dLightmap * saturate(vVertexColor.{STD_LIGHT_VERTEX_CHANNEL});
    #endif
}
`,bI=`
// Anisotropic GGX
fn calcLightSpecular(gloss: f32, worldNormal: vec3f, viewDir: vec3f, h: vec3f, lightDirNorm: vec3f, tbn: mat3x3f) -> f32 {
    let PI: f32 = 3.141592653589793;
    let roughness: f32 = max((1.0 - gloss) * (1.0 - gloss), 0.001);
    let alphaRoughness: f32 = roughness * roughness;
    let anisotropy: f32 = dAnisotropy;
    let direction: vec2f = dAnisotropyRotation;

    let at: f32 = mix(alphaRoughness, 1.0, anisotropy * anisotropy);
    let ab: f32 = clamp(alphaRoughness, 0.001, 1.0);

    let anisotropicT: vec3f = normalize(tbn * vec3f(direction, 0.0));
    let anisotropicB: vec3f = normalize(cross(tbn[2], anisotropicT));

    let NoH: f32 = dot(worldNormal, h);
    let ToH: f32 = dot(anisotropicT, h);
    let BoH: f32 = dot(anisotropicB, h);

    let a2: f32 = at * ab;
    let v: vec3f = vec3f(ab * ToH, at * BoH, a2 * NoH);
    let v2: f32 = dot(v, v);
    let w2: f32 = a2 / v2;
    let D: f32 = a2 * w2 * w2 * (1.0 / PI);

    let ToV: f32 = dot(anisotropicT, viewDir);
    let BoV: f32 = dot(anisotropicB, viewDir);
    let ToL: f32 = dot(anisotropicT, -lightDirNorm);
    let BoL: f32 = dot(anisotropicB, -lightDirNorm);
    let NoV: f32 = dot(worldNormal, viewDir);
    let NoL: f32 = dot(worldNormal, -lightDirNorm);

    let lambdaV: f32 = NoL * length(vec3f(at * ToV, ab * BoV, NoV));
    let lambdaL: f32 = NoV * length(vec3f(at * ToL, ab * BoL, NoL));
    let G: f32 = 0.5 / (lambdaV + lambdaL);

    return D * G;
}

fn getLightSpecular(h: vec3f, reflDir: vec3f, worldNormal: vec3f, viewDir: vec3f, lightDirNorm: vec3f, gloss: f32, tbn: mat3x3f) -> f32 {
    return calcLightSpecular(gloss, worldNormal, viewDir, h, lightDirNorm, tbn);
}
`,AI=`
// Energy-conserving (hopefully) Blinn-Phong
fn calcLightSpecular(gloss: f32, worldNormal: vec3f, h: vec3f) -> f32 {
    let nh: f32 = max( dot( h, worldNormal ), 0.0 );

    var specPow: f32 = exp2(gloss * 11.0); // glossiness is linear, power is not; 0 - 2048

    // Hack: On Mac OS X, calling pow with zero for the exponent generates hideous artifacts so bias up a little
    specPow = max(specPow, 0.0001);

    return pow(nh, specPow) * (specPow + 2.0) / 8.0;
}

fn getLightSpecular(h: vec3f, reflDir: vec3f, worldNormal: vec3f, viewDir: vec3f, lightDirNorm: vec3f, gloss: f32, tbn: mat3x3f) -> f32 {
    return calcLightSpecular(gloss, worldNormal, h);
}
`,CI=`

fn sheenD(normal: vec3f, h: vec3f, roughness: f32) -> f32 {
    let PI: f32 = 3.141592653589793;
    let invR: f32 = 1.0 / (roughness * roughness);
    var cos2h: f32 = max(dot(normal, h), 0.0);
    cos2h = cos2h * cos2h;
    let sin2h: f32 = max(1.0 - cos2h, 0.0078125);
    return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * PI);
}

fn sheenV(normal: vec3f, viewDir: vec3f, light: vec3f) -> f32 {
    let NoV: f32 = max(dot(normal, viewDir), 0.000001);
    let NoL: f32 = max(dot(normal, light), 0.000001);
    return 1.0 / (4.0 * (NoL + NoV - NoL * NoV));
}

fn getLightSpecularSheen(h: vec3f, worldNormal: vec3f, viewDir: vec3f, lightDirNorm: vec3f, sheenGloss: f32) -> f32 {
    let D: f32 = sheenD(worldNormal, h, sheenGloss);
    let V: f32 = sheenV(worldNormal, viewDir, -lightDirNorm);
    return D * V;
}`,PI=`

#ifndef LINEARIZE_DEPTH
#define LINEARIZE_DEPTH

fn linearizeDepthWithParams(z: f32, cameraParams: vec4f) -> f32 {
    if (cameraParams.w == 0.0) {
        return (cameraParams.z * cameraParams.y) / (cameraParams.y + z * (cameraParams.z - cameraParams.y));
    } else {
        return cameraParams.z + z * (cameraParams.y - cameraParams.z);
    }
}

#ifndef CAMERAPLANES
    #define CAMERAPLANES
    uniform camera_params: vec4f;   // x: 1 / camera_far,      y: camera_far,     z: camera_near,        w: is_ortho
#endif

fn linearizeDepth(z: f32) -> f32 {
    return linearizeDepthWithParams(z, uniform.camera_params);
}
#endif // LINEARIZE_DEPTH
`,DI=`
fn evaluateBackend() -> FragmentOutput {

    var output: FragmentOutput;

    // apply SSAO during lighting
    #ifdef LIT_SSAO
        litArgs_ao = litArgs_ao * textureSampleLevel(ssaoTexture, ssaoTextureSampler, pcPosition.xy * uniform.ssaoTextureSizeInv, 0.0).r;
    #endif

    // transform tangent space normals to world space
    #ifdef LIT_NEEDS_NORMAL
        #ifdef LIT_SPECULAR
            getReflDir(litArgs_worldNormal, dViewDirW, litArgs_gloss, dTBN);
        #endif

        #ifdef LIT_CLEARCOAT
            ccReflDirW = normalize(-reflect(dViewDirW, litArgs_clearcoat_worldNormal));
        #endif
    #endif

    #ifdef LIT_SPECULAR_OR_REFLECTION
        #ifdef LIT_METALNESS
            var f0: f32 = 1.0 / litArgs_ior;
            f0 = (f0 - 1.0) / (f0 + 1.0);
            f0 = f0 * f0;
            litArgs_specularity = getSpecularModulate(litArgs_specularity, litArgs_albedo, litArgs_metalness, f0);
            litArgs_albedo = getAlbedoModulate(litArgs_albedo, litArgs_metalness);
        #endif

        #ifdef LIT_IRIDESCENCE
            var iridescenceFresnel: vec3f = getIridescenceDiffraction(saturate(dot(dViewDirW, litArgs_worldNormal)), litArgs_specularity, litArgs_iridescence_thickness);
        #endif
    #endif

    // ambient
    #ifdef LIT_ADD_AMBIENT
        addAmbient(litArgs_worldNormal);

        #ifdef LIT_SPECULAR
            dDiffuseLight = dDiffuseLight * (1.0 - litArgs_specularity);
        #endif

        // move ambient color out of diffuse (used by Lightmapper, to multiply ambient color by accumulated AO)
        #ifdef LIT_SEPARATE_AMBIENT
            var dAmbientLight: vec3f = dDiffuseLight;
            dDiffuseLight = vec3(0.0);
        #endif
    #endif

    #ifndef LIT_OLD_AMBIENT
        dDiffuseLight = dDiffuseLight * uniform.material_ambient;
    #endif

    #ifdef LIT_AO
        #ifndef LIT_OCCLUDE_DIRECT
            occludeDiffuse(litArgs_ao);
        #endif
    #endif

    #ifdef LIT_LIGHTMAP
        addLightMap(
            litArgs_lightmap, 
            litArgs_lightmapDir, 
            litArgs_worldNormal, 
            dViewDirW, 
            dReflDirW, 
            litArgs_gloss, 
            litArgs_specularity, 
            dVertexNormalW,
            dTBN
        #if defined(LIT_IRIDESCENCE)
            , iridescenceFresnel,
            litArgs_iridescence_intensity
        #endif
        );
    #endif

    #ifdef LIT_LIGHTING || LIT_REFLECTIONS

        #ifdef LIT_REFLECTIONS

            #ifdef LIT_CLEARCOAT
                addReflectionCC(ccReflDirW, litArgs_clearcoat_gloss);
            
                #ifdef LIT_SPECULAR_FRESNEL
                    ccFresnel = getFresnelCC(dot(dViewDirW, litArgs_clearcoat_worldNormal));
                    ccReflection = ccReflection * ccFresnel;
                #else
                    ccFresnel = 0.0;
                #endif
            #endif

            #ifdef LIT_SPECULARITY_FACTOR
                ccReflection = ccReflection * litArgs_specularityFactor;
            #endif

            #ifdef LIT_SHEEN
                addReflectionSheen(litArgs_worldNormal, dViewDirW, litArgs_sheen_gloss);
            #endif

            // Fresnel has to be applied to reflections
            addReflection(dReflDirW, litArgs_gloss);

            #ifdef LIT_FRESNEL_MODEL

                dReflection = vec4f(
                    dReflection.rgb * getFresnel(
                        dot(dViewDirW, litArgs_worldNormal),
                        litArgs_gloss,
                        litArgs_specularity
                    #if defined(LIT_IRIDESCENCE)
                        , iridescenceFresnel,
                        litArgs_iridescence_intensity
                    #endif
                        ),
                    dReflection.a
                );

            #else

                dReflection = vec4f(dReflection.rgb * litArgs_specularity, dReflection.a);

            #endif

            #ifdef LIT_SPECULARITY_FACTOR
                dReflection = vec4f(dReflection.rgb * litArgs_specularityFactor, dReflection.a);
            #endif

        #endif

        #ifdef AREA_LIGHTS
            // specular has to be accumulated differently if we want area lights to look correct
            dSpecularLight = dSpecularLight * litArgs_specularity;

            #ifdef LIT_SPECULAR
                // evaluate material based area lights data, shared by all area lights
                calcLTCLightValues(litArgs_gloss, litArgs_worldNormal, dViewDirW, litArgs_specularity, litArgs_clearcoat_gloss, litArgs_clearcoat_worldNormal, litArgs_clearcoat_specularity);
            #endif
        #endif
        
        // LOOP - evaluate all non-clustered lights
        #ifdef LIGHT_COUNT > 0
            #include "lightEvaluationPS, LIGHT_COUNT"
        #endif

        // clustered lighting
        #ifdef LIT_CLUSTERED_LIGHTS
            addClusteredLights(litArgs_worldNormal, dViewDirW, dReflDirW,
                #if defined(LIT_CLEARCOAT)
                        ccReflDirW,
                #endif
                        litArgs_gloss, litArgs_specularity, dVertexNormalW, dTBN, 
                #if defined(LIT_IRIDESCENCE)
                        iridescenceFresnel,
                #endif
                        litArgs_clearcoat_worldNormal, litArgs_clearcoat_gloss, litArgs_sheen_gloss, litArgs_iridescence_intensity
            );
        #endif

        #ifdef AREA_LIGHTS

            #ifdef LIT_CLEARCOAT
                // specular has to be accumulated differently if we want area lights to look correct
                litArgs_clearcoat_specularity = 1.0;
            #endif

            #ifdef LIT_SPECULAR
                litArgs_specularity = vec3(1.0);
            #endif

        #endif

        #ifdef LIT_REFRACTION
            addRefraction(
                litArgs_worldNormal, 
                dViewDirW, 
                litArgs_thickness, 
                litArgs_gloss, 
                litArgs_specularity, 
                litArgs_albedo, 
                litArgs_transmission,
                litArgs_ior,
                litArgs_dispersion
                #if defined(LIT_IRIDESCENCE)
                    , iridescenceFresnel, 
                    litArgs_iridescence_intensity
                #endif
            );
        #endif
    #endif

    // apply ambient occlusion
    #ifdef LIT_AO
        #ifdef LIT_OCCLUDE_DIRECT
            occludeDiffuse(litArgs_ao);
        #endif

        #if LIT_OCCLUDE_SPECULAR != NONE
            occludeSpecular(litArgs_gloss, litArgs_ao, litArgs_worldNormal, dViewDirW);
        #endif
    #endif

    #ifdef LIT_SPECULARITY_FACTOR
        dSpecularLight = dSpecularLight * litArgs_specularityFactor;
    #endif

    #if !defined(LIT_OPACITY_FADES_SPECULAR)

        #if LIT_BLEND_TYPE == NORMAL || LIT_BLEND_TYPE == PREMULTIPLIED

            var specLum: f32 = dot((dSpecularLight + dReflection.rgb * dReflection.a), vec3f( 0.2126, 0.7152, 0.0722 ));
            #ifdef LIT_CLEARCOAT
                specLum = specLum + dot(ccSpecularLight * litArgs_clearcoat_specularity + ccReflection * litArgs_clearcoat_specularity, vec3f( 0.2126, 0.7152, 0.0722 ));
            #endif
            litArgs_opacity = clamp(litArgs_opacity + gammaCorrectInput(specLum), 0.0, 1.0);

        #endif

        litArgs_opacity = litArgs_opacity * uniform.material_alphaFade;

    #endif

    // end chunks - when baking lightmap
    #ifdef LIT_LIGHTMAP_BAKING
        #ifdef LIT_LIGHTMAP_BAKING_COLOR
            #include "bakeLmEndPS"
        #endif
        #ifdef LIT_LIGHTMAP_BAKING_DIR
            #include "bakeDirLmEndPS"
        #endif
    #else
        // end chunks - in all other cases
        #include "endPS"
        #include "outputAlphaPS"
    #endif

    #ifdef LIT_MSDF
        output.color = applyMsdf(output.color);
    #endif

    #include "outputPS"
    #include "debugOutputPS"

    #ifdef LIT_SHADOW_CATCHER
        // output when the shadow catcher is enabled - accumulated shadows
        output.color = vec4f(vec3f(dShadowCatcher), output.color.a);
    #endif

    return output;
}
`,II=`

// globals
var<private> sReflection: vec3f;
var<private> dVertexNormalW: vec3f;
var<private> dTangentW: vec3f;
var<private> dBinormalW: vec3f;
var<private> dViewDirW: vec3f;
var<private> dReflDirW: vec3f;
var<private> ccReflDirW: vec3f;

// Per-light temporaries
var<private> dLightDirNormW: vec3f;
var<private> dAtten: f32;

// Outputs
var<private> dTBN: mat3x3f;
var<private> dReflection: vec4f;
var<private> dDiffuseLight: vec3f;
var<private> dSpecularLight: vec3f;
var<private> ccFresnel: f32;
var<private> ccReflection: vec3f;
var<private> ccSpecularLight: vec3f;
var<private> ccSpecularityNoFres: f32;
var<private> sSpecularLight: vec3f;

// FRAGMENT SHADER INPUTS: UNIFORMS

#ifdef LIT_DISPERSION
    uniform material_dispersion: f32;
#endif

#ifndef LIT_OPACITY_FADES_SPECULAR
    uniform material_alphaFade: f32;
#endif

#ifdef LIT_SSAO
    var ssaoTexture : texture_2d<f32>;
    var ssaoTextureSampler : sampler;
    uniform ssaoTextureSizeInv: vec2f;
#endif

// lighting and shadowing declarations

#ifdef LIT_SHADOW_CATCHER
    // a variable to accumulate shadows for shadow catcher materials
    var<private> dShadowCatcher: f32 = 1.0;
#endif

// LOOP - uniform declarations for all non-clustered lights
#if LIGHT_COUNT > 0
    #include "lightDeclarationPS, LIGHT_COUNT"
#endif

#ifdef LIT_SPECULAR
    #if LIT_FRESNEL_MODEL == NONE && !defined(LIT_REFLECTIONS) && !defined(LIT_DIFFUSE_MAP) 
        #define LIT_OLD_AMBIENT
    #endif
#endif

// lightmap baking
#ifdef STD_LIGHTMAP_DIR
    uniform bakeDir: f32;
#endif
#ifdef LIT_LIGHTMAP_BAKING_ADD_AMBIENT
    uniform ambientBakeOcclusionContrast: f32;
    uniform ambientBakeOcclusionBrightness: f32;
#endif
`,MI=`

@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {

    #include "litUserMainStartPS"

    dReflection = vec4f(0.0);

    #ifdef LIT_CLEARCOAT
        ccSpecularLight = vec3f(0.0);
        ccReflection = vec3f(0.0);
    #endif

    #if LIT_NONE_SLICE_MODE == SLICED
        #include "startNineSlicedPS"
    #elif LIT_NONE_SLICE_MODE == TILED
        #include "startNineSlicedTiledPS"
    #endif

    #ifdef LIT_NEEDS_NORMAL
        dVertexNormalW = normalize(vNormalW);

        #ifdef LIT_TANGENTS
            #if defined(LIT_HEIGHTS) || defined(LIT_USE_NORMALS) || defined(LIT_USE_CLEARCOAT_NORMALS) || defined(LIT_GGX_SPECULAR)
                dTangentW = vTangentW;
                dBinormalW = vBinormalW;
            #endif
        #endif

        getViewDir();

        #ifdef LIT_TBN
            getTBN(dTangentW, dBinormalW, dVertexNormalW);

            #ifdef LIT_TWO_SIDED_LIGHTING
                handleTwoSidedLighting();
            #endif
        #endif
    #endif

    // invoke frontend functions
    evaluateFrontend();

    #include "debugProcessFrontendPS"

    var output: FragmentOutput = evaluateBackend();

    #include "litUserMainEndPS"

    return output;
}
`,LI=`

#ifdef LIT_NEEDS_NORMAL
    #include "cubeMapRotatePS"
    #include "cubeMapProjectPS"
    #include "envProcPS"
#endif

// ----- specular or reflections -----
#ifdef LIT_SPECULAR_OR_REFLECTION
    #ifdef LIT_METALNESS
        #include "metalnessModulatePS"
    #endif

    #if LIT_FRESNEL_MODEL == SCHLICK
        #include "fresnelSchlickPS"
    #endif

    #ifdef LIT_IRIDESCENCE
        #include "iridescenceDiffractionPS"
    #endif
#endif

// ----- ambient occlusion -----
#ifdef LIT_AO
    #include "aoDiffuseOccPS"
    #include "aoSpecOccPS"
#endif

#if LIT_REFLECTION_SOURCE == ENVATLASHQ
    #include "envAtlasPS"
    #include "reflectionEnvHQPS"
#elif LIT_REFLECTION_SOURCE == ENVATLAS
    #include "envAtlasPS"
    #include "reflectionEnvPS"
#elif LIT_REFLECTION_SOURCE == CUBEMAP
    #include "reflectionCubePS"
#elif LIT_REFLECTION_SOURCE == SPHEREMAP
    #include "reflectionSpherePS"
#endif

#ifdef LIT_REFLECTIONS
    #ifdef LIT_CLEARCOAT
        #include "reflectionCCPS"
    #endif

    #ifdef LIT_SHEEN
        #include "reflectionSheenPS"
    #endif
#endif

#ifdef LIT_REFRACTION
    #if defined(LIT_DYNAMIC_REFRACTION)
        #include "refractionDynamicPS"
    #elif defined(LIT_REFLECTIONS)
        #include "refractionCubePS"
    #endif
#endif

#ifdef LIT_SHEEN
    #include "lightSheenPS"
#endif

uniform material_ambient: vec3f;

#ifdef LIT_SPECULAR
    #ifdef LIT_LIGHTING
        #ifdef LIT_GGX_SPECULAR
            #include "lightSpecularAnisoGGXPS"
        #else
            #include "lightSpecularBlinnPS"
        #endif
    #endif
#endif

#include "combinePS"

#ifdef LIT_LIGHTMAP
    #include "lightmapAddPS"
#endif

#ifdef LIT_ADD_AMBIENT
    #include "ambientPS"
#endif

#ifdef LIT_MSDF
    #include "msdfPS"
#endif

#ifdef LIT_NEEDS_NORMAL
    #include "viewDirPS"
    #ifdef LIT_SPECULAR
        #ifdef LIT_GGX_SPECULAR
            #include "reflDirAnisoPS"
        #else
            #include "reflDirPS"
        #endif
    #endif
#endif

// lighting functionality
#include "lightingPS"

`,RI=`

#include "basePS"
#include "sphericalPS"
#include "decodePS"
#include "gammaPS"
#include "tonemappingPS"
#include "fogPS"

// 9-slice support code
#if LIT_NONE_SLICE_MODE == SLICED
    #include "baseNineSlicedPS"
#elif LIT_NONE_SLICE_MODE == TILED
    #include "baseNineSlicedTiledPS"
#endif

// TBN
#ifdef LIT_TBN
    #include "TBNPS"

    #ifdef LIT_TWO_SIDED_LIGHTING
        #include "twoSidedLightingPS"
    #endif
#endif

`,OI=`

#include "varyingsPS"
#include "litUserDeclarationPS"
#include "frontendDeclPS"

#if defined(PICK_PASS) || defined(PREPASS_PASS)

    #include "frontendCodePS"
    #include "litUserCodePS"
    #include "litOtherMainPS"

#elif defined(SHADOW_PASS)

    #include "frontendCodePS"
    #include "litUserCodePS"
    #include "litShadowMainPS"

#else // FORWARD_PASS

    #include "litForwardDeclarationPS"
    #include "litForwardPreCodePS"
    #include "frontendCodePS"
    #include "litForwardPostCodePS"
    #include "litForwardBackendPS"
    #include "litUserCodePS"
    #include "litForwardMainPS"

#endif

`,FI=`

#include "varyingsVS"

#include  "litUserDeclarationVS"

#ifdef VERTEX_COLOR
    attribute vertex_color: vec4f;
#endif

#ifdef NINESLICED

    varying vMask: vec2f;
    varying vTiledUv: vec2f;

    var<private> dMaskGlobal: vec2f;
    var<private> dTiledUvGlobal: vec2f;

    uniform innerOffset: vec4f;
    uniform outerScale: vec2f;
    uniform atlasRect: vec4f;

#endif

var<private> dPositionW: vec3f;
var<private> dModelMatrix: mat4x4f;

#include "transformCoreVS"

#ifdef UV0
    attribute vertex_texCoord0: vec2f;
    #include "uv0VS"
#endif

#ifdef UV1
    attribute vertex_texCoord1: vec2f;
    #include "uv1VS"
#endif


#ifdef LINEAR_DEPTH
    #ifndef VIEWMATRIX
    #define VIEWMATRIX
        uniform matrix_view: mat4x4f;
    #endif
#endif

#include "transformVS"

#ifdef NORMALS
    #include "normalCoreVS"
    #include "normalVS"
#endif

#ifdef TANGENTS
    attribute vertex_tangent: vec4f;
#endif

// expand uniforms for uv transforms
#include "uvTransformUniformsPS, UV_TRANSFORMS_COUNT"

#ifdef MSDF
    #include "msdfVS"
#endif

#include  "litUserCodeVS"

@vertex
fn vertexMain(input : VertexInput) -> VertexOutput {

    #include "litUserMainStartVS"

    var output : VertexOutput;
    output.position = getPosition();
    output.vPositionW = getWorldPosition();

    #ifdef NORMALS
        output.vNormalW = getNormal();
    #endif

    #ifdef TANGENTS
        output.vTangentW = normalize(dNormalMatrix * vertex_tangent.xyz);
        output.vBinormalW = cross(output.vNormalW, output.vTangentW) * vertex_tangent.w;
    #elif defined(GGX_SPECULAR)
        output.vObjectSpaceUpW = normalize(dNormalMatrix * vec3f(0.0, 1.0, 0.0));
    #endif

    #ifdef UV0
        var uv0: vec2f = getUv0();
        #ifdef UV0_UNMODIFIED
            output.vUv0 = uv0;
        #endif
    #endif

    #ifdef UV1
        var uv1: vec2f = getUv1();
        #ifdef UV1_UNMODIFIED
            output.vUv1 = uv1;
        #endif
    #endif

    // expand code for uv transforms
    #include "uvTransformVS, UV_TRANSFORMS_COUNT"

    #ifdef VERTEX_COLOR
        output.vVertexColor = vertex_color;
    #endif

    #ifdef LINEAR_DEPTH
        // linear depth from the worldPosition, see getLinearDepth
        output.vLinearDepth = -(uniform.matrix_view * vec4f(output.vPositionW, 1.0)).z;
    #endif

    #ifdef MSDF
        unpackMsdfParams();

        output.outline_color = dOutlineColor;
        output.outline_thickness = dOutlineThickness;
        output.shadow_color = dShadowColor;
        output.shadow_offset = dShadowOffset;
    #endif

    #ifdef NINESLICED
        output.vMask = dMaskGlobal;
        output.vTiledUv = dTiledUvGlobal;
    #endif

    #include "litUserMainEndVS"

    return output;
}
`,NI=`

#ifdef PICK_PASS
    #include "pickPS"
#endif

#ifdef PREPASS_PASS
    #include "floatAsUintPS"
#endif

@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {

    #include "litUserMainStartPS"

    var output: FragmentOutput;
    
    evaluateFrontend();

    #ifdef PICK_PASS
        output.color = getPickOutput();
    #endif

    #ifdef PREPASS_PASS
        output.color = float2vec4(vLinearDepth);
    #endif

    #include "litUserMainEndPS"

    return output;
}
`,kI=`

// Surface albedo absorbance
var<private> litArgs_albedo: vec3f;

// Transparency
var<private> litArgs_opacity: f32;

// Emission color
var<private> litArgs_emission: vec3f;

// Normal direction in world space
var<private> litArgs_worldNormal: vec3f;

// Ambient occlusion amount, range [0..1]
var<private> litArgs_ao: f32;

// Light map color
var<private> litArgs_lightmap: vec3f;

// Light map direction
var<private> litArgs_lightmapDir: vec3f;

// Surface metalness factor, range [0..1]
var<private> litArgs_metalness: f32;

// The f0 specularity factor
var<private> litArgs_specularity: vec3f;

// Specularity intensity factor, range [0..1]
var<private> litArgs_specularityFactor: f32;

// The microfacet glossiness factor, range [0..1]
var<private> litArgs_gloss: f32;

// Glossiness of the sheen layer, range [0..1]
var<private> litArgs_sheen_gloss: f32;

// The color of the f0 specularity factor for the sheen layer
var<private> litArgs_sheen_specularity: vec3f;

// Transmission factor (refraction), range [0..1]
var<private> litArgs_transmission: f32;

// Uniform thickness of medium, used by transmission, range [0..inf]
var<private> litArgs_thickness: f32;

// Index of refraction
var<private> litArgs_ior: f32;

// Dispersion, range [0..1] typically, but can be higher
var<private> litArgs_dispersion: f32;

// Iridescence effect intensity, range [0..1]
var<private> litArgs_iridescence_intensity: f32;

// Thickness of the iridescent microfilm layer, value is in nanometers, range [0..1000]
var<private> litArgs_iridescence_thickness: f32;

// The normal used for the clearcoat layer
var<private> litArgs_clearcoat_worldNormal: vec3f;

// Intensity of the clearcoat layer, range [0..1]
var<private> litArgs_clearcoat_specularity: f32;

// Glossiness of clearcoat layer, range [0..1]
var<private> litArgs_clearcoat_gloss: f32;

`,UI=`

    // global texture bias for standard textures
    #if LIT_NONE_SLICE_MODE == TILED
        var<private> textureBias: f32 = -1000.0;
    #else
        uniform textureBias: f32;
    #endif

    #include "litShaderArgsPS"
`,BI=`

#if LIGHT_TYPE != DIRECTIONAL
    uniform view_position: vec3f;
    uniform light_radius: f32;
#endif

#if SHADOW_TYPE == PCSS_32F
    #include "linearizeDepthPS"
#endif

@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {

    #include "litUserMainStartPS"

    var output: FragmentOutput;

    evaluateFrontend();

    // using non-standard depth, i.e gl_FragCoord.z
    #ifdef PERSPECTIVE_DEPTH
        var depth: f32 = input.position.z;

        #if SHADOW_TYPE == PCSS_32F
            // spot/omni shadows currently use linear depth.
            // TODO: use perspective depth for spot/omni the same way as directional
            #if LIGHT_TYPE != DIRECTIONAL
                depth = linearizeDepthWithParams(depth, camera_params);
            #endif
        #endif

    #else
        var depth: f32 = min(distance(uniform.view_position, input.vPositionW) / uniform.light_radius, 0.99999);
        #define MODIFIED_DEPTH
    #endif

    #if SHADOW_TYPE == VSM_16F || SHADOW_TYPE == VSM_32F
        #if SHADOW_TYPE == VSM_32F
            var exponent: f32 = 15.0;
        #else
            var exponent: f32 = 5.54;
        #endif

        var depth_vsm = 2.0 * depth - 1.0;
        depth_vsm = exp(exponent * depth_vsm);
        output.color = vec4f(depth_vsm, depth_vsm * depth_vsm, 1.0, 1.0);
    #else
        #if SHADOW_TYPE == PCSS_32F
            output.color = vec4f(depth, 0.0, 0.0, 1.0);
        #else
            #ifdef MODIFIED_DEPTH
                // If we end up using modified depth, it needs to be explicitly written to gl_FragDepth
                output.fragDepth = depth;
            #endif

            // just the simplest code, color is not written anyway
            output.color = vec4f(1.0);
        #endif
    #endif

    #include "litUserMainEndPS"
    
    return output;
}
`,zI=`
// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines
// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt
// code: https://github.com/selfshadow/ltc_code/

fn LTC_Uv(N: vec3f, V: vec3f, roughness: f32) -> vec2f {
    const LUT_SIZE: f32 = 64.0;
    const LUT_SCALE: f32 = (LUT_SIZE - 1.0) / LUT_SIZE;
    const LUT_BIAS: f32 = 0.5 / LUT_SIZE;
    let dotNV: f32 = saturate(dot( N, V ));
    // texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )
    let uv: vec2f = vec2f( roughness, sqrt( 1.0 - dotNV ) );
    return uv * LUT_SCALE + LUT_BIAS;
}

fn LTC_ClippedSphereFormFactor( f: vec3f ) -> f32 {
    // Real-Time Area Lighting: a Journey from Research to Production (p.102)
    // An approximation of the form factor of a horizon-clipped rectangle.
    let l: f32 = length( f );
    return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}

fn LTC_EdgeVectorFormFactor( v1: vec3f, v2: vec3f ) -> vec3f {
    let x: f32 = dot( v1, v2 );
    let y: f32 = abs( x );
    // rational polynomial approximation to theta / sin( theta ) / 2PI
    let a: f32 = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
    let b: f32 = 3.4175940 + ( 4.1616724 + y ) * y;
    let v: f32 = a / b;
    let inv_sqrt_term = inverseSqrt( max( 1.0 - x * x, 1e-7f ) );
    let theta_sintheta: f32 = select( (0.5 * inv_sqrt_term - v), v, x > 0.0 );
    return cross( v1, v2 ) * theta_sintheta;
}

struct Coords {
    coord0: vec3f,
    coord1: vec3f,
    coord2: vec3f,
    coord3: vec3f,
}

fn LTC_EvaluateRect( N: vec3f, V: vec3f, P: vec3f, mInv: mat3x3f, rectCoords: Coords) -> f32 {
    // bail if point is on back side of plane of light
    // assumes ccw winding order of light vertices
    let v1: vec3f = rectCoords.coord1 - rectCoords.coord0;
    let v2: vec3f = rectCoords.coord3 - rectCoords.coord0;

    let lightNormal: vec3f = cross( v1, v2 );
    let factor: f32 = sign(-dot( lightNormal, P - rectCoords.coord0 ));

    // construct orthonormal basis around N
    let T1: vec3f = normalize( V - N * dot( V, N ) );
    let T2: vec3f = factor * cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system
    // compute transform
    let mat: mat3x3f = mInv * transpose( mat3x3f( T1, T2, N ) );
    // transform rect
    var coords: array<vec3f, 4>;
    coords[0] = mat * ( rectCoords.coord0 - P );
    coords[1] = mat * ( rectCoords.coord1 - P );
    coords[2] = mat * ( rectCoords.coord2 - P );
    coords[3] = mat * ( rectCoords.coord3 - P );
    // project rect onto sphere
    coords[0] = normalize( coords[0] );
    coords[1] = normalize( coords[1] );
    coords[2] = normalize( coords[2] );
    coords[3] = normalize( coords[3] );
    // calculate vector form factor
    var vectorFormFactor: vec3f = vec3f( 0.0 );
    vectorFormFactor = vectorFormFactor + LTC_EdgeVectorFormFactor( coords[0], coords[1] );
    vectorFormFactor = vectorFormFactor + LTC_EdgeVectorFormFactor( coords[1], coords[2] );
    vectorFormFactor = vectorFormFactor + LTC_EdgeVectorFormFactor( coords[2], coords[3] );
    vectorFormFactor = vectorFormFactor + LTC_EdgeVectorFormFactor( coords[3], coords[0] );
    // adjust for horizon clipping
    let result: f32 = LTC_ClippedSphereFormFactor( vectorFormFactor );

    return result;
}

var<private> dLTCCoords: Coords;
fn getLTCLightCoords(lightPos: vec3f, halfWidth: vec3f, halfHeight: vec3f) -> Coords {
    var coords: Coords;
    coords.coord0 = lightPos + halfWidth - halfHeight;
    coords.coord1 = lightPos - halfWidth - halfHeight;
    coords.coord2 = lightPos - halfWidth + halfHeight;
    coords.coord3 = lightPos + halfWidth + halfHeight;
    return coords;
}

var<private> dSphereRadius: f32;
fn getSphereLightCoords(lightPos: vec3f, halfWidth: vec3f, halfHeight: vec3f) -> Coords {
    // used for simple sphere light falloff
    // also, the code only handles a spherical light, it cannot be non-uniformly scaled in world space, and so we enforce it here
    dSphereRadius = max(length(halfWidth), length(halfHeight));

    // Billboard the 2d light quad to reflection vector, as it's used for specular. This allows us to use disk math for the sphere.
    let f: vec3f = reflect(normalize(lightPos - uniform.view_position), vNormalW);
    let w: vec3f = normalize(cross(f, halfHeight));
    let h: vec3f = normalize(cross(f, w));

    return getLTCLightCoords(lightPos, w * dSphereRadius, h * dSphereRadius);
}

// used for LTC LUT texture lookup
var<private> dLTCUV: vec2f;
#ifdef LIT_CLEARCOAT
    var<private> ccLTCUV: vec2f;
#endif

fn getLTCLightUV(gloss: f32, worldNormal: vec3f, viewDir: vec3f) -> vec2f {
    let roughness: f32 = max((1.0 - gloss) * (1.0 - gloss), 0.001);
    return LTC_Uv( worldNormal, viewDir, roughness );
}

// used for energy conservation and to modulate specular
var<private> dLTCSpecFres: vec3f;
#ifdef LIT_CLEARCOAT
    var<private> ccLTCSpecFres: vec3f;
#endif

fn getLTCLightSpecFres(uv: vec2f, specularity: vec3f) -> vec3f {
    let t2: vec4f = textureSampleLevel(areaLightsLutTex2, areaLightsLutTex2Sampler, uv, 0.0);
    return specularity * t2.x + ( vec3f( 1.0 ) - specularity) * t2.y;
}

fn calcLTCLightValues(gloss: f32, worldNormal: vec3f, viewDir: vec3f, specularity: vec3f, clearcoatGloss: f32, clearcoatWorldNormal: vec3f, clearcoatSpecularity: f32) {
    dLTCUV = getLTCLightUV(gloss, worldNormal, viewDir);
    dLTCSpecFres = getLTCLightSpecFres(dLTCUV, specularity);

    #ifdef LIT_CLEARCOAT
        ccLTCUV = getLTCLightUV(clearcoatGloss, clearcoatWorldNormal, viewDir);
        ccLTCSpecFres = getLTCLightSpecFres(ccLTCUV, vec3f(clearcoatSpecularity));
    #endif
}

fn calcRectLightValues(lightPos: vec3f, halfWidth: vec3f, halfHeight: vec3f) {
    dLTCCoords = getLTCLightCoords(lightPos, halfWidth, halfHeight);
}
fn calcDiskLightValues(lightPos: vec3f, halfWidth: vec3f, halfHeight: vec3f) {
    calcRectLightValues(lightPos, halfWidth, halfHeight);
}
fn calcSphereLightValues(lightPos: vec3f, halfWidth: vec3f, halfHeight: vec3f) {
    dLTCCoords = getSphereLightCoords(lightPos, halfWidth, halfHeight);
}

// An extended version of the implementation from "How to solve a cubic equation, revisited"
// http://momentsingraphics.de/?p=105
fn SolveCubic(Coefficient_in: vec4f) -> vec3f {
    let pi: f32 = 3.14159;
    var Coefficient = Coefficient_in;

    // Normalize the polynomial
    Coefficient = vec4f(Coefficient.xyz / Coefficient.w, Coefficient.w);

    // Divide middle coefficients by three
    let new_yz: vec2f = Coefficient.yz / 3.0;
    Coefficient = vec4f(Coefficient.x, new_yz.x, new_yz.y, Coefficient.w);
    
    let A: f32 = Coefficient.w;
    let B: f32 = Coefficient.z;
    let C: f32 = Coefficient.y;
    let D: f32 = Coefficient.x;

    // Compute the Hessian and the discriminant
    let Delta: vec3f = vec3f(
        -Coefficient.z * Coefficient.z + Coefficient.y,
        -Coefficient.y * Coefficient.z + Coefficient.x,
        dot(vec2f(Coefficient.z, -Coefficient.y), Coefficient.xy)
    );

    let Discriminant: f32 = dot(vec2f(4.0 * Delta.x, -Delta.y), Delta.zy);

    var xlc: vec2f;
    var xsc: vec2f;

    // Algorithm A
    {
        let A_a: f32 = 1.0;
        let C_a: f32 = Delta.x;
        let D_a: f32 = -2.0 * B * Delta.x + Delta.y;

        // Take the cubic root of a normalized complex number
        let Theta: f32 = atan2(sqrt(Discriminant), -D_a) / 3.0;

        let sqrt_neg_Ca = sqrt(-C_a);
        let x_1a: f32 = 2.0 * sqrt_neg_Ca * cos(Theta);
        let x_3a: f32 = 2.0 * sqrt_neg_Ca * cos(Theta + (2.0 / 3.0) * pi);

        let xl: f32 = select(x_3a, x_1a, (x_1a + x_3a) > 2.0 * B);
        xlc = vec2f(xl - B, A);
    }

    // Algorithm D
    {
        let A_d: f32 = D;
        let C_d: f32 = Delta.z;
        let D_d: f32 = -D * Delta.y + 2.0 * C * Delta.z;

        // Take the cubic root of a normalized complex number
        let Theta: f32 = atan2(D * sqrt(Discriminant), -D_d) / 3.0;

        let sqrt_neg_Cd = sqrt(-C_d);
        let x_1d: f32 = 2.0 * sqrt_neg_Cd * cos(Theta);
        let x_3d: f32 = 2.0 * sqrt_neg_Cd * cos(Theta + (2.0 / 3.0) * pi);

        let xs: f32 = select(x_3d, x_1d, x_1d + x_3d < 2.0 * C);
        xsc = vec2f(-D, xs + C);
    }

    let E: f32 =  xlc.y * xsc.y;
    let F: f32 = -xlc.x * xsc.y - xlc.y * xsc.x;
    let G: f32 =  xlc.x * xsc.x;

    let xmc: vec2f = vec2f(C * F - B * G, -B * F + C * E);

    var Root: vec3f = vec3f(xsc.x / xsc.y, xmc.x / xmc.y, xlc.x / xlc.y);

    if (Root.x < Root.y && Root.x < Root.z) {
        Root = Root.yxz;
    } else if (Root.z < Root.x && Root.z < Root.y) {
        Root = Root.xzy;
    }
    return Root;
}

fn LTC_EvaluateDisk(N: vec3f, V: vec3f, P: vec3f, Minv: mat3x3f, points: Coords) -> f32 {
    // construct orthonormal basis around N
    let T1: vec3f = normalize(V - N * dot(V, N));
    let T2: vec3f = cross(N, T1);

    // rotate area light in (T1, T2, N) basis
    let R: mat3x3f = transpose( mat3x3f( T1, T2, N ) );
    // polygon (allocate 5 vertices for clipping
    var L_: array<vec3f, 3>;
    L_[0] = R * ( points.coord0 - P );
    L_[1] = R * ( points.coord1 - P );
    L_[2] = R * ( points.coord2 - P );

    // init ellipse
    let C: vec3f  = 0.5 * (L_[0] + L_[2]);
    var V1: vec3f = 0.5 * (L_[1] - L_[2]);
    var V2: vec3f = 0.5 * (L_[1] - L_[0]);

    let C_Minv: vec3f  = Minv * C;
    let V1_Minv: vec3f = Minv * V1;
    let V2_Minv: vec3f = Minv * V2;

    // compute eigenvectors of ellipse
    var a: f32;
    var b: f32;
    let d11: f32 = dot(V1_Minv, V1_Minv);
    let d22: f32 = dot(V2_Minv, V2_Minv);
    let d12: f32 = dot(V1_Minv, V2_Minv);
    if (abs(d12) / sqrt(d11 * d22) > 0.0001) {
        let tr: f32 = d11 + d22;
        let det_inner: f32 = -d12 * d12 + d11 * d22;
        let det: f32 = sqrt(det_inner);
        let u: f32 = 0.5 * sqrt(tr - 2.0 * det);
        let v: f32 = 0.5 * sqrt(tr + 2.0 * det);
        let e_max: f32 = (u + v) * (u + v);
        let e_min: f32 = (u - v) * (u - v);

        var V1_: vec3f;
        var V2_: vec3f;

        if (d11 > d22) {
            V1_ = d12 * V1_Minv + (e_max - d11) * V2_Minv;
            V2_ = d12 * V1_Minv + (e_min - d11) * V2_Minv;
        } else {
            V1_ = d12*V2_Minv + (e_max - d22)*V1_Minv;
            V2_ = d12*V2_Minv + (e_min - d22)*V1_Minv;
        }

        a = 1.0 / e_max;
        b = 1.0 / e_min;
        V1 = normalize(V1_);
        V2 = normalize(V2_);
    } else {
        a = 1.0 / dot(V1_Minv, V1_Minv);
        b = 1.0 / dot(V2_Minv, V2_Minv);
        V1 = V1_Minv * sqrt(a);
        V2 = V2_Minv * sqrt(b);
    }

    var V3: vec3f = normalize(cross(V1, V2));
    if (dot(C_Minv, V3) < 0.0) {
        V3 = V3 * -1.0;
    }

    let L: f32  = dot(V3, C_Minv);
    let x0: f32 = dot(V1, C_Minv) / L;
    let y0: f32 = dot(V2, C_Minv) / L;

    let E1: f32 = inverseSqrt(a);
    let E2: f32 = inverseSqrt(b);

    let a_scaled = a * L * L;
    let b_scaled = b * L * L;

    let c0: f32 = a_scaled * b_scaled;
    let c1: f32 = a_scaled * b_scaled * (1.0 + x0 * x0 + y0 * y0) - a_scaled - b_scaled;
    let c2: f32 = 1.0 - a_scaled * (1.0 + x0 * x0) - b_scaled * (1.0 + y0 * y0);
    let c3: f32 = 1.0;

    let roots: vec3f = SolveCubic(vec4f(c0, c1, c2, c3));
    let e1: f32 = roots.x;
    let e2: f32 = roots.y;
    let e3: f32 = roots.z;

    var avgDir: vec3f = vec3f(a_scaled * x0 / (a_scaled - e2), b_scaled * y0 / (b_scaled - e2), 1.0);

    let rotate: mat3x3f = mat3x3f(V1, V2, V3);

    avgDir = rotate * avgDir;
    avgDir = normalize(avgDir);

    let L1: f32 = sqrt(-e2 / e3);
    let L2: f32 = sqrt(-e2 / e1);

    let formFactor: f32 = max(0.0, L1 * L2 * inverseSqrt((1.0 + L1 * L1) * (1.0 + L2 * L2)));

    const LUT_SIZE_disk: f32 = 64.0;
    const LUT_SCALE_disk: f32 = ( LUT_SIZE_disk - 1.0 ) / LUT_SIZE_disk;
    const LUT_BIAS_disk: f32 = 0.5 / LUT_SIZE_disk;

    // use tabulated horizon-clipped sphere
    var uv: vec2f = vec2f(avgDir.z * 0.5 + 0.5, formFactor);
    uv = uv * LUT_SCALE_disk + LUT_BIAS_disk;

    let scale: f32 = textureSampleLevel(areaLightsLutTex2, areaLightsLutTex2Sampler, uv, 0.0).w;

    return formFactor * scale;
}

// LTC_EvaluateDisk in some rare cases genereates NaN values in a or b, just before 'float c0 = a * b;'
// Get rid of those Nan values before they propagate further, as in case of bloom / DOF blurs they
// propagate to large areas. I didn't find the actual reason where those come from, so that is still TODO.
// Note that only disk/sphere lights are causing it, so only handle those.
fn FixNan(value: f32) -> f32 {
    // use value != value check for NaN as isnan() is not available in WGSL
    return select(value, 0.0, value != value);
}

fn getRectLightDiffuse(worldNormal: vec3f, viewDir: vec3f, lightDir: vec3f, lightDirNorm: vec3f) -> f32 {
    let identityMat = mat3x3f(vec3f(1.0, 0.0, 0.0), vec3f(0.0, 1.0, 0.0), vec3f(0.0, 0.0, 1.0));
    return LTC_EvaluateRect( worldNormal, viewDir, vPositionW, identityMat, dLTCCoords );
}

fn getDiskLightDiffuse(worldNormal: vec3f, viewDir: vec3f, lightDir: vec3f, lightDirNorm: vec3f) -> f32 {
    let identityMat = mat3x3f(vec3f(1.0, 0.0, 0.0), vec3f(0.0, 1.0, 0.0), vec3f(0.0, 0.0, 1.0));
    return FixNan(LTC_EvaluateDisk( worldNormal, viewDir, vPositionW, identityMat, dLTCCoords ));
}

fn getSphereLightDiffuse(worldNormal: vec3f, viewDir: vec3f, lightDir: vec3f, lightDirNorm: vec3f) -> f32 {
    // NB: this could be improved further with distance based wrap lighting
    let falloff: f32 = dSphereRadius / (dot(lightDir, lightDir) + dSphereRadius);
    return FixNan(getLightDiffuse(worldNormal, viewDir, lightDirNorm) * falloff);
}

fn getLTCLightInvMat(uv: vec2f) -> mat3x3f {
    let t1: vec4f = textureSampleLevel(areaLightsLutTex1, areaLightsLutTex1Sampler, uv, 0.0);

    return mat3x3f(
        vec3f( t1.x, 0.0, t1.y ),
        vec3f( 0.0, 1.0, 0.0 ),
        vec3f( t1.z, 0.0, t1.w )
    );
}

fn calcRectLightSpecular(worldNormal: vec3f, viewDir: vec3f, uv: vec2f) -> f32 {
    let mInv: mat3x3f = getLTCLightInvMat(uv);
    return LTC_EvaluateRect( worldNormal, viewDir, vPositionW, mInv, dLTCCoords );
}

fn getRectLightSpecular(worldNormal: vec3f, viewDir: vec3f) -> f32 {
    return calcRectLightSpecular(worldNormal, viewDir, dLTCUV);
}

fn calcDiskLightSpecular(worldNormal: vec3f, viewDir: vec3f, uv: vec2f) -> f32 {
    let mInv: mat3x3f = getLTCLightInvMat(uv);
    return LTC_EvaluateDisk( worldNormal, viewDir, vPositionW, mInv, dLTCCoords );
}

fn getDiskLightSpecular(worldNormal: vec3f, viewDir: vec3f) -> f32 {
    return calcDiskLightSpecular(worldNormal, viewDir, dLTCUV);
}

fn getSphereLightSpecular(worldNormal: vec3f, viewDir: vec3f) -> f32 {
    return calcDiskLightSpecular(worldNormal, viewDir, dLTCUV);
}
`,VI=`
#ifdef STD_METALNESS_CONSTANT
uniform material_metalness: f32;
#endif

fn getMetalness() {
    var metalness: f32 = 1.0;

    #ifdef STD_METALNESS_CONSTANT
        metalness = metalness * uniform.material_metalness;
    #endif

    #ifdef STD_METALNESS_TEXTURE
        metalness = metalness * textureSampleBias({STD_METALNESS_TEXTURE_NAME}, {STD_METALNESS_TEXTURE_NAME}Sampler, {STD_METALNESS_TEXTURE_UV}, uniform.textureBias).{STD_METALNESS_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_METALNESS_VERTEX
    metalness = metalness * saturate(vVertexColor.{STD_METALNESS_VERTEX_CHANNEL});
    #endif

    dMetalness = metalness;
}
`,GI=`
var texture_msdfMap: texture_2d<f32>;
var texture_msdfMapSampler: sampler;

fn median(r: f32, g: f32, b: f32) -> f32 {
    return max(min(r, g), min(max(r, g), b));
}

fn map(min: f32, max: f32, v: f32) -> f32 {
    return (v - min) / (max - min);
}

uniform font_sdfIntensity: f32; // intensity is used to boost the value read from the SDF, 0 is no boost, 1.0 is max boost
uniform font_pxrange: f32;      // the number of pixels between inside and outside the font in SDF
uniform font_textureWidth: f32; // the width of the texture atlas

#ifndef LIT_MSDF_TEXT_ATTRIBUTE
    uniform outline_color: vec4f;
    uniform outline_thickness: f32;
    uniform shadow_color: vec4f;
    uniform shadow_offset: vec2f;
#else
    varying outline_color: vec4f;
    varying outline_thickness: f32;
    varying shadow_color: vec4f;
    varying shadow_offset: vec2f;
#endif

fn applyMsdf(color_in: vec4f) -> vec4f {

    #ifndef LIT_MSDF_TEXT_ATTRIBUTE
        var outline_colorValue = uniform.outline_color;
        var outline_thicknessValue = uniform.outline_thickness;
        var shadow_colorValue = uniform.shadow_color;
        var shadow_offsetValue = uniform.shadow_offset;
    #else
        var outline_colorValue = outline_color;
        var outline_thicknessValue = outline_thickness;
        var shadow_colorValue = shadow_color;
        var shadow_offsetValue = shadow_offset;
    #endif

    // Convert to linear space before processing
    // TODO: ideally this would receive the color in linear space, but that would require larger changes
    // on the engine side, with the way premultiplied alpha is handled as well.
    var color = vec4f(gammaCorrectInputVec3(color_in.rgb), color_in.a);

    // sample the field
    let tsample: vec3f = textureSample(texture_msdfMap, texture_msdfMapSampler, vUv0).rgb;
    let uvShdw: vec2f = vUv0 - shadow_offsetValue;
    let ssample: vec3f = textureSample(texture_msdfMap, texture_msdfMapSampler, uvShdw).rgb;

    // get the signed distance value
    let sigDist: f32 = median(tsample.r, tsample.g, tsample.b);
    var sigDistShdw: f32 = median(ssample.r, ssample.g, ssample.b);

    // smoothing limit - smaller value makes for sharper but more aliased text, especially on angles
    // too large value (0.5) creates a dark glow around the letters
    let smoothingMax: f32 = 0.2;

    // smoothing depends on size of texture on screen
    let w: vec2f = abs(dpdx(vUv0)) + abs(dpdy(vUv0));
    let smoothing: f32 = clamp(w.x * uniform.font_textureWidth / uniform.font_pxrange, 0.0, smoothingMax);

    let mapMin: f32 = 0.05;
    let mapMax: f32 = clamp(1.0 - uniform.font_sdfIntensity, mapMin, 1.0);

    // remap to a smaller range (used on smaller font sizes)
    let sigDistInner: f32 = map(mapMin, mapMax, sigDist);
    let sigDistOutline: f32 = map(mapMin, mapMax, sigDist + outline_thicknessValue);
    sigDistShdw = map(mapMin, mapMax, sigDistShdw + outline_thicknessValue);

    let center: f32 = 0.5;
    // calculate smoothing and use to generate opacity
    let inside: f32 = smoothstep(center - smoothing, center + smoothing, sigDistInner);
    let outline: f32 = smoothstep(center - smoothing, center + smoothing, sigDistOutline);
    let shadow: f32 = smoothstep(center - smoothing, center + smoothing, sigDistShdw);

    let tcolor_outline: vec4f = outline * vec4f(outline_colorValue.a * outline_colorValue.rgb, outline_colorValue.a);
    var tcolor: vec4f = select(vec4f(0.0), tcolor_outline, outline > inside);
    tcolor = mix(tcolor, color, inside);

    let scolor_shadow: vec4f = shadow * vec4f(shadow_colorValue.a * shadow_colorValue.rgb, shadow_colorValue.a);
    let scolor: vec4f = select(tcolor, scolor_shadow, shadow > outline);
    tcolor = mix(scolor, tcolor, outline);

    // Convert back to gamma space before returning
    tcolor = vec4f(gammaCorrectOutput(tcolor.rgb), tcolor.a);

    return tcolor;
}
`,HI=`

fn getSpecularModulate(specularity: vec3f, albedo: vec3f, metalness: f32, f0: f32) -> vec3f {
    let dielectricF0: vec3f = f0 * specularity;
    return mix(dielectricF0, albedo, metalness);
}

fn getAlbedoModulate(albedo: vec3f, metalness: f32) -> vec3f {
    return albedo * (1.0 - metalness);
}
`,WI=`

    varying uv0: vec2f;

    var morphTexture: texture_2d_array<f32>;
    uniform morphFactor: array<f32, {MORPH_TEXTURE_MAX_COUNT}>;
    uniform morphIndex: array<u32, {MORPH_TEXTURE_MAX_COUNT}>;
    uniform count: u32;

    @fragment
    fn fragmentMain(input : FragmentInput) -> FragmentOutput {
        var color = vec3f(0, 0, 0);
        let textureDims = textureDimensions(morphTexture);
        let pixelCoords = vec2i(input.uv0 * vec2f(textureDims));
        
        for (var i: u32 = 0; i < uniform.count; i = i + 1) {
            var textureIndex: u32 = uniform.morphIndex[i].element;
            var delta = textureLoad(morphTexture, pixelCoords, textureIndex, 0).xyz;
            color += uniform.morphFactor[i].element * delta;
        }

        var output: FragmentOutput;
        output.color = vec4f(color, 1.0);
        return output;
    }
`,$I=`
    attribute vertex_position: vec2f;
    varying uv0: vec2f;

    @vertex
    fn vertexMain(input: VertexInput) -> VertexOutput {
        var output: VertexOutput;
        output.position = vec4f(input.vertex_position, 0.5, 1.0);
        output.uv0 = input.vertex_position * 0.5 + vec2f(0.5, 0.5);
        return output;
    }
`,XI=`
attribute vertex_outlineParameters: vec3f;
attribute vertex_shadowParameters: vec3f;

varying outline_color: vec4f;
varying outline_thickness: f32;
varying shadow_color: vec4f;
varying shadow_offset: vec2f;

var<private> dOutlineColor: vec4f;
var<private> dOutlineThickness: f32;
var<private> dShadowColor: vec4f;
var<private> dShadowOffset: vec2f;

fn unpackMsdfParams() {
    let little: vec3f = vertex_outlineParameters % vec3f(256.0);
    let big: vec3f = (vertex_outlineParameters - little) / 256.0;

    dOutlineColor = vec4f(little.x, big.x, little.y, big.y) / 255.0;

    // _outlineThicknessScale === 0.2
    dOutlineThickness = little.z / 255.0 * 0.2;

    let little_shadow = vertex_shadowParameters % vec3f(256.0);
    let big_shadow = (vertex_shadowParameters - little_shadow) / 256.0;

    dShadowColor = vec4f(little_shadow.x, big_shadow.x, little_shadow.y, big_shadow.y) / 255.0;

    // vec2(little.z, big.z) / 127. - 1. remaps shadow offset from [0, 254] to [-1, 1]
    // _shadowOffsetScale === 0.005
    dShadowOffset = (vec2f(little_shadow.z, big_shadow.z) / 127.0 - 1.0) * 0.005;
}
`,qI=`
var<private> dNormalMatrix: mat3x3f;

fn getNormal() -> vec3f {
    dNormalMatrix = getNormalMatrix(dModelMatrix);
    let localNormal: vec3f = getLocalNormal(vertex_normal);
    return normalize(dNormalMatrix * localNormal);
}`,jI=`

attribute vertex_normal: vec3f;

uniform matrix_normal: mat3x3f;

#ifdef MORPHING_NORMAL
    #ifdef MORPHING_INT
        var morphNormalTex: texture_2d<u32>;
        var morphNormalTexSampler: sampler;
    #else
        var morphNormalTex: texture_2d<f32>;
        var morphNormalTexSampler: sampler;
    #endif
#endif

fn getLocalNormal(vertexNormal: vec3f) -> vec3f {

    var localNormal: vec3f = vertexNormal;

    #ifdef MORPHING_NORMAL

        let morphUV: vec2i = getTextureMorphCoords();

        #ifdef MORPHING_INT
            let morphNormalInt: vec4u = textureLoad(morphNormalTex, morphUV, 0);
            let morphNormalF: vec3f = vec3f(morphNormalInt.xyz) / 65535.0 * 2.0 - 1.0;
            localNormal = localNormal + morphNormalF;
        #else
            let morphNormal: vec3f = textureLoad(morphNormalTex, morphUV, 0).xyz;
            localNormal = localNormal + morphNormal;
        #endif

    #endif

    return localNormal;
}

#if defined(SKIN) || defined(BATCH)
    fn getNormalMatrix(modelMatrix: mat4x4f) -> mat3x3f {
        return mat3x3f(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz);
    }
#elif defined(INSTANCING)
    fn getNormalMatrix(modelMatrix: mat4x4f) -> mat3x3f {
        return mat3x3f(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz);
    }
#else
    fn getNormalMatrix(modelMatrix: mat4x4f) -> mat3x3f {
        return uniform.matrix_normal;
    }
#endif
`,YI=`
#ifdef STD_NORMAL_TEXTURE
    uniform material_bumpiness: f32;
#endif

#ifdef STD_NORMALDETAIL_TEXTURE
    uniform material_normalDetailMapBumpiness: f32;

    // https://blog.selfshadow.com/publications/blending-in-detail/#detail-oriented
    fn blendNormals(inN1: vec3f, inN2: vec3f) -> vec3f {
        let n1: vec3f = inN1 + vec3f(0.0, 0.0, 1.0);
        let n2: vec3f = inN2 * vec3f(-1.0, -1.0, 1.0);
        return n1 * dot(n1, n2) / n1.z - n2;
    }
#endif

fn getNormal() {
#ifdef STD_NORMAL_TEXTURE
    var normalMap: vec3f = {STD_NORMAL_TEXTURE_DECODE}(textureSampleBias({STD_NORMAL_TEXTURE_NAME}, {STD_NORMAL_TEXTURE_NAME}Sampler, {STD_NORMAL_TEXTURE_UV}, uniform.textureBias));
    normalMap = mix(vec3f(0.0, 0.0, 1.0), normalMap, uniform.material_bumpiness);

    #ifdef STD_NORMALDETAIL_TEXTURE
        var normalDetailMap: vec3f = {STD_NORMALDETAIL_TEXTURE_DECODE}(textureSampleBias({STD_NORMALDETAIL_TEXTURE_NAME}, {STD_NORMALDETAIL_TEXTURE_NAME}Sampler, {STD_NORMALDETAIL_TEXTURE_UV}, uniform.textureBias));
        normalDetailMap = mix(vec3f(0.0, 0.0, 1.0), normalDetailMap, uniform.material_normalDetailMapBumpiness);
        normalMap = blendNormals(normalMap, normalDetailMap);
    #endif

    dNormalW = normalize(dTBN * normalMap);
#else
    dNormalW = dVertexNormalW;
#endif
}
`,KI=`
uniform material_opacity: f32;

fn getOpacity() {
    dAlpha = uniform.material_opacity;

    #ifdef STD_OPACITY_TEXTURE
    dAlpha = dAlpha * textureSampleBias({STD_OPACITY_TEXTURE_NAME}, {STD_OPACITY_TEXTURE_NAME}Sampler, {STD_OPACITY_TEXTURE_UV}, uniform.textureBias).{STD_OPACITY_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_OPACITY_VERTEX
    dAlpha = dAlpha * clamp(vVertexColor.{STD_OPACITY_VERTEX_CHANNEL}, 0.0, 1.0);
    #endif
}
`,ZI=`

#if STD_OPACITY_DITHER == BAYER8
    #include "bayerPS"
#endif

uniform blueNoiseJitter: vec4f;

#if STD_OPACITY_DITHER == BLUENOISE
    var blueNoiseTex32 : texture_2d<f32>;
    var blueNoiseTex32Sampler : sampler;
#endif

fn opacityDither(alpha: f32, id: f32) {
    #if STD_OPACITY_DITHER == BAYER8

        var noise: f32 = bayer8(floor((pcPosition.xy + uniform.blueNoiseJitter.xy + id) % vec2f(8.0))) / 64.0;

    #else

        #if STD_OPACITY_DITHER == BLUENOISE
            var uv = fract(pcPosition.xy / 32.0 + uniform.blueNoiseJitter.xy + id);
            var noise: f32 = textureSampleLevel(blueNoiseTex32, blueNoiseTex32Sampler, uv, 0.0).y;
        #endif

        #if STD_OPACITY_DITHER == IGNNOISE
            // based on https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/
            var magic = vec3f(0.06711056, 0.00583715, 52.9829189);
            var noise: f32 = fract(magic.z * fract(dot(pcPosition.xy + uniform.blueNoiseJitter.xy + id, magic.xy)));
        #endif

    #endif

    // convert the noise to linear space, as that is specified in sRGB space (stores perceptual values)
    noise = pow(noise, 2.2);

    if (alpha < noise) {
        discard;
    }
}
`,QI=`
`,JI=`

#if LIT_BLEND_TYPE == NORMAL || LIT_BLEND_TYPE == ADDITIVEALPHA || defined(LIT_ALPHA_TO_COVERAGE)

    output.color = vec4f(output.color.rgb, litArgs_opacity);

#elif LIT_BLEND_TYPE == PREMULTIPLIED

    output.color = vec4f(output.color.rgb * litArgs_opacity, litArgs_opacity);

#else

    output.color = vec4f(output.color.rgb, 1.0);

#endif
`,eM=`
varying vUv0: vec2f;
var source: texture_2d<f32>;
var sourceSampler: sampler;

@fragment fn fragmentMain(input : FragmentInput) -> FragmentOutput {
    var output: FragmentOutput;
    output.color = textureSample(source, sourceSampler, input.vUv0);
    return output;
}
`,tM=`

uniform material_sheen: vec3f;

fn getSheen() {
    var sheenColor = uniform.material_sheen;

    #ifdef STD_SHEEN_TEXTURE
    sheenColor = sheenColor * {STD_SHEEN_TEXTURE_DECODE}(textureSampleBias({STD_SHEEN_TEXTURE_NAME}, {STD_SHEEN_TEXTURE_NAME}Sampler, {STD_SHEEN_TEXTURE_UV}, uniform.textureBias)).{STD_SHEEN_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_SHEEN_VERTEX
    sheenColor = sheenColor * saturate3(vVertexColor.{STD_SHEEN_VERTEX_CHANNEL});
    #endif

    sSpecularity = sheenColor;
}
`,sM=`
uniform material_sheenGloss: f32;

fn getSheenGlossiness() {
    var sheenGlossiness = uniform.material_sheenGloss;

    #ifdef STD_SHEENGLOSS_TEXTURE
    sheenGlossiness = sheenGlossiness * textureSampleBias({STD_SHEENGLOSS_TEXTURE_NAME}, {STD_SHEENGLOSS_TEXTURE_NAME}Sampler, {STD_SHEENGLOSS_TEXTURE_UV}, uniform.textureBias).{STD_SHEENGLOSS_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_SHEENGLOSS_VERTEX
    sheenGlossiness = sheenGlossiness * saturate(vVertexColor.{STD_SHEENGLOSS_VERTEX_CHANNEL});
    #endif

    #ifdef STD_SHEENGLOSS_INVERT
    sheenGlossiness = 1.0 - sheenGlossiness;
    #endif

    sGlossiness = sheenGlossiness + 0.0000001;
}
`,iM=`
uniform material_heightMapFactor: f32;

fn getParallax() {
    var parallaxScale = uniform.material_heightMapFactor;

    var height: f32 = textureSampleBias({STD_HEIGHT_TEXTURE_NAME}, {STD_HEIGHT_TEXTURE_NAME}Sampler, {STD_HEIGHT_TEXTURE_UV}, uniform.textureBias).{STD_HEIGHT_TEXTURE_CHANNEL};
    height = height * parallaxScale - parallaxScale * 0.5;
    var viewDirT: vec3f = dViewDirW * dTBN;

    viewDirT.z = viewDirT.z + 0.42;
    dUvOffset = height * (viewDirT.xy / viewDirT.z);
}
`,rM=`
uniform meshInstanceId: u32;

fn getPickOutput() -> vec4f {
    let inv: vec4f = vec4f(1.0 / 255.0);
    let shifts: vec4u = vec4u(16u, 8u, 0u, 24u);
    let col: vec4u = (vec4u(uniform.meshInstanceId) >> shifts) & vec4u(0xffu);
    return vec4f(col) * inv;
}`,aM=`
fn getReflDir(worldNormal: vec3f, viewDir: vec3f, gloss: f32, tbn: mat3x3f) {
    dReflDirW = normalize(-reflect(viewDir, worldNormal));
}
`,nM=`
fn getReflDir(worldNormal: vec3f, viewDir: vec3f, gloss: f32, tbn: mat3x3f) {
    let roughness: f32 = sqrt(1.0 - min(gloss, 1.0));

    let direction: vec2f = dAnisotropyRotation;
    let anisotropicT: vec3f = normalize(tbn * vec3f(direction, 0.0));
    let anisotropicB: vec3f = normalize(cross(tbn[2], anisotropicT));

    let anisotropy: f32 = dAnisotropy;
    let anisotropicDirection: vec3f = anisotropicB;
    let anisotropicTangent: vec3f = cross(anisotropicDirection, viewDir);
    let anisotropicNormal: vec3f = cross(anisotropicTangent, anisotropicDirection);
    let bendFactor: f32 = 1.0 - anisotropy * (1.0 - roughness);
    let bendFactor4: f32 = bendFactor * bendFactor * bendFactor * bendFactor;
    let bentNormal: vec3f = normalize(mix(normalize(anisotropicNormal), normalize(worldNormal), bendFactor4));
    dReflDirW = reflect(-viewDir, bentNormal);
}`,oM=`
#ifdef LIT_CLEARCOAT
fn addReflectionCC(reflDir: vec3f, gloss: f32) {
    ccReflection = ccReflection + calcReflection(reflDir, gloss);
}
#endif
`,lM=`
var texture_cubeMap: texture_cube<f32>;
var texture_cubeMapSampler: sampler;
uniform material_reflectivity: f32;

fn calcReflection(reflDir: vec3f, gloss: f32) -> vec3f {
    var lookupVec: vec3f = cubeMapProject(reflDir);
    lookupVec.x = lookupVec.x * -1.0;
    return {reflectionDecode}(textureSample(texture_cubeMap, texture_cubeMapSampler, lookupVec));
}

fn addReflection(reflDir: vec3f, gloss: f32) {
    dReflection = dReflection + vec4f(calcReflection(reflDir, gloss), uniform.material_reflectivity);
}
`,hM=`
#ifndef ENV_ATLAS
    #define ENV_ATLAS
    var texture_envAtlas: texture_2d<f32>;
    var texture_envAtlasSampler: sampler;
#endif

var texture_cubeMap: texture_cube<f32>;
var texture_cubeMapSampler: sampler;
uniform material_reflectivity: f32;

fn calcReflection(reflDir: vec3f, gloss: f32) -> vec3f {
    let dir: vec3f = cubeMapProject(reflDir) * vec3f(-1.0, 1.0, 1.0);
    let uv: vec2f = toSphericalUv(dir);

    // calculate roughness level
    let level: f32 = saturate(1.0 - gloss) * 5.0;
    let ilevel: f32 = floor(level);
    let flevel: f32 = level - ilevel;

    let sharp: vec3f = {reflectionCubemapDecode}(textureSample(texture_cubeMap, texture_cubeMapSampler, dir));
    let roughA: vec3f = {reflectionDecode}(textureSample(texture_envAtlas, texture_envAtlasSampler, mapRoughnessUv(uv, ilevel)));
    let roughB: vec3f = {reflectionDecode}(textureSample(texture_envAtlas, texture_envAtlasSampler, mapRoughnessUv(uv, ilevel + 1.0)));

    return processEnvironment(mix(sharp, mix(roughA, roughB, flevel), min(level, 1.0)));
}

fn addReflection(reflDir: vec3f, gloss: f32) {
    dReflection = dReflection + vec4f(calcReflection(reflDir, gloss), uniform.material_reflectivity);
}
`,cM=`
#ifndef ENV_ATLAS
#define ENV_ATLAS
    var texture_envAtlas: texture_2d<f32>;
    var texture_envAtlasSampler: sampler;
#endif
uniform material_reflectivity: f32;

// calculate mip level for shiny reflection given equirect coords uv.
fn shinyMipLevel(uv: vec2f) -> f32 {
    let dx: vec2f = dpdx(uv);
    let dy: vec2f = dpdy(uv);

    // calculate second dF at 180 degrees
    let uv2: vec2f = vec2f(fract(uv.x + 0.5), uv.y);
    let dx2: vec2f = dpdx(uv2);
    let dy2: vec2f = dpdy(uv2);

    // calculate min of both sets of dF to handle discontinuity at the azim edge
    let maxd: f32 = min(max(dot(dx, dx), dot(dy, dy)), max(dot(dx2, dx2), dot(dy2, dy2)));

    return clamp(0.5 * log2(maxd) - 1.0 + uniform.textureBias, 0.0, 5.0);
}

fn calcReflection(reflDir: vec3f, gloss: f32) -> vec3f {
    let dir: vec3f = cubeMapProject(reflDir) * vec3f(-1.0, 1.0, 1.0);
    let uv: vec2f = toSphericalUv(dir);

    // calculate roughness level
    let level: f32 = saturate(1.0 - gloss) * 5.0;
    let ilevel: f32 = floor(level);

    // accessing the shiny (top level) reflection - perform manual mipmap lookup
    let level2: f32 = shinyMipLevel(uv * atlasSize);
    let ilevel2: f32 = floor(level2);

    var uv0: vec2f;
    var uv1: vec2f;
    var weight: f32;
    if (ilevel == 0.0) {
        uv0 = mapShinyUv(uv, ilevel2);
        uv1 = mapShinyUv(uv, ilevel2 + 1.0);
        weight = level2 - ilevel2;
    } else {
        // accessing rough reflection - just sample the same part twice
        uv0 = mapRoughnessUv(uv, ilevel);
        uv1 = uv0;
        weight = 0.0;
    }

    let linearA: vec3f = {reflectionDecode}(textureSample(texture_envAtlas, texture_envAtlasSampler, uv0));
    let linearB: vec3f = {reflectionDecode}(textureSample(texture_envAtlas, texture_envAtlasSampler, uv1));
    let linear0: vec3f = mix(linearA, linearB, weight);
    let linear1: vec3f = {reflectionDecode}(textureSample(texture_envAtlas, texture_envAtlasSampler, mapRoughnessUv(uv, ilevel + 1.0)));

    return processEnvironment(mix(linear0, linear1, level - ilevel));
}

fn addReflection(reflDir: vec3f, gloss: f32) {
    dReflection = dReflection + vec4f(calcReflection(reflDir, gloss), uniform.material_reflectivity);
}
`,dM=`
#ifndef VIEWMATRIX
    #define VIEWMATRIX
    uniform matrix_view: mat4x4f;
#endif

var texture_sphereMap: texture_2d<f32>;
var texture_sphereMapSampler: sampler;
uniform material_reflectivity: f32;

fn calcReflection(reflDir: vec3f, gloss: f32) -> vec3f {
    let viewRotationMatrix = mat3x3f(uniform.matrix_view[0].xyz, uniform.matrix_view[1].xyz, uniform.matrix_view[2].xyz);
    let reflDirV: vec3f = viewRotationMatrix * reflDir;

    let m: f32 = 2.0 * sqrt(dot(reflDirV.xy, reflDirV.xy) + (reflDirV.z + 1.0) * (reflDirV.z + 1.0));
    let sphereMapUv: vec2f = reflDirV.xy / m + 0.5;

    return {reflectionDecode}(textureSample(texture_sphereMap, texture_sphereMapSampler, sphereMapUv));
}

fn addReflection(reflDir: vec3f, gloss: f32) {
    dReflection = dReflection + vec4f(calcReflection(reflDir, gloss), uniform.material_reflectivity);
}
`,fM=`

fn addReflectionSheen(worldNormal: vec3f, viewDir: vec3f, gloss: f32) {
    let NoV: f32 = dot(worldNormal, viewDir);
    let alphaG: f32 = gloss * gloss;

    // Avoid using a LUT and approximate the values analytically
    let a: f32 = select(
        -8.48 * alphaG + 14.3 * gloss - 9.95,
        -339.2 * alphaG + 161.4 * gloss - 25.9,
        gloss < 0.25
    );
    let b: f32 = select(
        1.97 * alphaG - 3.27 * gloss + 0.72,
        44.0 * alphaG - 23.7 * gloss + 3.26,
        gloss < 0.25
    );
    let dg_add: f32 = select(
        0.1 * ( gloss - 0.25 ),
        0.0,
        gloss < 0.25
    );
    let dg: f32 = exp( a * NoV + b ) + dg_add;
    sReflection = sReflection + (calcReflection(worldNormal, 0.0) * saturate(dg));
}`,uM=`
fn refract2(viewVec: vec3f, normal: vec3f, IOR: f32) -> vec3f {
    let vn: f32 = dot(viewVec, normal);
    let k: f32 = 1.0 - IOR * IOR * (1.0 - vn * vn);
    let refrVec: vec3f = IOR * viewVec - (IOR * vn + sqrt(k)) * normal;
    return refrVec;
}

fn addRefraction(
    worldNormal: vec3f,
    viewDir: vec3f,
    thickness: f32,
    gloss: f32,
    specularity: vec3f,
    albedo: vec3f,
    transmission: f32,
    refractionIndex: f32,
    dispersion: f32
#if defined(LIT_IRIDESCENCE)
    , iridescenceFresnel: vec3f,
    iridescenceIntensity: f32
#endif
) {
    // use same reflection code with refraction vector
    let tmpRefl: vec4f = dReflection;
    let reflectionDir: vec3f = refract2(-viewDir, worldNormal, refractionIndex);
    dReflection = vec4f(0.0);
    addReflection(reflectionDir, gloss);
    dDiffuseLight = mix(dDiffuseLight, dReflection.rgb * albedo, transmission);
    dReflection = tmpRefl;
}
`,pM=`
uniform material_invAttenuationDistance: f32;
uniform material_attenuation: vec3f;

fn evalRefractionColor(refractionVector: vec3f, gloss: f32, refractionIndex: f32) -> vec3f {

    // The refraction point is the entry point + vector to exit point
    let pointOfRefraction: vec4f = vec4f(vPositionW + refractionVector, 1.0);

    // Project to texture space so we can sample it
    let projectionPoint: vec4f = uniform.matrix_viewProjection * pointOfRefraction;

    // use built-in getGrabScreenPos function to convert screen position to grab texture uv coords
    let uv: vec2f = getGrabScreenPos(projectionPoint);

    // Use IOR and roughness to select mip
    let iorToRoughness: f32 = (1.0 - gloss) * clamp((1.0 / refractionIndex) * 2.0 - 2.0, 0.0, 1.0);
    let refractionLod: f32 = log2(uniform.uScreenSize.x) * iorToRoughness;
    let refraction: vec3f = textureSampleLevel(uSceneColorMap, uSceneColorMapSampler, uv, refractionLod).rgb;

    return refraction;
}

fn addRefraction(
    worldNormal: vec3f,
    viewDir: vec3f,
    thickness: f32,
    gloss: f32,
    specularity: vec3f,
    albedo: vec3f,
    transmission: f32,
    refractionIndex: f32,
    dispersion: f32,
#if defined(LIT_IRIDESCENCE)
    iridescenceFresnel: vec3f,
    iridescenceIntensity: f32
#endif
) {

    // Extract scale from the model transform
    var modelScale: vec3f;
    modelScale.x = length(uniform.matrix_model[0].xyz);
    modelScale.y = length(uniform.matrix_model[1].xyz);
    modelScale.z = length(uniform.matrix_model[2].xyz);

    // Calculate the refraction vector, scaled by the thickness and scale of the object
    let scale: vec3f = thickness * modelScale;
    var refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndex)) * scale;
    var refraction = evalRefractionColor(refractionVector, gloss, refractionIndex);

    #ifdef LIT_DISPERSION
        // based on the dispersion material property, calculate modified refraction index values
        // for R and B channels and evaluate the refraction color for them.
        let halfSpread: f32 = (1.0 / refractionIndex - 1.0) * 0.025 * dispersion;

        let refractionIndexR: f32 = refractionIndex - halfSpread;
        refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndexR)) * scale;
        refraction.r = evalRefractionColor(refractionVector, gloss, refractionIndexR).r;

        let refractionIndexB: f32 = refractionIndex + halfSpread;
        refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndexB)) * scale;
        refraction.b = evalRefractionColor(refractionVector, gloss, refractionIndexB).b;
    #endif

    // Transmittance is our final refraction color
    var transmittance: vec3f;
    if (uniform.material_invAttenuationDistance != 0.0)
    {
        let attenuation: vec3f = -log(uniform.material_attenuation) * uniform.material_invAttenuationDistance;
        transmittance = exp(-attenuation * length(refractionVector));
    }
    else
    {
        transmittance = refraction;
    }

    // Apply fresnel effect on refraction
    let fresnel: vec3f = vec3f(1.0) -
        getFresnel(
            dot(viewDir, worldNormal),
            gloss,
            specularity
        #if defined(LIT_IRIDESCENCE)
            , iridescenceFresnel,
            iridescenceIntensity
        #endif
        );
    dDiffuseLight = mix(dDiffuseLight, refraction * transmittance * fresnel, transmission);
}
`,mM=`

varying vUv0: vec2f;

#ifdef CUBEMAP_SOURCE
    var sourceCube: texture_cube<f32>;
    var sourceCubeSampler : sampler;
#else
    var sourceTex: texture_2d<f32>;
    var sourceTexSampler : sampler;
#endif

#ifdef USE_SAMPLES_TEX
    // samples
    var samplesTex: texture_2d<f32>;
    var samplesTexSampler : sampler;
    uniform samplesTexInverseSize: vec2f;
#endif

// params:
// x - target cubemap face 0..6
// y - target image total pixels
// z - source cubemap size
uniform params: vec3f;

fn targetFace() -> f32 { return uniform.params.x; }
fn targetTotalPixels() -> f32 { return uniform.params.y; }
fn sourceTotalPixels() -> f32 { return uniform.params.z; }

const PI: f32 = 3.141592653589793;

fn saturate(x: f32) -> f32 {
    return clamp(x, 0.0, 1.0);
}

#include "decodePS"
#include "encodePS"

//-- supported projections

fn modifySeams(dir: vec3f, scale: f32) -> vec3f {
    let adir = abs(dir);
    let M = max(max(adir.x, adir.y), adir.z);
    return dir / M * vec3f(
        select(scale, 1.0, adir.x == M),
        select(scale, 1.0, adir.y == M),
        select(scale, 1.0, adir.z == M)
    );
}

fn toSpherical(dir: vec3f) -> vec2f {
    let nonZeroXZ = any(dir.xz != vec2f(0.0, 0.0));
    return vec2f(select(0.0, atan2(dir.x, dir.z), nonZeroXZ), asin(dir.y));
}

fn fromSpherical(uv: vec2f) -> vec3f {
    return vec3f(cos(uv.y) * sin(uv.x),
                sin(uv.y),
                cos(uv.y) * cos(uv.x));
}

fn getDirectionEquirect(uv: vec2f) -> vec3f {
    return fromSpherical((vec2f(uv.x, 1.0 - uv.y) * 2.0 - 1.0) * vec2f(PI, PI * 0.5));
}

// octahedral code, based on https://jcgt.org/published/0003/02/01/
// "Survey of Efficient Representations for Independent Unit Vectors" by Cigolle, Donow, Evangelakos, Mara, McGuire, Meyer

fn signNotZero(k: f32) -> f32 {
    return select(-1.0, 1.0, k >= 0.0);
}

fn signNotZeroVec2(v: vec2f) -> vec2f {
    return vec2f(signNotZero(v.x), signNotZero(v.y));
}

// Returns a unit vector. Argument o is an octahedral vector packed via octEncode, on the [-1, +1] square
fn octDecode(o: vec2f) -> vec3f {
    var v = vec3f(o.x, 1.0 - abs(o.x) - abs(o.y), o.y);
    if (v.y < 0.0) {
        var temp: vec2f = (1.0 - abs(v.zx)) * signNotZeroVec2(v.xz);
        v = vec3f(temp.x, v.y, temp.y);
    }
    return normalize(v);
}

fn getDirectionOctahedral(uv: vec2f) -> vec3f {
    return octDecode(vec2f(uv.x, 1.0 - uv.y) * 2.0 - 1.0);
}

// Assumes that v is a unit vector. The result is an octahedral vector on the [-1, +1] square
fn octEncode(v: vec3f) -> vec2f {
    let l1norm = abs(v.x) + abs(v.y) + abs(v.z);
    var result = v.xz * (1.0 / l1norm);
    if (v.y < 0.0) {
        result = (1.0 - abs(result.yx)) * signNotZeroVec2(result.xy);
    }
    return result;
}

/////////////////////////////////////////////////////////////////////

#ifdef CUBEMAP_SOURCE
    fn sampleCubemapDir(dir: vec3f) -> vec4f {
        return textureSample(sourceCube, sourceCubeSampler, modifySeams(dir, 1.0));
    }

    fn sampleCubemapSph(sph: vec2f) -> vec4f {
        return sampleCubemapDir(fromSpherical(sph));
    }

    fn sampleCubemapDirLod(dir: vec3f, mipLevel: f32) -> vec4f {
        return textureSampleLevel(sourceCube, sourceCubeSampler, modifySeams(dir, 1.0), mipLevel);
    }

    fn sampleCubemapSphLod(sph: vec2f, mipLevel: f32) -> vec4f {
        return sampleCubemapDirLod(fromSpherical(sph), mipLevel);
    }
#else

    fn sampleEquirectSph(sph: vec2f) -> vec4f {
        let uv = sph / vec2f(PI * 2.0, PI) + 0.5;
        return textureSample(sourceTex, sourceTexSampler, vec2f(uv.x, 1.0 - uv.y));
    }

    fn sampleEquirectDir(dir: vec3f) -> vec4f {
        return sampleEquirectSph(toSpherical(dir));
    }

    fn sampleEquirectSphLod(sph: vec2f, mipLevel: f32) -> vec4f {
        let uv = sph / vec2f(PI * 2.0, PI) + 0.5;
        return textureSampleLevel(sourceTex, sourceTexSampler, vec2f(uv.x, 1.0 - uv.y), mipLevel);
    }

    fn sampleEquirectDirLod(dir: vec3f, mipLevel: f32) -> vec4f {
        return sampleEquirectSphLod(toSpherical(dir), mipLevel);
    }

    fn sampleOctahedralDir(dir: vec3f) -> vec4f {
        let uv = octEncode(dir) * 0.5 + 0.5;
        return textureSample(sourceTex, sourceTexSampler, vec2f(uv.x, 1.0 - uv.y));
    }

    fn sampleOctahedralSph(sph: vec2f) -> vec4f {
        return sampleOctahedralDir(fromSpherical(sph));
    }

    fn sampleOctahedralDirLod(dir: vec3f, mipLevel: f32) -> vec4f {
        let uv = octEncode(dir) * 0.5 + 0.5;
        return textureSampleLevel(sourceTex, sourceTexSampler, vec2f(uv.x, 1.0 - uv.y), mipLevel);
    }

    fn sampleOctahedralSphLod(sph: vec2f, mipLevel: f32) -> vec4f {
        return sampleOctahedralDirLod(fromSpherical(sph), mipLevel);
    }

#endif

fn getDirectionCubemap(uv: vec2f) -> vec3f {
    let st = uv * 2.0 - 1.0;
    let face = targetFace();

    var vec: vec3f;
    if (face == 0.0) {
        vec = vec3f(1, -st.y, -st.x);
    } else if (face == 1.0) {
        vec = vec3f(-1, -st.y, st.x);
    } else if (face == 2.0) {
        vec = vec3f(st.x, 1, st.y);
    } else if (face == 3.0) {
        vec = vec3f(st.x, -1, -st.y);
    } else if (face == 4.0) {
        vec = vec3f(st.x, -st.y, 1);
    } else {
        vec = vec3f(-st.x, -st.y, -1);
    }

    return normalize(modifySeams(vec, 1.0));
}

fn matrixFromVector(n: vec3f) -> mat3x3f {
    let a = 1.0 / (1.0 + n.z);
    let b = -n.x * n.y * a;
    let b1 = vec3f(1.0 - n.x * n.x * a, b, -n.x);
    let b2 = vec3f(b, 1.0 - n.y * n.y * a, -n.y);
    return mat3x3f(b1, b2, n);
}

fn matrixFromVectorSlow(n: vec3f) -> mat3x3f {
    let up = select(vec3f(0.0, 0.0, select(-1.0, 1.0, n.y > 0.0)), vec3f(0.0, 1.0, 0.0), abs(n.y) > 0.0000001);
    let x = normalize(cross(up, n));
    let y = cross(n, x);
    return mat3x3f(x, y, n);
}

fn reproject(uv: vec2f) -> vec4f {
    if ({NUM_SAMPLES} <= 1) {
        // single sample
        return {ENCODE_FUNC}({DECODE_FUNC}({SOURCE_FUNC}Dir({TARGET_FUNC}(uv))));
    } else {
        // multi sample
        let t = {TARGET_FUNC}(uv);
        let tu = dpdx(t);
        let tv = dpdy(t);

        var result = vec3f(0.0);
        for (var u = 0.0; u < {NUM_SAMPLES_SQRT}; u += 1.0) {
            for (var v = 0.0; v < {NUM_SAMPLES_SQRT}; v += 1.0) {
                result += {DECODE_FUNC}({SOURCE_FUNC}Dir(normalize(t +
                                                            tu * (u / {NUM_SAMPLES_SQRT} - 0.5) +
                                                            tv * (v / {NUM_SAMPLES_SQRT} - 0.5))));
            }
        }
        return {ENCODE_FUNC}(result / ({NUM_SAMPLES_SQRT} * {NUM_SAMPLES_SQRT}));
    }
}

const unpackFloat: vec4f = vec4f(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0);

#ifdef USE_SAMPLES_TEX
    fn unpackSample(i: i32, L: ptr<function, vec3f>, mipLevel: ptr<function, f32>) {
        var u = (f32(i * 4) + 0.5) * uniform.samplesTexInverseSize.x;
        var v = (floor(u) + 0.5) * uniform.samplesTexInverseSize.y;

        var raw: vec4f;
        raw.x = dot(textureSample(samplesTex, samplesTexSampler, vec2f(u, v)), unpackFloat); u += uniform.samplesTexInverseSize.x;
        raw.y = dot(textureSample(samplesTex, samplesTexSampler, vec2f(u, v)), unpackFloat); u += uniform.samplesTexInverseSize.x;
        raw.z = dot(textureSample(samplesTex, samplesTexSampler, vec2f(u, v)), unpackFloat); u += uniform.samplesTexInverseSize.x;
        raw.w = dot(textureSample(samplesTex, samplesTexSampler, vec2f(u, v)), unpackFloat);

        *L = raw.xyz * 2.0 - 1.0;
        *mipLevel = raw.w * 8.0;
    }

    // convolve an environment given pre-generated samples
    fn prefilterSamples(uv: vec2f) -> vec4f {
        // construct vector space given target direction
        let vecSpace = matrixFromVectorSlow({TARGET_FUNC}(uv));

        var L: vec3f;
        var mipLevel: f32;

        var result = vec3f(0.0);
        var totalWeight = 0.0;
        for (var i = 0; i < {NUM_SAMPLES}; i += 1) {
            unpackSample(i, &L, &mipLevel);
            result += {DECODE_FUNC}({SOURCE_FUNC}DirLod(vecSpace * L, mipLevel)) * L.z;
            totalWeight += L.z;
        }

        return {ENCODE_FUNC}(result / totalWeight);
    }

    // unweighted version of prefilterSamples
    fn prefilterSamplesUnweighted(uv: vec2f) -> vec4f {
        // construct vector space given target direction
        let vecSpace = matrixFromVectorSlow({TARGET_FUNC}(uv));

        var L: vec3f;
        var mipLevel: f32;

        var result = vec3f(0.0);
        for (var i = 0; i < {NUM_SAMPLES}; i += 1) {
            unpackSample(i, &L, &mipLevel);
            result += {DECODE_FUNC}({SOURCE_FUNC}DirLod(vecSpace * L, mipLevel));
        }

        return {ENCODE_FUNC}(result / f32({NUM_SAMPLES}));
    }
#endif

@fragment
fn fragmentMain(input : FragmentInput) -> FragmentOutput {
    var output: FragmentOutput;
    output.color = {PROCESS_FUNC}(input.vUv0);
    return output;
}
`,_M=`
attribute vertex_position: vec2f;
uniform uvMod: vec4f;
varying vUv0: vec2f;

@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
  var output: VertexOutput;
  output.position = vec4f(input.vertex_position, 0.5, 1.0);
  output.vUv0 = getImageEffectUV((input.vertex_position * 0.5 + vec2f(0.5, 0.5)) * uniform.uvMod.xy + uniform.uvMod.zw);
  return output;
}
`,gM=`

var uSceneDepthMap: texture_2d<f32>;
var uSceneDepthMapSampler: sampler;

#ifndef SCREENSIZE
    #define SCREENSIZE
    uniform uScreenSize: vec4f;
#endif

#ifndef VIEWMATRIX
    #define VIEWMATRIX
    uniform matrix_view: mat4x4f;
#endif

#ifndef LINEARIZE_DEPTH
    #define LINEARIZE_DEPTH

    #ifndef CAMERAPLANES
        #define CAMERAPLANES
        uniform camera_params: vec4f; // x: 1 / camera_far,      y: camera_far,     z: camera_near,        w: is_ortho
    #endif

    fn linearizeDepth(z: f32) -> f32 {
        if (uniform.camera_params.w == 0.0) { // Perspective
            return (uniform.camera_params.z * uniform.camera_params.y) / (uniform.camera_params.y + z * (uniform.camera_params.z - uniform.camera_params.y));
        } else {
            return uniform.camera_params.z + z * (uniform.camera_params.y - uniform.camera_params.z);
        }
    }
#endif

fn delinearizeDepth(linearDepth: f32) -> f32 {
    if (uniform.camera_params.w == 0.0) {
        return (uniform.camera_params.y * (uniform.camera_params.z - linearDepth)) / (linearDepth * (uniform.camera_params.z - uniform.camera_params.y));
    } else {
        return (linearDepth - uniform.camera_params.z) / (uniform.camera_params.y - uniform.camera_params.z);
    }
}

// Retrieves rendered linear camera depth by UV
fn getLinearScreenDepth(uv: vec2f) -> f32 {
    #ifdef SCENE_DEPTHMAP_LINEAR
        #ifdef SCENE_DEPTHMAP_FLOAT
            return textureSample(uSceneDepthMap, uSceneDepthMapSampler, uv).r;
        #else

            let textureSize = textureDimensions(uSceneDepthMap, 0);
            let texel: vec2i = vec2i(uv * vec2f(textureSize));
            let data: vec4f = textureLoad(uSceneDepthMap, texel, 0);

            let data_u32: vec4u = vec4u(data * 255.0);
            let intBits: u32 = (data_u32.r << 24u) | (data_u32.g << 16u) | (data_u32.b << 8u) | data_u32.a;

            return bitcast<f32>(intBits);

        #endif
    #else
        return linearizeDepth(textureSample(uSceneDepthMap, uSceneDepthMapSampler, uv).r);
    #endif
}

#ifndef VERTEXSHADER
    // Retrieves rendered linear camera depth under the current pixel
    fn getLinearScreenDepthFrag() -> f32 {
        let uv: vec2f = pcPosition.xy * uniform.uScreenSize.zw;
        return getLinearScreenDepth(uv);
    }
#endif

// Generates linear camera depth for the given world position
fn getLinearDepth(pos: vec3f) -> f32 {
    return -(uniform.matrix_view * vec4f(pos, 1.0)).z;
}
`,SM=`

// function which selects a shadow projection matrix index based on cascade distances
fn getShadowCascadeIndex(shadowCascadeDistances: vec4f, shadowCascadeCount: i32) -> i32 {

    // depth in 0 .. far plane range
    let depth: f32 = 1.0 / pcPosition.w;

    // 1.0 if depth >= distance, 0.0 otherwise
    let comparisons: vec4f = step(shadowCascadeDistances, vec4f(depth));

    // sum is the index
    let cascadeIndex: i32 = i32(dot(comparisons, vec4f(1.0)));

    // limit to actual number of used cascades
    return min(cascadeIndex, shadowCascadeCount - 1);
}

// function which modifies cascade index to dither between cascades
fn ditherShadowCascadeIndex(cascadeIndex_in: i32, shadowCascadeDistances: vec4f, shadowCascadeCount: i32, blendFactor: f32) -> i32 {

    // Use var as cascadeIndex might be modified
    var cascadeIndex: i32 = cascadeIndex_in;
    if (cascadeIndex < shadowCascadeCount - 1) {
        let currentRangeEnd: f32 = shadowCascadeDistances[cascadeIndex];
        let transitionStart: f32 = blendFactor * currentRangeEnd; // Start overlap factor away from the end distance
        let depth: f32 = 1.0 / pcPosition.w;

        if (depth > transitionStart) {
            // Calculate a transition factor (0.0 to 1.0) within the overlap range
            let transitionFactor: f32 = smoothstep(transitionStart, currentRangeEnd, depth);

            // Add pseudo-random dithering
            // TODO: replace by user selectable dithering method
            let dither: f32 = fract(sin(dot(pcPosition.xy, vec2f(12.9898, 78.233))) * 43758.5453);
            if (dither < transitionFactor) {
                cascadeIndex = cascadeIndex + 1;
            }
        }
    }

    return cascadeIndex;
}

fn fadeShadow(shadowCoord_in: vec3f, shadowCascadeDistances: vec4f) -> vec3f {
    // if the pixel is past the shadow distance, remove shadow
    // this enforces straight line instead of corner of shadow which moves when camera rotates
    var shadowCoord: vec3f = shadowCoord_in;
    let depth: f32 = 1.0 / pcPosition.w;
    if (depth > shadowCascadeDistances.w) {
        shadowCoord.z = -9999999.0;
    }

    return shadowCoord;
}
`,yM=`

// ------ VSM Shared ------

fn linstep(a: f32, b: f32, v: f32) -> f32 {
    // WGSL saturate -> clamp
    return clamp((v - a) / (b - a), 0.0, 1.0);
}

fn reduceLightBleeding(pMax: f32, amount: f32) -> f32 {
   // Remove the [0, amount] tail and linearly rescale (amount, 1].
   return linstep(amount, 1.0, pMax);
}

fn chebyshevUpperBound(moments: vec2f, mean: f32, minVariance: f32, lightBleedingReduction: f32) -> f32 {
    // Compute variance
    var variance: f32 = moments.y - (moments.x * moments.x);
    variance = max(variance, minVariance);

    // Compute probabilistic upper bound
    let d: f32 = mean - moments.x;
    var pMax: f32 = variance / (variance + (d * d));

    pMax = reduceLightBleeding(pMax, lightBleedingReduction);

    // One-tailed Chebyshev
    return select(pMax, 1.0, mean <= moments.x);
}

fn calculateEVSM(moments_in: vec3f, Z_in: f32, vsmBias: f32, exponent: f32) -> f32 {
    let Z: f32 = 2.0 * Z_in - 1.0;
    let warpedDepth: f32 = exp(exponent * Z);

    let moments: vec2f = moments_in.xy + vec2f(warpedDepth, warpedDepth*warpedDepth) * (1.0 - moments_in.z);

    let VSMBias: f32 = vsmBias;//0.01 * 0.25;
    let depthScale: f32 = VSMBias * exponent * warpedDepth;
    let minVariance1: f32 = depthScale * depthScale;
    return chebyshevUpperBound(moments, warpedDepth, minVariance1, 0.1);
}
// ------ VSM 16 ------

fn VSM16(tex: texture_2d<f32>, texSampler: sampler, texCoords: vec2f, resolution: f32, Z: f32, vsmBias: f32, exponent: f32) -> f32 {
    let moments: vec3f = textureSampleLevel(tex, texSampler, texCoords, 0.0).xyz;
    return calculateEVSM(moments, Z, vsmBias, exponent);
}

fn getShadowVSM16(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoord: vec3f, shadowParams: vec4f, exponent: f32) -> f32 {
    return VSM16(shadowMap, shadowMapSampler, shadowCoord.xy, shadowParams.x, shadowCoord.z, shadowParams.y, exponent);
}

fn getShadowSpotVSM16(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoord: vec3f, shadowParams: vec4f, exponent: f32, lightDir: vec3f) -> f32 {
    let Z: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
    return VSM16(shadowMap, shadowMapSampler, shadowCoord.xy, shadowParams.x, Z, shadowParams.y, exponent);
}

// ------ VSM 32 ------

fn VSM32(tex: texture_2d<f32>, texSampler: sampler, texCoords_in: vec2f, resolution: f32, Z: f32, vsmBias: f32, exponent: f32) -> f32 {

    #ifdef CAPS_TEXTURE_FLOAT_FILTERABLE
        var moments: vec3f = textureSampleLevel(tex, texSampler, texCoords_in, 0.0).xyz;
    #else
        // manual bilinear filtering
        var pixelSize : f32 = 1.0 / resolution;
        let texCoords: vec2f = texCoords_in - vec2f(pixelSize);
        let s00: vec3f = textureSampleLevel(tex, texSampler, texCoords, 0.0).xyz;
        let s10: vec3f = textureSampleLevel(tex, texSampler, texCoords + vec2f(pixelSize, 0.0), 0.0).xyz;
        let s01: vec3f = textureSampleLevel(tex, texSampler, texCoords + vec2f(0.0, pixelSize), 0.0).xyz;
        let s11: vec3f = textureSampleLevel(tex, texSampler, texCoords + vec2f(pixelSize), 0.0).xyz;
        let fr: vec2f = fract(texCoords * resolution);
        let h0: vec3f = mix(s00, s10, fr.x);
        let h1: vec3f = mix(s01, s11, fr.x);
        var moments: vec3f = mix(h0, h1, fr.y);
    #endif

    return calculateEVSM(moments, Z, vsmBias, exponent);
}

fn getShadowVSM32(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoord: vec3f, shadowParams: vec4f, exponent: f32) -> f32 {
    return VSM32(shadowMap, shadowMapSampler, shadowCoord.xy, shadowParams.x, shadowCoord.z, shadowParams.y, exponent);
}

fn getShadowSpotVSM32(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoord: vec3f, shadowParams: vec4f, exponent: f32, lightDir: vec3f) -> f32 {
    let Z: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
    return VSM32(shadowMap, shadowMapSampler, shadowCoord.xy, shadowParams.x, Z, shadowParams.y, exponent);
}
`,vM=`
// ----- Directional/Spot Sampling -----

fn getShadowPCF1x1(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
    return textureSampleCompareLevel(shadowMap, shadowMapSampler, shadowCoord.xy, shadowCoord.z);
}

fn getShadowSpotPCF1x1(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
    return textureSampleCompareLevel(shadowMap, shadowMapSampler, shadowCoord.xy, shadowCoord.z);
}

// ----- Omni Sampling -----

// Not supported on WebGPU device
// fn getShadowOmniPCF1x1(shadowMap: texture_depth_cube, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f, lightDir: vec3f) -> f32 {
//     let shadowZ: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
//     return textureSampleCompareLevel(shadowMap, shadowMapSampler, lightDir, shadowZ);
// }
`,xM=`
// ----- Directional/Spot Sampling -----
fn _getShadowPCF3x3(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec3f) -> f32 {
    let z: f32 = shadowCoord.z;
    let uv: vec2f = shadowCoord.xy * shadowParams.x; // 1 unit - 1 texel
    let shadowMapSizeInv: f32 = 1.0 / shadowParams.x;
    let base_uv_temp: vec2f = floor(uv + 0.5);
    let s: f32 = (uv.x + 0.5 - base_uv_temp.x);
    let t: f32 = (uv.y + 0.5 - base_uv_temp.y);
    let base_uv: vec2f = (base_uv_temp - vec2f(0.5)) * shadowMapSizeInv;

    var sum: f32 = 0.0;

    let uw0: f32 = (3.0 - 2.0 * s);
    let uw1: f32 = (1.0 + 2.0 * s);

    let u0_offset: f32 = (2.0 - s) / uw0 - 1.0;
    let u1_offset: f32 = s / uw1 + 1.0;

    let vw0: f32 = (3.0 - 2.0 * t);
    let vw1: f32 = (1.0 + 2.0 * t);

    let v0_offset: f32 = (2.0 - t) / vw0 - 1.0;
    let v1_offset: f32 = t / vw1 + 1.0;

    let u0: f32 = u0_offset * shadowMapSizeInv + base_uv.x;
    let v0: f32 = v0_offset * shadowMapSizeInv + base_uv.y;

    let u1: f32 = u1_offset * shadowMapSizeInv + base_uv.x;
    let v1: f32 = v1_offset * shadowMapSizeInv + base_uv.y;

    sum = sum + uw0 * vw0 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u0, v0), z);
    sum = sum + uw1 * vw0 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u1, v0), z);
    sum = sum + uw0 * vw1 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u0, v1), z);
    sum = sum + uw1 * vw1 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u1, v1), z);

    sum = sum * (1.0 / 16.0);
    return sum;
}

fn getShadowPCF3x3(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
    return _getShadowPCF3x3(shadowMap, shadowMapSampler, shadowCoord, shadowParams.xyz);
}

fn getShadowSpotPCF3x3(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
    return _getShadowPCF3x3(shadowMap, shadowMapSampler, shadowCoord, shadowParams.xyz);
}

// ----- Omni Sampling -----

// Not currently supported on WebGPU device
// fn getShadowOmniPCF3x3(shadowMap: texture_depth_cube, shadowMapSampler: sampler_comparison, shadowParams: vec4f, dir: vec3f) -> f32 {

//     // Calculate shadow depth from the light direction
//     let shadowZ: f32 = length(dir) * shadowParams.w + shadowParams.z;

//     // offset
//     let texSize_i = textureDimensions(shadowMap, 0);
//     let z: f32 = 1.0 / f32(texSize_i.x);
//     let tc: vec3f = normalize(dir);

//     // average 4 samples - not a strict 3x3 PCF but that's tricky with cubemaps
//     var shadows: vec4f;
//     shadows.x = textureSampleCompareLevel(shadowMap, shadowMapSampler, tc + vec3f( z,  z,  z), shadowZ);
//     shadows.y = textureSampleCompareLevel(shadowMap, shadowMapSampler, tc + vec3f(-z, -z,  z), shadowZ);
//     shadows.z = textureSampleCompareLevel(shadowMap, shadowMapSampler, tc + vec3f(-z,  z, -z), shadowZ);
//     shadows.w = textureSampleCompareLevel(shadowMap, shadowMapSampler, tc + vec3f( z, -z, -z), shadowZ);

//     return dot(shadows, vec4f(0.25));
// }

// fn getShadowOmniPCF3x3_Wrapper(shadowMap: texture_depth_cube, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f, lightDir: vec3f) -> f32 {
//     return getShadowOmniPCF3x3(shadowMap, shadowMapSampler, shadowParams, lightDir);
// }
`,TM=`
// http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/
fn _getShadowPCF5x5(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec3f) -> f32 {

    let z: f32 = shadowCoord.z;
    let uv: vec2f = shadowCoord.xy * shadowParams.x; // 1 unit - 1 texel
    let shadowMapSizeInv: f32 = 1.0 / shadowParams.x;
    let base_uv_temp: vec2f = floor(uv + 0.5);
    let s: f32 = (uv.x + 0.5 - base_uv_temp.x);
    let t: f32 = (uv.y + 0.5 - base_uv_temp.y);
    let base_uv: vec2f = (base_uv_temp - vec2f(0.5)) * shadowMapSizeInv;

    let uw0: f32 = (4.0 - 3.0 * s);
    let uw1: f32 = 7.0;
    let uw2: f32 = (1.0 + 3.0 * s);

    let u0_offset: f32 = (3.0 - 2.0 * s) / uw0 - 2.0;
    let u1_offset: f32 = (3.0 + s) / uw1;
    let u2_offset: f32 = s / uw2 + 2.0;

    let vw0: f32 = (4.0 - 3.0 * t);
    let vw1: f32 = 7.0;
    let vw2: f32 = (1.0 + 3.0 * t);

    let v0_offset: f32 = (3.0 - 2.0 * t) / vw0 - 2.0;
    let v1_offset: f32 = (3.0 + t) / vw1;
    let v2_offset: f32 = t / vw2 + 2.0;

    var sum: f32 = 0.0;

    let u0: f32 = u0_offset * shadowMapSizeInv + base_uv.x;
    let v0: f32 = v0_offset * shadowMapSizeInv + base_uv.y;

    let u1: f32 = u1_offset * shadowMapSizeInv + base_uv.x;
    let v1: f32 = v1_offset * shadowMapSizeInv + base_uv.y;

    let u2: f32 = u2_offset * shadowMapSizeInv + base_uv.x;
    let v2: f32 = v2_offset * shadowMapSizeInv + base_uv.y;

    sum = sum + uw0 * vw0 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u0, v0), z);
    sum = sum + uw1 * vw0 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u1, v0), z);
    sum = sum + uw2 * vw0 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u2, v0), z);

    sum = sum + uw0 * vw1 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u0, v1), z);
    sum = sum + uw1 * vw1 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u1, v1), z);
    sum = sum + uw2 * vw1 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u2, v1), z);

    sum = sum + uw0 * vw2 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u0, v2), z);
    sum = sum + uw1 * vw2 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u1, v2), z);
    sum = sum + uw2 * vw2 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u2, v2), z);

    sum = sum * (1.0 / 144.0);
    sum = saturate(sum);

    return sum;
}

fn getShadowPCF5x5(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
    return _getShadowPCF5x5(shadowMap, shadowMapSampler, shadowCoord, shadowParams.xyz);
}

fn getShadowSpotPCF5x5(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
    return _getShadowPCF5x5(shadowMap, shadowMapSampler, shadowCoord, shadowParams.xyz);
}
`,wM=`

fn fractSinRand(uv: vec2f) -> f32 {
    let PI: f32 = 3.141592653589793;
    let a: f32 = 12.9898; let b: f32 = 78.233; let c: f32 = 43758.5453;
    let dt: f32 = dot(uv.xy, vec2f(a, b));
    let sn: f32 = dt % PI;
    return fract(sin(sn) * c);
}

// struct to hold precomputed constants and current state
struct VogelDiskData {
    invNumSamples: f32,
    initialAngle: f32,
    currentPointId: f32,
}

// prepare the Vogel disk constants and initialize the current state in the struct
fn prepareDiskConstants(data: ptr<function, VogelDiskData>, sampleCount: i32, randomSeed: f32) {
    let pi2: f32 = 6.28318530718;
    data.invNumSamples = 1.0 / f32(sampleCount);
    data.initialAngle = randomSeed * pi2;
    data.currentPointId = 0.0;
}


fn generateDiskSample(data: ptr<function, VogelDiskData>) -> vec2f {
    let GOLDEN_ANGLE: f32 = 2.399963;
    let r: f32 = sqrt((data.currentPointId + 0.5) * data.invNumSamples);
    let theta: f32 = data.currentPointId * GOLDEN_ANGLE + data.initialAngle;

    let offset: vec2f = vec2f(cos(theta), sin(theta)) * pow(r, 1.33);

    data.currentPointId = data.currentPointId + 1.0;
    return offset;
}

fn PCSSFindBlocker(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, avgBlockerDepth: ptr<function, f32>, numBlockers: ptr<function, i32>,
    shadowCoords: vec2f, z: f32, shadowBlockerSamples: i32, penumbraSize: f32, invShadowMapSize: f32, randomSeed: f32) {

    var diskData: VogelDiskData;
    prepareDiskConstants(&diskData, shadowBlockerSamples, randomSeed);

    let searchWidth: f32 = penumbraSize * invShadowMapSize;
    var blockerSum: f32 = 0.0;
    var numBlockers_local: i32 = 0;

    for( var i: i32 = 0; i < shadowBlockerSamples; i = i + 1 ) {
        let diskUV: vec2f = generateDiskSample(&diskData);
        let sampleUV: vec2f = shadowCoords + diskUV * searchWidth;
        let shadowMapDepth: f32 = textureSampleLevel(shadowMap, shadowMapSampler, sampleUV, 0.0).r;
        if ( shadowMapDepth < z ) {
            blockerSum = blockerSum + shadowMapDepth;
            numBlockers_local = numBlockers_local + 1;
        }
    }
    *avgBlockerDepth = blockerSum / f32(numBlockers_local);
    *numBlockers = numBlockers_local;
}

fn PCSSFilter(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, uv: vec2f, receiverDepth: f32, shadowSamples: i32, filterRadius: f32, randomSeed: f32) -> f32 {

    var diskData: VogelDiskData;
    prepareDiskConstants(&diskData, shadowSamples, randomSeed);

    var sum: f32 = 0.0;
    for (var i: i32 = 0; i < shadowSamples; i = i + 1) {
        let offsetUV: vec2f = generateDiskSample(&diskData) * filterRadius;
        let depth: f32 = textureSampleLevel(shadowMap, shadowMapSampler, uv + offsetUV, 0.0).r;
        sum = sum + step(receiverDepth, depth);
    }
    return sum / f32(shadowSamples);
}

fn getPenumbra(dblocker: f32, dreceiver: f32, penumbraSize: f32, penumbraFalloff: f32) -> f32 {
    let dist: f32 = dreceiver - dblocker;
    let penumbra: f32 = 1.0 - pow(1.0 - dist, penumbraFalloff);
    return penumbra * penumbraSize;
}

fn PCSSDirectional(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoords: vec3f, cameraParams: vec4f, softShadowParams: vec4f) -> f32 {

    let receiverDepth: f32 = shadowCoords.z;
    let randomSeed: f32 = fractSinRand(pcPosition.xy);
    let shadowSamples: i32 = i32(softShadowParams.x);
    let shadowBlockerSamples: i32 = i32(softShadowParams.y);
    let penumbraSize: f32 = softShadowParams.z;
    let penumbraFalloff: f32 = softShadowParams.w;

    let shadowMapSize: i32 = i32(textureDimensions(shadowMap, 0).x);
    var invShadowMapSize: f32 = 1.0 / f32(shadowMapSize);
    invShadowMapSize = invShadowMapSize * (f32(shadowMapSize) / 2048.0);

    var penumbra: f32;

    // contact hardening path
    if (shadowBlockerSamples > 0) {

        // find average blocker depth
        var avgBlockerDepth: f32 = 0.0;
        var numBlockers: i32 = 0;
        PCSSFindBlocker(shadowMap, shadowMapSampler, &avgBlockerDepth, &numBlockers, shadowCoords.xy, receiverDepth, shadowBlockerSamples, penumbraSize, invShadowMapSize, randomSeed);

        // early out when no blockers are present
        if (numBlockers < 1) {
            return 1.0;
        }

        // penumbra size is based on the blocker depth
        penumbra = getPenumbra(avgBlockerDepth, shadowCoords.z, penumbraSize, penumbraFalloff);

    } else {

        // constant filter size, no contact hardening
        penumbra = penumbraSize;
    }

    let filterRadius: f32 = penumbra * invShadowMapSize;

    // filtering
    return PCSSFilter(shadowMap, shadowMapSampler, shadowCoords.xy, receiverDepth, shadowSamples, filterRadius, randomSeed);
}

fn getShadowPCSS(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoord: vec3f, shadowParams: vec4f, cameraParams: vec4f, softShadowParams: vec4f, lightDir: vec3f) -> f32 { // lightDir unused? Kept param.
    return PCSSDirectional(shadowMap, shadowMapSampler, shadowCoord, cameraParams, softShadowParams);
}
`,EM=`
attribute vertex_boneIndices: f32;

var texture_poseMap: texture_2d<f32>;

fn getBoneMatrix(indexFloat: f32) -> mat4x4f {

    let width = i32(textureDimensions(texture_poseMap).x);
    let index: i32 = i32(indexFloat + 0.5) * 3;
    let iy: i32 = index / width;
    let ix: i32 = index % width;

    // read elements of 4x3 matrix
    let v1: vec4f = textureLoad(texture_poseMap, vec2i(ix + 0, iy), 0);
    let v2: vec4f = textureLoad(texture_poseMap, vec2i(ix + 1, iy), 0);
    let v3: vec4f = textureLoad(texture_poseMap, vec2i(ix + 2, iy), 0);

    // transpose to 4x4 matrix
    return mat4x4f(
        v1.x, v2.x, v3.x, 0,
        v1.y, v2.y, v3.y, 0,
        v1.z, v2.z, v3.z, 0,
        v1.w, v2.w, v3.w, 1.0
    );
}
`,bM=`

attribute vertex_boneWeights: vec4f;
attribute vertex_boneIndices: vec4f;

var texture_poseMap: texture_2d<f32>;

struct BoneMatrix {
    v1: vec4f,
    v2: vec4f,
    v3: vec4f,
}

fn getBoneMatrix(width: i32, index: i32) -> BoneMatrix {

    let v = index / width;
    let u = index % width;

    var result: BoneMatrix;
    result.v1 = textureLoad(texture_poseMap, vec2i(u + 0, v), 0);
    result.v2 = textureLoad(texture_poseMap, vec2i(u + 1, v), 0);
    result.v3 = textureLoad(texture_poseMap, vec2i(u + 2, v), 0);
    return result;
}

fn getSkinMatrix(indicesFloat: vec4f, weights: vec4f) -> mat4x4f {

    let width = i32(textureDimensions(texture_poseMap).x);
    var indices = vec4i(indicesFloat + 0.5) * 3;

    let boneA = getBoneMatrix(width, indices.x);
    let boneB = getBoneMatrix(width, indices.y);
    let boneC = getBoneMatrix(width, indices.z);
    let boneD = getBoneMatrix(width, indices.w);

    // ... rest of getSkinMatrix remains the same ...
    let v1 = boneA.v1 * weights.x + boneB.v1 * weights.y + boneC.v1 * weights.z + boneD.v1 * weights.w;
    let v2 = boneA.v2 * weights.x + boneB.v2 * weights.y + boneC.v2 * weights.z + boneD.v2 * weights.w;
    let v3 = boneA.v3 * weights.x + boneB.v3 * weights.y + boneC.v3 * weights.z + boneD.v3 * weights.w;

    let one = dot(weights, vec4f(1.0, 1.0, 1.0, 1.0));

    // transpose to 4x4 matrix
    return mat4x4f(
        v1.x, v2.x, v3.x, 0,
        v1.y, v2.y, v3.y, 0,
        v1.z, v2.z, v3.z, 0,
        v1.w, v2.w, v3.w, one
    );
}
`,AM=`
    #define LIT_SKYBOX_INTENSITY

    #include "envProcPS"
    #include "gammaPS"
    #include "tonemappingPS"

    #ifdef PREPASS_PASS
        varying vLinearDepth: f32;
        #include "floatAsUintPS"
    #endif

    // Varying and uniform declarations
    varying vViewDir : vec3f;
    uniform skyboxHighlightMultiplier : f32;

    #ifdef SKY_CUBEMAP

        var texture_cubeMap : texture_cube<f32>;
        var texture_cubeMap_sampler : sampler;

        #ifdef SKYMESH
            varying vWorldPos : vec3f;
            uniform cubeMapRotationMatrix : mat3x3f;
            uniform projectedSkydomeCenter : vec3f;
        #endif

    #else // env-atlas

        #include "sphericalPS"
        #include "envAtlasPS"

        var texture_envAtlas : texture_2d<f32>;
        var texture_envAtlas_sampler : sampler;

        uniform mipLevel : f32;

    #endif

    @fragment
    fn fragmentMain(input : FragmentInput) -> FragmentOutput {

        var output: FragmentOutput;

        #ifdef PREPASS_PASS

            // output linear depth during prepass
            output.color = float2vec4(vLinearDepth);

        #else

            var linear : vec3f;
            var dir : vec3f;

            #ifdef SKY_CUBEMAP

                #ifdef SKYMESH
                    // get vector from world space pos to tripod origin
                    var envDir : vec3f = normalize(input.vWorldPos - uniform.projectedSkydomeCenter);
                    dir = envDir * uniform.cubeMapRotationMatrix;
                #else
                    dir = input.vViewDir;
                #endif

                dir.x *= -1.0;
                linear = {SKYBOX_DECODE_FNC}(textureSample(texture_cubeMap, texture_cubeMap_sampler, dir));

            #else // env-atlas

                dir = input.vViewDir * vec3f(-1.0, 1.0, 1.0);
                let uv : vec2f = toSphericalUv(normalize(dir));
                linear = {SKYBOX_DECODE_FNC}(textureSample(texture_envAtlas, texture_envAtlas_sampler, mapRoughnessUv(uv, uniform.mipLevel)));

            #endif

            // our HDR encodes values up to 64, so allow extra brightness for the clipped values
            if (any(linear >= vec3f(64.0))) {
                linear *= uniform.skyboxHighlightMultiplier;
            }
            
            output.color = vec4f(gammaCorrectOutput(toneMap(processEnvironment(linear))), 1.0);

        #endif

        return output;
    }
`,CM=`
    // Attribute
    attribute aPosition : vec4f;

    uniform matrix_view : mat4x4f;
    uniform matrix_projectionSkybox : mat4x4f;
    uniform cubeMapRotationMatrix : mat3x3f;

    varying vViewDir : vec3f;

    #ifdef PREPASS_PASS
        // when skydome renders depth during prepass, generate linear depth
        varying vLinearDepth: f32;
    #endif

    #ifdef SKYMESH
        uniform matrix_model : mat4x4f;
        varying vWorldPos : vec3f;
    #endif

    @vertex
    fn vertexMain(input : VertexInput) -> VertexOutput {

        var output : VertexOutput;
        var view : mat4x4f = uniform.matrix_view;

        #ifdef SKYMESH

            var worldPos : vec4f = uniform.matrix_model * input.aPosition;
            output.vWorldPos = worldPos.xyz;
            output.position = uniform.matrix_projectionSkybox * (view * worldPos);

            #ifdef PREPASS_PASS
                // linear depth from the worldPosition, see getLinearDepth
                output.vLinearDepth = -(uniform.matrix_view * vec4f(worldPos.xyz, 1.0)).z;
            #endif

        #else

            view[3][0] = 0.0;
            view[3][1] = 0.0;
            view[3][2] = 0.0;
            output.position = uniform.matrix_projectionSkybox * (view * input.aPosition);
            output.vViewDir = input.aPosition.xyz * uniform.cubeMapRotationMatrix;

            #ifdef PREPASS_PASS
                // for infinite skybox, use negative gl_Position.w to get positive linear depth
                output.vLinearDepth = -pcPosition.w;
            #endif
        #endif

        // Force skybox to far Z, regardless of the clip planes on the camera
        // Subtract a tiny fudge factor to ensure floating point errors don't
        // still push pixels beyond far Z. See:
        // https://community.khronos.org/t/skybox-problem/61857

        output.position.z = output.position.w - 1.0e-7;

        return output;
    }
`,PM=`

#ifdef STD_SPECULAR_CONSTANT
    uniform material_specular: vec3f;
#endif

fn getSpecularity() {
    var specularColor = vec3f(1.0, 1.0, 1.0);

    #ifdef STD_SPECULAR_CONSTANT
    specularColor = specularColor * uniform.material_specular;
    #endif

    #ifdef STD_SPECULAR_TEXTURE
    specularColor = specularColor * {STD_SPECULAR_TEXTURE_DECODE}(textureSampleBias({STD_SPECULAR_TEXTURE_NAME}, {STD_SPECULAR_TEXTURE_NAME}Sampler, {STD_SPECULAR_TEXTURE_UV}, uniform.textureBias)).{STD_SPECULAR_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_SPECULAR_VERTEX
    specularColor = specularColor * saturate3(vVertexColor.{STD_SPECULAR_VERTEX_CHANNEL});
    #endif

    dSpecularity = specularColor;
}
`,DM=`

fn toSpherical(dir: vec3f) -> vec2f {
    let angle_xz = select(0.0, atan2(dir.x, dir.z), any(dir.xz != vec2f(0.0)));
    return vec2f(angle_xz, asin(dir.y));
}

fn toSphericalUv(dir : vec3f) -> vec2f {
    const PI : f32 = 3.141592653589793;
    let uv : vec2f = toSpherical(dir) / vec2f(PI * 2.0, PI) + vec2f(0.5, 0.5);
    return vec2f(uv.x, 1.0 - uv.y);
}
`,IM=`

#ifdef STD_SPECULARITYFACTOR_CONSTANT
    uniform material_specularityFactor: f32;
#endif

fn getSpecularityFactor() {
    var specularityFactor = 1.0;

    #ifdef STD_SPECULARITYFACTOR_CONSTANT
    specularityFactor = specularityFactor * uniform.material_specularityFactor;
    #endif

    #ifdef STD_SPECULARITYFACTOR_TEXTURE
    specularityFactor = specularityFactor * textureSampleBias({STD_SPECULARITYFACTOR_TEXTURE_NAME}, {STD_SPECULARITYFACTOR_TEXTURE_NAME}Sampler, {STD_SPECULARITYFACTOR_TEXTURE_UV}, uniform.textureBias).{STD_SPECULARITYFACTOR_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_SPECULARITYFACTOR_VERTEX
    specularityFactor = specularityFactor * saturate(vVertexColor.{STD_SPECULARITYFACTOR_VERTEX_CHANNEL});
    #endif

    dSpecularityFactor = specularityFactor;
}
`,MM=`
fn getSpotEffect(lightSpotDir: vec3f, lightInnerConeAngle: f32, lightOuterConeAngle: f32, lightDirNorm: vec3f) -> f32 {
    let cosAngle: f32 = dot(lightDirNorm, lightSpotDir);
    return smoothstep(lightOuterConeAngle, lightInnerConeAngle, cosAngle);
}`,LM=`
    nineSlicedUv = vec2f(vUv0.x, 1.0 - vUv0.y);
`,RM=`
    let tileMask: vec2f = step(vMask, vec2f(0.99999));
    let tileSize: vec2f = 0.5 * (innerOffset.xy + innerOffset.zw);
    let tileScale: vec2f = vec2f(1.0) / (vec2f(1.0) - tileSize);
    var clampedUv: vec2f = mix(innerOffset.xy * 0.5, vec2f(1.0) - innerOffset.zw * 0.5, fract((vTiledUv - tileSize) * tileScale));
    clampedUv = clampedUv * atlasRect.zw + atlasRect.xy;
    var nineSlicedUv: vec2f = vUv0 * tileMask + clampedUv * (vec2f(1.0) - tileMask);
    nineSlicedUv.y = 1.0 - nineSlicedUv.y;

`,OM=`

    // globals
    var<private> dAlpha: f32 = 1.0;

    // all passes handle opacity
    #if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
        #ifdef STD_OPACITY_TEXTURE_ALLOCATE
            var texture_opacityMap : texture_2d<f32>;
            var texture_opacityMapSampler : sampler;
        #endif
    #endif

    #ifdef FORWARD_PASS // ----------------

        // globals
        var<private> dAlbedo: vec3f;
        var<private> dNormalW: vec3f;
        var<private> dSpecularity: vec3f = vec3f(0.0, 0.0, 0.0);
        var<private> dGlossiness: f32 = 0.0;

        #ifdef LIT_REFRACTION
            var<private> dTransmission: f32;
            var<private> dThickness: f32;
        #endif

        #ifdef LIT_SCENE_COLOR
            var uSceneColorMap : texture_2d<f32>;
            var uSceneColorMapSampler : sampler;
        #endif

        #ifdef LIT_SCREEN_SIZE
            uniform uScreenSize: vec4f;
        #endif

        #ifdef LIT_TRANSFORMS
            var<private> matrix_viewProjection: mat4x4f;
            var<private> matrix_model: mat4x4f;
        #endif

        // parallax
        #ifdef STD_HEIGHT_MAP
            var<private> dUvOffset: vec2f;
            #ifdef STD_DIFFUSE_TEXTURE_ALLOCATE
                var texture_heightMap : texture_2d<f32>;
                var texture_heightMapSampler : sampler;
            #endif
        #endif

        // diffuse
        #ifdef STD_DIFFUSE_TEXTURE_ALLOCATE
            var texture_diffuseMap : texture_2d<f32>;
            var texture_diffuseMapSampler : sampler;
        #endif

        #ifdef STD_DIFFUSEDETAIL_TEXTURE_ALLOCATE
            var texture_diffuseDetailMap : texture_2d<f32>;
            var texture_diffuseDetailMapSampler : sampler;
        #endif

        // normal
        #ifdef STD_NORMAL_TEXTURE_ALLOCATE
            var texture_normalMap : texture_2d<f32>;
            var texture_normalMapSampler : sampler;
        #endif

        #ifdef STD_NORMALDETAIL_TEXTURE_ALLOCATE
            var texture_normalDetailMap : texture_2d<f32>;
            var texture_normalDetailMapSampler : sampler;
        #endif

        // refraction
        #ifdef STD_THICKNESS_TEXTURE_ALLOCATE
            var texture_thicknessMap : texture_2d<f32>;
            var texture_thicknessMapSampler : sampler;
        #endif
        #ifdef STD_REFRACTION_TEXTURE_ALLOCATE
            var texture_refractionMap : texture_2d<f32>;
            var texture_refractionMapSampler : sampler;
        #endif

        // iridescence
        #ifdef LIT_IRIDESCENCE
            var<private> dIridescence: f32;
            var<private> dIridescenceThickness: f32;

            #ifdef STD_IRIDESCENCE_THICKNESS_TEXTURE_ALLOCATE
                var texture_iridescenceThicknessMap : texture_2d<f32>;
                var texture_iridescenceThicknessMapSampler : sampler;
            #endif
            #ifdef STD_IRIDESCENCE_TEXTURE_ALLOCATE
                var texture_iridescenceMap : texture_2d<f32>;
                var texture_iridescenceMapSampler : sampler;
            #endif
        #endif

        #ifdef LIT_CLEARCOAT
            var<private> ccSpecularity: f32;
            var<private> ccGlossiness: f32;
            var<private> ccNormalW: vec3f;
        #endif

        #ifdef LIT_GGX_SPECULAR
            var<private> dAnisotropy: f32;
            var<private> dAnisotropyRotation: vec2f;
        #endif

        // specularity & glossiness
        #ifdef LIT_SPECULAR_OR_REFLECTION

            // sheen
            #ifdef LIT_SHEEN
                var<private> sSpecularity: vec3f;
                var<private> sGlossiness: f32;

                #ifdef STD_SHEEN_TEXTURE_ALLOCATE
                    var texture_sheenMap : texture_2d<f32>;
                    var texture_sheenMapSampler : sampler;
                #endif
                #ifdef STD_SHEENGLOSS_TEXTURE_ALLOCATE
                    var texture_sheenGlossMap : texture_2d<f32>;
                    var texture_sheenGlossMapSampler : sampler;
                #endif
            #endif

            // metalness
            #ifdef LIT_METALNESS
                var<private> dMetalness: f32;
                var<private> dIor: f32;

                #ifdef STD_METALNESS_TEXTURE_ALLOCATE
                    var texture_metalnessMap : texture_2d<f32>;
                    var texture_metalnessMapSampler : sampler;
                #endif
            #endif

            // specularity factor
            #ifdef LIT_SPECULARITY_FACTOR
                var<private> dSpecularityFactor: f32;

                #ifdef STD_SPECULARITYFACTOR_TEXTURE_ALLOCATE
                    var texture_specularityFactorMap : texture_2d<f32>;
                    var texture_specularityFactorMapSampler : sampler;
                #endif
            #endif

            // specular color
            #ifdef STD_SPECULAR_COLOR
                #ifdef STD_SPECULAR_TEXTURE_ALLOCATE
                    var texture_specularMap : texture_2d<f32>;
                    var texture_specularMapSampler : sampler;
                #endif
            #endif

            // gloss
            #ifdef STD_GLOSS_TEXTURE_ALLOCATE
                var texture_glossMap : texture_2d<f32>;
                var texture_glossMapSampler : sampler;
            #endif
        #endif

        // ao
        #ifdef STD_AO
            var <private> dAo: f32;
            #ifdef STD_AO_TEXTURE_ALLOCATE
                var texture_aoMap : texture_2d<f32>;
                var texture_aoMapSampler : sampler;
            #endif
            #ifdef STD_AODETAIL_TEXTURE_ALLOCATE
                var texture_aoDetailMap : texture_2d<f32>;
                var texture_aoDetailMapSampler : sampler;
            #endif
        #endif

        // emission
        var <private> dEmission: vec3f;
        #ifdef STD_EMISSIVE_TEXTURE_ALLOCATE
            var texture_emissiveMap : texture_2d<f32>;
            var texture_emissiveMapSampler : sampler;
        #endif

        // clearcoat
        #ifdef LIT_CLEARCOAT
            #ifdef STD_CLEARCOAT_TEXTURE_ALLOCATE
                var texture_clearCoatMap : texture_2d<f32>;
                var texture_clearCoatMapSampler : sampler;
            #endif
            #ifdef STD_CLEARCOATGLOSS_TEXTURE_ALLOCATE
                var texture_clearCoatGlossMap : texture_2d<f32>;
                var texture_clearCoatGlossMapSampler : sampler;
            #endif
            #ifdef STD_CLEARCOATNORMAL_TEXTURE_ALLOCATE
                var texture_clearCoatNormalMap : texture_2d<f32>;
                var texture_clearCoatNormalMapSampler : sampler;
            #endif
        #endif

        // anisotropy
        #ifdef LIT_GGX_SPECULAR
            #ifdef STD_ANISOTROPY_TEXTURE_ALLOCATE
                var texture_anisotropyMap : texture_2d<f32>;
                var texture_anisotropyMapSampler : sampler;
            #endif
        #endif

        // lightmap
        #if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
            var<private> dLightmap: vec3f;
            #ifdef STD_LIGHT_TEXTURE_ALLOCATE
                var texture_lightMap : texture_2d<f32>;
                var texture_lightMapSampler : sampler;
            #endif
        #endif
    #endif

    // front end outputs to lit shader
    #include "litShaderCorePS"
`,FM=`

    // all passes handle opacity
    #if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
        #include "opacityPS"

        #if defined(LIT_ALPHA_TEST)
            #include "alphaTestPS"
        #endif

        // dithering
        #if STD_OPACITY_DITHER != NONE
            #include "opacityDitherPS"
        #endif
    #endif

    #ifdef FORWARD_PASS // ----------------

        // parallax
        #ifdef STD_HEIGHT_MAP
            #include "parallaxPS"
        #endif

        // diffuse
        #include  "diffusePS"

        // normal
        #ifdef LIT_NEEDS_NORMAL
            #include "normalMapPS"
        #endif

        // refraction
        #ifdef LIT_REFRACTION
            #include "transmissionPS"
            #include "thicknessPS"
        #endif

        // iridescence
        #ifdef LIT_IRIDESCENCE
            #include "iridescencePS"
            #include "iridescenceThicknessPS"
        #endif

        // specularity & glossiness
        #ifdef LIT_SPECULAR_OR_REFLECTION

            // sheen
            #ifdef LIT_SHEEN
                #include "sheenPS"
                #include "sheenGlossPS"
            #endif

            // metalness
            #ifdef LIT_METALNESS
                #include "metalnessPS"
                #include "iorPS"
            #endif

            // specularity factor
            #ifdef LIT_SPECULARITY_FACTOR
                #include "specularityFactorPS"
            #endif

            // specular color
            #ifdef STD_SPECULAR_COLOR
                #include "specularPS"
            #else
                fn getSpecularity() { 
                    dSpecularity = vec3f(1.0, 1.0, 1.0);
                }
            #endif

            // gloss
            #include "glossPS"
        #endif

        // ao
        #ifdef STD_AO
            #include "aoPS"
        #endif

        // emission
        #include "emissivePS"

        // clearcoat
        #ifdef LIT_CLEARCOAT
            #include "clearCoatPS"
            #include "clearCoatGlossPS"
            #include "clearCoatNormalPS"
        #endif

        // anisotropy
        #if defined(LIT_SPECULAR) && defined(LIT_LIGHTING) && defined(LIT_GGX_SPECULAR)
            #include "anisotropyPS"
        #endif

        // lightmap
        #if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
            #include "lightmapPS"
        #endif
    #endif

    fn evaluateFrontend() {

        // all passes handle opacity
        #if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
            getOpacity();

            #if defined(LIT_ALPHA_TEST)
                alphaTest(dAlpha);
            #endif

            #if STD_OPACITY_DITHER != NONE
                opacityDither(dAlpha, 0.0);
            #endif

            litArgs_opacity = dAlpha;
        #endif

        #ifdef FORWARD_PASS // ----------------

            // parallax
            #ifdef STD_HEIGHT_MAP
                getParallax();
            #endif

            // diffuse
            getAlbedo();
            litArgs_albedo = dAlbedo;

            // normal
            #ifdef LIT_NEEDS_NORMAL
                getNormal();
                litArgs_worldNormal = dNormalW;
            #endif

            // refraction
            #ifdef LIT_REFRACTION
                getRefraction();
                litArgs_transmission = dTransmission;

                getThickness();
                litArgs_thickness = dThickness;

                #ifdef LIT_DISPERSION
                    litArgs_dispersion = uniform.material_dispersion;
                #endif
            #endif

            // iridescence
            #ifdef LIT_IRIDESCENCE
                getIridescence();
                getIridescenceThickness();
                litArgs_iridescence_intensity = dIridescence;
                litArgs_iridescence_thickness = dIridescenceThickness;
            #endif

            // specularity & glossiness
            #ifdef LIT_SPECULAR_OR_REFLECTION

                // sheen
                #ifdef LIT_SHEEN
                    getSheen();
                    litArgs_sheen_specularity = sSpecularity;
                    getSheenGlossiness();
                    litArgs_sheen_gloss = sGlossiness;
                #endif

                // metalness
                #ifdef LIT_METALNESS
                    getMetalness();
                    litArgs_metalness = dMetalness;
                    getIor();
                    litArgs_ior = dIor;
                #endif

                // specularity factor
                #ifdef LIT_SPECULARITY_FACTOR
                    getSpecularityFactor();
                    litArgs_specularityFactor = dSpecularityFactor;
                #endif

                // gloss
                getGlossiness();
                getSpecularity();
                litArgs_specularity = dSpecularity;
                litArgs_gloss = dGlossiness;
            #endif

            // ao
            #ifdef STD_AO
                getAO();
                litArgs_ao = dAo;
            #endif

            // emission
            getEmission();
            litArgs_emission = dEmission;

            // clearcoat
            #ifdef LIT_CLEARCOAT
                getClearCoat();
                getClearCoatGlossiness();
                getClearCoatNormal();
                litArgs_clearcoat_specularity = ccSpecularity;
                litArgs_clearcoat_gloss = ccGlossiness;
                litArgs_clearcoat_worldNormal = ccNormalW;
            #endif

            // anisotropy
            #if defined(LIT_SPECULAR) && defined(LIT_LIGHTING) && defined(LIT_GGX_SPECULAR)
                getAnisotropy();
            #endif

            // lightmap
            #if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
                getLightMap();
                litArgs_lightmap = dLightmap;

                #ifdef STD_LIGHTMAP_DIR
                    litArgs_lightmapDir = dLightmapDir;
                #endif
            #endif
        #endif
    }
`,NM=`

#ifdef LIT_TANGENTS
    #define TBN_TANGENTS
#else
    #if defined(LIT_USE_NORMALS) || defined(LIT_USE_CLEARCOAT_NORMALS)
        #define TBN_DERIVATIVES
    #endif
#endif

#if defined(TBN_DERIVATIVES)
    uniform tbnBasis: f32;
#endif

fn getTBN(tangent: vec3f, binormal: vec3f, normal: vec3f) {

    #ifdef TBN_TANGENTS // tangents / binormals based TBN

        dTBN = mat3x3f(normalize(tangent), normalize(binormal), normalize(normal));

    #elif defined(TBN_DERIVATIVES) // derivatives based TBN

        let uv: vec2f = {lightingUv};

        // get edge vectors of the pixel triangle
        let dp1: vec3f = dpdx( vPositionW );
        let dp2: vec3f = dpdy( vPositionW );
        let duv1: vec2f = dpdx( uv );
        let duv2: vec2f = dpdy( uv );

        // solve the linear system
        let dp2perp: vec3f = cross( dp2, normal );
        let dp1perp: vec3f = cross( normal, dp1 );
        let T: vec3f = dp2perp * duv1.x + dp1perp * duv2.x;
        let B: vec3f = dp2perp * duv1.y + dp1perp * duv2.y;

        // construct a scale-invariant frame
        let denom: f32 = max( dot(T, T), dot(B, B) );
        let invmax: f32 = select(uniform.tbnBasis / sqrt( denom ), 0.0, denom == 0.0);
        dTBN = mat3x3f(T * invmax, -B * invmax, normal );

    #else // object space TBN

        var B: vec3f = cross(normal, vObjectSpaceUpW);
        var T: vec3f = cross(normal, B);

        if (dot(B,B) == 0.0) // deal with case when vObjectSpaceUpW normal are parallel
        {
            let major: f32 = max(max(normal.x, normal.y), normal.z);

            if (normal.x == major)
            {
                B = cross(normal, vec3f(0.0, 1.0, 0.0));
                T = cross(normal, B);
            }
            else if (normal.y == major)
            {
                B = cross(normal, vec3f(0.0, 0.0, 1.0));
                T = cross(normal, B);
            }
            else // removed "if (normal.z == major)" assuming it's the only remaining case
            {
                B = cross(normal, vec3f(1.0, 0.0, 0.0));
                T = cross(normal, B);
            }
        }

        dTBN = mat3x3f(normalize(T), normalize(B), normalize(normal));

    #endif
}`,kM=`
#ifdef STD_THICKNESS_CONSTANT
uniform material_thickness: f32;
#endif

fn getThickness() {
    dThickness = 1.0;

    #ifdef STD_THICKNESS_CONSTANT
    dThickness = dThickness * uniform.material_thickness;
    #endif

    #ifdef STD_THICKNESS_TEXTURE
    dThickness = dThickness * textureSampleBias({STD_THICKNESS_TEXTURE_NAME}, {STD_THICKNESS_TEXTURE_NAME}Sampler, {STD_THICKNESS_TEXTURE_UV}, uniform.textureBias).{STD_THICKNESS_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_THICKNESS_VERTEX
    dThickness = dThickness * saturate(vVertexColor.{STD_THICKNESS_VERTEX_CHANNEL});
    #endif
}
`,UM=`
#if (TONEMAP == NONE)
    #include "tonemappingNonePS"
#elif TONEMAP == FILMIC
    #include "tonemappingFilmicPS"
#elif TONEMAP == LINEAR
    #include "tonemappingLinearPS"
#elif TONEMAP == HEJL
    #include "tonemappingHejlPS"
#elif TONEMAP == ACES
    #include "tonemappingAcesPS"
#elif TONEMAP == ACES2
    #include "tonemappingAces2PS"
#elif TONEMAP == NEUTRAL
    #include "tonemappingNeutralPS"
#endif
`,BM=`
uniform exposure: f32;

fn toneMap(color: vec3f) -> vec3f {
    let tA: f32 = 2.51;
    let tB: f32 = 0.03;
    let tC: f32 = 2.43;
    let tD: f32 = 0.59;
    let tE: f32 = 0.14;
    let x: vec3f = color * uniform.exposure;
    return (x * (tA * x + tB)) / (x * (tC * x + tD) + tE);
}
`,zM=`
uniform exposure: f32;

// ACES approximation by Stephen Hill

// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
const ACESInputMat: mat3x3f = mat3x3f(
    vec3f(0.59719, 0.35458, 0.04823),
    vec3f(0.07600, 0.90834, 0.01566),
    vec3f(0.02840, 0.13383, 0.83777)
);

// ODT_SAT => XYZ => D60_2_D65 => sRGB
const ACESOutputMat: mat3x3f = mat3x3f(
    vec3f( 1.60475, -0.53108, -0.07367),
    vec3f(-0.10208,  1.10813, -0.00605),
    vec3f(-0.00327, -0.07276,  1.07602)
);

fn RRTAndODTFit(v: vec3f) -> vec3f {
    let a: vec3f = v * (v + vec3f(0.0245786)) - vec3f(0.000090537);
    let b: vec3f = v * (vec3f(0.983729) * v + vec3f(0.4329510)) + vec3f(0.238081);
    return a / b;
}

fn toneMap(color: vec3f) -> vec3f {
    var c: vec3f = color * (uniform.exposure / 0.6);
    c = c * ACESInputMat;

    // Apply RRT and ODT
    c = RRTAndODTFit(c);
    c = c * ACESOutputMat;

    // Clamp to [0, 1]
    return clamp(c, vec3f(0.0), vec3f(1.0));
}
`,VM=`
const A: f32 = 0.15;
const B: f32 = 0.50;
const C: f32 = 0.10;
const D: f32 = 0.20;
const E: f32 = 0.02;
const F: f32 = 0.30;
const W: f32 = 11.2;

uniform exposure: f32;

fn uncharted2Tonemap(x: vec3f) -> vec3f {
    return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - vec3f(E / F);
}

fn toneMap(color: vec3f) -> vec3f {
    var c: vec3f = uncharted2Tonemap(color * uniform.exposure);
    let whiteScale: vec3f = vec3f(1.0) / uncharted2Tonemap(vec3f(W, W, W));
    c *= whiteScale;
    return c;
}
`,GM=`
uniform exposure: f32;

fn toneMap(color: vec3f) -> vec3f {
    let A: f32 = 0.22;
    let B: f32 = 0.3;
    let C: f32 = 0.1;
    let D: f32 = 0.2;
    let E: f32 = 0.01;
    let F: f32 = 0.3;
    let Scl: f32 = 1.25;

    let adjusted_color = color * uniform.exposure;
    let h = max(vec3f(0.0), adjusted_color - vec3f(0.004));

    return (h * ((Scl * A) * h + Scl * vec3f(C * B)) + Scl * vec3f(D * E)) /
           (h * (A * h + vec3f(B)) + vec3f(D * F)) -
           Scl * vec3f(E / F);
}
`,HM=`
uniform exposure: f32;

fn toneMap(color: vec3f) -> vec3f {
    return color * uniform.exposure;
}
`,WM=`
uniform exposure: f32;

fn toneMap(col: vec3f) -> vec3f {
    var color = col * uniform.exposure;

    let startCompression = 0.8 - 0.04;
    let desaturation = 0.15;

    let x = min(color.r, min(color.g, color.b));
    let offset = select(0.04, x - 6.25 * x * x, x < 0.08);
    color -= vec3f(offset);

    let peak = max(color.r, max(color.g, color.b));
    if (peak < startCompression) {
        return color;
    }

    let d = 1.0 - startCompression;
    let newPeak = 1.0 - d * d / (peak + d - startCompression);
    color *= newPeak / peak;

    let g = 1.0 - 1.0 / (desaturation * (peak - newPeak) + 1.0);
    return mix(color, vec3f(newPeak), vec3f(g));
}
`,$M=`
fn toneMap(color: vec3f) -> vec3f {
    return color;
}
`,XM=`
#ifdef PIXELSNAP
    uniform uScreenSize: vec4f;
#endif

#ifdef SCREENSPACE
    uniform projectionFlipY: f32;
#endif

fn evalWorldPosition(vertexPosition: vec3f, modelMatrix: mat4x4f) -> vec4f {

    var localPos: vec3f = getLocalPosition(vertexPosition);

    #ifdef NINESLICED
        // outer and inner vertices are at the same position, scale both
        var localPosXZ: vec2f = localPos.xz;
        localPosXZ = localPosXZ * uniform.outerScale;

        // offset inner vertices inside
        // (original vertices must be in [-1;1] range)
        let positiveUnitOffset: vec2f = clamp(vertexPosition.xz, vec2f(0.0), vec2f(1.0));
        let negativeUnitOffset: vec2f = clamp(-vertexPosition.xz, vec2f(0.0), vec2f(1.0));
        localPosXZ = localPosXZ + (-positiveUnitOffset * uniform.innerOffset.xy + negativeUnitOffset * uniform.innerOffset.zw) * vertex_texCoord0.xy;

        dTiledUvGlobal = (localPosXZ - uniform.outerScale + uniform.innerOffset.xy) * -0.5 + 1.0; // uv = local pos - inner corner

        localPosXZ = localPosXZ * -0.5;
        localPos = vec3f(localPosXZ.x, localPosXZ.y, localPos.y);
    #endif

    var posW: vec4f = modelMatrix * vec4f(localPos, 1.0);

    #ifdef SCREENSPACE
        posW = vec4f(posW.xy, 0.0, 1.0);
    #endif

    return posW;
}

fn getPosition() -> vec4f {

    dModelMatrix = getModelMatrix();

    let posW: vec4f = evalWorldPosition(vertex_position.xyz, dModelMatrix);
    dPositionW = posW.xyz;

    var screenPos: vec4f;
    #ifdef UV1LAYOUT
        screenPos = vec4f(vertex_texCoord1.xy * 2.0 - 1.0, 0.5, 1.0);
        screenPos.y *= -1.0;
    #else
        #ifdef SCREENSPACE
            screenPos = posW;
            screenPos.y *= uniform.projectionFlipY;
        #else
            screenPos = uniform.matrix_viewProjection * posW;
        #endif

        #ifdef PIXELSNAP
            // snap vertex to a pixel boundary
            screenPos.xy = (screenPos.xy * 0.5) + 0.5;
            screenPos.xy *= uniforms.uScreenSize.xy;
            screenPos.xy = floor(screenPos.xy);
            screenPos.xy *= uniforms.uScreenSize.zw;
            screenPos.xy = (screenPos.xy * 2.0) - 1.0;
        #endif
    #endif

    return screenPos;
}

fn getWorldPosition() -> vec3f {
    return dPositionW;
}
`,qM=`

    attribute vertex_position: vec4f;

    uniform matrix_viewProjection: mat4x4f;
    uniform matrix_model: mat4x4f;
    
    #ifdef MORPHING

        uniform morph_tex_params: vec2f;
        attribute morph_vertex_id: u32;

        fn getTextureMorphCoords() -> vec2i {

            // turn morph_vertex_id into int grid coordinates
            var textureSize: vec2i = vec2i(uniform.morph_tex_params);
            var morphGridV: i32 = i32(morph_vertex_id) / textureSize.x;
            var morphGridU: i32 = i32(morph_vertex_id) - (morphGridV * textureSize.x);
            morphGridV = textureSize.y - morphGridV - 1;
            return vec2i(morphGridU, morphGridV);
        }

        #ifdef MORPHING_POSITION
            #ifdef MORPHING_INT
                uniform aabbSize: vec3f;
                uniform aabbMin: vec3f;
                var morphPositionTex: texture_2d<u32>;
            #else
                var morphPositionTex: texture_2d<f32>;
            #endif
        #endif
    #endif

    #ifdef defined(BATCH)
        #include "skinBatchVS"

        fn getModelMatrix() -> mat4x4f {
            return getBoneMatrix(vertex_boneIndices);
        }

    #elif defined(SKIN)
        #include "skinVS"
        fn getModelMatrix() -> mat4x4f {
            return uniform.matrix_model * getSkinMatrix(vertex_boneIndices, vertex_boneWeights);
        }

    #elif defined(INSTANCING)

        #include "transformInstancingVS"

    #else

        fn getModelMatrix() -> mat4x4f {
            return uniform.matrix_model;
        }

    #endif

    fn getLocalPosition(vertexPosition: vec3f) -> vec3f {

        var localPos: vec3f = vertexPosition;

        #ifdef MORPHING_POSITION

            var morphUV: vec2i = getTextureMorphCoords();

            #ifdef MORPHING_INT
                // Use textureLoad instead of texelFetch. Coordinates must be integer type (vec2i).
                // WGSL requires explicit type conversion for vectors.
                // Division by float literal ensures floating point division.
                var morphPos: vec3f = vec3f(textureLoad(morphPositionTex, morphUV, 0).xyz) / 65535.0 * uniform.aabbSize + uniform.aabbMin;
            #else
                // Use textureLoad instead of texelFetch. Coordinates must be integer type (vec2i).
                var morphPos: vec3f = textureLoad(morphPositionTex, morphUV, 0).xyz;
            #endif

            localPos += morphPos;

        #endif

        return localPos;
    }
`,jM=`

attribute instance_line1: vec4f;
attribute instance_line2: vec4f;
attribute instance_line3: vec4f;
attribute instance_line4: vec4f;

fn getModelMatrix() -> mat4x4f {
    return uniform.matrix_model * mat4x4f(instance_line1, instance_line2, instance_line3, instance_line4);
}
`,YM=`

#ifdef STD_REFRACTION_CONSTANT
    uniform material_refraction: f32;
#endif

fn getRefraction() {
    var refraction: f32 = 1.0;

    #ifdef STD_REFRACTION_CONSTANT
    refraction = uniform.material_refraction;
    #endif

    #ifdef STD_REFRACTION_TEXTURE
    refraction = refraction * textureSampleBias({STD_REFRACTION_TEXTURE_NAME}, {STD_REFRACTION_TEXTURE_NAME}Sampler, {STD_REFRACTION_TEXTURE_UV}, uniform.textureBias).{STD_REFRACTION_TEXTURE_CHANNEL};
    #endif

    #ifdef STD_REFRACTION_VERTEX
    refraction = refraction * saturate(vVertexColor.{STD_REFRACTION_VERTEX_CHANNEL});
    #endif

    dTransmission = refraction;
}
`,KM=`
uniform twoSidedLightingNegScaleFactor: f32;

fn handleTwoSidedLighting() {
    dTBN[2] = dTBN[2] * select(-uniform.twoSidedLightingNegScaleFactor, uniform.twoSidedLightingNegScaleFactor, pcFrontFacing);
}
`,ZM=`
#ifdef NINESLICED
    fn getUv0() -> vec2f {
        var uv = vertex_position.xz;

        // offset inner vertices inside
        let positiveUnitOffset = clamp(vertex_position.xz, vec2f(0.0, 0.0), vec2f(1.0, 1.0));
        let negativeUnitOffset = clamp(-vertex_position.xz, vec2f(0.0, 0.0), vec2f(1.0, 1.0));

        uv = uv + ((-positiveUnitOffset * uniform.innerOffset.xy) + (negativeUnitOffset * uniform.innerOffset.zw)) * vertex_texCoord0.xy;

        uv = uv * -0.5 + vec2f(0.5, 0.5);
        uv = uv * uniform.atlasRect.zw + uniform.atlasRect.xy;

        dMaskGlobal = vertex_texCoord0.xy;

        return uv;
    }
#else
    fn getUv0() -> vec2f {
        return vertex_texCoord0;
    }
#endif
`,QM=`
fn getUv1() -> vec2f {
    return vertex_texCoord1;
}
`,JM=`
output.vUV{TRANSFORM_UV_{i}}_{TRANSFORM_ID_{i}} = vec2f(
    dot(vec3f(uv{TRANSFORM_UV_{i}}, 1), uniform.{TRANSFORM_NAME_{i}}0),
    dot(vec3f(uv{TRANSFORM_UV_{i}}, 1), uniform.{TRANSFORM_NAME_{i}}1)
);
`,e2=`
    uniform {TRANSFORM_NAME_{i}}0: vec3f;
    uniform {TRANSFORM_NAME_{i}}1: vec3f;
`,t2=`
fn getViewDir() {
    dViewDirW = normalize(uniform.view_position - vPositionW);
}
`,s2={alphaTestPS:tD,ambientPS:sD,anisotropyPS:iD,aoPS:rD,aoDiffuseOccPS:aD,aoSpecOccPS:nD,bakeDirLmEndPS:oD,bakeLmEndPS:lD,basePS:hD,baseNineSlicedPS:cD,baseNineSlicedTiledPS:dD,bayerPS:fD,blurVSMPS:uD,clearCoatPS:pD,clearCoatGlossPS:mD,clearCoatNormalPS:_D,clusteredLightCookiesPS:SD,clusteredLightShadowsPS:yD,clusteredLightUtilsPS:gD,clusteredLightPS:vD,combinePS:xD,cookieBlit2DPS:TD,cookieBlitCubePS:wD,cookieBlitVS:ED,cubeMapProjectPS:bD,cubeMapRotatePS:AD,debugOutputPS:CD,debugProcessFrontendPS:PD,detailModesPS:ID,diffusePS:MD,decodePS:DD,emissivePS:LD,encodePS:RD,endPS:OD,envAtlasPS:FD,envProcPS:ND,falloffInvSquaredPS:kD,falloffLinearPS:UD,floatAsUintPS:BD,fogPS:zD,fresnelSchlickPS:VD,frontendCodePS:"",frontendDeclPS:"",fullscreenQuadVS:GD,gammaPS:HD,glossPS:WD,gsplatCenterVS:$D,gsplatCornerVS:tI,gsplatColorVS:XD,gsplatCommonVS:qD,gsplatCompressedDataVS:jD,gsplatCompressedSHVS:YD,gsplatEvalSHVS:KD,gsplatQuatToMat3VS:ZD,gsplatSogsColorVS:QD,gsplatSogsDataVS:JD,gsplatSogsSHVS:eI,gsplatDataVS:sI,gsplatOutputVS:iI,gsplatPS:rI,gsplatSHVS:aI,gsplatSourceVS:nI,gsplatVS:oI,quadVS:lI,indirectCoreCS:hI,immediateLinePS:cI,immediateLineVS:dI,iridescenceDiffractionPS:fI,iridescencePS:uI,iridescenceThicknessPS:pI,iorPS:mI,lightDeclarationPS:_I,lightDiffuseLambertPS:gI,lightDirPointPS:SI,lightEvaluationPS:yI,lightFunctionLightPS:vI,lightFunctionShadowPS:xI,lightingPS:TI,lightmapAddPS:wI,lightmapPS:EI,lightSpecularAnisoGGXPS:bI,lightSpecularBlinnPS:AI,lightSheenPS:CI,linearizeDepthPS:PI,litForwardBackendPS:DI,litForwardDeclarationPS:II,litForwardMainPS:MI,litForwardPostCodePS:LI,litForwardPreCodePS:RI,litMainPS:OI,litMainVS:FI,litOtherMainPS:NI,litShaderArgsPS:kI,litShaderCorePS:UI,litShadowMainPS:BI,litUserDeclarationPS:"",litUserDeclarationVS:"",litUserCodePS:"",litUserCodeVS:"",litUserMainStartPS:"",litUserMainStartVS:"",litUserMainEndPS:"",litUserMainEndVS:"",ltcPS:zI,metalnessPS:VI,metalnessModulatePS:HI,morphPS:WI,morphVS:$I,msdfPS:GI,msdfVS:XI,normalVS:qI,normalCoreVS:jI,normalMapPS:YI,opacityPS:KI,opacityDitherPS:ZI,outputPS:QI,outputAlphaPS:JI,outputTex2DPS:eM,sheenPS:tM,sheenGlossPS:sM,parallaxPS:iM,pickPS:rM,reflDirPS:aM,reflDirAnisoPS:nM,reflectionCCPS:oM,reflectionCubePS:lM,reflectionEnvHQPS:hM,reflectionEnvPS:cM,reflectionSpherePS:dM,reflectionSheenPS:fM,refractionCubePS:uM,refractionDynamicPS:pM,reprojectPS:mM,reprojectVS:_M,screenDepthPS:gM,shadowCascadesPS:SM,shadowEVSMPS:yM,shadowPCF1PS:vM,shadowPCF3PS:xM,shadowPCF5PS:TM,shadowSoftPS:wM,skinBatchVS:EM,skinVS:bM,skyboxPS:AM,skyboxVS:CM,specularPS:PM,sphericalPS:DM,specularityFactorPS:IM,spotPS:MM,startNineSlicedPS:LM,startNineSlicedTiledPS:RM,stdDeclarationPS:OM,stdFrontEndPS:FM,TBNPS:NM,thicknessPS:kM,tonemappingPS:UM,tonemappingAcesPS:BM,tonemappingAces2PS:zM,tonemappingFilmicPS:VM,tonemappingHejlPS:GM,tonemappingLinearPS:HM,tonemappingNeutralPS:WM,tonemappingNonePS:$M,transformVS:XM,transformCoreVS:qM,transformInstancingVS:jM,transmissionPS:YM,twoSidedLightingPS:KM,uv0VS:ZM,uv1VS:QM,uvTransformVS:JM,uvTransformUniformsPS:e2,viewDirPS:t2,webgpuPS:ey,webgpuVS:ty},Jr=class Jr extends Se{constructor(e){super();h(this,"_batcher",null);h(this,"_destroyRequested",!1);h(this,"_inFrameUpdate",!1);h(this,"_librariesLoaded",!1);h(this,"_fillMode",U_);h(this,"_resolutionMode",LA);h(this,"_allowResize",!0);h(this,"_skyboxAsset",null);h(this,"_soundManager");h(this,"_visibilityChangeHandler");h(this,"_entityIndex",{});h(this,"_inTools",!1);h(this,"_scriptPrefix","");h(this,"_time",0);h(this,"enableBundles",typeof TextDecoder<"u");h(this,"frameRequestId");h(this,"timeScale",1);h(this,"maxDeltaTime",.1);h(this,"frame",0);h(this,"frameGraph",new RA);h(this,"renderer");h(this,"scriptsOrder",[]);h(this,"stats");h(this,"autoRender",!0);h(this,"renderNextFrame",!1);h(this,"graphicsDevice");h(this,"root");h(this,"scene");h(this,"lightmapper",null);h(this,"loader",new Tn(this));h(this,"assets");h(this,"bundles");h(this,"scenes",new KA(this));h(this,"scripts",new XA(this));h(this,"systems",new GA);h(this,"i18n",new xa(this));h(this,"keyboard",null);h(this,"mouse",null);h(this,"touch",null);h(this,"gamepads",null);h(this,"elementInput",null);h(this,"xr",null);(an==null?void 0:an.indexOf("$"))<0&&y.log(`Powered by PlayCanvas ${an} ${eS}`),Jr._applications[e.id]=this,Hf(this),this.root=new lt,this.root._enabledInHierarchy=!0}init(e){const{assetPrefix:s,batchManager:i,componentSystems:r,elementInput:a,gamepads:n,graphicsDevice:o,keyboard:c,lightmapper:d,mouse:f,resourceHandlers:u,scriptsOrder:p,scriptPrefix:m,soundManager:_,touch:S,xr:g}=e;y.assert(o,"The application cannot be created without a valid GraphicsDevice"),this.graphicsDevice=o,be.get(o,Oe).add(eD),be.get(o,it).add(s2),this._initDefaultMaterial(),this._initProgramLibrary(),this.stats=new ZA(o),this._soundManager=_,this.scene=new Tt(o),this._registerSceneImmediate(this.scene),this.assets=new cn(this.loader),s&&(this.assets.prefix=s),this.bundles=new VA(this.assets),this.scriptsOrder=p||[],this.defaultLayerWorld=new Lt({name:"World",id:tr}),this.defaultLayerDepth=new Lt({name:"Depth",id:us,enabled:!1,opaqueSortMode:Ph}),this.defaultLayerSkybox=new Lt({name:"Skybox",id:Tp,opaqueSortMode:Ph}),this.defaultLayerUi=new Lt({name:"UI",id:xl,transparentSortMode:nw}),this.defaultLayerImmediate=new Lt({name:"Immediate",id:wp,opaqueSortMode:Ph});const v=new Uf("default");v.pushOpaque(this.defaultLayerWorld),v.pushOpaque(this.defaultLayerDepth),v.pushOpaque(this.defaultLayerSkybox),v.pushTransparent(this.defaultLayerWorld),v.pushOpaque(this.defaultLayerImmediate),v.pushTransparent(this.defaultLayerImmediate),v.pushTransparent(this.defaultLayerUi),this.scene.layers=v,ta.createPlaceholder(o),this.renderer=new sl(o),this.renderer.scene=this.scene,d&&(this.lightmapper=new d(o,this.root,this.scene,this.renderer,this.assets),this.once("prerender",this._firstBake,this)),i&&(this._batcher=new i(o,this.root,this.scene),this.once("prerender",this._firstBatch,this)),this.keyboard=c||null,this.mouse=f||null,this.touch=S||null,this.gamepads=n||null,a&&(this.elementInput=a,this.elementInput.app=this),this.xr=g?new g(this):null,this.elementInput&&this.elementInput.attachSelectEvents(),this._scriptPrefix=m||"",this.enableBundles&&this.loader.addHandler("bundle",new WA(this)),u.forEach(w=>{const x=new w(this);this.loader.addHandler(x.handlerType,x)}),r.forEach(w=>{this.systems.add(new w(this))}),this._visibilityChangeHandler=this.onVisibilityChange.bind(this),typeof document<"u"&&(document.hidden!==void 0?(this._hiddenAttr="hidden",document.addEventListener("visibilitychange",this._visibilityChangeHandler,!1)):document.mozHidden!==void 0?(this._hiddenAttr="mozHidden",document.addEventListener("mozvisibilitychange",this._visibilityChangeHandler,!1)):document.msHidden!==void 0?(this._hiddenAttr="msHidden",document.addEventListener("msvisibilitychange",this._visibilityChangeHandler,!1)):document.webkitHidden!==void 0&&(this._hiddenAttr="webkitHidden",document.addEventListener("webkitvisibilitychange",this._visibilityChangeHandler,!1))),this.tick=i2(this)}static getApplication(e){return e?Jr._applications[e]:js()}_initDefaultMaterial(){const e=new kt;e.name="Default Material",Rw(this.graphicsDevice,e)}_initProgramLibrary(){const e=new aA(this.graphicsDevice,new kt);xw(this.graphicsDevice,e)}get soundManager(){return this._soundManager}get batcher(){return y.assert(this._batcher,"BatchManager has not been created and is required for correct functionality."),this._batcher}get fillMode(){return this._fillMode}get resolutionMode(){return this._resolutionMode}configure(e,s){ot.get(e,(i,r)=>{if(i){s(i);return}const a=r.application_properties,n=r.scenes,o=r.assets;this._parseApplicationProperties(a,c=>{this._parseScenes(n),this._parseAssets(o),s(c||null)})})}preload(e){this.fire("preload:start");const s=this.assets.list({preload:!0});if(s.length===0){this.fire("preload:end"),e();return}let i=0;const r=()=>{i++,this.fire("preload:progress",i/s.length),i===s.length&&(this.fire("preload:end"),e())};s.forEach(a=>{a.loaded?r():(a.once("load",r),a.once("error",r),this.assets.load(a))})}_preloadScripts(e,s){s()}_parseApplicationProperties(e,s){if(typeof e.maxAssetRetries=="number"&&e.maxAssetRetries>0&&this.loader.enableRetry(e.maxAssetRetries),e.useDevicePixelRatio||(e.useDevicePixelRatio=e.use_device_pixel_ratio),e.resolutionMode||(e.resolutionMode=e.resolution_mode),e.fillMode||(e.fillMode=e.fill_mode),this._width=e.width,this._height=e.height,e.useDevicePixelRatio&&(this.graphicsDevice.maxPixelRatio=window.devicePixelRatio),this.setCanvasResolution(e.resolutionMode,this._width,this._height),this.setCanvasFillMode(e.fillMode,this._width,this._height),e.layers&&e.layerOrder){const i=new Uf("application"),r={};for(const a in e.layers){const n=e.layers[a];n.id=parseInt(a,10),n.enabled=n.id!==us,r[a]=new Lt(n)}for(let a=0,n=e.layerOrder.length;a<n;a++){const o=e.layerOrder[a],c=r[o.layer];c&&(o.transparent?i.pushTransparent(c):i.pushOpaque(c),i.subLayerEnabled[a]=o.enabled)}this.scene.layers=i}if(e.batchGroups){const i=this.batcher;if(i)for(let r=0,a=e.batchGroups.length;r<a;r++){const n=e.batchGroups[r];i.addGroup(n.name,n.dynamic,n.maxAabbSize,n.id,n.layers)}}e.i18nAssets&&(this.i18n.assets=e.i18nAssets),this._loadLibraries(e.libraries,s)}_loadLibraries(e,s){const i=e.length;let r=i;const a=/^https?:\/\//;if(i){const n=(o,c)=>{r--,o?s(o):r===0&&(this.onLibrariesLoaded(),s(null))};for(let o=0;o<i;++o){let c=e[o];!a.test(c.toLowerCase())&&this._scriptPrefix&&(c=xe.join(this._scriptPrefix,c)),this.loader.load(c,"script",n)}}else this.onLibrariesLoaded(),s(null)}_parseScenes(e){if(e)for(let s=0;s<e.length;s++)this.scenes.add(e[s].name,e[s].url)}_parseAssets(e){const s=[],i={},r={};for(let a=0;a<this.scriptsOrder.length;a++){const n=this.scriptsOrder[a];e[n]&&(i[n]=!0,s.push(e[n]))}if(this.enableBundles)for(const a in e)e[a].type==="bundle"&&(r[a]=!0,s.push(e[a]));for(const a in e)i[a]||r[a]||s.push(e[a]);for(let a=0;a<s.length;a++){const n=s[a],o=new _e(n.name,n.type,n.file,n.data);if(o.id=parseInt(n.id,10),o.preload=n.preload?n.preload:!1,o.loaded=n.type==="script"&&n.data&&n.data.loadingType>0,o.tags.add(n.tags),n.i18n)for(const c in n.i18n)o.addLocalizedAssetId(c,n.i18n[c]);this.assets.add(o)}}start(){y.call(()=>{y.assert(!this._alreadyStarted,"The application can be started only one time."),this._alreadyStarted=!0}),this.frame=0,this.fire("start",{timestamp:pe(),target:this}),this._librariesLoaded||this.onLibrariesLoaded(),this.systems.fire("initialize",this.root),this.fire("initialize"),this.systems.fire("postInitialize",this.root),this.systems.fire("postPostInitialize",this.root),this.fire("postinitialize"),this.tick()}inputUpdate(e){this.controller&&this.controller.update(e),this.mouse&&this.mouse.update(),this.keyboard&&this.keyboard.update(),this.gamepads&&this.gamepads.update()}update(e){this.frame++,this.graphicsDevice.update(),this.stats.frame.updateStart=pe(),this.systems.fire(this._inTools?"toolsUpdate":"update",e),this.systems.fire("animationUpdate",e),this.systems.fire("postUpdate",e),this.fire("update",e),this.inputUpdate(e),this.stats.frame.updateTime=pe()-this.stats.frame.updateStart}render(){this.updateCanvasSize(),this.graphicsDevice.frameStart(),this.stats.frame.renderStart=pe(),this.fire("prerender"),this.root.syncHierarchy(),this._batcher&&this._batcher.updateAll(),sl._skipRenderCounter=0,this.renderComposition(this.scene.layers),this.fire("postrender"),this.stats.frame.renderTime=pe()-this.stats.frame.renderStart,this.graphicsDevice.frameEnd()}renderComposition(e){Z.clearGpuMarkers(),this.renderer.update(e),this.renderer.buildFrameGraph(this.frameGraph,e),this.frameGraph.render(this.graphicsDevice)}_fillFrameStatsBasic(e,s,i){const r=this.stats.frame;r.dt=s,r.ms=i,e>r._timeToCountFrames?(r.fps=r._fpsAccum,r._fpsAccum=0,r._timeToCountFrames=e+1e3):r._fpsAccum++,this.stats.drawCalls.total=this.graphicsDevice._drawCallsPerFrame,this.graphicsDevice._drawCallsPerFrame=0}_fillFrameStats(){let e=this.stats.frame;e.cameras=this.renderer._camerasRendered,e.materials=this.renderer._materialSwitches,e.shaders=this.graphicsDevice._shaderSwitchesPerFrame,e.shadowMapUpdates=this.renderer._shadowMapUpdates,e.shadowMapTime=this.renderer._shadowMapTime,e.depthMapTime=this.renderer._depthMapTime,e.forwardTime=this.renderer._forwardTime;const s=this.graphicsDevice._primsPerFrame;e.triangles=s[Xs]/3+Math.max(s[wr]-2,0)+Math.max(s[aa]-2,0),e.cullTime=this.renderer._cullTime,e.sortTime=this.renderer._sortTime,e.skinTime=this.renderer._skinTime,e.morphTime=this.renderer._morphTime,e.lightClusters=this.renderer._lightClusters,e.lightClustersTime=this.renderer._lightClustersTime,e.otherPrimitives=0;for(let i=0;i<s.length;i++)i<Xs&&(e.otherPrimitives+=s[i]),s[i]=0;this.renderer._camerasRendered=0,this.renderer._materialSwitches=0,this.renderer._shadowMapUpdates=0,this.graphicsDevice._shaderSwitchesPerFrame=0,this.renderer._cullTime=0,this.renderer._layerCompositionUpdateTime=0,this.renderer._lightClustersTime=0,this.renderer._sortTime=0,this.renderer._skinTime=0,this.renderer._morphTime=0,this.renderer._shadowMapTime=0,this.renderer._depthMapTime=0,this.renderer._forwardTime=0,e=this.stats.drawCalls,e.forward=this.renderer._forwardDrawCalls,e.culled=this.renderer._numDrawCallsCulled,e.depth=0,e.shadow=this.renderer._shadowDrawCalls,e.skinned=this.renderer._skinDrawCalls,e.immediate=0,e.instanced=0,e.removedByInstancing=0,e.misc=e.total-(e.forward+e.shadow),this.renderer._depthDrawCalls=0,this.renderer._shadowDrawCalls=0,this.renderer._forwardDrawCalls=0,this.renderer._numDrawCallsCulled=0,this.renderer._skinDrawCalls=0,this.renderer._immediateRendered=0,this.renderer._instancedDrawCalls=0,this.stats.misc.renderTargetCreationTime=this.graphicsDevice.renderTargetCreationTime,e=this.stats.particles,e.updatesPerFrame=e._updatesPerFrame,e.frameTime=e._frameTime,e._updatesPerFrame=0,e._frameTime=0}setCanvasFillMode(e,s,i){this._fillMode=e,this.resizeCanvas(s,i)}setCanvasResolution(e,s,i){this._resolutionMode=e,e===B_&&s===void 0&&(s=this.graphicsDevice.canvas.clientWidth,i=this.graphicsDevice.canvas.clientHeight),this.graphicsDevice.resizeCanvas(s,i)}isHidden(){return document[this._hiddenAttr]}onVisibilityChange(){this.isHidden()?this._soundManager&&this._soundManager.suspend():this._soundManager&&this._soundManager.resume()}resizeCanvas(e,s){if(!this._allowResize||this.xr&&this.xr.session)return;const i=window.innerWidth,r=window.innerHeight;if(this._fillMode===U_){const a=this.graphicsDevice.canvas.width/this.graphicsDevice.canvas.height,n=i/r;a>n?(e=i,s=e/a):(s=r,e=s*a)}else this._fillMode===MA&&(e=i,s=r);return this.graphicsDevice.canvas.style.width=`${e}px`,this.graphicsDevice.canvas.style.height=`${s}px`,this.updateCanvasSize(),{width:e,height:s}}updateCanvasSize(){var e;if(!(!this._allowResize||(e=this.xr)!=null&&e.active)&&this._resolutionMode===B_){const s=this.graphicsDevice.canvas;this.graphicsDevice.resizeCanvas(s.clientWidth,s.clientHeight)}}onLibrariesLoaded(){this._librariesLoaded=!0,this.systems.rigidbody&&this.systems.rigidbody.onLibraryLoaded()}applySceneSettings(e){let s;if(this.systems.rigidbody&&typeof Ammo<"u"){const[i,r,a]=e.physics.gravity;this.systems.rigidbody.gravity.set(i,r,a)}this.scene.applySettings(e),e.render.hasOwnProperty("skybox")&&(e.render.skybox?(s=this.assets.get(e.render.skybox),s?this.setSkybox(s):this.assets.once(`add:${e.render.skybox}`,this.setSkybox,this)):this.setSkybox(null))}setAreaLightLuts(e,s){e&&s?ta.set(this.graphicsDevice,e,s):y.warn("setAreaLightLuts: LUTs for area light are not valid")}setSkybox(e){if(e!==this._skyboxAsset){const s=()=>{this.setSkybox(null)},i=()=>{this.scene.setSkybox(this._skyboxAsset?this._skyboxAsset.resources:null)};this._skyboxAsset&&(this.assets.off(`load:${this._skyboxAsset.id}`,i,this),this.assets.off(`remove:${this._skyboxAsset.id}`,s,this),this._skyboxAsset.off("change",i,this)),this._skyboxAsset=e,this._skyboxAsset&&(this.assets.on(`load:${this._skyboxAsset.id}`,i,this),this.assets.once(`remove:${this._skyboxAsset.id}`,s,this),this._skyboxAsset.on("change",i,this),this.scene.skyboxMip===0&&!this._skyboxAsset.loadFaces&&(this._skyboxAsset.loadFaces=!0),this.assets.load(this._skyboxAsset)),i()}}_firstBake(){var e;(e=this.lightmapper)==null||e.bake(null,this.scene.lightmapMode)}_firstBatch(){var e;(e=this.batcher)==null||e.generate()}_processTimestamp(e){return e}drawLine(e,s,i,r,a){this.scene.drawLine(e,s,i,r,a)}drawLines(e,s,i=!0,r=this.scene.defaultDrawLayer){this.scene.drawLines(e,s,i,r)}drawLineArrays(e,s,i=!0,r=this.scene.defaultDrawLayer){this.scene.drawLineArrays(e,s,i,r)}drawWireSphere(e,s,i=ae.WHITE,r=20,a=!0,n=this.scene.defaultDrawLayer){this.scene.immediate.drawWireSphere(e,s,i,r,a,n)}drawWireAlignedBox(e,s,i=ae.WHITE,r=!0,a=this.scene.defaultDrawLayer,n){this.scene.immediate.drawWireAlignedBox(e,s,i,r,a,n)}drawMeshInstance(e,s=this.scene.defaultDrawLayer){this.scene.immediate.drawMesh(null,null,null,e,s)}drawMesh(e,s,i,r=this.scene.defaultDrawLayer){this.scene.immediate.drawMesh(s,i,e,null,r)}drawQuad(e,s,i=this.scene.defaultDrawLayer){this.scene.immediate.drawMesh(s,e,this.scene.immediate.getQuadMesh(),null,i)}drawTexture(e,s,i,r,a,n,o=this.scene.defaultDrawLayer,c=!0){if(c===!1&&!this.graphicsDevice.isWebGPU)return;const d=new ie;d.setTRS(new A(e,s,0),ue.IDENTITY,new A(i,-r,0)),n||(n=new zn,n.cull=wt,n.setParameter("colorMap",a),n.shaderDesc=c?this.scene.immediate.getTextureShaderDesc(a.encoding):this.scene.immediate.getUnfilterableTextureShaderDesc(),n.update()),this.drawQuad(d,n,o)}drawDepthTexture(e,s,i,r,a=this.scene.defaultDrawLayer){const n=new zn;n.cull=wt,n.shaderDesc=this.scene.immediate.getDepthTextureShaderDesc(),n.update(),this.drawTexture(e,s,i,r,null,n,a)}destroy(){var r,a,n,o;if(this._inFrameUpdate){this._destroyRequested=!0;return}const e=this.graphicsDevice.canvas.id;this.fire("destroy",this),this.off("librariesloaded"),typeof document<"u"&&(document.removeEventListener("visibilitychange",this._visibilityChangeHandler,!1),document.removeEventListener("mozvisibilitychange",this._visibilityChangeHandler,!1),document.removeEventListener("msvisibilitychange",this._visibilityChangeHandler,!1),document.removeEventListener("webkitvisibilitychange",this._visibilityChangeHandler,!1)),this._visibilityChangeHandler=null,this.root.destroy(),this.root=null,this.mouse&&(this.mouse.off(),this.mouse.detach(),this.mouse=null),this.keyboard&&(this.keyboard.off(),this.keyboard.detach(),this.keyboard=null),this.touch&&(this.touch.off(),this.touch.detach(),this.touch=null),this.elementInput&&(this.elementInput.detach(),this.elementInput=null),this.gamepads&&(this.gamepads.destroy(),this.gamepads=null),this.controller&&(this.controller=null),this.systems.destroy(),this.scene.layers&&this.scene.layers.destroy();const s=this.assets.list();for(let c=0;c<s.length;c++)s[c].unload(),s[c].off();this.assets.off(),this.bundles.destroy(),this.bundles=null,this.i18n.destroy(),this.i18n=null;const i=this.loader.getHandler("script");i==null||i.clearCache(),this.loader.destroy(),this.loader=null,this.scene.destroy(),this.scene=null,this.systems=null,this.context=null,this.scripts.destroy(),this.scripts=null,this.scenes.destroy(),this.scenes=null,(r=this.lightmapper)==null||r.destroy(),this.lightmapper=null,this._batcher&&(this._batcher.destroy(),this._batcher=null),this._entityIndex={},this.defaultLayerDepth.onDisable=null,this.defaultLayerDepth.onEnable=null,this.defaultLayerDepth=null,this.defaultLayerWorld=null,(a=this.xr)==null||a.end(),(n=this.xr)==null||n.destroy(),this.renderer.destroy(),this.renderer=null,this.graphicsDevice.destroy(),this.graphicsDevice=null,this.tick=null,this.off(),(o=this._soundManager)==null||o.destroy(),this._soundManager=null,Jr._applications[e]=null,js()===this&&Hf(null),Jr.cancelTick(this)}static cancelTick(e){e.frameRequestId&&(window.cancelAnimationFrame(e.frameRequestId),e.frameRequestId=void 0)}getEntityFromIndex(e){return this._entityIndex[e]}_registerSceneImmediate(e){this.on("postrender",e.immediate.onPostRender,e.immediate)}};h(Jr,"_applications",{});let Ys=Jr;const i2=function(l){const t=l;return function(e,s){var o,c,d,f;if(!t.graphicsDevice)return;t.frameRequestId&&((c=(o=t.xr)==null?void 0:o.session)==null||c.cancelAnimationFrame(t.frameRequestId),cancelAnimationFrame(t.frameRequestId),t.frameRequestId=null),t._inFrameUpdate=!0,Hf(t);const i=t._processTimestamp(e)||pe(),r=i-(t._time||i);let a=r/1e3;if(a=Y.clamp(a,0,t.maxDeltaTime),a*=t.timeScale,t._time=i,(d=t.xr)!=null&&d.session?t.frameRequestId=t.xr.session.requestAnimationFrame(t.tick):t.frameRequestId=Pe.browser||Pe.worker?requestAnimationFrame(t.tick):null,t.graphicsDevice.contextLost)return;t._fillFrameStatsBasic(i,a,r),t._fillFrameStats(),t.fire("frameupdate",r);let n=!1;s?(n=!((f=t.xr)!=null&&f.update(s)),t.graphicsDevice.defaultFramebuffer=s.session.renderState.baseLayer.framebuffer):t.graphicsDevice.defaultFramebuffer=null,!n&&!t.stopSort&&(y.trace(sx,`---- Frame ${t.frame}`),y.trace(fd,`-- UpdateStart ${pe().toFixed(2)}ms`),t.update(a),t.fire("framerender"),(t.autoRender||t.renderNextFrame)&&(y.trace(fd,`-- RenderStart ${pe().toFixed(2)}ms`),t.render(),t.renderNextFrame=!1,y.trace(fd,`-- RenderEnd ${pe().toFixed(2)}ms`)),t.fire("frameend")),t._inFrameUpdate=!1,t._destroyRequested&&t.destroy()}};class r2{constructor(){h(this,"elementInput");h(this,"keyboard");h(this,"mouse");h(this,"touch");h(this,"gamepads");h(this,"scriptPrefix");h(this,"assetPrefix");h(this,"scriptsOrder");h(this,"soundManager");h(this,"graphicsDevice");h(this,"lightmapper");h(this,"batchManager");h(this,"xr");h(this,"componentSystems",[]);h(this,"resourceHandlers",[])}}const ho=new Pu;class jy{constructor(t,e,s){this.scene=t,this.light=e,this.store(),e.numCascades=1,this.scene.clusteredLightingEnabled&&!s.shadowsEnabled&&(e.castShadows=!1),e.type!==ve&&(e._node.getWorldTransform(),e.getBoundingSphere(ho),this.lightBounds=new Me,this.lightBounds.center.copy(ho.center),this.lightBounds.halfExtents.set(ho.radius,ho.radius,ho.radius))}store(){this.mask=this.light.mask,this.shadowUpdateMode=this.light.shadowUpdateMode,this.enabled=this.light.enabled,this.intensity=this.light.intensity,this.rotation=this.light._node.getLocalRotation().clone(),this.numCascades=this.light.numCascades,this.castShadows=this.light._castShadows}restore(){const t=this.light;t.mask=this.mask,t.shadowUpdateMode=this.shadowUpdateMode,t.enabled=this.enabled,t.intensity=this.intensity,t._node.setLocalRotation(this.rotation),t.numCascades=this.numCascades,t._castShadows=this.castShadows}startBake(){this.light.enabled=!0,this.light._destroyShadowMap(),this.light.beginFrame()}endBake(t){const e=this.light;e.enabled=!1,e.shadowMap&&(e.shadowMap.cached&&t.add(e,e.shadowMap),e.shadowMap=null)}}const nh=new J;class a2 extends jy{constructor(t,e){super(t.scene,e,t.lightingParams)}get numVirtualLights(){return this.light.type===ve?this.light.bakeNumSamples:1}prepareVirtualLight(t,e){const s=this.light;if(s._node.setLocalRotation(this.rotation),t>0){const a=s.bakeArea;Al.circlePointDeterministic(nh,t,e),nh.mulScalar(a*.5),s._node.rotateLocal(nh.x,0,nh.y)}s._node.getWorldTransform();const i=2.2,r=Math.pow(this.intensity,i);s.intensity=Math.pow(r/e,1/i)}}const W_=new A;class $_ extends jy{constructor(t){const e=t.scene,s=new lt("AmbientLight");s.addComponent("light",{type:"directional",affectDynamic:!0,affectLightmapped:!1,bake:!0,bakeNumSamples:e.ambientBakeNumSamples,castShadows:!0,normalOffsetBias:.05,shadowBias:.2,shadowDistance:1,shadowResolution:2048,shadowType:Hs,color:ae.WHITE,intensity:1,bakeDir:!1}),super(e,s.light.light,t.lightingParams)}get numVirtualLights(){return this.light.bakeNumSamples}prepareVirtualLight(t,e){Al.spherePointDeterministic(W_,t,e,0,this.scene.ambientBakeSpherePart),this.light._node.lookAt(W_.mulScalar(-1)),this.light._node.rotateLocal(90,0,0);const s=2.2,i=2*Math.PI*this.scene.ambientBakeSpherePart,r=Math.pow(i,s);this.light.intensity=Math.pow(r/e,1/s)}}class oh{constructor(t,e=null){this.node=t,this.component=t.render||t.model,e=e||this.component.meshInstances,this.store(),this.meshInstances=e,this.bounds=null,this.renderTargets=[]}store(){this.castShadows=this.component.castShadows}restore(){this.component.castShadows=this.castShadows}}const n2=`
// bilateral filter, based on https://www.shadertoy.com/view/4dfGDH# and
// http://people.csail.mit.edu/sparis/bf_course/course_notes.pdf

// A bilateral filter is a non-linear, edge-preserving, and noise-reducing smoothing filter for images.
// It replaces the intensity of each pixel with a weighted average of intensity values from nearby pixels.
// This weight can be based on a Gaussian distribution. Crucially, the weights depend not only on
// Euclidean distance of pixels, but also on the radiometric differences (e.g., range differences, such
// as color intensity, depth distance, etc.). This preserves sharp edges.

float normpdf3(in vec3 v, in float sigma) {
    return 0.39894 * exp(-0.5 * dot(v, v) / (sigma * sigma)) / sigma;
}

vec3 decodeRGBM(vec4 rgbm) {
    vec3 color = (8.0 * rgbm.a) * rgbm.rgb;
    return color * color;
}

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

vec4 encodeRGBM(vec3 color) { // modified RGBM
    vec4 encoded;
    encoded.rgb = pow(color.rgb, vec3(0.5));
    encoded.rgb *= 1.0 / 8.0;

    encoded.a = saturate( max( max( encoded.r, encoded.g ), max( encoded.b, 1.0 / 255.0 ) ) );
    encoded.a = ceil(encoded.a * 255.0) / 255.0;

    encoded.rgb /= encoded.a;
    return encoded;
}

vec3 decode(vec4 pixel) {
    #if HDR
        return pixel.rgb;
    #else
        return decodeRGBM(pixel);
    #endif
}

bool isUsed(vec4 pixel) {
    #if HDR
        return any(greaterThan(pixel.rgb, vec3(0.0)));
    #else
        return pixel.a > 0.0;
    #endif
}

varying vec2 vUv0;
uniform sampler2D source;
uniform vec2 pixelOffset;
uniform vec2 sigmas;
uniform float bZnorm;
uniform float kernel[{MSIZE}];

void main(void) {
    
    vec4 pixel = texture2DLod(source, vUv0, 0.0);

    // lightmap specific optimization - skip pixels that were not baked
    // this also allows dilate filter that work on the output of this to work correctly, as it depends on .a being zero
    // to dilate, which the following blur filter would otherwise modify
    if (!isUsed(pixel)) {
        gl_FragColor = pixel;
        return ;
    }

    // range sigma - controls blurriness based on a pixel distance
    float sigma = sigmas.x;

    // domain sigma - controls blurriness based on a pixel similarity (to preserve edges)
    float bSigma = sigmas.y;

    vec3 pixelHdr = decode(pixel);
    vec3 accumulatedHdr = vec3(0.0);
    float accumulatedFactor = 0.000001;  // avoid division by zero

    // read out the texels
    const int kSize = ({MSIZE} - 1) / 2;
    for (int i = -kSize; i <= kSize; ++i) {
        for (int j = -kSize; j <= kSize; ++j) {
            
            // sample the pixel with offset
            vec2 coord = vUv0 + vec2(float(i), float(j)) * pixelOffset;
            vec4 pix = texture2DLod(source, coord, 0.0);

            // lightmap - only use baked pixels
            if (isUsed(pix)) {
                vec3 hdr = decode(pix);

                // bilateral factors
                float factor = kernel[kSize + j] * kernel[kSize + i];
                factor *= normpdf3(hdr - pixelHdr, bSigma) * bZnorm;

                // accumulate
                accumulatedHdr += factor * hdr;
                accumulatedFactor += factor;
            }
        }
    }

    vec3 finalHDR = accumulatedHdr / accumulatedFactor;

    #if HDR
        gl_FragColor = vec4(finalHDR, 1.0);
    #else
        gl_FragColor = encodeRGBM(finalHDR);
    #endif
}
`,o2=`

varying vec2 vUv0;

uniform sampler2D source;
uniform vec2 pixelOffset;

bool isUsed(vec4 pixel) {
    #if HDR
        return any(greaterThan(pixel.rgb, vec3(0.0)));
    #else
        return pixel.a > 0.0;
    #endif
}

void main(void) {
    vec4 c = texture2DLod(source, vUv0, 0.0);
    c = isUsed(c) ? c : texture2DLod(source, vUv0 - pixelOffset, 0.0);
    c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(0, -pixelOffset.y), 0.0);
    c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(pixelOffset.x, -pixelOffset.y), 0.0);
    c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(-pixelOffset.x, 0), 0.0);
    c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(pixelOffset.x, 0), 0.0);
    c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(-pixelOffset.x, pixelOffset.y), 0.0);
    c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(0, pixelOffset.y), 0.0);
    c = isUsed(c) ? c : texture2DLod(source, vUv0 + pixelOffset, 0.0);
    gl_FragColor = c;
}
`,l2=`
// bilateral filter, based on https://www.shadertoy.com/view/4dfGDH# and
// http://people.csail.mit.edu/sparis/bf_course/course_notes.pdf

// A bilateral filter is a non-linear, edge-preserving, and noise-reducing smoothing filter for images.
// It replaces the intensity of each pixel with a weighted average of intensity values from nearby pixels.
// This weight can be based on a Gaussian distribution. Crucially, the weights depend not only on
// Euclidean distance of pixels, but also on the radiometric differences (e.g., range differences, such
// as color intensity, depth distance, etc.). This preserves sharp edges.

fn normpdf3(v: vec3f, sigma: f32) -> f32 {
    return 0.39894 * exp(-0.5 * dot(v, v) / (sigma * sigma)) / sigma;
}

fn decodeRGBM(rgbm: vec4f) -> vec3f {
    let color = (8.0 * rgbm.a) * rgbm.rgb;
    return color * color;
}

fn saturate(x: f32) -> f32 {
    return clamp(x, 0.0, 1.0);
}

fn encodeRGBM(color: vec3f) -> vec4f {
    var encoded: vec4f;
    let rgb_processed = pow(color.rgb, vec3f(0.5)) * (1.0 / 8.0);
    encoded = vec4f(rgb_processed, 0.0);

    let max_g_b = max( encoded.g, max( encoded.b, 1.0 / 255.0 ) );
    let max_rgb = max( encoded.r, max_g_b );
    encoded.a = clamp(max_rgb, 0.0, 1.0);
    encoded.a = ceil(encoded.a * 255.0) / 255.0;

    encoded = vec4f(encoded.rgb / encoded.a, encoded.a);
    return encoded;
}

fn decode(pixel: vec4f) -> vec3f {
    #if HDR
        return pixel.rgb;
    #else
        return decodeRGBM(pixel);
    #endif
}

fn isUsed(pixel: vec4f) -> bool {
    #if HDR
        return any(pixel.rgb > vec3f(0.0));
    #else
        return pixel.a > 0.0;
    #endif
}

varying vUv0: vec2f;
var source: texture_2d<f32>;
var sourceSampler: sampler;
uniform kernel: array<f32, {MSIZE}>;
uniform pixelOffset: vec2f;
uniform sigmas: vec2f;
uniform bZnorm: f32;

@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
    var output: FragmentOutput;

    let pixel = textureSampleLevel(source, sourceSampler, input.vUv0, 0.0);

    // lightmap specific optimization - skip pixels that were not baked
    // this also allows dilate filter that work on the output of this to work correctly, as it depends on .a being zero
    // to dilate, which the following blur filter would otherwise modify
    if (!isUsed(pixel)) {
        output.color = pixel;
        return output;
    }

    // range sigma - controls blurriness based on a pixel distance
    let sigma = uniform.sigmas.x;

    // domain sigma - controls blurriness based on a pixel similarity (to preserve edges)
    let bSigma = uniform.sigmas.y;

    let pixelHdr = decode(pixel);
    var accumulatedHdr = vec3f(0.0);
    var accumulatedFactor = 0.000001;  // avoid division by zero

    // read out the texels
    const kSize = ({MSIZE} - 1) / 2;
    for (var i: i32 = -kSize; i <= kSize; i = i + 1) {
        for (var j: i32 = -kSize; j <= kSize; j = j + 1) {

            // sample the pixel with offset
            let coord = input.vUv0 + vec2f(f32(i), f32(j)) * uniform.pixelOffset;
            let pix = textureSampleLevel(source, sourceSampler, coord, 0.0);

            // lightmap - only use baked pixels
            if (isUsed(pix)) {
                let hdr = decode(pix);

                // bilateral factors
                var factor = uniform.kernel[u32(kSize + j)].element * uniform.kernel[u32(kSize + i)].element;
                factor = factor * normpdf3(hdr - pixelHdr, bSigma) * uniform.bZnorm;

                // accumulate
                accumulatedHdr = accumulatedHdr + factor * hdr;
                accumulatedFactor = accumulatedFactor + factor;
            }
        }
    }

    let finalHDR = accumulatedHdr / accumulatedFactor;

    #if HDR
        output.color = vec4f(finalHDR, 1.0);
    #else
        output.color = encodeRGBM(finalHDR);
    #endif

    return output;
}
`,h2=`

varying vUv0: vec2f;

var source: texture_2d<f32>;
var sourceSampler: sampler;
uniform pixelOffset: vec2f;

fn isUsed(pixel: vec4f) -> bool {
    #ifdef HDR
        return any(pixel.rgb > vec3f(0.0));
    #else
        return pixel.a > 0.0;
    #endif
}

@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
    var c: vec4f = textureSampleLevel(source, sourceSampler, input.vUv0, 0.0);
    c = select(textureSampleLevel(source, sourceSampler, input.vUv0 - uniform.pixelOffset, 0.0), c, isUsed(c));
    c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(0.0, -uniform.pixelOffset.y), 0.0), c, isUsed(c));
    c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(uniform.pixelOffset.x, -uniform.pixelOffset.y), 0.0), c, isUsed(c));
    c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(-uniform.pixelOffset.x, 0.0), 0.0), c, isUsed(c));
    c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(uniform.pixelOffset.x, 0.0), 0.0), c, isUsed(c));
    c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(-uniform.pixelOffset.x, uniform.pixelOffset.y), 0.0), c, isUsed(c));
    c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(0.0, uniform.pixelOffset.y), 0.0), c, isUsed(c));
    c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + uniform.pixelOffset, 0.0), c, isUsed(c));

    var output: FragmentOutput;
    output.color = c;
    return output;
}
`,X_=15,c2={glslBilateralDeNoisePS:n2,glslDilatePS:o2},d2={wgslBilateralDeNoisePS:l2,wgslDilatePS:h2};class f2{constructor(t){h(this,"shaderDilate",[]);h(this,"shaderDenoise",[]);this.device=t,be.get(this.device,Oe).add(c2),be.get(this.device,it).add(d2),this.constantTexSource=t.scope.resolve("source"),this.constantPixelOffset=t.scope.resolve("pixelOffset"),this.pixelOffset=new Float32Array(2),this.sigmas=null,this.constantSigmas=null,this.kernel=null}setSourceTexture(t){this.constantTexSource.setValue(t)}prepare(t,e){this.pixelOffset[0]=1/t,this.pixelOffset[1]=1/e,this.constantPixelOffset.setValue(this.pixelOffset)}prepareDenoise(t,e,s){const i=s?0:1;if(!this.shaderDenoise[i]){const r=new Map;r.set("{MSIZE}",15),s&&r.set("HDR",""),this.shaderDenoise[i]=Wt.createShader(this.device,{uniqueName:`lmBilateralDeNoise-${s?"hdr":"rgbm"}`,attributes:{vertex_position:Ae},vertexGLSL:be.get(this.device,Oe).get("fullscreenQuadVS"),vertexWGSL:be.get(this.device,it).get("fullscreenQuadVS"),fragmentGLSL:be.get(this.device,Oe).get("glslBilateralDeNoisePS"),fragmentWGSL:be.get(this.device,it).get("wgslBilateralDeNoisePS"),fragmentDefines:r}),this.sigmas=new Float32Array(2),this.constantSigmas=this.device.scope.resolve("sigmas"),this.constantKernel=this.device.scope.resolve("kernel[0]"),this.bZnorm=this.device.scope.resolve("bZnorm")}this.sigmas[0]=t,this.sigmas[1]=e,this.constantSigmas.setValue(this.sigmas),this.evaluateDenoiseUniforms(t,e)}getDenoise(t){const e=t?0:1;return this.shaderDenoise[e]}getDilate(t,e){const s=e?0:1;if(!this.shaderDilate[s]){const i=e?`#define HDR
`:"";this.shaderDilate[s]=Wt.createShader(t,{uniqueName:`lmDilate-${e?"hdr":"rgbm"}`,attributes:{vertex_position:Ae},vertexGLSL:be.get(this.device,Oe).get("fullscreenQuadVS"),vertexWGSL:be.get(this.device,it).get("fullscreenQuadVS"),fragmentGLSL:i+be.get(this.device,Oe).get("glslDilatePS"),fragmentWGSL:i+be.get(this.device,it).get("wgslDilatePS")})}return this.shaderDilate[s]}evaluateDenoiseUniforms(t,e){function s(n,o){return .39894*Math.exp(-.5*n*n/(o*o))/o}this.kernel=this.kernel||new Float32Array(X_);const i=this.kernel,r=Math.floor((X_-1)/2);for(let n=0;n<=r;++n){const o=s(n,t);i[r+n]=o,i[r-n]=o}this.constantKernel.setValue(this.kernel);const a=1/s(0,e);this.bZnorm.setValue(a)}}class u2 extends Ss{constructor(e,s,i,r,a,n){super(e);h(this,"viewBindGroups",[]);this.renderer=s,this.camera=i,this.worldClusters=r,this.receivers=a,this.lightArray=n}destroy(){this.viewBindGroups.forEach(e=>{e.defaultUniformBuffer.destroy(),e.destroy()}),this.viewBindGroups.length=0}execute(){const e=this.device;Z.pushGpuMarker(e,"Lightmapper");const{renderer:s,camera:i,receivers:r,renderTarget:a,worldClusters:n,lightArray:o}=this;s.renderForwardLayer(i,a,null,void 0,Ea,this.viewBindGroups,{meshInstances:r,splitLights:o,lightClusters:n}),Z.popGpuMarker(e)}}const p2=2048,m2=0,_2=1,lh=new A;class g2{constructor(t,e,s,i,r){this.device=t,this.root=e,this.scene=s,this.renderer=i,this.assets=r,this.shadowMapCache=i.shadowMapCache,this._tempSet=new Set,this._initCalled=!1,this.passMaterials=[],this.ambientAOMaterial=null,this.fog="",this.ambientLight=new ae,this.renderTargets=new Map,this.stats={renderPasses:0,lightmapCount:0,totalRenderTime:0,forwardTime:0,fboTime:0,shadowMapTime:0,compileTime:0,shadersLinked:0}}destroy(){var t;Vi.decRef(this.blackTex),this.blackTex=null,Vi.destroy(),this.device=null,this.root=null,this.scene=null,this.renderer=null,this.assets=null,(t=this.camera)==null||t.destroy(),this.camera=null}initBake(t){if(this.bakeHDR=this.scene.lightmapPixelFormat!==Fe,!this._initCalled){this._initCalled=!0,this.lightmapFilters=new f2(t),this.constantBakeDir=t.scope.resolve("bakeDir"),this.materials=[],this.blackTex=new ge(this.device,{width:4,height:4,format:Fe,type:Qi,name:"lightmapBlack"}),Vi.incRef(this.blackTex);const e=new bl;e.clearColor.set(0,0,0,0),e.clearColorBuffer=!0,e.clearDepthBuffer=!1,e.clearStencilBuffer=!1,e.frustumCulling=!1,e.projection=yn,e.aspectRatio=1,e.node=new De,this.camera=e,this.camera.shaderParams.gammaCorrection=Tl,this.camera.shaderParams.toneMapping=Pp}if(this.scene.clusteredLightingEnabled){const e=new Uy(t.supportsAreaLights,t.maxTextureSize,()=>{});this.lightingParams=e;const s=this.scene.lighting;e.shadowsEnabled=s.shadowsEnabled,e.shadowAtlasResolution=s.shadowAtlasResolution,e.cookiesEnabled=s.cookiesEnabled,e.cookieAtlasResolution=s.cookieAtlasResolution,e.areaLightsEnabled=s.areaLightsEnabled,e.cells=new A(3,3,3),e.maxLightsPerCell=4,this.worldClusters=new Nf(t),this.worldClusters.name="ClusterLightmapper"}}finishBake(t){this.materials=[];function e(s){Vi.decRef(s.colorBuffer),s.destroy()}this.renderTargets.forEach(s=>{e(s)}),this.renderTargets.clear(),t.forEach(s=>{s.renderTargets.forEach(i=>{e(i)}),s.renderTargets.length=0}),this.ambientAOMaterial=null,this.worldClusters&&(this.worldClusters.destroy(),this.worldClusters=null)}createMaterialForPass(t,e,s){const i=new kt;return i.name=`lmMaterial-pass:${e}-ambient:${s}`,i.setDefine("UV1LAYOUT",""),i.setDefine("LIT_LIGHTMAP_BAKING",""),e===m2?(i.setDefine("LIT_LIGHTMAP_BAKING_COLOR",""),s?i.setDefine("LIT_LIGHTMAP_BAKING_ADD_AMBIENT",""):i.ambient=new ae(0,0,0),this.bakeHDR||i.setDefine("LIGHTMAP_RGBM",""),i.lightMap=this.blackTex):(i.setDefine("LIT_LIGHTMAP_BAKING_DIR",""),i.setDefine("STD_LIGHTMAP_DIR","")),i.cull=wt,i.forceUv1=!0,i.update(),i}createMaterials(t,e,s){for(let i=0;i<s;i++)this.passMaterials[i]||(this.passMaterials[i]=this.createMaterialForPass(e,i,!1));this.ambientAOMaterial||(this.ambientAOMaterial=this.createMaterialForPass(e,0,!0),this.ambientAOMaterial.onUpdateShader=function(i){return i.litOptions.lightMapWithoutAmbient=!0,i.litOptions.separateAmbient=!0,i})}createTexture(t,e){return new ge(this.device,{profilerHint:DS,width:t,height:t,format:this.scene.lightmapPixelFormat,mipmaps:!1,type:this.bakeHDR?Ds:Qi,minFilter:Te,magFilter:Te,addressU:me,addressV:me,name:e})}collectModels(t,e,s){var r,a,n;if(!t.enabled)return;let i;if((r=t.model)!=null&&r.model&&((a=t.model)!=null&&a.enabled)&&(s&&s.push(new oh(t)),t.model.lightmapped&&e&&(i=t.model.model.meshInstances)),(n=t.render)!=null&&n.enabled&&(s&&s.push(new oh(t)),t.render.lightmapped&&e&&(i=t.render.meshInstances)),i){let o=!0;for(let c=0;c<i.length;c++)if(!i[c].mesh.vertexBuffer.format.hasUv1){y.log(`Lightmapper - node [${t.name}] contains meshes without required uv1, excluding it from baking.`),o=!1;break}if(o){const c=[];for(let d=0;d<i.length;d++){const f=i[d].mesh;this._tempSet.has(f)?e.push(new oh(t,[i[d]])):c.push(i[d]),this._tempSet.add(f)}this._tempSet.clear(),c.length>0&&e.push(new oh(t,c))}}for(let o=0;o<t._children.length;o++)this.collectModels(t._children[o],e,s)}prepareShadowCasters(t){const e=[];for(let s=0;s<t.length;s++){const i=t[s].component;if(i.castShadows=i.castShadowsLightmap,i.castShadowsLightmap){const r=t[s].meshInstances;for(let a=0;a<r.length;a++)r[a].visibleThisFrame=!0,e.push(r[a])}}return e}updateTransforms(t){for(let e=0;e<t.length;e++){const s=t[e].meshInstances;for(let i=0;i<s.length;i++)s[i].node.getWorldTransform()}}calculateLightmapSize(t){let e;const s=this.scene.lightmapSizeMultiplier||16,i=lh;let r,a;t.model?(a=t.model.lightmapSizeMultiplier,t.model.asset?(e=this.assets.get(t.model.asset).data,e.area&&(r=e.area)):t.model._area&&(e=t.model,e._area&&(r=e._area))):t.render&&(a=t.render.lightmapSizeMultiplier,t.render.type!=="asset"&&t.render._area&&(e=t.render,e._area&&(r=e._area)));const n={x:1,y:1,z:1,uv:1};r&&(n.x=r.x,n.y=r.y,n.z=r.z,n.uv=r.uv);const o=a||1;n.x*=o,n.y*=o,n.z*=o;const c=t.render||t.model,d=this.computeNodeBounds(c.meshInstances);i.copy(d.halfExtents);let f=n.x*i.y*i.z+n.y*i.x*i.z+n.z*i.x*i.y;return f/=n.uv,f=Math.sqrt(f),Math.min(Y.nextPowerOfTwo(f*s),this.scene.lightmapMaxResolution||p2)}setLightmapping(t,e,s,i){for(let r=0;r<t.length;r++){const a=t[r],n=a.meshInstances;for(let o=0;o<n.length;o++){const c=n[o];if(c.setLightmapped(e),e){i&&(c._shaderDefs|=i),c.mask=di;for(let d=0;d<s;d++){const f=a.renderTargets[d].colorBuffer;f.minFilter=yt,f.magFilter=yt,c.setRealtimeLightmap(Ge.lightmapParamNames[d],f)}}}}}bake(t,e=Ch){const s=this.device,i=pe();this.scene._updateSkyMesh(),s.fire("lightmapper:start",{timestamp:i,target:this}),this.stats.renderPasses=0,this.stats.shadowMapTime=0,this.stats.forwardTime=0;const r=s._shaderStats.linked,a=s._renderTargetCreationTime,n=s._shaderStats.compileTime,o=[],c=[];if(t){for(let f=0;f<t.length;f++)this.collectModels(t[f],o,null);this.collectModels(this.root,null,c)}else this.collectModels(this.root,o,c);if(Z.pushGpuMarker(this.device,"LMBake"),o.length>0){this.renderer.shadowRenderer.frameUpdate();const f=e===Ch?2:1;this.setLightmapping(o,!1,f),this.initBake(s),this.bakeInternal(f,o,c);let u=Of;e===Ch&&(u|=Ty),this.scene.ambientBake&&(u|=wy),this.setLightmapping(o,!0,f,u),this.finishBake(o)}Z.popGpuMarker(this.device);const d=pe();this.stats.totalRenderTime=d-i,this.stats.shadersLinked=s._shaderStats.linked-r,this.stats.compileTime=s._shaderStats.compileTime-n,this.stats.fboTime=s._renderTargetCreationTime-a,this.stats.lightmapCount=o.length,s.fire("lightmapper:end",{timestamp:d,target:this})}allocateTextures(t,e){for(let s=0;s<t.length;s++){const i=t[s],r=this.calculateLightmapSize(i.node);for(let a=0;a<e;a++){const n=this.createTexture(r,`lightmapper_lightmap_${s}`);Vi.incRef(n),i.renderTargets[a]=new _t({colorBuffer:n,depth:!1})}if(!this.renderTargets.has(r)){const a=this.createTexture(r,`lightmapper_temp_lightmap_${r}`);Vi.incRef(a),this.renderTargets.set(r,new _t({colorBuffer:a,depth:!1}))}}}prepareLightsToBake(t,e){if(this.scene.ambientBake){const i=new $_(this);e.push(i)}const s=this.renderer.lights;for(let i=0;i<s.length;i++){const r=s[i],a=new a2(this,r);t.push(a),r.enabled&&(r.mask&fi)!==0&&(r.mask=fi|di|gs,r.shadowUpdateMode=r.type===ve?Op:vr,e.push(a))}e.sort()}restoreLights(t){for(let e=0;e<t.length;e++)t[e].restore()}setupScene(){this.ambientLight.copy(this.scene.ambientLight),this.scene.ambientBake||this.scene.ambientLight.set(0,0,0),this.renderer.setSceneConstants(),this.device.scope.resolve("ambientBakeOcclusionContrast").setValue(this.scene.ambientBakeOcclusionContrast),this.device.scope.resolve("ambientBakeOcclusionBrightness").setValue(this.scene.ambientBakeOcclusionBrightness)}restoreScene(){this.scene.ambientLight.copy(this.ambientLight)}computeNodeBounds(t){const e=new Me;if(t.length>0){e.copy(t[0].aabb);for(let s=1;s<t.length;s++)e.add(t[s].aabb)}return e}computeNodesBounds(t){for(let e=0;e<t.length;e++){const s=t[e].meshInstances;t[e].bounds=this.computeNodeBounds(s)}}computeBounds(t){const e=new Me;for(let s=0;s<t.length;s++){e.copy(t[0].aabb);for(let i=1;i<t.length;i++)e.add(t[i].aabb)}return e}backupMaterials(t){for(let e=0;e<t.length;e++)this.materials[e]=t[e].material}restoreMaterials(t){for(let e=0;e<t.length;e++)t[e].material=this.materials[e]}lightCameraPrepare(t,e){const s=e.light;let i;return s.type===Ze&&(i=s.getRenderData(null,0).shadowCamera,i._node.setPosition(s._node.getPosition()),i._node.setRotation(s._node.getRotation()),i._node.rotateLocal(-90,0,0),i.projection=ni,i.nearClip=s.attenuationEnd/1e3,i.farClip=s.attenuationEnd,i.aspectRatio=1,i.fov=s._outerConeAngle*2,this.renderer.updateCameraFrustum(i)),i}lightCameraPrepareAndCull(t,e,s,i){const r=t.light;let a=!0;if(r.type===ve){lh.copy(i.center),lh.y+=i.halfExtents.y,this.camera.node.setPosition(lh),this.camera.node.setEulerAngles(-90,0,0),this.camera.nearClip=0,this.camera.farClip=i.halfExtents.y*2;const n=Math.max(i.halfExtents.x,i.halfExtents.z);this.camera.orthoHeight=n}else t.lightBounds.intersects(e.bounds)||(a=!1);if(r.type===Ze){let n=!1;const o=e.meshInstances;for(let c=0;c<o.length;c++)if(o[c]._isVisible(s)){n=!0;break}n||(a=!1)}return a}setupLightArray(t,e){t[ve].length=0,t[Ke].length=0,t[Ze].length=0,t[e.type][0]=e,e.visibleThisFrame=!0}renderShadowMap(t,e,s,i){const r=i.light,a=this.scene.clusteredLightingEnabled,n=r.castShadows&&(!a||this.scene.lighting.shadowsEnabled);if(!e&&n)if(!r.shadowMap&&!a&&(r.shadowMap=this.shadowMapCache.get(this.device,r)),r.type===ve){this.renderer._shadowRendererDirectional.cull(r,t,this.camera,s);const o=this.renderer._shadowRendererDirectional.getLightRenderPass(r,this.camera);o==null||o.render()}else{if(this.device.isWebGPU)return y.warnOnce("Lightmapper on WebGPU does not yet support spot and omni shadows."),!0;this.renderer._shadowRendererLocal.cull(r,t,s),this.renderer.shadowRenderer.render(r,this.camera,!1)}return!0}postprocessTextures(t,e,s){const r=this.lightmapFilters.getDilate(t,this.bakeHDR);let a;const n=this.scene.lightmapFilterEnabled;n&&(this.lightmapFilters.prepareDenoise(this.scene.lightmapFilterRange,this.scene.lightmapFilterSmoothness,this.bakeHDR),a=this.lightmapFilters.getDenoise(this.bakeHDR)),t.setBlendState(ut.NOBLEND),t.setDepthState(qt.NODEPTH),t.setStencilState(null,null);for(let o=0;o<e.length;o++){const c=e[o];Z.pushGpuMarker(this.device,`LMPost:${o}`);for(let d=0;d<s;d++){const f=c.renderTargets[d],u=f.colorBuffer,p=this.renderTargets.get(u.width),m=p.colorBuffer;this.lightmapFilters.prepare(u.width,u.height);for(let _=0;_<1;_++)this.lightmapFilters.setSourceTexture(u),br(t,p,n&&d===0&&_===0?a:r),this.lightmapFilters.setSourceTexture(m),br(t,f,r)}Z.popGpuMarker(this.device)}}bakeInternal(t,e,s){const i=this.scene,r=i.layers,a=this.device,n=i.clusteredLightingEnabled;this.createMaterials(a,i,t),this.setupScene(),r._update(),this.computeNodesBounds(e),this.allocateTextures(e,t),this.renderer.collectLights(r);const o=[],c=[];this.prepareLightsToBake(o,c),this.updateTransforms(s);const d=this.prepareShadowCasters(s);this.renderer.updateCpuSkinMatrices(d),this.renderer.gpuUpdate(d);const f=this.computeBounds(d);let u,p,m,_;for(u=0;u<e.length;u++)for(m=e[u].meshInstances,p=0;p<m.length;p++)_=m[p],_.setLightmapped(!1),_.mask=fi,_.setRealtimeLightmap(Ge.lightmapParamNames[0],this.blackTex),_.setRealtimeLightmap(Ge.lightmapParamNames[1],this.blackTex);for(p=0;p<c.length;p++)c[p].light.enabled=!1;const S=[[],[],[]];let g,v,w=!1;for(u=0;u<c.length;u++){const x=c[u],b=x instanceof $_,C=x.light.type===ve;let D=x.numVirtualLights;t>1&&D>1&&x.light.bakeDir&&(D=1,y.warn("Lightmapper's BAKE_COLORDIR mode is not compatible with Light's bakeNumSamples larger than one. Forcing it to one."));for(let T=0;T<D;T++){Z.pushGpuMarker(a,`Light:${x.light._node.name}:${T}`),D>1&&x.prepareVirtualLight(T,D),x.startBake();let I=!1;const L=this.lightCameraPrepare(a,x);for(v=0;v<e.length;v++){const E=e[v];if(m=E.meshInstances,!this.lightCameraPrepareAndCull(x,E,L,f))continue;this.setupLightArray(S,x.light);const k=C?[]:[x.light];for(n&&this.renderer.lightTextureAtlas.update(k,this.lightingParams),I=this.renderShadowMap(r,I,d,x),n&&this.worldClusters.update(k,this.lightingParams),this.backupMaterials(m),g=0;g<t&&!(g>0&&T>0||b&&g>0);g++){Z.pushGpuMarker(a,`LMPass:${g}`);const H=E.renderTargets[g],G=E.renderTargets[g].colorBuffer.width,W=this.renderTargets.get(G),R=W.colorBuffer;g===0?w=i.updateShaders:w&&(i.updateShaders=!0);let B=this.passMaterials[g];for(b&&T+1===D&&g===0&&(B=this.ambientAOMaterial),p=0;p<m.length;p++)m[p].material=B;if(this.renderer.updateShaders(m),g===_2&&this.constantBakeDir.setValue(x.light.bakeDir?1:0),a.isWebGPU){const V=new u2(a,this.renderer,this.camera,n?this.worldClusters:null,m,S);V.init(W),V.render(),V.destroy()}else this.renderer.setCamera(this.camera,W,!0),n&&this.worldClusters.activate(),this.renderer._forwardTime=0,this.renderer._shadowMapTime=0,this.renderer.renderForward(this.camera,W,m,S,Ea),a.updateEnd();for(this.stats.shadowMapTime+=this.renderer._shadowMapTime,this.stats.forwardTime+=this.renderer._forwardTime,this.stats.renderPasses++,E.renderTargets[g]=W,this.renderTargets.set(G,H),p=0;p<m.length;p++)_=m[p],_.setRealtimeLightmap(Ge.lightmapParamNames[g],R),_._shaderDefs|=Of;Z.popGpuMarker(a)}this.restoreMaterials(m)}x.endBake(this.shadowMapCache),Z.popGpuMarker(a)}}for(this.postprocessTextures(a,e,t),v=0;v<s.length;v++)s[v].restore();this.restoreLights(o),this.restoreScene(),n||this.shadowMapCache.clear()}}const wc=class wc extends Se{constructor(e,s){super();h(this,"system");h(this,"entity");this.system=e,this.entity=s,this.system.schema&&!this._accessorsBuilt&&this.buildAccessors(this.system.schema),this.on("set",function(i,r,a){this.fire(`set_${i}`,i,r,a)}),this.on("set_enabled",this.onSetEnabled,this)}static _buildAccessors(e,s){s.forEach(i=>{const r=typeof i=="object"?i.name:i;Object.defineProperty(e,r,{get:function(){return this.data[r]},set:function(a){const n=this.data,o=n[r];n[r]=a,this.fire("set",r,o,a)},configurable:!0})}),e._accessorsBuilt=!0}buildAccessors(e){wc._buildAccessors(this,e)}onSetEnabled(e,s,i){s!==i&&this.entity.enabled&&(i?this.onEnable():this.onDisable())}onEnable(){}onDisable(){}onPostStateChange(){}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){}get enabled(){return!0}};h(wc,"order",0);let we=wc;class ht extends Se{constructor(t){super(),this.app=t,this.store={},this.schema=[]}addComponent(t,e={}){const s=new this.ComponentType(this,t),i=new this.DataType;return this.store[t.getGuid()]={entity:t,data:i},t[this.id]=s,t.c[this.id]=s,this.initializeComponentData(s,e,[]),this.fire("add",t,s),s}removeComponent(t){const e=this.id,s=this.store[t.getGuid()],i=t.c[e];i.fire("beforeremove"),this.fire("beforeremove",t,i),delete this.store[t.getGuid()],t[e]=void 0,delete t.c[e],this.fire("remove",t,s.data)}cloneComponent(t,e){const s=this.store[t.getGuid()];return this.addComponent(e,s.data)}initializeComponentData(t,e={},s){for(let i=0,r=s.length;i<r;i++){const a=s[i];let n,o;typeof a=="object"?(n=a.name,o=a.type):(n=a,o=void 0);let c=e[n];c!==void 0?(o!==void 0&&(c=S2(c,o)),t[n]=c):t[n]=t.data[n]}t.enabled&&t.entity.enabled&&t.onEnable()}getPropertiesOfType(t){const e=[];return(this.schema||[]).forEach(i=>{i&&typeof i=="object"&&i.type===t&&e.push(i)}),e}destroy(){this.off()}}function S2(l,t){if(!l)return l;switch(t){case"rgb":return l instanceof ae?l.clone():new ae(l[0],l[1],l[2]);case"rgba":return l instanceof ae?l.clone():new ae(l[0],l[1],l[2],l[3]);case"vec2":return l instanceof J?l.clone():new J(l[0],l[1]);case"vec3":return l instanceof A?l.clone():new A(l[0],l[1],l[2]);case"vec4":return l instanceof oe?l.clone():new oe(l[0],l[1],l[2],l[3]);case"boolean":case"number":case"string":return l;case"entity":return l;default:throw new Error(`Could not convert unhandled type: ${t}`)}}const Yy=0,$f=1,Xf=2;class y2{constructor(){this._left=1/0,this._right=-1/0,this._len=0,this._recip=0,this._p0=0,this._p1=0,this._t=0,this._hermite={valid:!1,p0:0,m0:0,p1:0,m1:0}}update(t,e){if(t<this._left||t>=this._right){const s=e.length;if(!s)this._left=-1/0,this._right=1/0,this._len=0,this._recip=0,this._p0=this._p1=0;else if(t<e[0])this._left=-1/0,this._right=e[0],this._len=0,this._recip=0,this._p0=this._p1=0;else if(t>=e[s-1])this._left=e[s-1],this._right=1/0,this._len=0,this._recip=0,this._p0=this._p1=s-1;else{const i=this._findKey(t,e);this._left=e[i],this._right=e[i+1],this._len=this._right-this._left;const r=1/this._len;this._recip=isFinite(r)?r:0,this._p0=i,this._p1=i+1}}this._t=this._recip===0?0:(t-this._left)*this._recip,this._hermite.valid=!1}_findKey(t,e){let s=0;for(;t>=e[s+1];)s++;return s}eval(t,e,s){const i=s._data,r=s._components,a=this._p0*r;if(e===Yy)for(let n=0;n<r;++n)t[n]=i[a+n];else{const n=this._t,o=this._p1*r;switch(e){case $f:for(let c=0;c<r;++c)t[c]=Y.lerp(i[a+c],i[o+c],n);break;case Xf:{const c=this._hermite;if(!c.valid){const m=n*n,_=n+n,S=1-n,g=S*S;c.valid=!0,c.p0=(1+_)*g,c.m0=n*g,c.p1=m*(3-_),c.m1=m*(n-1)}const d=(this._p0*3+1)*r,f=(this._p0*3+2)*r,u=(this._p1*3+1)*r,p=(this._p1*3+0)*r;for(let m=0;m<r;++m)t[m]=c.p0*i[d+m]+c.m0*i[f+m]*this._len+c.p1*i[u+m]+c.m1*i[p+m]*this._len;break}}}}}class q_{constructor(t){this._name=`${t.name}Snapshot`,this._time=-1,this._cache=[],this._results=[];for(let i=0;i<t._inputs.length;++i)this._cache[i]=new y2;const e=t._curves,s=t._outputs;for(let i=0;i<e.length;++i){const r=e[i],a=s[r._output],n=[];for(let o=0;o<a._components;++o)n[o]=0;this._results[i]=n}}}const No=class No{constructor(t,e,s,i,r,a){this._name=t.name,this._track=t,this._snapshot=new q_(t),this._playing=i,this._time=e,this._speed=s,this._loop=r,this._blendWeight=1,this._blendOrder=0,this._eventHandler=a,this.alignCursorToCurrentTime()}set name(t){this._name=t}get name(){return this._name}set track(t){this._track=t,this._snapshot=new q_(t)}get track(){return this._track}get snapshot(){return this._snapshot}set time(t){this._time=t,this.alignCursorToCurrentTime()}get time(){return this._time}set speed(t){const e=Math.sign(t)!==Math.sign(this._speed);this._speed=t,e&&this.alignCursorToCurrentTime()}get speed(){return this._speed}set loop(t){this._loop=t}get loop(){return this._loop}set blendWeight(t){this._blendWeight=t}get blendWeight(){return this._blendWeight}set blendOrder(t){this._blendOrder=t}get blendOrder(){return this._blendOrder}set eventCursor(t){this._eventCursor=t}get eventCursor(){return this._eventCursor}get eventCursorEnd(){return this.isReverse?0:this._track.events.length-1}get nextEvent(){return this._track.events[this._eventCursor]}get isReverse(){return this._speed<0}nextEventAheadOfTime(t){return this.nextEvent?this.isReverse?this.nextEvent.time<=t:this.nextEvent.time>=t:!1}nextEventBehindTime(t){return this.nextEvent?t===this.track.duration?this.isReverse?this.nextEvent.time>=t:this.nextEvent.time<=t:this.isReverse?this.nextEvent.time>t:this.nextEvent.time<t:!1}resetEventCursor(){this._eventCursor=this.isReverse?this._track.events.length-1:0}moveEventCursor(){this._eventCursor+=this.isReverse?-1:1,this._eventCursor>=this.track.events.length?this._eventCursor=0:this._eventCursor<0&&(this._eventCursor=this.track.events.length-1)}clipFrameTime(t){const e=No.eventFrame;e.start=0,e.end=t,e.residual=0,this.isReverse?t<0&&(e.start=this.track.duration,e.end=0,e.residual=t+this.track.duration):t>this.track.duration&&(e.start=0,e.end=this.track.duration,e.residual=t-this.track.duration)}alignCursorToCurrentTime(){for(this.resetEventCursor();this.nextEventBehindTime(this._time)&&this._eventCursor!==this.eventCursorEnd;)this.moveEventCursor()}fireNextEvent(){this._eventHandler.fire(this.nextEvent.name,{track:this.track,...this.nextEvent}),this.moveEventCursor()}fireNextEventInFrame(t,e){return this.nextEventAheadOfTime(t)&&this.nextEventBehindTime(e)?(this.fireNextEvent(),!0):!1}activeEventsForFrame(t,e){const s=No.eventFrame;this.clipFrameTime(e);const i=this.eventCursor;for(;this.fireNextEventInFrame(t,s.end)&&i!==this.eventCursor;);this.loop&&Math.abs(s.residual)>0&&this.activeEventsForFrame(s.start,s.residual)}progressForTime(t){return t*this._speed/this._track.duration}_update(t){if(this._playing){let e=this._time;const s=this._track.duration,i=this._speed,r=this._loop;this._track.events.length>0&&s>0&&this.activeEventsForFrame(e,e+i*t),e+=i*t,i>=0?e>s&&(r?e=e%s||0:(e=this._track.duration,this.pause())):e<0&&(r?e=s+(e%s||0):(e=0,this.pause())),this._time=e}this._time!==this._snapshot._time&&this._track.eval(this._time,this._snapshot)}play(){this._playing=!0,this._time=0}stop(){this._playing=!1,this._time=0}pause(){this._playing=!1}resume(){this._playing=!0}reset(){this._time=0}};h(No,"eventFrame",{start:0,end:0,residual:0});let hc=No;const Ky="NONE",v2="PREV_STATE",x2="NEXT_STATE",T2="PREV_STATE_NEXT_STATE",w2="NEXT_STATE_PREV_STATE",E2="GREATER_THAN",b2="LESS_THAN",A2="GREATER_THAN_EQUAL_TO",C2="LESS_THAN_EQUAL_TO",P2="EQUAL_TO",D2="NOT_EQUAL_TO",j_="INTEGER",Y_="FLOAT",K_="BOOLEAN",Mh="TRIGGER",I2="1D",M2="2D_DIRECTIONAL",L2="2D_CARTESIAN",R2="DIRECT",So="START",qf="END",Xr="ANY",cc=[So,qf,Xr],Zy="OVERWRITE",O2="ADDITIVE";class Gt{static dot(t,e){const s=t.length;let i=0;for(let r=0;r<s;++r)i+=t[r]*e[r];return i}static normalize(t){let e=Gt.dot(t,t);if(e>0){e=1/Math.sqrt(e);const s=t.length;for(let i=0;i<s;++i)t[i]*=e}}static set(t,e,s){const i=t.length;if(s==="quaternion"){let r=Gt.dot(e,e);r>0&&(r=1/Math.sqrt(r));for(let a=0;a<i;++a)t[a]=e[a]*r}else for(let r=0;r<i;++r)t[r]=e[r]}static blendVec(t,e,s,i){const r=i?1:1-s,a=t.length;for(let n=0;n<a;++n)t[n]=t[n]*r+e[n]*s}static blendQuat(t,e,s,i){const r=t.length,a=i?1:1-s;Gt.dot(t,e)<0&&(s=-s);for(let n=0;n<r;++n)t[n]=t[n]*a+e[n]*s;i||Gt.normalize(t)}static blend(t,e,s,i,r){i==="quaternion"?Gt.blendQuat(t,e,s,r):Gt.blendVec(t,e,s,r)}static stableSort(t,e){const s=t.length;for(let i=0;i<s-1;++i)for(let r=i+1;r<s;++r)if(e(t[r],t[i])){const a=t[i];t[i]=t[r],t[r]=a}}}const st=class st{constructor(t,e){this._component=t,this.mask=new Int8Array(t.layers.length),this.weights=new Float32Array(t.layers.length),this.totalWeight=0,this.counter=0,this.layerCounter=0,this.valueType=e,this.dirty=!0,this.value=e===st.TYPE_QUAT?[0,0,0,1]:[0,0,0],this.baseValue=null,this.setter=null}get _normalizeWeights(){return this._component.normalizeWeights}getWeight(t){return this.dirty&&this.updateWeights(),this._normalizeWeights&&this.totalWeight===0||!this.mask[t]?0:this._normalizeWeights?this.weights[t]/this.totalWeight:Y.clamp(this.weights[t],0,1)}_layerBlendType(t){return this._component.layers[t].blendType}setMask(t,e){this.mask[t]=e,this._normalizeWeights&&(this._component.layers[t].blendType===Zy&&(this.mask=this.mask.fill(0,0,t)),this.dirty=!0)}updateWeights(){this.totalWeight=0;for(let t=0;t<this.weights.length;t++)this.weights[t]=this._component.layers[t].weight,this.totalWeight+=this.mask[t]*this.weights[t];this.dirty=!1}updateValue(t,e){if(this.counter===0&&(Gt.set(this.value,st.IDENTITY_QUAT_ARR,this.valueType),this._normalizeWeights||Gt.blend(this.value,this.baseValue,1,this.valueType)),!(!this.mask[t]||this.getWeight(t)===0)){if(this._layerBlendType(t)===O2&&!this._normalizeWeights)if(this.valueType===st.TYPE_QUAT){const s=st.q1.set(this.value[0],this.value[1],this.value[2],this.value[3]),i=st.q2.set(this.baseValue[0],this.baseValue[1],this.baseValue[2],this.baseValue[3]),r=st.q3.set(e[0],e[1],e[2],e[3]),a=i.invert().mul(r);a.slerp(ue.IDENTITY,a,this.getWeight(t)),s.mul(a),st.quatArr[0]=s.x,st.quatArr[1]=s.y,st.quatArr[2]=s.z,st.quatArr[3]=s.w,Gt.set(this.value,st.quatArr,this.valueType)}else st.vecArr[0]=e[0]-this.baseValue[0],st.vecArr[1]=e[1]-this.baseValue[1],st.vecArr[2]=e[2]-this.baseValue[2],Gt.blend(this.value,st.vecArr,this.getWeight(t),this.valueType,!0);else Gt.blend(this.value,e,this.getWeight(t),this.valueType);this.setter&&this.setter(this.value)}}unbind(){this.setter&&this.setter(this.baseValue)}};h(st,"TYPE_QUAT","quaternion"),h(st,"TYPE_VEC3","vector3"),h(st,"q1",new ue),h(st,"q2",new ue),h(st,"q3",new ue),h(st,"quatArr",[0,0,0,1]),h(st,"vecArr",[0,0,0]),h(st,"IDENTITY_QUAT_ARR",[0,0,0,1]);let Mo=st;class Qy{constructor(t){this._binder=t,this._clips=[],this._inputs=[],this._outputs=[],this._targets={}}get clips(){return this._clips}addClip(t){const e=this._targets,s=this._binder,i=t.track.curves,r=t.snapshot,a=[],n=[];for(let o=0;o<i.length;++o){const d=i[o].paths;for(let f=0;f<d.length;++f){const u=d[f],p=s.resolve(u);let m=e[p&&p.targetPath||null];if(!m&&p){m={target:p,value:[],curves:0,blendCounter:0};for(let _=0;_<m.target.components;++_)m.value.push(0);if(e[p.targetPath]=m,s.animComponent){if(!s.animComponent.targets[p.targetPath]){let _;p.targetPath.substring(p.targetPath.length-13)==="localRotation"?_=Mo.TYPE_QUAT:_=Mo.TYPE_VEC3,s.animComponent.targets[p.targetPath]=new Mo(s.animComponent,_)}s.animComponent.targets[p.targetPath].layerCounter++,s.animComponent.targets[p.targetPath].setMask(s.layerIndex,1)}}m&&(m.curves++,a.push(r._results[o]),n.push(m))}}this._clips.push(t),this._inputs.push(a),this._outputs.push(n)}removeClip(t){const e=this._targets,s=this._binder,i=this._clips,a=i[t].track.curves;for(let n=0;n<a.length;++n){const c=a[n].paths;for(let d=0;d<c.length;++d){const f=c[d],u=this._binder.resolve(f);u&&(u.curves--,u.curves===0&&(s.unresolve(f),delete e[u.targetPath],s.animComponent&&s.animComponent.targets[u.targetPath].layerCounter--))}}i.splice(t,1),this._inputs.splice(t,1),this._outputs.splice(t,1)}removeClips(){for(;this._clips.length>0;)this.removeClip(0)}updateClipTrack(t,e){this._clips.forEach(s=>{s.name.includes(t)&&(s.track=e)}),this.rebind()}findClip(t){const e=this._clips;for(let s=0;s<e.length;++s){const i=e[s];if(i.name===t)return i}return null}rebind(){this._binder.rebind(),this._targets={};const t=[...this.clips];this.removeClips(),t.forEach(e=>{this.addClip(e)})}assignMask(t){return this._binder.assignMask(t)}update(t,e=!0){const s=this._clips,i=s.map((n,o)=>o);Gt.stableSort(i,(n,o)=>s[n].blendOrder<s[o].blendOrder);for(let n=0;n<i.length;++n){const o=i[n],c=s[o],d=this._inputs[o],f=this._outputs[o],u=c.blendWeight;if(u>0&&c._update(t),!e)break;let p,m,_;if(u>=1)for(let S=0;S<d.length;++S)p=d[S],m=f[S],_=m.value,Gt.set(_,p,m.target.type),m.blendCounter++;else if(u>0)for(let S=0;S<d.length;++S)p=d[S],m=f[S],_=m.value,m.blendCounter===0?Gt.set(_,p,m.target.type):Gt.blend(_,p,u,m.target.type),m.blendCounter++}const r=this._targets,a=this._binder;for(const n in r)if(r.hasOwnProperty(n)){const o=r[n];if(a.animComponent&&o.target.isTransform){const c=a.animComponent.targets[n];c.counter===c.layerCounter&&(c.counter=0),c.path||(c.path=n,c.baseValue=o.target.get(),c.setter=o.target.set),c.updateValue(a.layerIndex,o.value),c.counter++}else o.target.set(o.value);o.blendCounter=0}this._binder.update(t)}}class Jy{constructor(t){this._events=[...t],this._events.sort((e,s)=>e.time-s.time)}get events(){return this._events}}const Ec=class Ec{constructor(t,e,s,i,r,a=new Jy([])){this._name=t,this._duration=e,this._inputs=s,this._outputs=i,this._curves=r,this._animEvents=a}get name(){return this._name}get duration(){return this._duration}get inputs(){return this._inputs}get outputs(){return this._outputs}get curves(){return this._curves}set events(t){this._animEvents=t}get events(){return this._animEvents.events}eval(t,e){e._time=t;const s=this._inputs,i=this._outputs,r=this._curves,a=e._cache,n=e._results;for(let o=0;o<s.length;++o)a[o].update(t,s[o]._data);for(let o=0;o<r.length;++o){const c=r[o],d=i[c._output],f=n[o];a[c._input].eval(f,c._interpolation,d)}}};h(Ec,"EMPTY",Object.freeze(new Ec("empty",Number.MAX_VALUE,[],[],[])));let Ji=Ec;class sa{static joinPath(t,e){e=e||".";const s=function(i){return i.replace(/\\/g,"\\\\").replace(new RegExp(`\\${e}`,"g"),`\\${e}`)};return t.map(s).join(e)}static splitPath(t,e){e=e||".";const s=[];let i="",r=0;for(;r<t.length;){let a=t[r++];a==="\\"&&r<t.length?(a=t[r++],a==="\\"||a===e?i+=a:i+=`\\${a}`):a===e?(s.push(i),i=""):i+=a}return i.length>0&&s.push(i),s}static encode(t,e,s){return`${Array.isArray(t)?t.join("/"):t}/${e}/${Array.isArray(s)?s.join("/"):s}`}resolve(t){return null}unresolve(t){}update(t){}}class jf{constructor(t,e,s,i){t.set?(this._set=t.set,this._get=t.get):this._set=t,this._type=e,this._components=s,this._targetPath=i,this._isTransform=this._targetPath.substring(this._targetPath.length-13)==="localRotation"||this._targetPath.substring(this._targetPath.length-13)==="localPosition"||this._targetPath.substring(this._targetPath.length-10)==="localScale"}get set(){return this._set}get get(){return this._get}get type(){return this._type}get components(){return this._components}get targetPath(){return this._targetPath}get isTransform(){return this._isTransform}}class gr{constructor(t){h(this,"_isPathInMask",(t,e)=>{const s=this._mask[t];if(s){if(s.children||e&&s.value!==!1)return!0}else return!1;return!1});if(this.graph=t,!t)return;this._mask=null;const e={},s=function(r){e[r.name]=r;for(let a=0;a<r.children.length;++a)s(r.children[a])};s(t),this.nodes=e,this.targetCache={},this.visitedFallbackGraphPaths={};const i=function(r){let a=r;for(;a&&!(a instanceof lt);)a=a.parent;let n;return a&&(a.render?n=a.render.meshInstances:a.model&&(n=a.model.meshInstances)),n};this.nodeCounts={},this.activeNodes=[],this.handlers={localPosition:function(r){const a=r.localPosition,n=function(o){a.set(...o)};return gr.createAnimTarget(n,"vector",3,r,"localPosition")},localRotation:function(r){const a=r.localRotation,n=function(o){a.set(...o)};return gr.createAnimTarget(n,"quaternion",4,r,"localRotation")},localScale:function(r){const a=r.localScale,n=function(o){a.set(...o)};return gr.createAnimTarget(n,"vector",3,r,"localScale")},weight:function(r,a){a.indexOf("name.")===0?a=a.replace("name.",""):a=Number(a);const n=i(r);let o;if(n){for(let c=0;c<n.length;++c)if(n[c].node.name===r.name&&n[c].morphInstance){const d=n[c].morphInstance,f=u=>{d.setWeight(a,u[0])};o||(o=[]),o.push(f)}}if(o){const c=d=>{for(let f=0;f<o.length;++f)o[f](d)};return gr.createAnimTarget(c,"number",1,r,`weight.${a}`)}return null},materialTexture:(r,a)=>{const n=i(r);if(n){let o;for(let c=0;c<n.length;++c)if(n[c].node.name===r.name){o=n[c];break}if(o){const c=d=>{const f=this.animComponent.system.app.assets.get(d[0]);f&&f.resource&&f.type==="texture"&&(o.material[a]=f.resource,o.material.update())};return gr.createAnimTarget(c,"vector",1,r,"materialTexture","material")}}return null}}}_isPathActive(t){if(!this._mask)return!0;const e=[t.entityPath[0],this.graph.name];for(let s=0;s<e.length;++s){let i=e[s];if(this._isPathInMask(i,t.entityPath.length===1))return!0;for(let r=1;r<t.entityPath.length;r++)if(i+=`/${t.entityPath[r]}`,this._isPathInMask(i,r===t.entityPath.length-1))return!0}return!1}findNode(t){if(!this._isPathActive(t))return null;let e;if(this.graph&&(e=this.graph.findByPath(t.entityPath),e||(e=this.graph.findByPath(t.entityPath.slice(1)))),!e){e=this.nodes[t.entityPath[t.entityPath.length-1]||""];const s=sa.encode(t.entityPath[t.entityPath.length-1]||"","graph",t.propertyPath);this.visitedFallbackGraphPaths[s]===1&&y.warnOnce(`Anim Binder: Multiple animation curves with the path ${s} are present in the ${this.graph.path} graph which may result in the incorrect binding of animations`),Number.isFinite(this.visitedFallbackGraphPaths[s])?this.visitedFallbackGraphPaths[s]++:this.visitedFallbackGraphPaths[s]=0}return e}static createAnimTarget(t,e,s,i,r,a){const n=sa.encode(i.path,a||"entity",r);return new jf(t,e,s,n)}resolve(t){const e=sa.encode(t.entityPath,t.component,t.propertyPath);let s=this.targetCache[e];if(s)return s;const i=this.findNode(t);if(!i)return null;const r=this.handlers[t.propertyPath];return!r||(s=r(i),!s)?null:(this.targetCache[e]=s,this.nodeCounts[i.path]?this.nodeCounts[i.path]++:(this.activeNodes.push(i),this.nodeCounts[i.path]=1),s)}unresolve(t){if(t.component!=="graph")return;const e=this.nodes[t.entityPath[t.entityPath.length-1]||""];if(this.nodeCounts[e.path]--,this.nodeCounts[e.path]===0){const s=this.activeNodes,i=s.indexOf(e.node),r=s.length;i<r-1&&(s[i]=s[r-1]),s.pop()}}update(t){const e=this.activeNodes;for(let s=0;s<e.length;++s)e[s]._dirtifyLocal()}assignMask(t){return t!==this._mask?(this._mask=t,!0):!1}}class ev extends we{constructor(){super(...arguments);h(this,"_animations",{});h(this,"_assets",[]);h(this,"_loop",!0);h(this,"animEvaluator",null);h(this,"model",null);h(this,"skeleton",null);h(this,"fromSkel",null);h(this,"toSkel",null);h(this,"animationsIndex",{});h(this,"prevAnim",null);h(this,"currAnim",null);h(this,"blend",0);h(this,"blending",!1);h(this,"blendSpeed",0);h(this,"activate",!0);h(this,"speed",1)}set animations(e){this._animations=e,this.onSetAnimations()}get animations(){return this._animations}set assets(e){const s=this._assets;if(s&&s.length){for(let r=0;r<s.length;r++)if(s[r]){const a=this.system.app.assets.get(s[r]);if(a){a.off("change",this.onAssetChanged,this),a.off("remove",this.onAssetRemoved,this);const n=this.animationsIndex[a.id];this.currAnim===n&&this._stopCurrentAnimation(),delete this.animations[n],delete this.animationsIndex[a.id]}}}this._assets=e;const i=e.map(r=>r instanceof _e?r.id:r);this.loadAnimationAssets(i)}get assets(){return this._assets}set currentTime(e){if(this.skeleton&&(this.skeleton.currentTime=e,this.skeleton.addTime(0),this.skeleton.updateGraph()),this.animEvaluator){const s=this.animEvaluator.clips;for(let i=0;i<s.length;++i)s[i].time=e}}get currentTime(){if(this.skeleton)return this.skeleton._time;if(this.animEvaluator){const e=this.animEvaluator.clips;if(e.length>0)return e[e.length-1].time}return 0}get duration(){return this.currAnim?this.animations[this.currAnim].duration:(y.warn("No animation is playing to get a duration. Returning 0."),0)}set loop(e){if(this._loop=e,this.skeleton&&(this.skeleton.looping=e),this.animEvaluator)for(let s=0;s<this.animEvaluator.clips.length;++s)this.animEvaluator.clips[s].loop=e}get loop(){return this._loop}play(e,s=0){if(!(!this.enabled||!this.entity.enabled)){if(!this.animations[e]){y.error(`Trying to play animation '${e}' which doesn't exist`);return}if(this.prevAnim=this.currAnim,this.currAnim=e,this.model){!this.skeleton&&!this.animEvaluator&&this._createAnimationController();const i=this.animations[this.prevAnim],r=this.animations[this.currAnim];if(this.blending=s>0&&!!this.prevAnim,this.blending&&(this.blend=0,this.blendSpeed=1/s),this.skeleton&&(this.blending?(this.fromSkel.animation=i,this.fromSkel.addTime(this.skeleton._time),this.toSkel.animation=r):this.skeleton.animation=r),this.animEvaluator){const a=this.animEvaluator;if(this.blending)for(;a.clips.length>1;)a.removeClip(0);else this.animEvaluator.removeClips();const n=new hc(this.animations[this.currAnim],0,1,!0,this.loop);n.name=this.currAnim,n.blendWeight=this.blending?0:1,n.reset(),this.animEvaluator.addClip(n)}}this.playing=!0}}getAnimation(e){return this.animations[e]}setModel(e){e!==this.model&&(this._resetAnimationController(),this.model=e,this.animations&&this.currAnim&&this.animations[this.currAnim]&&this.play(this.currAnim))}onSetAnimations(){const e=this.entity.model;if(e){const s=e.model;s&&s!==this.model&&this.setModel(s)}if(!this.currAnim&&this.activate&&this.enabled&&this.entity.enabled){const s=Object.keys(this._animations);s.length>0&&this.play(s[0])}}_resetAnimationController(){this.skeleton=null,this.fromSkel=null,this.toSkel=null,this.animEvaluator=null}_createAnimationController(){const e=this.model,s=this.animations;let i=!1,r=!1;for(const n in s)s.hasOwnProperty(n)&&(s[n].constructor===Ji?r=!0:i=!0);const a=e.getGraph();i?(this.fromSkel=new Zd(a),this.toSkel=new Zd(a),this.skeleton=new Zd(a),this.skeleton.looping=this.loop,this.skeleton.setGraph(a)):r&&(this.animEvaluator=new Qy(new gr(this.entity)))}loadAnimationAssets(e){if(!e||!e.length)return;const s=this.system.app.assets,i=a=>{if(a.resources.length>1)for(let n=0;n<a.resources.length;n++)this.animations[a.resources[n].name]=a.resources[n],this.animationsIndex[a.id]=a.resources[n].name;else this.animations[a.name]=a.resource,this.animationsIndex[a.id]=a.name;this.animations=this.animations},r=a=>{a.off("change",this.onAssetChanged,this),a.on("change",this.onAssetChanged,this),a.off("remove",this.onAssetRemoved,this),a.on("remove",this.onAssetRemoved,this),a.resource?i(a):(a.once("load",i,this),this.enabled&&this.entity.enabled&&s.load(a))};for(let a=0,n=e.length;a<n;a++){const o=s.get(e[a]);o?r(o):s.on(`add:${e[a]}`,r)}}onAssetChanged(e,s,i,r){if(s==="resource"||s==="resources")if(s==="resources"&&i&&i.length===0&&(i=null),i){let a=!1;if(i.length>1){if(r&&r.length>1)for(let n=0;n<r.length;n++)delete this.animations[r[n].name];else delete this.animations[e.name];a=!1;for(let n=0;n<i.length;n++)this.animations[i[n].name]=i[n],!a&&this.currAnim===i[n].name&&this.playing&&this.enabled&&this.entity.enabled&&(a=!0,this.play(i[n].name));a||(this._stopCurrentAnimation(),this.onSetAnimations())}else{if(r&&r.length>1)for(let n=0;n<r.length;n++)delete this.animations[r[n].name];this.animations[e.name]=i[0]||i,a=!1,this.currAnim===e.name&&this.playing&&this.enabled&&this.entity.enabled&&(a=!0,this.play(e.name)),a||(this._stopCurrentAnimation(),this.onSetAnimations())}this.animationsIndex[e.id]=e.name}else{if(r.length>1)for(let a=0;a<r.length;a++)delete this.animations[r[a].name],this.currAnim===r[a].name&&this._stopCurrentAnimation();else delete this.animations[e.name],this.currAnim===e.name&&this._stopCurrentAnimation();delete this.animationsIndex[e.id]}}onAssetRemoved(e){if(e.off("remove",this.onAssetRemoved,this),this.animations){if(e.resources.length>1)for(let s=0;s<e.resources.length;s++)delete this.animations[e.resources[s].name],this.currAnim===e.resources[s].name&&this._stopCurrentAnimation();else delete this.animations[e.name],this.currAnim===e.name&&this._stopCurrentAnimation();delete this.animationsIndex[e.id]}}_stopCurrentAnimation(){if(this.currAnim=null,this.playing=!1,this.skeleton&&(this.skeleton.currentTime=0,this.skeleton.animation=null),this.animEvaluator){for(let e=0;e<this.animEvaluator.clips.length;++e)this.animEvaluator.clips[e].stop();this.animEvaluator.update(0),this.animEvaluator.removeClips()}}onEnable(){super.onEnable();const e=this.assets,s=this.system.app.assets;if(e)for(let i=0,r=e.length;i<r;i++){let a=e[i];a instanceof _e||(a=s.get(a)),a&&!a.resource&&s.load(a)}if(this.activate&&!this.currAnim){const i=Object.keys(this.animations);i.length>0&&this.play(i[0])}}onBeforeRemove(){for(let e=0;e<this.assets.length;e++){let s=this.assets[e];typeof s=="number"&&(s=this.system.app.assets.get(s)),s&&(s.off("change",this.onAssetChanged,this),s.off("remove",this.onAssetRemoved,this))}this.skeleton=null,this.fromSkel=null,this.toSkel=null,this.animEvaluator=null}update(e){if(this.blending&&(this.blend+=e*this.blendSpeed,this.blend>=1&&(this.blend=1)),this.playing){const i=this.skeleton;if(i!==null&&this.model!==null){if(this.blending)i.blend(this.fromSkel,this.toSkel,this.blend);else{const r=e*this.speed;i.addTime(r),this.speed>0&&i._time===i.animation.duration&&!this.loop?this.playing=!1:this.speed<0&&i._time===0&&!this.loop&&(this.playing=!1)}this.blending&&this.blend===1&&(i.animation=this.toSkel.animation),i.updateGraph()}}const s=this.animEvaluator;if(s){for(let i=0;i<s.clips.length;++i){const r=s.clips[i];r.speed=this.speed,this.playing?r.resume():r.pause()}this.blending&&s.clips.length>1&&(s.clips[1].blendWeight=this.blend),s.update(e)}this.blending&&this.blend===1&&(this.blending=!1)}}class F2{constructor(){this.enabled=!0}}const Yf=["enabled"];class N2 extends ht{constructor(t){super(t),this.id="animation",this.ComponentType=ev,this.DataType=F2,this.schema=Yf,this.on("beforeremove",this.onBeforeRemove,this),this.app.systems.on("update",this.onUpdate,this)}initializeComponentData(t,e,s){s=["activate","enabled","loop","speed","assets"];for(const i of s)e.hasOwnProperty(i)&&(t[i]=e[i]);super.initializeComponentData(t,e,Yf)}cloneComponent(t,e){this.addComponent(e,{}),e.animation.assets=t.animation.assets.slice(),e.animation.speed=t.animation.speed,e.animation.loop=t.animation.loop,e.animation.activate=t.animation.activate,e.animation.enabled=t.animation.enabled;const s={},i=t.animation.animations;for(const n in i)i.hasOwnProperty(n)&&(s[n]=i[n]);e.animation.animations=s;const r={},a=t.animation.animationsIndex;for(const n in a)a.hasOwnProperty(n)&&(r[n]=a[n]);return e.animation.animationsIndex=r,e.animation}onBeforeRemove(t,e){e.onBeforeRemove()}onUpdate(t){const e=this.store;for(const s in e)if(e.hasOwnProperty(s)){const i=e[s];i.data.enabled&&i.entity.enabled&&i.entity.animation.update(t)}}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}we._buildAccessors(ev.prototype,Yf);class al{constructor(t,e,s,i,r=1){this._state=t,this._parent=e,this._name=s,Array.isArray(i)?(this._point=new J(i[0],i[1]),this._pointLength=this._point.length()):(this._point=i,this._pointLength=i),this._speed=r,this._weightedSpeed=1,this._weight=1,this._animTrack=null}get parent(){return this._parent}get name(){return this._name}get path(){return this._parent?`${this._parent.path}.${this._name}`:this._name}get point(){return this._point}get pointLength(){return this._pointLength}set weight(t){this._weight=t}get weight(){return this._parent?this._parent.weight*this._weight:this._weight}get normalizedWeight(){const t=this._state.totalWeight;return t===0?0:this.weight/t}get speed(){return this._weightedSpeed*this._speed}get absoluteSpeed(){return Math.abs(this._speed)}set weightedSpeed(t){this._weightedSpeed=t}get weightedSpeed(){return this._weightedSpeed}set animTrack(t){this._animTrack=t}get animTrack(){return this._animTrack}}class Xn extends al{constructor(t,e,s,i,r,a,n,o,c){super(t,e,s,i),this._parameters=r,this._parameterValues=new Array(r.length),this._children=[],this._findParameter=c,this._syncAnimations=n!==!1,this._pointCache={};for(let d=0;d<a.length;d++){const f=a[d];f.children?this._children.push(o(f.type,t,this,f.name,1,f.parameter?[f.parameter]:f.parameters,f.children,f.syncAnimations,o,c)):this._children.push(new al(t,this,f.name,f.point,f.speed))}}get weight(){return this.calculateWeights(),this._parent?this._parent.weight*this._weight:this._weight}get syncAnimations(){return this._syncAnimations}getChild(t){for(let e=0;e<this._children.length;e++)if(this._children[e].name===t)return this._children[e];return null}updateParameterValues(){let t=!0;for(let e=0;e<this._parameterValues.length;e++){const s=this._findParameter(this._parameters[e]).value;this._parameterValues[e]!==s&&(this._parameterValues[e]=s,t=!1)}return t}getNodeWeightedDuration(t){return this._children[t].animTrack.duration/this._children[t].speedMultiplier*this._children[t].weight}getNodeCount(){let t=0;for(let e=0;e<this._children.length;e++)this._children[e].constructor===Xn?t+=this._children[e].getNodeCount():t++;return t}}class k2 extends Xn{constructor(t,e,s,i,r,a,n,o,c){a.sort((d,f)=>d.point-f.point),super(t,e,s,i,r,a,n,o,c)}calculateWeights(){if(this.updateParameterValues())return;let t=0;this._children[0].weight=0;for(let e=0;e<this._children.length;e++){const s=this._children[e];if(e!==this._children.length-1){const i=this._children[e+1];if(s.point===i.point)s.weight=.5,i.weight=.5;else if(Y.between(this._parameterValues[0],s.point,i.point,!0)){const r=Math.abs(s.point-i.point),a=Math.abs(s.point-this._parameterValues[0]),n=(r-a)/r;s.weight=n,i.weight=1-n}else i.weight=0}this._syncAnimations&&(t+=s.animTrack.duration/s.absoluteSpeed*s.weight)}if(this._syncAnimations)for(let e=0;e<this._children.length;e++){const s=this._children[e];s.weightedSpeed=s.animTrack.duration/s.absoluteSpeed/t}}}const Ui=class Ui extends Xn{pointDistanceCache(t,e){const s=`${t}${e}`;return this._pointCache[s]||(this._pointCache[s]=this._children[e].point.clone().sub(this._children[t].point)),this._pointCache[s]}calculateWeights(){if(this.updateParameterValues())return;let t,e;Ui._p.set(...this._parameterValues),t=0,e=0;for(let s=0;s<this._children.length;s++){const i=this._children[s],r=i.point;Ui._pip.set(Ui._p.x,Ui._p.y).sub(r);let a=Number.MAX_VALUE;for(let n=0;n<this._children.length;n++){if(s===n)continue;const o=this.pointDistanceCache(s,n),c=Y.clamp(1-Ui._pip.dot(o)/o.lengthSq(),0,1);c<a&&(a=c)}i.weight=a,t+=a,this._syncAnimations&&(e+=i.animTrack.duration/i.absoluteSpeed*i.weight)}for(let s=0;s<this._children.length;s++){const i=this._children[s];i.weight=i._weight/t,this._syncAnimations&&(i.weightedSpeed=i.animTrack.duration/i.absoluteSpeed/e)}}};h(Ui,"_p",new J),h(Ui,"_pip",new J);let Kf=Ui;const Bi=class Bi extends Xn{pointCache(t,e){const s=`${t}${e}`;return this._pointCache[s]||(this._pointCache[s]=new J((this._children[e].pointLength-this._children[t].pointLength)/((this._children[e].pointLength+this._children[t].pointLength)/2),J.angleRad(this._children[t].point,this._children[e].point)*2)),this._pointCache[s]}calculateWeights(){if(this.updateParameterValues())return;let t,e;Bi._p.set(...this._parameterValues);const s=Bi._p.length();t=0,e=0;for(let i=0;i<this._children.length;i++){const r=this._children[i],a=r.point,n=r.pointLength;let o=Number.MAX_VALUE;for(let c=0;c<this._children.length;c++){if(i===c)continue;const d=this.pointCache(i,c),f=this._children[c].pointLength;Bi._pip.set((s-n)/((f+n)/2),J.angleRad(a,Bi._p)*2);const u=Y.clamp(1-Math.abs(Bi._pip.dot(d)/d.lengthSq()),0,1);u<o&&(o=u)}r.weight=o,t+=o,this._syncAnimations&&(e+=r.animTrack.duration/r.absoluteSpeed*r.weight)}for(let i=0;i<this._children.length;i++){const r=this._children[i];if(r.weight=r._weight/t,this._syncAnimations){const a=r.animTrack.duration/e*t;r.weightedSpeed=r.absoluteSpeed*a}}}};h(Bi,"_p",new J),h(Bi,"_pip",new J);let Zf=Bi;class U2 extends Xn{calculateWeights(){if(this.updateParameterValues())return;let t=0,e=0;for(let s=0;s<this._children.length;s++)if(t+=Math.max(this._parameterValues[s],0),this._syncAnimations){const i=this._children[s];e+=i.animTrack.duration/i.absoluteSpeed*i.weight}for(let s=0;s<this._children.length;s++){const i=this._children[s],r=Math.max(this._parameterValues[s],0);t?(i.weight=r/t,this._syncAnimations&&(i.weightedSpeed=i.animTrack.duration/i.absoluteSpeed/e)):(i.weight=0,this._syncAnimations&&(i.weightedSpeed=0))}}}class Z_{constructor(t,e,s=1,i=!0,r){h(this,"_animations",{});h(this,"_animationList",[]);this._controller=t,this._name=e,this._speed=s,this._loop=i,this._hasAnimations=!1,r?this._blendTree=this._createTree(r.type,this,null,e,1,r.parameter?[r.parameter]:r.parameters,r.children,r.syncAnimations,this._createTree,this._controller.findParameter):this._blendTree=new al(this,null,e,1,s)}_createTree(t,e,s,i,r,a,n,o,c,d){switch(t){case I2:return new k2(e,s,i,r,a,n,o,c,d);case L2:return new Kf(e,s,i,r,a,n,o,c,d);case M2:return new Zf(e,s,i,r,a,n,o,c,d);case R2:return new U2(e,s,i,r,a,n,o,c,d)}y.error(`Invalid anim blend type: ${t}`)}_getNodeFromPath(t){let e=this._blendTree;for(let s=1;s<t.length;s++)e=e.getChild(t[s]);return e}addAnimation(t,e){const s=t.join("."),i=this._animationList.findIndex(r=>r.path===s);if(i>=0)this._animationList[i].animTrack=e;else{const r=this._getNodeFromPath(t);r.animTrack=e,this._animationList.push(r)}this._updateHasAnimations()}_updateHasAnimations(){this._hasAnimations=this._animationList.length>0&&this._animationList.every(t=>t.animTrack&&t.animTrack!==Ji.EMPTY)}get name(){return this._name}set animations(t){this._animationList=t,this._updateHasAnimations()}get animations(){return this._animationList}get hasAnimations(){return this._hasAnimations}set speed(t){this._speed=t}get speed(){return this._speed}set loop(t){this._loop=t}get loop(){return this._loop}get nodeCount(){return!this._blendTree||this._blendTree.constructor===al?1:this._blendTree.getNodeCount()}get playable(){return cc.indexOf(this.name)!==-1||this.animations.length===this.nodeCount}get looping(){if(this.animations.length>0){const t=`${this.name}.${this.animations[0].animTrack.name}`,e=this._controller.animEvaluator.findClip(t);if(e)return e.loop}return!1}get totalWeight(){let t=0;for(let e=0;e<this.animations.length;e++)t+=this.animations[e].weight;return t}get timelineDuration(){let t=0;for(let e=0;e<this.animations.length;e++){const s=this.animations[e];s.animTrack.duration>t&&(t=s.animTrack.duration)}return t}}class dc{constructor({from:t,to:e,time:s=0,priority:i=0,conditions:r=[],exitTime:a=null,transitionOffset:n=null,interruptionSource:o=Ky}){this._from=t,this._to=e,this._time=s,this._priority=i,this._conditions=r,this._exitTime=a,this._transitionOffset=n,this._interruptionSource=o}get from(){return this._from}set to(t){this._to=t}get to(){return this._to}get time(){return this._time}get priority(){return this._priority}get conditions(){return this._conditions}get exitTime(){return this._exitTime}get transitionOffset(){return this._transitionOffset}get interruptionSource(){return this._interruptionSource}get hasExitTime(){return!!this.exitTime}}class B2{constructor(t,e,s,i,r,a,n){h(this,"_states",{});h(this,"_stateNames",[]);h(this,"_findTransitionsFromStateCache",{});h(this,"_findTransitionsBetweenStatesCache",{});h(this,"_previousStateName",null);h(this,"_activeStateName",So);h(this,"_activeStateDuration",0);h(this,"_activeStateDurationDirty",!0);h(this,"_playing",!1);h(this,"_activate");h(this,"_transitions");h(this,"_currTransitionTime",1);h(this,"_totalTransitionTime",1);h(this,"_isTransitioning",!1);h(this,"_transitionInterruptionSource",Ky);h(this,"_transitionPreviousStates",[]);h(this,"_timeInState",0);h(this,"_timeInStateBefore",0);h(this,"findParameter",t=>this._findParameter(t));this._animEvaluator=t,this._eventHandler=r,this._findParameter=a,this._consumeTrigger=n;for(let o=0;o<e.length;o++)this._states[e[o].name]=new Z_(this,e[o].name,e[o].speed,e[o].loop,e[o].blendTree),this._stateNames.push(e[o].name);this._transitions=s.map(o=>new dc({...o})),this._activate=i}get animEvaluator(){return this._animEvaluator}set activeState(t){this._activeStateName=t}get activeState(){return this._findState(this._activeStateName)}get activeStateName(){return this._activeStateName}get activeStateAnimations(){return this.activeState.animations}set previousState(t){this._previousStateName=t}get previousState(){return this._findState(this._previousStateName)}get previousStateName(){return this._previousStateName}get playable(){let t=!0;for(let e=0;e<this._stateNames.length;e++)this._states[this._stateNames[e]].playable||(t=!1);return t}set playing(t){this._playing=t}get playing(){return this._playing}get activeStateProgress(){return this._getActiveStateProgressForTime(this._timeInState)}get activeStateDuration(){if(this._activeStateDurationDirty){let t=0;for(let e=0;e<this.activeStateAnimations.length;e++){const s=this._animEvaluator.findClip(this.activeStateAnimations[e].name);s&&(t=Math.max(t,s.track.duration))}this._activeStateDuration=t,this._activeStateDurationDirty=!1}return this._activeStateDuration}set activeStateCurrentTime(t){this._timeInStateBefore=t,this._timeInState=t;for(let e=0;e<this.activeStateAnimations.length;e++){const s=this.animEvaluator.findClip(this.activeStateAnimations[e].name);s&&(s.time=t)}}get activeStateCurrentTime(){return this._timeInState}get transitioning(){return this._isTransitioning}get transitionProgress(){return this._currTransitionTime/this._totalTransitionTime}get states(){return this._stateNames}assignMask(t){return this._animEvaluator.assignMask(t)}_findState(t){return this._states[t]}_getActiveStateProgressForTime(t){if(this.activeStateName===So||this.activeStateName===qf||this.activeStateName===Xr)return 1;const e=this._animEvaluator.findClip(this.activeStateAnimations[0].name);return e?e.progressForTime(t):null}_findTransitionsFromState(t){let e=this._findTransitionsFromStateCache[t];return e||(e=this._transitions.filter(s=>s.from===t),il(e),this._findTransitionsFromStateCache[t]=e),e}_findTransitionsBetweenStates(t,e){let s=this._findTransitionsBetweenStatesCache[`${t}->${e}`];return s||(s=this._transitions.filter(i=>i.from===t&&i.to===e),il(s),this._findTransitionsBetweenStatesCache[`${t}->${e}`]=s),s}_transitionHasConditionsMet(t){const e=t.conditions;for(let s=0;s<e.length;s++){const i=e[s],r=this._findParameter(i.parameterName);switch(i.predicate){case E2:if(!(r.value>i.value))return!1;break;case b2:if(!(r.value<i.value))return!1;break;case A2:if(!(r.value>=i.value))return!1;break;case C2:if(!(r.value<=i.value))return!1;break;case P2:if(r.value!==i.value)return!1;break;case D2:if(r.value===i.value)return!1;break}}return!0}_findTransition(t,e){let s=[];if(t&&e)s=s.concat(this._findTransitionsBetweenStates(t,e));else if(!this._isTransitioning)s=s.concat(this._findTransitionsFromState(this._activeStateName)),s=s.concat(this._findTransitionsFromState(Xr));else switch(this._transitionInterruptionSource){case v2:s=s.concat(this._findTransitionsFromState(this._previousStateName)),s=s.concat(this._findTransitionsFromState(Xr));break;case x2:s=s.concat(this._findTransitionsFromState(this._activeStateName)),s=s.concat(this._findTransitionsFromState(Xr));break;case T2:s=s.concat(this._findTransitionsFromState(this._previousStateName)),s=s.concat(this._findTransitionsFromState(this._activeStateName)),s=s.concat(this._findTransitionsFromState(Xr));break;case w2:s=s.concat(this._findTransitionsFromState(this._activeStateName)),s=s.concat(this._findTransitionsFromState(this._previousStateName)),s=s.concat(this._findTransitionsFromState(Xr));break}if(s=s.filter(i=>{if(i.to===this.activeStateName)return!1;if(i.hasExitTime){let r=this._getActiveStateProgressForTime(this._timeInStateBefore),a=this._getActiveStateProgressForTime(this._timeInState);if(i.exitTime<1&&this.activeState.loop&&(r-=Math.floor(r),a-=Math.floor(a)),a===r){if(a!==i.exitTime)return null}else if(!(i.exitTime>r&&i.exitTime<=a))return null}return this._transitionHasConditionsMet(i)}),s.length>0){const i=s[0];if(i.to===qf){const r=this._findTransitionsFromState(So)[0];i.to=r.to}return i}return null}updateStateFromTransition(t){let e,s,i;this.previousState=t.from?this.activeStateName:null,this.activeState=t.to,this._activeStateDurationDirty=!0;for(let c=0;c<t.conditions.length;c++){const d=t.conditions[c];this._findParameter(d.parameterName).type===Mh&&this._consumeTrigger(d.parameterName)}if(this.previousState){this._isTransitioning||(this._transitionPreviousStates=[]),this._transitionPreviousStates.push({name:this._previousStateName,weight:1});const c=Math.min(this._totalTransitionTime!==0?this._currTransitionTime/this._totalTransitionTime:1,1);for(let d=0;d<this._transitionPreviousStates.length;d++){this._isTransitioning?d!==this._transitionPreviousStates.length-1?this._transitionPreviousStates[d].weight*=1-c:this._transitionPreviousStates[d].weight=c:this._transitionPreviousStates[d].weight=1,e=this._findState(this._transitionPreviousStates[d].name);for(let f=0;f<e.animations.length;f++)s=e.animations[f],i=this._animEvaluator.findClip(`${s.name}.previous.${d}`),i||(i=this._animEvaluator.findClip(s.name),i.name=`${s.name}.previous.${d}`),d!==this._transitionPreviousStates.length-1&&i.pause()}}this._isTransitioning=!0,this._totalTransitionTime=t.time,this._currTransitionTime=0,this._transitionInterruptionSource=t.interruptionSource;const r=this.activeState,a=t.transitionOffset&&t.transitionOffset>0&&t.transitionOffset<1;let n=0,o=0;if(a){const c=r.timelineDuration*t.transitionOffset;n=c,o=c}this._timeInState=n,this._timeInStateBefore=o;for(let c=0;c<r.animations.length;c++){if(i=this._animEvaluator.findClip(r.animations[c].name),i)i.reset();else{const d=Number.isFinite(r.animations[c].speed)?r.animations[c].speed:r.speed;i=new hc(r.animations[c].animTrack,this._timeInState,d,!0,r.loop,this._eventHandler),i.name=r.animations[c].name,this._animEvaluator.addClip(i)}if(t.time>0?i.blendWeight=0:i.blendWeight=r.animations[c].normalizedWeight,i.play(),a)i.time=r.timelineDuration*t.transitionOffset;else{const d=r.speed>=0?0:this.activeStateDuration;i.time=d}}}_transitionToState(t){if(!this._findState(t))return;let e=this._findTransition(this._activeStateName,t);e||(this._animEvaluator.removeClips(),e=new dc({from:null,to:t})),this.updateStateFromTransition(e)}assignAnimation(t,e,s,i){const r=t.split(".");let a=this._findState(r[0]);a||(a=new Z_(this,r[0],s),this._states[r[0]]=a,this._stateNames.push(r[0])),a.addAnimation(r,e),this._animEvaluator.updateClipTrack(a.name,e),s!==void 0&&(a.speed=s),i!==void 0&&(a.loop=i),!this._playing&&this._activate&&this.playable&&this.play(),this._activeStateDurationDirty=!0}removeNodeAnimations(t){if(cc.indexOf(t)!==-1)return!1;const e=this._findState(t);return e?(e.animations=[],!0):(y.error("Attempting to unassign animation tracks from a state that does not exist.",t),!1)}play(t){t&&this._transitionToState(t),this._playing=!0}pause(){this._playing=!1}reset(){this._previousStateName=null,this._activeStateName=So,this._playing=!1,this._currTransitionTime=1,this._totalTransitionTime=1,this._isTransitioning=!1,this._timeInState=0,this._timeInStateBefore=0,this._animEvaluator.removeClips()}rebind(){this._animEvaluator.rebind()}update(t){if(!this._playing)return;let e,s,i;(this.activeState.loop||this._timeInState<this.activeStateDuration)&&(this._timeInStateBefore=this._timeInState,this._timeInState+=t*this.activeState.speed,!this.activeState.loop&&this._timeInState>this.activeStateDuration&&(this._timeInState=this.activeStateDuration,t=this.activeStateDuration-this._timeInStateBefore));const r=this._findTransition(this._activeStateName);if(r&&this.updateStateFromTransition(r),this._isTransitioning)if(this._currTransitionTime+=t,this._currTransitionTime<=this._totalTransitionTime){const a=this._totalTransitionTime!==0?this._currTransitionTime/this._totalTransitionTime:1;for(let n=0;n<this._transitionPreviousStates.length;n++){e=this._findState(this._transitionPreviousStates[n].name);const o=this._transitionPreviousStates[n].weight;for(let c=0;c<e.animations.length;c++)s=e.animations[c],i=this._animEvaluator.findClip(`${s.name}.previous.${n}`),i&&(i.blendWeight=(1-a)*s.normalizedWeight*o)}e=this.activeState;for(let n=0;n<e.animations.length;n++)s=e.animations[n],this._animEvaluator.findClip(s.name).blendWeight=a*s.normalizedWeight}else{this._isTransitioning=!1;const a=this.activeStateAnimations.length,n=this._animEvaluator.clips.length;for(let o=0;o<n-a;o++)this._animEvaluator.removeClip(0);this._transitionPreviousStates=[],e=this.activeState;for(let o=0;o<e.animations.length;o++)s=e.animations[o],i=this._animEvaluator.findClip(s.name),i&&(i.blendWeight=s.normalizedWeight)}else if(this.activeState._blendTree.constructor!==al){e=this.activeState;for(let a=0;a<e.animations.length;a++)s=e.animations[a],i=this._animEvaluator.findClip(s.name),i&&(i.blendWeight=s.normalizedWeight,s.parent.syncAnimations&&(i.speed=s.speed))}this._animEvaluator.update(t,this.activeState.hasAnimations)}}const Jd=new J,hh=new A,co=new oe,fo=new ae,uo=new ue;class Ni extends gr{constructor(t,e,s,i,r){super(e),this.animComponent=t,this._mask=i,this.layerName=s,this.layerIndex=r}static _packFloat(t){return t[0]}static _packBoolean(t){return!!t[0]}static _packVec2(t){return Jd.x=t[0],Jd.y=t[1],Jd}static _packVec3(t){return hh.x=t[0],hh.y=t[1],hh.z=t[2],hh}static _packVec4(t){return co.x=t[0],co.y=t[1],co.z=t[2],co.w=t[3],co}static _packColor(t){return fo.r=t[0],fo.g=t[1],fo.b=t[2],fo.a=t[3],fo}static _packQuat(t){return uo.x=t[0],uo.y=t[1],uo.z=t[2],uo.w=t[3],uo}resolve(t){const e=sa.encode(t.entityPath,t.component,t.propertyPath);let s=this.targetCache[e];if(s)return s;let i,r,a;switch(t.component){case"entity":i=this._getEntityFromHierarchy(t.entityPath),a=sa.encode(i.path,"entity",t.propertyPath),r=i;break;case"graph":if(r=this.findNode(t),!r)return null;a=sa.encode(r.path,"graph",t.propertyPath);break;default:if(i=this._getEntityFromHierarchy(t.entityPath),r=i.findComponent(t.component),!r)return null;a=sa.encode(i.path,t.component,t.propertyPath);break}return s=this._createAnimTargetForProperty(r,t.propertyPath,a),this.targetCache[e]=s,s}update(t){const e=this.activeNodes;if(e)for(let s=0;s<e.length;s++)e[s]._dirtifyLocal()}_getEntityFromHierarchy(t){if(!this.animComponent.entity.name===t[0])return null;const e=this.animComponent.entity;return t.length===1?e:e._parent.findByPath(t)}_resolvePath(t,e,s){const i=e.length-(s?0:1);for(let r=0;r<i;r++)t=t[e[r]];return t}_setter(t,e,s){const i=this._resolvePath(t,e),r=e[e.length-1],a=`set${r.substring(0,1).toUpperCase()}${r.substring(1)}`;if(i[a]){let c=i[`get${r.substring(0,1).toUpperCase()}${r.substring(1)}`].bind(i)();c=[c.x,c.y,c.z,c.w];const d=i[a].bind(i);return{set:f=>{d(s(f))},get:()=>c}}const n=i[r];if(typeof n=="object"&&n.hasOwnProperty("copy"))return function(o){n.copy(s(o))};if([J,A,oe,ae,ue].indexOf(i.constructor)!==-1&&e.length>1){const o=e.length>2?this._resolvePath(t,e.slice(0,-1)):t,c=e[e.length-2];return function(d){i[r]=s(d),o[c]=i}}return function(o){i[r]=s(o)}}_createAnimTargetForProperty(t,e,s){if(this.handlers&&e[0].startsWith("weight."))return this.handlers.weight(t,e[0].replace("weight.",""));if(this.handlers&&e[0]==="material"&&e.length===2){const o=e[1];if(o.endsWith("Map"))return this.handlers.materialTexture(t,o)}const i=this._resolvePath(t,e,!0);if(typeof i>"u")return null;let r,a,n;if(typeof i=="number")r=this._setter(t,e,Ni._packFloat),a="vector",n=1;else if(typeof i=="boolean")r=this._setter(t,e,Ni._packBoolean),a="vector",n=1;else if(typeof i=="object")switch(i.constructor){case J:r=this._setter(t,e,Ni._packVec2),a="vector",n=2;break;case A:r=this._setter(t,e,Ni._packVec3),a="vector",n=3;break;case oe:r=this._setter(t,e,Ni._packVec4),a="vector",n=4;break;case ae:r=this._setter(t,e,Ni._packColor),a="vector",n=4;break;case ue:r=this._setter(t,e,Ni._packQuat),a="quaternion",n=4;break;default:return null}return e.indexOf("material")!==-1?new jf(o=>{r(o),t.material.update()},a,n,s):new jf(r,a,n,s)}rebind(){this.targetCache={},this.visitedFallbackGraphPaths={},this.animComponent.rootBone?this.graph=this.animComponent.rootBone:this.graph=this.animComponent.entity;const t={},e=function(s){t[s.name]=s;for(let i=0;i<s.children.length;++i)e(s.children[i])};e(this.graph),this.nodes=t}}class z2{constructor(t,e,s,i=1,r=Zy){h(this,"_name");h(this,"_controller");h(this,"_component");h(this,"_weight");h(this,"_blendType");h(this,"_mask",null);h(this,"_blendTime",0);h(this,"_blendTimeElapsed",0);h(this,"_startingWeight",0);h(this,"_targetWeight",0);this._name=t,this._controller=e,this._component=s,this._weight=i,this._blendType=r}get name(){return this._name}set playing(t){this._controller.playing=t}get playing(){return this._controller.playing}get playable(){return this._controller.playable}get activeState(){return this._controller.activeStateName}get previousState(){return this._controller.previousStateName}get activeStateProgress(){return this._controller.activeStateProgress}get activeStateDuration(){return this._controller.activeStateDuration}set activeStateCurrentTime(t){const e=this._controller,s=e.playing;e.playing=!0,e.activeStateCurrentTime=t,s||e.update(0),e.playing=s}get activeStateCurrentTime(){return this._controller.activeStateCurrentTime}get transitioning(){return this._controller.transitioning}get transitionProgress(){return this.transitioning?this._controller.transitionProgress:null}get states(){return this._controller.states}set weight(t){this._weight=t,this._component.dirtifyTargets()}get weight(){return this._weight}set blendType(t){t!==this._blendType&&(this._blendType=t,this._controller.normalizeWeights&&this._component.rebind())}get blendType(){return this._blendType}set mask(t){this._controller.assignMask(t)&&this._component.rebind(),this._mask=t}get mask(){return this._mask}play(t){this._controller.play(t)}pause(){this._controller.pause()}reset(){this._controller.reset()}rebind(){this._controller.rebind()}update(t){this._blendTime&&(this._blendTimeElapsed<this._blendTime?(this.weight=Y.lerp(this._startingWeight,this._targetWeight,this._blendTimeElapsed/this._blendTime),this._blendTimeElapsed+=t):(this.weight=this._targetWeight,this._blendTime=0,this._blendTimeElapsed=0,this._startingWeight=0,this._targetWeight=0)),this._controller.update(t)}blendToWeight(t,e){this._startingWeight=this.weight,this._targetWeight=t,this._blendTime=Math.max(0,e),this._blendTimeElapsed=0}assignAnimation(t,e,s,i){if(!(e instanceof Ji)){y.error("assignAnimation: animTrack supplied to function was not of type AnimTrack");return}this._controller.assignAnimation(t,e,s,i),this._controller._transitions.length===0&&this._controller._transitions.push(new dc({from:"START",to:t})),this._component.activate&&this._component.playable&&(this._component.playing=!0)}removeNodeAnimations(t){this._controller.removeNodeAnimations(t)&&(this._component.playing=!1)}getAnimationAsset(t){return this._component.animationAssets[`${this.name}:${t}`]}transition(t,e=0,s=null){this._controller.updateStateFromTransition(new dc({from:this._controller.activeStateName,to:t,time:e,transitionOffset:s}))}}class Lh{constructor(t){if(this._layers=[],this._parameters={},Array.isArray(t.layers))this._layers=t.layers;else for(const e in t.layers){const s=t.layers[e],i={name:s.name,blendType:s.blendType,weight:s.weight,states:[],transitions:[]};for(let r=0;r<s.states.length;r++)i.states.push(t.states[s.states[r]]);for(let r=0;r<s.transitions.length;r++){const a=t.transitions[s.transitions[r]];if(a.conditions&&!Array.isArray(a.conditions)){const n=Object.keys(a.conditions),o=[];for(let c=0;c<n.length;c++){const d=a.conditions[n[c]];d.parameterName&&o.push(d)}a.conditions=o}Number.isInteger(a.from)&&(a.from=t.states[a.from].name),Number.isInteger(a.to)&&(a.to=t.states[a.to].name),i.transitions.push(a)}this._layers.push(i)}for(const e in t.parameters){const s=t.parameters[e];this._parameters[s.name]={type:s.type,value:s.value}}}get parameters(){return Object.assign({},this._parameters)}get layers(){return this._layers}}class tv extends we{constructor(){super(...arguments);h(this,"_stateGraphAsset",null);h(this,"_animationAssets",{});h(this,"_speed",1);h(this,"_activate",!0);h(this,"_playing",!1);h(this,"_rootBone",null);h(this,"_stateGraph",null);h(this,"_layers",[]);h(this,"_layerIndices",{});h(this,"_parameters",{});h(this,"_targets",{});h(this,"_consumedTriggers",new Set);h(this,"_normalizeWeights",!1);h(this,"findParameter",e=>this._parameters[e]);h(this,"consumeTrigger",e=>{this._consumedTriggers.add(e)})}set stateGraphAsset(e){if(e===null){this.removeStateGraph();return}this._stateGraphAsset&&this.system.app.assets.get(this._stateGraphAsset).off("change",this._onStateGraphAssetChangeEvent,this);let s,i;e instanceof _e?(s=e.id,i=this.system.app.assets.get(s),i||(this.system.app.assets.add(e),i=this.system.app.assets.get(s))):(s=e,i=this.system.app.assets.get(s)),!(!i||this._stateGraphAsset===s)&&(i.resource?(this._stateGraph=i.resource,this.loadStateGraph(this._stateGraph),i.on("change",this._onStateGraphAssetChangeEvent,this)):(i.once("load",r=>{this._stateGraph=r.resource,this.loadStateGraph(this._stateGraph)}),i.on("change",this._onStateGraphAssetChangeEvent,this),this.system.app.assets.load(i)),this._stateGraphAsset=s)}get stateGraphAsset(){return this._stateGraphAsset}set normalizeWeights(e){this._normalizeWeights=e,this.unbind()}get normalizeWeights(){return this._normalizeWeights}set animationAssets(e){this._animationAssets=e,this.loadAnimationAssets()}get animationAssets(){return this._animationAssets}set speed(e){this._speed=e}get speed(){return this._speed}set activate(e){this._activate=e}get activate(){return this._activate}set playing(e){this._playing=e}get playing(){return this._playing}set rootBone(e){if(typeof e=="string"){const s=this.entity.root.findByGuid(e);y.assert(s,`rootBone entity for supplied guid:${e} cannot be found in the scene`),this._rootBone=s}else e instanceof lt?this._rootBone=e:this._rootBone=null;this.rebind()}get rootBone(){return this._rootBone}set stateGraph(e){this._stateGraph=e}get stateGraph(){return this._stateGraph}get layers(){return this._layers}set layerIndices(e){this._layerIndices=e}get layerIndices(){return this._layerIndices}set parameters(e){this._parameters=e}get parameters(){return this._parameters}set targets(e){this._targets=e}get targets(){return this._targets}get playable(){for(let e=0;e<this._layers.length;e++)if(!this._layers[e].playable)return!1;return!0}get baseLayer(){return this._layers.length>0?this._layers[0]:null}_onStateGraphAssetChangeEvent(e){const s=this.animationAssets,i=this.layers.map(r=>r.mask);this.removeStateGraph(),this._stateGraph=new Lh(e._data),this.loadStateGraph(this._stateGraph),this.animationAssets=s,this.loadAnimationAssets(),this.layers.forEach((r,a)=>{r.mask=i[a]}),this.rebind()}dirtifyTargets(){const e=Object.values(this._targets);for(let s=0;s<e.length;s++)e[s].dirty=!0}_addLayer({name:e,states:s,transitions:i,weight:r,mask:a,blendType:n}){let o;this.rootBone?o=this.rootBone:o=this.entity;const c=this._layers.length,d=new Ni(this,o,e,a,c),f=new Qy(d),u=new B2(f,s,i,this._activate,this,this.findParameter,this.consumeTrigger);return this._layers.push(new z2(e,u,this,r,n)),this._layerIndices[e]=c,this._layers[c]}addLayer(e,s,i,r){const a=this.findAnimationLayer(e);if(a)return a;const n=[{name:"START",speed:1}],o=[];return this._addLayer({name:e,states:n,transitions:o,weight:s,mask:i,blendType:r})}_assignParameters(e){this._parameters={};const s=Object.keys(e.parameters);for(let i=0;i<s.length;i++){const r=s[i];this._parameters[r]={type:e.parameters[r].type,value:e.parameters[r].value}}}loadStateGraph(e){this._stateGraph=e,this._assignParameters(e),this._layers=[];let s=!1;for(let i=0;i<e.layers.length;i++){const r=e.layers[i];this._addLayer({...r}),r.states.some(a=>a.blendTree)&&(s=!0)}s||this.setupAnimationAssets()}setupAnimationAssets(){for(let e=0;e<this._layers.length;e++){const s=this._layers[e],i=s.name;for(let r=0;r<s.states.length;r++){const a=s.states[r];if(cc.indexOf(a)===-1){const n=`${i}:${a}`;this._animationAssets[n]||(this._animationAssets[n]={asset:null})}}}this.loadAnimationAssets()}loadAnimationAssets(){for(let e=0;e<this._layers.length;e++){const s=this._layers[e];for(let i=0;i<s.states.length;i++){const r=s.states[i];if(cc.indexOf(r)!==-1)continue;const a=this._animationAssets[`${s.name}:${r}`];if(!a||!a.asset){this.findAnimationLayer(s.name).assignAnimation(r,Ji.EMPTY);continue}const n=a.asset,o=this.system.app.assets.get(n);o&&(o.resource?this.onAnimationAssetLoaded(s.name,r,o):(o.once("load",(function(c,d){return(function(f){this.onAnimationAssetLoaded(c,d,f)}).bind(this)}).bind(this)(s.name,r)),this.system.app.assets.load(o)))}}}onAnimationAssetLoaded(e,s,i){this.findAnimationLayer(e).assignAnimation(s,i.resource)}removeStateGraph(){this._stateGraph=null,this._stateGraphAsset=null,this._animationAssets={},this._layers=[],this._layerIndices={},this._parameters={},this._playing=!1,this.unbind(),this._targets={}}reset(){this._assignParameters(this._stateGraph);for(let e=0;e<this._layers.length;e++){const s=this._layers[e].playing;this._layers[e].reset(),this._layers[e].playing=s}}unbind(){this._normalizeWeights||Object.keys(this._targets).forEach(e=>{this._targets[e].unbind()})}rebind(){this._targets={};for(let e=0;e<this._layers.length;e++)this._layers[e].rebind()}findAnimationLayer(e){const s=this._layerIndices[e];return this._layers[s]||null}addAnimationState(e,s,i=1,r=!0,a="Base"){var o;this._stateGraph||this.loadStateGraph(new Lh({layers:[{name:a,states:[{name:"START",speed:1},{name:e,speed:i,loop:r,defaultState:!0}],transitions:[{from:"START",to:e}]}],parameters:{}}));const n=this.findAnimationLayer(a);n?n.assignAnimation(e,s,i,r):(o=this.addLayer(a))==null||o.assignAnimation(e,s,i,r)}assignAnimation(e,s,i,r=1,a=!0){if(!this._stateGraph&&e.indexOf(".")===-1){this.loadStateGraph(new Lh({layers:[{name:"Base",states:[{name:"START",speed:1},{name:e,speed:r,loop:a,defaultState:!0}],transitions:[{from:"START",to:e}]}],parameters:{}})),this.baseLayer.assignAnimation(e,s);return}const n=i?this.findAnimationLayer(i):this.baseLayer;if(!n){y.error("assignAnimation: Trying to assign an anim track to a layer that doesn't exist");return}n.assignAnimation(e,s,r,a)}removeNodeAnimations(e,s){const i=s?this.findAnimationLayer(s):this.baseLayer;if(!i){y.error("removeStateAnimations: Trying to remove animation tracks from a state before the state graph has been loaded. Have you called loadStateGraph?");return}i.removeNodeAnimations(e)}getParameterValue(e,s){const i=this._parameters[e];if(i&&i.type===s)return i.value;y.log(`Cannot get parameter value. No parameter found in anim controller named "${e}" of type "${s}"`)}setParameterValue(e,s,i){const r=this._parameters[e];if(r&&r.type===s){r.value=i;return}y.log(`Cannot set parameter value. No parameter found in anim controller named "${e}" of type "${s}"`)}getFloat(e){return this.getParameterValue(e,Y_)}setFloat(e,s){this.setParameterValue(e,Y_,s)}getInteger(e){return this.getParameterValue(e,j_)}setInteger(e,s){typeof s=="number"&&s%1===0?this.setParameterValue(e,j_,s):y.error("Attempting to assign non integer value to integer parameter",e,s)}getBoolean(e){return this.getParameterValue(e,K_)}setBoolean(e,s){this.setParameterValue(e,K_,!!s)}getTrigger(e){return this.getParameterValue(e,Mh)}setTrigger(e,s=!1){this.setParameterValue(e,Mh,!0),s&&this._consumedTriggers.add(e)}resetTrigger(e){this.setParameterValue(e,Mh,!1)}onBeforeRemove(){Number.isFinite(this._stateGraphAsset)&&this.system.app.assets.get(this._stateGraphAsset).off("change",this._onStateGraphAssetChangeEvent,this)}update(e){for(let s=0;s<this.layers.length;s++)this.layers[s].update(e*this.speed);this._consumedTriggers.forEach(s=>{this.parameters[s].value=!1}),this._consumedTriggers.clear()}resolveDuplicatedEntityReferenceProperties(e,s){e.rootBone&&s[e.rootBone.getGuid()]?this.rootBone=s[e.rootBone.getGuid()]:this.rebind()}}class V2{constructor(){this.enabled=!0}}const Qf=["enabled"];class G2 extends ht{constructor(t){super(t),this.id="anim",this.ComponentType=tv,this.DataType=V2,this.schema=Qf,this.on("beforeremove",this.onBeforeRemove,this),this.app.systems.on("animationUpdate",this.onAnimationUpdate,this)}initializeComponentData(t,e,s){super.initializeComponentData(t,e,Qf);const i=["animationAssets","stateGraph","layers","masks"];Object.keys(e).forEach(r=>{i.includes(r)||(t[r]=e[r])}),e.stateGraph&&(t.stateGraph=e.stateGraph,t.loadStateGraph(t.stateGraph)),e.layers&&e.layers.forEach((r,a)=>{r._controller.states.forEach(n=>{r._controller._states[n]._animationList.forEach(o=>{if(!o.animTrack||o.animTrack===Ji.EMPTY){const c=this.app.assets.get(r._component._animationAssets[`${r.name}:${o.name}`].asset);c&&!c.loaded&&c.once("load",()=>{t.layers[a].assignAnimation(o.name,c.resource)})}else t.layers[a].assignAnimation(o.name,o.animTrack)})})}),e.animationAssets&&(t.animationAssets=Object.assign(t.animationAssets,e.animationAssets)),e.masks&&Object.keys(e.masks).forEach(r=>{if(t.layers[r]){const a=e.masks[r].mask,n={};Object.keys(a).forEach(o=>{n[decodeURI(o)]=a[o]}),t.layers[r].mask=n}})}onAnimationUpdate(t){const e=this.store;for(const s in e)if(e.hasOwnProperty(s)){const i=e[s].entity.anim;i.data.enabled&&i.entity.enabled&&i.playing&&i.update(t)}}cloneComponent(t,e){let s;(!t.anim.rootBone||t.anim.rootBone===t)&&(s={},t.anim.layers.forEach((r,a)=>{if(r.mask){const n={};Object.keys(r.mask).forEach(o=>{const c=o.split("/");c.shift();const d=[e.name,...c].join("/");n[d]=r.mask[o]}),s[a]={mask:n}}}));const i={enabled:t.anim.enabled,stateGraphAsset:t.anim.stateGraphAsset,animationAssets:t.anim.animationAssets,speed:t.anim.speed,activate:t.anim.activate,playing:t.anim.playing,rootBone:t.anim.rootBone,stateGraph:t.anim.stateGraph,layers:t.anim.layers,layerIndices:t.anim.layerIndices,parameters:t.anim.parameters,normalizeWeights:t.anim.normalizeWeights,masks:s};return this.addComponent(e,i)}onBeforeRemove(t,e){e.onBeforeRemove()}destroy(){super.destroy(),this.app.systems.off("animationUpdate",this.onAnimationUpdate,this)}}we._buildAccessors(tv.prototype,Qf);class sv extends we{setCurrentListener(){if(this.enabled&&this.entity.audiolistener&&this.entity.enabled){this.system.current=this.entity;const t=this.system.current.getPosition();this.system.manager.listener.setPosition(t)}}onEnable(){this.setCurrentListener()}onDisable(){this.system.current===this.entity&&(this.system.current=null)}}class H2{constructor(){this.enabled=!0}}const iv=["enabled"];class W2 extends ht{constructor(t){super(t),this.id="audiolistener",this.ComponentType=sv,this.DataType=H2,this.schema=iv,this.manager=t.soundManager,y.assert(this.manager,"AudioListenerComponentSystem cannot be created without sound manager"),this.current=null,this.app.systems.on("update",this.onUpdate,this)}initializeComponentData(t,e,s){s=["enabled"],super.initializeComponentData(t,e,s)}onUpdate(t){if(this.current){const e=this.current.getPosition();this.manager.listener.setPosition(e);const s=this.current.getWorldTransform();this.manager.listener.setOrientation(s)}}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}we._buildAccessors(sv.prototype,iv);const Jf=0,Q_=1,Rh="group",eu="image",rv="text",Oh="stretch",$2="contain",X2="cover",dt={DEFAULT:"DEFAULT",HOVER:"HOVER",PRESSED:"PRESSED",INACTIVE:"INACTIVE"},Cl={};Cl[dt.DEFAULT]="_defaultTint";Cl[dt.HOVER]="hoverTint";Cl[dt.PRESSED]="pressedTint";Cl[dt.INACTIVE]="inactiveTint";const Pl={};Pl[dt.DEFAULT]="_defaultSpriteAsset";Pl[dt.HOVER]="hoverSpriteAsset";Pl[dt.PRESSED]="pressedSpriteAsset";Pl[dt.INACTIVE]="inactiveSpriteAsset";const Dl={};Dl[dt.DEFAULT]="_defaultSpriteFrame";Dl[dt.HOVER]="hoverSpriteFrame";Dl[dt.PRESSED]="pressedSpriteFrame";Dl[dt.INACTIVE]="inactiveSpriteFrame";class Dt extends we{constructor(e,s){super(e,s);h(this,"_visualState",dt.DEFAULT);h(this,"_isHovering",!1);h(this,"_hoveringCounter",0);h(this,"_isPressed",!1);h(this,"_defaultTint",new ae(1,1,1,1));h(this,"_defaultSpriteAsset",null);h(this,"_defaultSpriteFrame",0);h(this,"_imageEntity",null);h(this,"_evtElementAdd",null);h(this,"_evtImageEntityElementAdd",null);h(this,"_evtImageEntityElementRemove",null);h(this,"_evtImageEntityElementColor",null);h(this,"_evtImageEntityElementOpacity",null);h(this,"_evtImageEntityElementSpriteAsset",null);h(this,"_evtImageEntityElementSpriteFrame",null);this._visualState=dt.DEFAULT,this._isHovering=!1,this._hoveringCounter=0,this._isPressed=!1,this._defaultTint=new ae(1,1,1,1),this._defaultSpriteAsset=null,this._defaultSpriteFrame=0,this._toggleLifecycleListeners("on",e)}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e)}get enabled(){return this.data.enabled}set active(e){this._setValue("active",e)}get active(){return this.data.active}set imageEntity(e){if(this._imageEntity!==e){const s=typeof e=="string";if(this._imageEntity&&s&&this._imageEntity.getGuid()===e)return;this._imageEntity&&this._imageEntityUnsubscribe(),e instanceof De?this._imageEntity=e:s?this._imageEntity=this.system.app.getEntityFromIndex(e)||null:this._imageEntity=null,this._imageEntity&&this._imageEntitySubscribe(),this._imageEntity?this.data.imageEntity=this._imageEntity.getGuid():s&&e&&(this.data.imageEntity=e)}}get imageEntity(){return this._imageEntity}set hitPadding(e){this._setValue("hitPadding",e)}get hitPadding(){return this.data.hitPadding}set transitionMode(e){this._setValue("transitionMode",e)}get transitionMode(){return this.data.transitionMode}set hoverTint(e){this._setValue("hoverTint",e)}get hoverTint(){return this.data.hoverTint}set pressedTint(e){this._setValue("pressedTint",e)}get pressedTint(){return this.data.pressedTint}set inactiveTint(e){this._setValue("inactiveTint",e)}get inactiveTint(){return this.data.inactiveTint}set fadeDuration(e){this._setValue("fadeDuration",e)}get fadeDuration(){return this.data.fadeDuration}set hoverSpriteAsset(e){this._setValue("hoverSpriteAsset",e)}get hoverSpriteAsset(){return this.data.hoverSpriteAsset}set hoverSpriteFrame(e){this._setValue("hoverSpriteFrame",e)}get hoverSpriteFrame(){return this.data.hoverSpriteFrame}set pressedSpriteAsset(e){this._setValue("pressedSpriteAsset",e)}get pressedSpriteAsset(){return this.data.pressedSpriteAsset}set pressedSpriteFrame(e){this._setValue("pressedSpriteFrame",e)}get pressedSpriteFrame(){return this.data.pressedSpriteFrame}set inactiveSpriteAsset(e){this._setValue("inactiveSpriteAsset",e)}get inactiveSpriteAsset(){return this.data.inactiveSpriteAsset}set inactiveSpriteFrame(e){this._setValue("inactiveSpriteFrame",e)}get inactiveSpriteFrame(){return this.data.inactiveSpriteFrame}_setValue(e,s){const i=this.data,r=i[e];i[e]=s,this.fire("set",e,r,s)}_toggleLifecycleListeners(e,s){var i;this[e]("set_active",this._onSetActive,this),this[e]("set_transitionMode",this._onSetTransitionMode,this),this[e]("set_hoverTint",this._onSetTransitionValue,this),this[e]("set_pressedTint",this._onSetTransitionValue,this),this[e]("set_inactiveTint",this._onSetTransitionValue,this),this[e]("set_hoverSpriteAsset",this._onSetTransitionValue,this),this[e]("set_hoverSpriteFrame",this._onSetTransitionValue,this),this[e]("set_pressedSpriteAsset",this._onSetTransitionValue,this),this[e]("set_pressedSpriteFrame",this._onSetTransitionValue,this),this[e]("set_inactiveSpriteAsset",this._onSetTransitionValue,this),this[e]("set_inactiveSpriteFrame",this._onSetTransitionValue,this),e==="on"?this._evtElementAdd=this.entity.on("element:add",this._onElementComponentAdd,this):((i=this._evtElementAdd)==null||i.off(),this._evtElementAdd=null)}_onSetActive(e,s,i){s!==i&&this._updateVisualState()}_onSetTransitionMode(e,s,i){s!==i&&(this._cancelTween(),this._resetToDefaultVisualState(s),this._forceReapplyVisualState())}_onSetTransitionValue(e,s,i){s!==i&&this._forceReapplyVisualState()}_imageEntitySubscribe(){this._evtImageEntityElementAdd=this._imageEntity.on("element:add",this._onImageElementGain,this),this._imageEntity.element&&this._onImageElementGain()}_imageEntityUnsubscribe(){var e,s;(e=this._evtImageEntityElementAdd)==null||e.off(),this._evtImageEntityElementAdd=null,(s=this._imageEntity)!=null&&s.element&&this._onImageElementLose()}_imageEntityElementSubscribe(){const e=this._imageEntity.element;this._evtImageEntityElementRemove=e.once("beforeremove",this._onImageElementLose,this),this._evtImageEntityElementColor=e.on("set:color",this._onSetColor,this),this._evtImageEntityElementOpacity=e.on("set:opacity",this._onSetOpacity,this),this._evtImageEntityElementSpriteAsset=e.on("set:spriteAsset",this._onSetSpriteAsset,this),this._evtImageEntityElementSpriteFrame=e.on("set:spriteFrame",this._onSetSpriteFrame,this)}_imageEntityElementUnsubscribe(){var e,s,i,r,a;(e=this._evtImageEntityElementRemove)==null||e.off(),this._evtImageEntityElementRemove=null,(s=this._evtImageEntityElementColor)==null||s.off(),this._evtImageEntityElementColor=null,(i=this._evtImageEntityElementOpacity)==null||i.off(),this._evtImageEntityElementOpacity=null,(r=this._evtImageEntityElementSpriteAsset)==null||r.off(),this._evtImageEntityElementSpriteAsset=null,(a=this._evtImageEntityElementSpriteFrame)==null||a.off(),this._evtImageEntityElementSpriteFrame=null}_onElementComponentRemove(){this._toggleHitElementListeners("off")}_onElementComponentAdd(){this._toggleHitElementListeners("on")}_onImageElementLose(){this._imageEntityElementUnsubscribe(),this._cancelTween(),this._resetToDefaultVisualState(this.transitionMode)}_onImageElementGain(){this._imageEntityElementSubscribe(),this._storeDefaultVisualState(),this._forceReapplyVisualState()}_toggleHitElementListeners(e){if(this.entity.element){const s=e==="on";if(s&&this._hasHitElementListeners)return;this.entity.element[e]("beforeremove",this._onElementComponentRemove,this),this.entity.element[e]("mouseenter",this._onMouseEnter,this),this.entity.element[e]("mouseleave",this._onMouseLeave,this),this.entity.element[e]("mousedown",this._onMouseDown,this),this.entity.element[e]("mouseup",this._onMouseUp,this),this.entity.element[e]("touchstart",this._onTouchStart,this),this.entity.element[e]("touchend",this._onTouchEnd,this),this.entity.element[e]("touchleave",this._onTouchLeave,this),this.entity.element[e]("touchcancel",this._onTouchCancel,this),this.entity.element[e]("selectstart",this._onSelectStart,this),this.entity.element[e]("selectend",this._onSelectEnd,this),this.entity.element[e]("selectenter",this._onSelectEnter,this),this.entity.element[e]("selectleave",this._onSelectLeave,this),this.entity.element[e]("click",this._onClick,this),this._hasHitElementListeners=s}}_storeDefaultVisualState(){var s;const e=(s=this._imageEntity)==null?void 0:s.element;!e||e.type===Rh||(this._storeDefaultColor(e.color),this._storeDefaultOpacity(e.opacity),this._storeDefaultSpriteAsset(e.spriteAsset),this._storeDefaultSpriteFrame(e.spriteFrame))}_storeDefaultColor(e){this._defaultTint.r=e.r,this._defaultTint.g=e.g,this._defaultTint.b=e.b}_storeDefaultOpacity(e){this._defaultTint.a=e}_storeDefaultSpriteAsset(e){this._defaultSpriteAsset=e}_storeDefaultSpriteFrame(e){this._defaultSpriteFrame=e}_onSetColor(e){this._isApplyingTint||(this._storeDefaultColor(e),this._forceReapplyVisualState())}_onSetOpacity(e){this._isApplyingTint||(this._storeDefaultOpacity(e),this._forceReapplyVisualState())}_onSetSpriteAsset(e){this._isApplyingSprite||(this._storeDefaultSpriteAsset(e),this._forceReapplyVisualState())}_onSetSpriteFrame(e){this._isApplyingSprite||(this._storeDefaultSpriteFrame(e),this._forceReapplyVisualState())}_onMouseEnter(e){this._isHovering=!0,this._updateVisualState(),this._fireIfActive("mouseenter",e)}_onMouseLeave(e){this._isHovering=!1,this._isPressed=!1,this._updateVisualState(),this._fireIfActive("mouseleave",e)}_onMouseDown(e){this._isPressed=!0,this._updateVisualState(),this._fireIfActive("mousedown",e)}_onMouseUp(e){this._isPressed=!1,this._updateVisualState(),this._fireIfActive("mouseup",e)}_onTouchStart(e){this._isPressed=!0,this._updateVisualState(),this._fireIfActive("touchstart",e)}_onTouchEnd(e){e.event.preventDefault(),this._isPressed=!1,this._updateVisualState(),this._fireIfActive("touchend",e)}_onTouchLeave(e){this._isPressed=!1,this._updateVisualState(),this._fireIfActive("touchleave",e)}_onTouchCancel(e){this._isPressed=!1,this._updateVisualState(),this._fireIfActive("touchcancel",e)}_onSelectStart(e){this._isPressed=!0,this._updateVisualState(),this._fireIfActive("selectstart",e)}_onSelectEnd(e){this._isPressed=!1,this._updateVisualState(),this._fireIfActive("selectend",e)}_onSelectEnter(e){this._hoveringCounter++,this._hoveringCounter===1&&(this._isHovering=!0,this._updateVisualState()),this._fireIfActive("selectenter",e)}_onSelectLeave(e){this._hoveringCounter--,this._hoveringCounter===0&&(this._isHovering=!1,this._isPressed=!1,this._updateVisualState()),this._fireIfActive("selectleave",e)}_onClick(e){this._fireIfActive("click",e)}_fireIfActive(e,s){this.data.active&&this.fire(e,s)}_updateVisualState(e){const s=this._visualState,i=this._determineVisualState();if((s!==i||e)&&this.enabled)switch(this._visualState=i,s===dt.HOVER&&this._fireIfActive("hoverend"),s===dt.PRESSED&&this._fireIfActive("pressedend"),i===dt.HOVER&&this._fireIfActive("hoverstart"),i===dt.PRESSED&&this._fireIfActive("pressedstart"),this.transitionMode){case Jf:{const r=Cl[this._visualState],a=this[r];this._applyTint(a);break}case Q_:{const r=Pl[this._visualState],a=Dl[this._visualState],n=this[r],o=this[a];this._applySprite(n,o);break}}}_forceReapplyVisualState(){this._updateVisualState(!0)}_resetToDefaultVisualState(e){var s;if((s=this._imageEntity)!=null&&s.element)switch(e){case Jf:this._cancelTween(),this._applyTintImmediately(this._defaultTint);break;case Q_:this._applySprite(this._defaultSpriteAsset,this._defaultSpriteFrame);break}}_determineVisualState(){if(this.active){if(this._isPressed)return dt.PRESSED;if(this._isHovering)return dt.HOVER}else return dt.INACTIVE;return dt.DEFAULT}_applySprite(e,s){var r;const i=(r=this._imageEntity)==null?void 0:r.element;i&&(s=s||0,this._isApplyingSprite=!0,i.spriteAsset!==e&&(i.spriteAsset=e),i.spriteFrame!==s&&(i.spriteFrame=s),this._isApplyingSprite=!1)}_applyTint(e){this._cancelTween(),this.fadeDuration===0?this._applyTintImmediately(e):this._applyTintWithTween(e)}_applyTintImmediately(e){var r;const s=(r=this._imageEntity)==null?void 0:r.element;if(!e||!s||s.type===Rh)return;const i=J_(e);this._isApplyingTint=!0,i.equals(s.color)||(s.color=i),s.opacity!==e.a&&(s.opacity=e.a),this._isApplyingTint=!1}_applyTintWithTween(e){var n;const s=(n=this._imageEntity)==null?void 0:n.element;if(!e||!s||s.type===Rh)return;const i=J_(e),r=s.color,a=s.opacity;i.equals(r)&&e.a===a||(this._tweenInfo={startTime:pe(),from:new ae(r.r,r.g,r.b,a),to:e.clone(),lerpColor:new ae})}_updateTintTween(){const e=pe()-this._tweenInfo.startTime;let s=this.fadeDuration===0?1:e/this.fadeDuration;if(s=Y.clamp(s,0,1),Math.abs(s-1)>1e-5){const i=this._tweenInfo.lerpColor;i.lerp(this._tweenInfo.from,this._tweenInfo.to,s),this._applyTintImmediately(new ae(i.r,i.g,i.b,i.a))}else this._applyTintImmediately(this._tweenInfo.to),this._cancelTween()}_cancelTween(){delete this._tweenInfo}onUpdate(){this._tweenInfo&&this._updateTintTween()}onEnable(){this._isHovering=!1,this._hoveringCounter=0,this._isPressed=!1,this._toggleHitElementListeners("on"),this._forceReapplyVisualState()}onDisable(){this._toggleHitElementListeners("off"),this._resetToDefaultVisualState(this.transitionMode)}onRemove(){this._imageEntityUnsubscribe(),this._toggleLifecycleListeners("off",this.system),this.onDisable()}resolveDuplicatedEntityReferenceProperties(e,s){e.imageEntity&&(this.imageEntity=s[e.imageEntity.getGuid()])}}h(Dt,"EVENT_MOUSEDOWN","mousedown"),h(Dt,"EVENT_MOUSEUP","mouseup"),h(Dt,"EVENT_MOUSEENTER","mouseenter"),h(Dt,"EVENT_MOUSELEAVE","mouseleave"),h(Dt,"EVENT_CLICK","click"),h(Dt,"EVENT_TOUCHSTART","touchstart"),h(Dt,"EVENT_TOUCHEND","touchend"),h(Dt,"EVENT_TOUCHCANCEL","touchcancel"),h(Dt,"EVENT_TOUCHLEAVE","touchleave"),h(Dt,"EVENT_SELECTSTART","selectstart"),h(Dt,"EVENT_SELECTEND","selectend"),h(Dt,"EVENT_SELECTENTER","selectenter"),h(Dt,"EVENT_SELECTLEAVE","selectleave"),h(Dt,"EVENT_HOVERSTART","hoverstart"),h(Dt,"EVENT_HOVEREND","hoverend"),h(Dt,"EVENT_PRESSEDSTART","pressedstart"),h(Dt,"EVENT_PRESSEDEND","pressedend");function J_(l){return new ae(l.r,l.g,l.b)}class q2{constructor(){this.enabled=!0,this.active=!0,this.imageEntity=null,this.hitPadding=new oe,this.transitionMode=Jf,this.hoverTint=new ae(.75,.75,.75),this.pressedTint=new ae(.5,.5,.5),this.inactiveTint=new ae(.25,.25,.25),this.fadeDuration=0,this.hoverSpriteAsset=null,this.hoverSpriteFrame=0,this.pressedSpriteAsset=null,this.pressedSpriteFrame=0,this.inactiveSpriteAsset=null,this.inactiveSpriteFrame=0}}const eg=["enabled","active",{name:"hitPadding",type:"vec4"},"transitionMode",{name:"hoverTint",type:"rgba"},{name:"pressedTint",type:"rgba"},{name:"inactiveTint",type:"rgba"},"fadeDuration","hoverSpriteAsset","hoverSpriteFrame","pressedSpriteAsset","pressedSpriteFrame","inactiveSpriteAsset","inactiveSpriteFrame"];class j2 extends ht{constructor(t){super(t),this.id="button",this.ComponentType=Dt,this.DataType=q2,this.schema=eg,this.on("beforeremove",this._onRemoveComponent,this),this.app.systems.on("update",this.onUpdate,this)}initializeComponentData(t,e,s){t.imageEntity=e.imageEntity,super.initializeComponentData(t,e,eg)}onUpdate(t){const e=this.store;for(const s in e){const i=e[s].entity,r=i.button;r.enabled&&i.enabled&&r.onUpdate()}}_onRemoveComponent(t,e){e.onRemove()}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}const tg=new A,sg=new ue;class Qa extends we{constructor(e,s){super(e,s);h(this,"_compoundParent",null);h(this,"_hasOffset",!1);this.entity.on("insert",this._onInsert,this),this.on("set_type",this.onSetType,this),this.on("set_convexHull",this.onSetModel,this),this.on("set_halfExtents",this.onSetHalfExtents,this),this.on("set_linearOffset",this.onSetOffset,this),this.on("set_angularOffset",this.onSetOffset,this),this.on("set_radius",this.onSetRadius,this),this.on("set_height",this.onSetHeight,this),this.on("set_axis",this.onSetAxis,this),this.on("set_asset",this.onSetAsset,this),this.on("set_renderAsset",this.onSetRenderAsset,this),this.on("set_model",this.onSetModel,this),this.on("set_render",this.onSetRender,this)}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e)}get enabled(){return this.data.enabled}set type(e){this._setValue("type",e)}get type(){return this.data.type}set halfExtents(e){this._setValue("halfExtents",e)}get halfExtents(){return this.data.halfExtents}set linearOffset(e){this._setValue("linearOffset",e)}get linearOffset(){return this.data.linearOffset}set angularOffset(e){this._setValue("angularOffset",e)}get angularOffset(){return this.data.angularOffset}set radius(e){this._setValue("radius",e)}get radius(){return this.data.radius}set axis(e){this._setValue("axis",e)}get axis(){return this.data.axis}set height(e){this._setValue("height",e)}get height(){return this.data.height}set asset(e){this._setValue("asset",e)}get asset(){return this.data.asset}set renderAsset(e){this._setValue("renderAsset",e)}get renderAsset(){return this.data.renderAsset}set convexHull(e){this._setValue("convexHull",e)}get convexHull(){return this.data.convexHull}set shape(e){this._setValue("shape",e)}get shape(){return this.data.shape}set model(e){this._setValue("model",e)}get model(){return this.data.model}set render(e){this._setValue("render",e)}get render(){return this.data.render}set checkVertexDuplicates(e){this._setValue("checkVertexDuplicates",e)}get checkVertexDuplicates(){return this.data.checkVertexDuplicates}_setValue(e,s){const i=this.data,r=i[e];i[e]=s,this.fire("set",e,r,s)}onSetType(e,s,i){s!==i&&this.system.changeType(this,s,i)}onSetHalfExtents(e,s,i){const r=this.data.type;this.data.initialized&&r==="box"&&this.system.recreatePhysicalShapes(this)}onSetOffset(e,s,i){this._hasOffset=!this.data.linearOffset.equals(A.ZERO)||!this.data.angularOffset.equals(ue.IDENTITY),this.data.initialized&&this.system.recreatePhysicalShapes(this)}onSetRadius(e,s,i){const r=this.data.type;this.data.initialized&&(r==="sphere"||r==="capsule"||r==="cylinder"||r==="cone")&&this.system.recreatePhysicalShapes(this)}onSetHeight(e,s,i){const r=this.data.type;this.data.initialized&&(r==="capsule"||r==="cylinder"||r==="cone")&&this.system.recreatePhysicalShapes(this)}onSetAxis(e,s,i){const r=this.data.type;this.data.initialized&&(r==="capsule"||r==="cylinder"||r==="cone")&&this.system.recreatePhysicalShapes(this)}onSetAsset(e,s,i){const r=this.system.app.assets;if(s){const a=r.get(s);a&&a.off("remove",this.onAssetRemoved,this)}if(i){i instanceof _e&&(this.data.asset=i.id);const a=r.get(this.data.asset);a&&(a.off("remove",this.onAssetRemoved,this),a.on("remove",this.onAssetRemoved,this))}this.data.initialized&&this.data.type==="mesh"&&(i||(this.data.model=null),this.system.recreatePhysicalShapes(this))}onSetRenderAsset(e,s,i){const r=this.system.app.assets;if(s){const a=r.get(s);a&&a.off("remove",this.onRenderAssetRemoved,this)}if(i){i instanceof _e&&(this.data.renderAsset=i.id);const a=r.get(this.data.renderAsset);a&&(a.off("remove",this.onRenderAssetRemoved,this),a.on("remove",this.onRenderAssetRemoved,this))}this.data.initialized&&this.data.type==="mesh"&&(i||(this.data.render=null),this.system.recreatePhysicalShapes(this))}onSetModel(e,s,i){this.data.initialized&&this.data.type==="mesh"&&this.system.implementations.mesh.doRecreatePhysicalShape(this)}onSetRender(e,s,i){this.onSetModel(e,s,i)}onAssetRemoved(e){e.off("remove",this.onAssetRemoved,this),this.data.asset===e.id&&(this.asset=null)}onRenderAssetRemoved(e){e.off("remove",this.onRenderAssetRemoved,this),this.data.renderAsset===e.id&&(this.renderAsset=null)}getCompoundChildShapeIndex(e){const s=this.data.shape,i=s.getNumChildShapes();for(let r=0;r<i;r++){const a=s.getChildShape(r);if(Ammo.getPointer(a)===Ammo.getPointer(e))return r}return null}_onInsert(e){if(!(typeof Ammo>"u")){if(this._compoundParent)this.system.recreatePhysicalShapes(this);else if(!this.entity.rigidbody){let s=this.entity.parent;for(;s;){if(s.collision&&s.collision.type==="compound"){s.collision.shape.getNumChildShapes()===0?this.system.recreatePhysicalShapes(s.collision):this.system.recreatePhysicalShapes(this);break}s=s.parent}}}}_updateCompound(){const e=this.entity;if(e._dirtyWorld){let s=e._dirtyLocal,i=e;for(;i&&!s&&!(i.collision&&i.collision===this._compoundParent);)i._dirtyLocal&&(s=!0),i=i.parent;if(s){e.forEach(this.system.implementations.compound._updateEachDescendantTransform,e);const r=this._compoundParent.entity.rigidbody;r&&r.activate()}}}getShapePosition(){const e=this.entity.getPosition();if(this._hasOffset){const s=this.entity.getRotation(),i=this.data.linearOffset;return sg.copy(s).transformVector(i,tg),tg.add(e)}return e}getShapeRotation(){const e=this.entity.getRotation();return this._hasOffset?sg.copy(e).mul(this.data.angularOffset):e}onEnable(){if(this.data.type==="mesh"&&(this.data.asset||this.data.renderAsset)&&this.data.initialized){const e=this.system.app.assets.get(this.data.asset||this.data.renderAsset);if(e&&(!e.resource||!this.data.shape)){this.system.recreatePhysicalShapes(this);return}}if(this.entity.rigidbody)this.entity.rigidbody.enabled&&this.entity.rigidbody.enableSimulation();else if(this._compoundParent&&this!==this._compoundParent)if(this._compoundParent.shape.getNumChildShapes()===0)this.system.recreatePhysicalShapes(this._compoundParent);else{const e=this.system._getNodeTransform(this.entity,this._compoundParent.entity);this._compoundParent.shape.addChildShape(e,this.data.shape),Ammo.destroy(e),this._compoundParent.entity.rigidbody&&this._compoundParent.entity.rigidbody.activate()}else this.entity.trigger&&this.entity.trigger.enable()}onDisable(){this.entity.rigidbody?this.entity.rigidbody.disableSimulation():this._compoundParent&&this!==this._compoundParent?this._compoundParent.entity._destroying||(this.system._removeCompoundChild(this._compoundParent,this.data.shape),this._compoundParent.entity.rigidbody&&this._compoundParent.entity.rigidbody.activate()):this.entity.trigger&&this.entity.trigger.disable()}onBeforeRemove(){this.asset&&(this.asset=null),this.renderAsset&&(this.renderAsset=null),this.entity.off("insert",this._onInsert,this),this.off()}}h(Qa,"EVENT_CONTACT","contact"),h(Qa,"EVENT_COLLISIONSTART","collisionstart"),h(Qa,"EVENT_COLLISIONEND","collisionend"),h(Qa,"EVENT_TRIGGERENTER","triggerenter"),h(Qa,"EVENT_TRIGGERLEAVE","triggerleave");class Y2{constructor(){this.enabled=!0,this.type="box",this.halfExtents=new A(.5,.5,.5),this.linearOffset=new A,this.angularOffset=new ue,this.radius=.5,this.axis=1,this.height=2,this.convexHull=!1,this.asset=null,this.renderAsset=null,this.checkVertexDuplicates=!0,this.shape=null,this.model=null,this.render=null,this.initialized=!1}}const po="static",Fs="dynamic",za="kinematic",K2=2,yo=4,tu=1,ig=4,av=5,Z2=1,rg=2,Q2=4,ag=16,ng=65535,su=65533;let Ns,Br,Va;class nv{constructor(t,e,s){this.entity=e.entity,this.component=e,this.app=t,typeof Ammo<"u"&&!Ns&&(Ns=new Ammo.btVector3,Br=new Ammo.btQuaternion,Va=new Ammo.btTransform),this.initialize(s)}initialize(t){const e=this.entity,s=t.shape;if(s&&typeof Ammo<"u"){e.trigger&&e.trigger.destroy();const i=1,r=this.component;if(r){const n=r.getShapePosition(),o=r.getShapeRotation();Ns.setValue(n.x,n.y,n.z),Br.setValue(o.x,o.y,o.z,o.w)}else{const n=e.getPosition(),o=e.getRotation();Ns.setValue(n.x,n.y,n.z),Br.setValue(o.x,o.y,o.z,o.w)}Va.setOrigin(Ns),Va.setRotation(Br);const a=this.app.systems.rigidbody.createBody(i,s,Va);a.setRestitution(0),a.setFriction(0),a.setDamping(0,0),Ns.setValue(0,0,0),a.setLinearFactor(Ns),a.setAngularFactor(Ns),a.setCollisionFlags(a.getCollisionFlags()|yo),a.entity=e,this.body=a,this.component.enabled&&e.enabled&&this.enable()}}destroy(){this.body&&(this.disable(),this.app.systems.rigidbody.destroyBody(this.body),this.body=null)}_getEntityTransform(t){const e=this.component;if(e){const s=e.getShapePosition(),i=e.getShapeRotation();Ns.setValue(s.x,s.y,s.z),Br.setValue(i.x,i.y,i.z,i.w)}else{const s=this.entity.getPosition(),i=this.entity.getRotation();Ns.setValue(s.x,s.y,s.z),Br.setValue(i.x,i.y,i.z,i.w)}t.setOrigin(Ns),t.setRotation(Br)}updateTransform(){this._getEntityTransform(Va);const t=this.body;t.setWorldTransform(Va),t.activate()}enable(){const t=this.body;if(!t)return;const e=this.app.systems.rigidbody;e._triggers.indexOf(this)<0&&(e.addBody(t,ag,su^ag),e._triggers.push(this)),t.forceActivationState(tu),this.updateTransform()}disable(){const t=this.body;if(!t)return;const e=this.app.systems.rigidbody,s=e._triggers.indexOf(this);s>-1&&(e.removeBody(t),e._triggers.splice(s,1)),t.forceActivationState(av)}}const ch=new ie,J2=new A,eL=new A,zr=new ue,og=new De,tL=["enabled","type","halfExtents","linearOffset","angularOffset","radius","axis","height","convexHull","asset","renderAsset","shape","model","render","checkVertexDuplicates"];class ba{constructor(t){this.system=t}beforeInitialize(t,e){e.shape=null,e.model=new ir,e.model.graph=new De}afterInitialize(t,e){this.recreatePhysicalShapes(t),t.data.initialized=!0}reset(t,e){this.beforeInitialize(t,e),this.afterInitialize(t,e)}recreatePhysicalShapes(t){const e=t.entity,s=t.data;if(typeof Ammo<"u"){e.trigger&&(e.trigger.destroy(),delete e.trigger),s.shape&&(t._compoundParent&&(t!==t._compoundParent&&this.system._removeCompoundChild(t._compoundParent,s.shape),t._compoundParent.entity.rigidbody&&t._compoundParent.entity.rigidbody.activate()),this.destroyShape(s)),s.shape=this.createPhysicalShape(t.entity,s);const i=!t._compoundParent;if(s.type==="compound"&&(!t._compoundParent||t===t._compoundParent))t._compoundParent=t,e.forEach(this._addEachDescendant,t);else if(s.type!=="compound"&&!t.rigidbody){t._compoundParent=null;let r=e.parent;for(;r;){if(r.collision&&r.collision.type==="compound"){t._compoundParent=r.collision;break}r=r.parent}}t._compoundParent&&t!==t._compoundParent&&(i&&t._compoundParent.shape.getNumChildShapes()===0?this.system.recreatePhysicalShapes(t._compoundParent):(this.system.updateCompoundChildTransform(e,!0),t._compoundParent.entity.rigidbody&&t._compoundParent.entity.rigidbody.activate())),e.rigidbody?(e.rigidbody.disableSimulation(),e.rigidbody.createBody(),e.enabled&&e.rigidbody.enabled&&e.rigidbody.enableSimulation()):t._compoundParent||(e.trigger?e.trigger.initialize(s):e.trigger=new nv(this.system.app,t,s))}}createPhysicalShape(t,e){}updateTransform(t,e,s,i){t.entity.trigger&&t.entity.trigger.updateTransform()}destroyShape(t){t.shape&&(Ammo.destroy(t.shape),t.shape=null)}beforeRemove(t,e){e.data.shape&&(e._compoundParent&&!e._compoundParent.entity._destroying&&(this.system._removeCompoundChild(e._compoundParent,e.data.shape),e._compoundParent.entity.rigidbody&&e._compoundParent.entity.rigidbody.activate()),e._compoundParent=null,this.destroyShape(e.data))}remove(t,e){t.rigidbody&&t.rigidbody.body&&t.rigidbody.disableSimulation(),t.trigger&&(t.trigger.destroy(),delete t.trigger)}clone(t,e){const s=this.system.store[t.getGuid()],i={enabled:s.data.enabled,type:s.data.type,halfExtents:[s.data.halfExtents.x,s.data.halfExtents.y,s.data.halfExtents.z],linearOffset:[s.data.linearOffset.x,s.data.linearOffset.y,s.data.linearOffset.z],angularOffset:[s.data.angularOffset.x,s.data.angularOffset.y,s.data.angularOffset.z,s.data.angularOffset.w],radius:s.data.radius,axis:s.data.axis,height:s.data.height,convexHull:s.data.convexHull,asset:s.data.asset,renderAsset:s.data.renderAsset,model:s.data.model,render:s.data.render,checkVertexDuplicates:s.data.checkVertexDuplicates};return this.system.addComponent(e,i)}}class sL extends ba{createPhysicalShape(t,e){if(typeof Ammo<"u"){const s=e.halfExtents,i=new Ammo.btVector3(s?s.x:.5,s?s.y:.5,s?s.z:.5),r=new Ammo.btBoxShape(i);return Ammo.destroy(i),r}}}class iL extends ba{createPhysicalShape(t,e){if(typeof Ammo<"u")return new Ammo.btSphereShape(e.radius)}}class rL extends ba{createPhysicalShape(t,e){const s=e.axis??1,i=e.radius??.5,r=Math.max((e.height??2)-2*i,0);let a=null;if(typeof Ammo<"u")switch(s){case 0:a=new Ammo.btCapsuleShapeX(i,r);break;case 1:a=new Ammo.btCapsuleShape(i,r);break;case 2:a=new Ammo.btCapsuleShapeZ(i,r);break}return a}}class aL extends ba{createPhysicalShape(t,e){const s=e.axis??1,i=e.radius??.5,r=e.height??1;let a=null,n=null;if(typeof Ammo<"u")switch(s){case 0:a=new Ammo.btVector3(r*.5,i,i),n=new Ammo.btCylinderShapeX(a);break;case 1:a=new Ammo.btVector3(i,r*.5,i),n=new Ammo.btCylinderShape(a);break;case 2:a=new Ammo.btVector3(i,i,r*.5),n=new Ammo.btCylinderShapeZ(a);break}return a&&Ammo.destroy(a),n}}class nL extends ba{createPhysicalShape(t,e){const s=e.axis??1,i=e.radius??.5,r=e.height??1;let a=null;if(typeof Ammo<"u")switch(s){case 0:a=new Ammo.btConeShapeX(i,r);break;case 1:a=new Ammo.btConeShape(i,r);break;case 2:a=new Ammo.btConeShapeZ(i,r);break}return a}}class oL extends ba{beforeInitialize(t,e){}createAmmoHull(t,e,s,i){const r=new Ammo.btConvexHullShape,a=new Ammo.btVector3,n=[];t.getPositions(n);for(let c=0;c<n.length;c+=3)a.setValue(n[c]*i.x,n[c+1]*i.y,n[c+2]*i.z),r.addPoint(a,!1);Ammo.destroy(a),r.recalcLocalAabb(),r.setMargin(.01);const o=this.system._getNodeTransform(e);s.addChildShape(o,r),Ammo.destroy(o)}createAmmoMesh(t,e,s,i,r=!0){const a=this.system;let n;if(a._triMeshCache[t.id])n=a._triMeshCache[t.id];else{const d=t.vertexBuffer,f=d.getFormat();let u,p;for(let E=0;E<f.elements.length;E++){const F=f.elements[E];if(F.name===Ae){p=new Float32Array(d.lock(),F.offset),u=F.stride/4;break}}const m=[];t.getIndices(m);const _=t.primitive[0].count/3,S=new Ammo.btVector3;let g,v,w;const x=t.primitive[0].base;n=new Ammo.btTriangleMesh,a._triMeshCache[t.id]=n;const b=new Map;y.assert(typeof n.getIndexedMeshArray=="function","Ammo.js version is too old, please update to a newer Ammo.");const C=n.getIndexedMeshArray();C.at(0).m_numTriangles=_;const D=i?i.x:1,T=i?i.y:1,I=i?i.z:1,L=E=>{const F=p[E*u]*D,k=p[E*u+1]*T,H=p[E*u+2]*I;let G;if(r){const W=`${F}:${k}:${H}`;if(G=b.get(W),G!==void 0)return G;S.setValue(F,k,H),G=n.findOrAddVertex(S,!1),b.set(W,G)}else S.setValue(F,k,H),G=n.findOrAddVertex(S,!1);return G};for(let E=0;E<_;E++)g=L(m[x+E*3]),v=L(m[x+E*3+1]),w=L(m[x+E*3+2]),n.addIndex(g),n.addIndex(v),n.addIndex(w);Ammo.destroy(S)}const o=new Ammo.btBvhTriangleMeshShape(n,!0);if(!i){const d=a._getNodeScaling(e);o.setLocalScaling(d),Ammo.destroy(d)}const c=a._getNodeTransform(e);s.addChildShape(c,o),Ammo.destroy(c)}createPhysicalShape(t,e){if(!(typeof Ammo>"u")&&(e.model||e.render)){const s=new Ammo.btCompoundShape,r=t.getWorldTransform().getScale();if(e.render){const a=e.render.meshes;for(let n=0;n<a.length;n++)e.convexHull?this.createAmmoHull(a[n],og,s,r):this.createAmmoMesh(a[n],og,s,r,e.checkVertexDuplicates)}else if(e.model){const a=e.model.meshInstances;for(let o=0;o<a.length;o++)this.createAmmoMesh(a[o].mesh,a[o].node,s,null,e.checkVertexDuplicates);const n=new Ammo.btVector3(r.x,r.y,r.z);s.setLocalScaling(n),Ammo.destroy(n)}return s}}recreatePhysicalShapes(t){const e=t.data;if((e.renderAsset||e.asset)&&t.enabled&&t.entity.enabled){this.loadAsset(t,e.renderAsset||e.asset,e.renderAsset?"render":"model");return}this.doRecreatePhysicalShape(t)}loadAsset(t,e,s){const i=t.data,r=this.system.app.assets,a=i[s],n=d=>{i[s]===a&&(i[s]=d.resource,this.doRecreatePhysicalShape(t))},o=d=>{d.ready(f=>{if(f.data.containerAsset){const u=r.get(f.data.containerAsset);u.loaded?n(f):(u.ready(()=>{n(f)}),r.load(u))}else n(f)}),r.load(d)},c=r.get(e);c?o(c):r.once(`add:${e}`,o)}doRecreatePhysicalShape(t){const e=t.entity,s=t.data;s.model||s.render?(this.destroyShape(s),s.shape=this.createPhysicalShape(e,s),e.rigidbody?(e.rigidbody.disableSimulation(),e.rigidbody.createBody(),e.enabled&&e.rigidbody.enabled&&e.rigidbody.enableSimulation()):e.trigger?e.trigger.initialize(s):e.trigger=new nv(this.system.app,t,s)):(this.beforeRemove(e,t),this.remove(e,s))}updateTransform(t,e,s,i){if(t.shape){const a=t.entity.getWorldTransform().getScale(),n=t.shape.getLocalScaling();(a.x!==n.x()||a.y!==n.y()||a.z!==n.z())&&this.doRecreatePhysicalShape(t)}super.updateTransform(t,e,s,i)}destroyShape(t){if(!t.shape)return;const e=t.shape.getNumChildShapes();for(let s=0;s<e;s++){const i=t.shape.getChildShape(s);Ammo.destroy(i)}Ammo.destroy(t.shape),t.shape=null}}class lL extends ba{createPhysicalShape(t,e){if(typeof Ammo<"u")return new Ammo.btCompoundShape}_addEachDescendant(t){!t.collision||t.rigidbody||(t.collision._compoundParent=this,t!==this.entity&&t.collision.system.recreatePhysicalShapes(t.collision))}_updateEachDescendant(t){t.collision&&t.collision._compoundParent===this&&(t.collision._compoundParent=null,t!==this.entity&&!t.rigidbody&&t.collision.system.recreatePhysicalShapes(t.collision))}_updateEachDescendantTransform(t){!t.collision||t.collision._compoundParent!==this.collision._compoundParent||this.collision.system.updateCompoundChildTransform(t,!1)}}class hL extends ht{constructor(t){super(t),this.id="collision",this.ComponentType=Qa,this.DataType=Y2,this.schema=tL,this.implementations={},this._triMeshCache={},this.on("beforeremove",this.onBeforeRemove,this),this.on("remove",this.onRemove,this)}initializeComponentData(t,e,s){s=["type","halfExtents","radius","axis","height","convexHull","shape","model","asset","render","renderAsset","enabled","linearOffset","angularOffset","checkVertexDuplicates"];const i={};for(let n=0,o=s.length;n<o;n++){const c=s[n];i[c]=e[c]}let r;if(e.hasOwnProperty("asset")?(r=s.indexOf("model"),r!==-1&&s.splice(r,1),r=s.indexOf("render"),r!==-1&&s.splice(r,1)):e.hasOwnProperty("model")&&(r=s.indexOf("asset"),r!==-1&&s.splice(r,1)),i.type||(i.type=t.data.type),t.data.type=i.type,Array.isArray(i.halfExtents)&&(i.halfExtents=new A(i.halfExtents)),Array.isArray(i.linearOffset)&&(i.linearOffset=new A(i.linearOffset)),Array.isArray(i.angularOffset)){const n=i.angularOffset;n.length===3?i.angularOffset=new ue().setFromEulerAngles(n[0],n[1],n[2]):i.angularOffset=new ue(i.angularOffset)}const a=this._createImplementation(i.type);a.beforeInitialize(t,i),super.initializeComponentData(t,i,s),a.afterInitialize(t,i)}_createImplementation(t){if(this.implementations[t]===void 0){let e;switch(t){case"box":e=new sL(this);break;case"sphere":e=new iL(this);break;case"capsule":e=new rL(this);break;case"cylinder":e=new aL(this);break;case"cone":e=new nL(this);break;case"mesh":e=new oL(this);break;case"compound":e=new lL(this);break;default:y.error(`_createImplementation: Invalid collision system type: ${t}`)}this.implementations[t]=e}return this.implementations[t]}_getImplementation(t){return this.implementations[t.collision.data.type]}cloneComponent(t,e){return this._getImplementation(t).clone(t,e)}onBeforeRemove(t,e){this.implementations[e.data.type].beforeRemove(t,e),e.onBeforeRemove()}onRemove(t,e){this.implementations[e.type].remove(t,e)}updateCompoundChildTransform(t,e){const s=t.collision._compoundParent;if(s!==t.collision&&t.enabled&&t.collision.enabled&&(t._dirtyLocal||e)){const i=this._getNodeTransform(t,s.entity),r=s.getCompoundChildShapeIndex(t.collision.shape);r===null?s.shape.addChildShape(i,t.collision.data.shape):s.shape.updateChildTransform(r,i,!0),Ammo.destroy(i)}}_removeCompoundChild(t,e){if(t.shape.getNumChildShapes()!==0)if(t.shape.removeChildShape)t.shape.removeChildShape(e);else{const s=t.getCompoundChildShapeIndex(e);s!==null&&t.shape.removeChildShapeByIndex(s)}}onTransformChanged(t,e,s,i){this.implementations[t.data.type].updateTransform(t,e,s,i)}changeType(t,e,s){this.implementations[e].beforeRemove(t.entity,t),this.implementations[e].remove(t.entity,t.data),this._createImplementation(s).reset(t,t.data)}recreatePhysicalShapes(t){this.implementations[t.data.type].recreatePhysicalShapes(t)}_calculateNodeRelativeTransform(t,e){if(t===e){const s=t.getWorldTransform().getScale();ch.setScale(s.x,s.y,s.z)}else this._calculateNodeRelativeTransform(t.parent,e),ch.mul(t.getLocalTransform())}_getNodeScaling(t){const s=t.getWorldTransform().getScale();return new Ammo.btVector3(s.x,s.y,s.z)}_getNodeTransform(t,e){let s,i;e?(this._calculateNodeRelativeTransform(t,e),s=J2,i=zr,ch.getTranslation(s),i.setFromMat4(ch)):(s=t.getPosition(),i=t.getRotation());const r=new Ammo.btQuaternion,a=new Ammo.btTransform;a.setIdentity();const n=a.getOrigin(),o=t.collision;if(o&&o._hasOffset){const c=o.data.linearOffset,d=o.data.angularOffset,f=eL;zr.copy(i).transformVector(c,f),f.add(s),zr.copy(i).mul(d),n.setValue(f.x,f.y,f.z),r.setValue(zr.x,zr.y,zr.z,zr.w)}else n.setValue(s.x,s.y,s.z),r.setValue(i.x,i.y,i.z,i.w);return a.setRotation(r),Ammo.destroy(r),a}destroy(){for(const t in this._triMeshCache)Ammo.destroy(this._triMeshCache[t]);this._triMeshCache=null,super.destroy()}}const dh=new ae,cL=new jt;class dL{constructor(t,e,s){this._entity=t,this._element=t.element,this.model=new ir,this.node=new De,this.model.graph=this.node,this.mesh=e,this.meshInstance=new Ge(this.mesh,s,this.node),this.meshInstance.name=`ImageElement: ${t.name}`,this.meshInstance.castShadow=!1,this.meshInstance.receiveShadow=!1,this._meshDirty=!1,this.model.meshInstances.push(this.meshInstance),this._entity.addChild(this.model.graph),this.model._entity=this._entity,this.unmaskMeshInstance=null}destroy(){var t,e;this.setMaterial(null),this._element.removeModelFromLayers(this.model),this.model.destroy(),this.model=null,this.node=null,this.mesh=null,(t=this.meshInstance)==null||t.destroy(),this.meshInstance=null,(e=this.unmaskMeshInstance)==null||e.destroy(),this.unmaskMeshInstance=null,this._entity=null,this._element=null}setMesh(t){this.meshInstance&&(this.mesh=t,this.meshInstance.mesh=t,this.meshInstance.visible=!!t,this.unmaskMeshInstance&&(this.unmaskMeshInstance.mesh=t),this.forceUpdateAabb())}setMask(t){var e;if(this.meshInstance){if(this._entity.enabled&&this._element.enabled&&this._element.removeModelFromLayers(this.model),t){this.unmaskMeshInstance=new Ge(this.mesh,this.meshInstance.material,this.node),this.unmaskMeshInstance.name=`Unmask: ${this._entity.name}`,this.unmaskMeshInstance.castShadow=!1,this.unmaskMeshInstance.receiveShadow=!1,this.unmaskMeshInstance.pick=!1,this.model.meshInstances.push(this.unmaskMeshInstance);for(const s in this.meshInstance.parameters)this.unmaskMeshInstance.setParameter(s,this.meshInstance.parameters[s].data)}else{const s=this.model.meshInstances.indexOf(this.unmaskMeshInstance);s>=0&&this.model.meshInstances.splice(s,1)}this._entity.enabled&&this._element.enabled&&this._element.addModelToLayers(this.model),t||((e=this.unmaskMeshInstance)==null||e.destroy(),this.unmaskMeshInstance=null)}}setMaterial(t){this.meshInstance&&(this.meshInstance.material=t,this.unmaskMeshInstance&&(this.unmaskMeshInstance.material=t))}setParameter(t,e){this.meshInstance&&(this.meshInstance.setParameter(t,e),this.unmaskMeshInstance&&this.unmaskMeshInstance.setParameter(t,e))}deleteParameter(t){this.meshInstance&&(this.meshInstance.deleteParameter(t),this.unmaskMeshInstance&&this.unmaskMeshInstance.deleteParameter(t))}setUnmaskDrawOrder(){if(!this.meshInstance)return;const t=function(e){let s;const i=e.children,r=i.length;if(r){for(let n=0;n<r;n++)i[n].element&&(s=i[n]);if(!s)return null;const a=t(s);return a||s}return null};if(this.unmaskMeshInstance){const e=t(this._entity);e&&e.element?this.unmaskMeshInstance.drawOrder=e.element.drawOrder+e.element.getMaskOffset():this.unmaskMeshInstance.drawOrder=this.meshInstance.drawOrder+this._element.getMaskOffset(),y.trace(Bs,"setDrawOrder: ",this.unmaskMeshInstance.name,this.unmaskMeshInstance.drawOrder)}}setDrawOrder(t){this.meshInstance&&(y.trace(Bs,"setDrawOrder: ",this.meshInstance.name,t),this.meshInstance.drawOrder=t)}setCull(t){if(!this.meshInstance)return;const e=this._element;let s=null;t&&e._isScreenSpace()&&(s=function(i){return e.isVisibleForCamera(i)}),this.meshInstance.cull=t,this.meshInstance.isVisibleFunc=s,this.unmaskMeshInstance&&(this.unmaskMeshInstance.cull=t,this.unmaskMeshInstance.isVisibleFunc=s)}setScreenSpace(t){this.meshInstance&&(this.meshInstance.screenSpace=t,this.unmaskMeshInstance&&(this.unmaskMeshInstance.screenSpace=t))}setLayer(t){this.meshInstance&&(this.meshInstance.layer=t,this.unmaskMeshInstance&&(this.unmaskMeshInstance.layer=t))}forceUpdateAabb(t){this.meshInstance&&(this.meshInstance._aabbVer=-1,this.unmaskMeshInstance&&(this.unmaskMeshInstance._aabbVer=-1))}setAabbFunc(t){this.meshInstance&&(this.meshInstance._updateAabbFunc=t,this.unmaskMeshInstance&&(this.unmaskMeshInstance._updateAabbFunc=t))}}class fL{constructor(t){h(this,"_evtSetMeshes",null);this._element=t,this._entity=t.entity,this._system=t.system,this._textureAsset=null,this._texture=null,this._materialAsset=null,this._material=null,this._spriteAsset=null,this._sprite=null,this._spriteFrame=0,this._pixelsPerUnit=null,this._targetAspectRatio=-1,this._rect=new oe(0,0,1,1),this._mask=!1,this._maskRef=0,this._outerScale=new J,this._outerScaleUniform=new Float32Array(2),this._innerOffset=new oe,this._innerOffsetUniform=new Float32Array(4),this._atlasRect=new oe,this._atlasRectUniform=new Float32Array(4),this._defaultMesh=this._createMesh(),this._renderable=new dL(this._entity,this._defaultMesh,this._material),this._color=new ae(1,1,1,1),this._colorUniform=new Float32Array([1,1,1]),this._updateRenderableEmissive(),this._renderable.setParameter("material_opacity",1),this._updateAabbFunc=this._updateAabb.bind(this),this._onScreenChange(this._element.screen),this._element.on("resize",this._onParentResizeOrPivotChange,this),this._element.on("set:pivot",this._onParentResizeOrPivotChange,this),this._element.on("screen:set:screenspace",this._onScreenSpaceChange,this),this._element.on("set:screen",this._onScreenChange,this),this._element.on("set:draworder",this._onDrawOrderChange,this),this._element.on("screen:set:resolution",this._onResolutionChange,this)}destroy(){this.textureAsset=null,this.spriteAsset=null,this.materialAsset=null,this._renderable.setMesh(this._defaultMesh),this._renderable.destroy(),this._defaultMesh=null,this._element.off("resize",this._onParentResizeOrPivotChange,this),this._element.off("set:pivot",this._onParentResizeOrPivotChange,this),this._element.off("screen:set:screenspace",this._onScreenSpaceChange,this),this._element.off("set:screen",this._onScreenChange,this),this._element.off("set:draworder",this._onDrawOrderChange,this),this._element.off("screen:set:resolution",this._onResolutionChange,this)}_onResolutionChange(t){}_onParentResizeOrPivotChange(){this._renderable.mesh&&this._updateMesh(this._renderable.mesh)}_onScreenSpaceChange(t){this._updateMaterial(t)}_onScreenChange(t,e){t?this._updateMaterial(t.screen.screenSpace):this._updateMaterial(!1)}_onDrawOrderChange(t){this._renderable.setDrawOrder(t),this.mask&&this._element.screen&&this._element.screen.screen.once("syncdraworder",function(){this._renderable.setUnmaskDrawOrder()},this)}_hasUserMaterial(){return!!this._materialAsset||!!this._material&&this._system.defaultImageMaterials.indexOf(this._material)===-1}_use9Slicing(){return this.sprite&&(this.sprite.renderMode===At||this.sprite.renderMode===Ct)}_updateMaterial(t){const e=!!this._mask,s=!!(this.sprite&&this.sprite.renderMode===At),i=!!(this.sprite&&this.sprite.renderMode===Ct);this._hasUserMaterial()||(this._material=this._system.getImageElementMaterial(t,e,s,i)),this._renderable&&(this._renderable.setCull(!this._element._isScreenSpace()||this._element._isScreenCulled()),this._renderable.setMaterial(this._material),this._renderable.setScreenSpace(t),this._renderable.setLayer(t?XT:ay))}_createMesh(){const t=this._element,e=t.calculatedWidth,s=t.calculatedHeight,i=this._rect,r=this._system.app.graphicsDevice,a=new Float32Array([e,0,0,0,0,1,i.x+i.z,1-i.y,e,s,0,0,0,1,i.x+i.z,1-(i.y+i.w),0,0,0,0,0,1,i.x,1-i.y,0,s,0,0,0,1,i.x,1-(i.y+i.w)]),n=cL.get(r,()=>new Nt(r,[{semantic:Ae,components:3,type:ze},{semantic:_s,components:3,type:ze},{semantic:ts,components:2,type:ze}])),o=new Is(r,n,4,{data:a.buffer}),c=new Ve(r);return c.vertexBuffer=o,c.primitive[0].type=wr,c.primitive[0].base=0,c.primitive[0].count=4,c.primitive[0].indexed=!1,c.aabb.setMinMax(A.ZERO,new A(e,s,0)),this._updateMesh(c),c}_updateMesh(t){const e=this._element;let s=e.calculatedWidth,i=e.calculatedHeight;if(e.fitMode!==Oh&&this._targetAspectRatio>0){const a=e.calculatedWidth/e.calculatedHeight;e.fitMode===$2&&a>this._targetAspectRatio||e.fitMode===X2&&a<this._targetAspectRatio?s=e.calculatedHeight*this._targetAspectRatio:i=e.calculatedWidth/this._targetAspectRatio}const r=e._isScreenSpace();if(this._updateMaterial(r),this._renderable&&this._renderable.forceUpdateAabb(),this.sprite&&(this.sprite.renderMode===At||this.sprite.renderMode===Ct)){const a=this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]],n=2/a.rect.z,o=2/a.rect.w;this._innerOffset.set(a.border.x*n,a.border.y*o,a.border.z*n,a.border.w*o);const c=this.sprite.atlas.texture;this._atlasRect.set(a.rect.x/c.width,a.rect.y/c.height,a.rect.z/c.width,a.rect.w/c.height);const d=this._pixelsPerUnit!==null?this._pixelsPerUnit:this.sprite.pixelsPerUnit,f=a.rect.z/d,u=a.rect.w/d;this._outerScale.set(Math.max(s,this._innerOffset.x*f),Math.max(i,this._innerOffset.y*u));let p=f,m=u;this._outerScale.x/=f,this._outerScale.y/=u,p*=Y.clamp(s/(this._innerOffset.x*f),1e-4,1),m*=Y.clamp(i/(this._innerOffset.y*u),1e-4,1),this._renderable&&(this._innerOffsetUniform[0]=this._innerOffset.x,this._innerOffsetUniform[1]=this._innerOffset.y,this._innerOffsetUniform[2]=this._innerOffset.z,this._innerOffsetUniform[3]=this._innerOffset.w,this._renderable.setParameter("innerOffset",this._innerOffsetUniform),this._atlasRectUniform[0]=this._atlasRect.x,this._atlasRectUniform[1]=this._atlasRect.y,this._atlasRectUniform[2]=this._atlasRect.z,this._atlasRectUniform[3]=this._atlasRect.w,this._renderable.setParameter("atlasRect",this._atlasRectUniform),this._outerScaleUniform[0]=this._outerScale.x,this._outerScaleUniform[1]=this._outerScale.y,this._renderable.setParameter("outerScale",this._outerScaleUniform),this._renderable.setAabbFunc(this._updateAabbFunc),this._renderable.node.setLocalScale(p,m,1),this._renderable.node.setLocalPosition((.5-e.pivot.x)*s,(.5-e.pivot.y)*i,0))}else{const a=t.vertexBuffer,n=new Float32Array(a.lock()),o=e.pivot.x,c=e.pivot.y;n[0]=s-o*s,n[1]=0-c*i,n[8]=s-o*s,n[9]=i-c*i,n[16]=0-o*s,n[17]=0-c*i,n[24]=0-o*s,n[25]=i-c*i;let d=1,f=1,u=this._rect;if(this._sprite&&this._sprite.frameKeys[this._spriteFrame]&&this._sprite.atlas){const _=this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];_&&(u=_.rect,d=this._sprite.atlas.texture.width,f=this._sprite.atlas.texture.height)}n[6]=(u.x+u.z)/d,n[7]=1-u.y/f,n[14]=(u.x+u.z)/d,n[15]=1-(u.y+u.w)/f,n[22]=u.x/d,n[23]=1-u.y/f,n[30]=u.x/d,n[31]=1-(u.y+u.w)/f,a.unlock();const p=new A(0-o*s,0-c*i,0),m=new A(s-o*s,i-c*i,0);t.aabb.setMinMax(p,m),this._renderable&&(this._renderable.node.setLocalScale(1,1,1),this._renderable.node.setLocalPosition(0,0,0),this._renderable.setAabbFunc(null))}this._meshDirty=!1}_updateSprite(){let t=!1,e=null;if(this._targetAspectRatio=-1,this._sprite&&this._sprite.atlas){e=this._sprite.meshes[this.spriteFrame],t=this._sprite.renderMode===At||this._sprite.renderMode===Ct;const s=this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];(s==null?void 0:s.rect.w)>0&&(this._targetAspectRatio=s.rect.z/s.rect.w)}this.mesh=t?e:this._defaultMesh,this.refreshMesh()}refreshMesh(){this.mesh&&(this._element._beingInitialized?this._meshDirty=!0:this._updateMesh(this.mesh))}_updateAabb(t){return t.center.set(0,0,0),t.halfExtents.set(this._outerScale.x*.5,this._outerScale.y*.5,.001),t.setFromTransformedAabb(t,this._renderable.node.getWorldTransform()),t}_toggleMask(){this._element._dirtifyMask();const t=this._element._isScreenSpace();this._updateMaterial(t),this._renderable.setMask(!!this._mask)}_onMaterialLoad(t){this.material=t.resource}_onMaterialAdded(t){this._system.app.assets.off(`add:${t.id}`,this._onMaterialAdded,this),this._materialAsset===t.id&&this._bindMaterialAsset(t)}_bindMaterialAsset(t){this._entity.enabled&&(t.on("load",this._onMaterialLoad,this),t.on("change",this._onMaterialChange,this),t.on("remove",this._onMaterialRemove,this),t.resource?this._onMaterialLoad(t):this._system.app.assets.load(t))}_unbindMaterialAsset(t){t.off("load",this._onMaterialLoad,this),t.off("change",this._onMaterialChange,this),t.off("remove",this._onMaterialRemove,this)}_onMaterialChange(){}_onMaterialRemove(){}_onTextureAdded(t){this._system.app.assets.off(`add:${t.id}`,this._onTextureAdded,this),this._textureAsset===t.id&&this._bindTextureAsset(t)}_bindTextureAsset(t){this._entity.enabled&&(t.on("load",this._onTextureLoad,this),t.on("change",this._onTextureChange,this),t.on("remove",this._onTextureRemove,this),t.resource?this._onTextureLoad(t):this._system.app.assets.load(t))}_unbindTextureAsset(t){t.off("load",this._onTextureLoad,this),t.off("change",this._onTextureChange,this),t.off("remove",this._onTextureRemove,this)}_onTextureLoad(t){this.texture=t.resource}_onTextureChange(t){}_onTextureRemove(t){}_onSpriteAssetAdded(t){this._system.app.assets.off(`add:${t.id}`,this._onSpriteAssetAdded,this),this._spriteAsset===t.id&&this._bindSpriteAsset(t)}_bindSpriteAsset(t){this._entity.enabled&&(t.on("load",this._onSpriteAssetLoad,this),t.on("change",this._onSpriteAssetChange,this),t.on("remove",this._onSpriteAssetRemove,this),t.resource?this._onSpriteAssetLoad(t):this._system.app.assets.load(t))}_unbindSpriteAsset(t){t.off("load",this._onSpriteAssetLoad,this),t.off("change",this._onSpriteAssetChange,this),t.off("remove",this._onSpriteAssetRemove,this),t.data.textureAtlasAsset&&this._system.app.assets.off(`load:${t.data.textureAtlasAsset}`,this._onTextureAtlasLoad,this)}_onSpriteAssetLoad(t){if(!t||!t.resource)this.sprite=null;else if(t.resource.atlas)this.sprite=t.resource;else{const e=t.data.textureAtlasAsset;if(e){const s=this._system.app.assets;s.off(`load:${e}`,this._onTextureAtlasLoad,this),s.once(`load:${e}`,this._onTextureAtlasLoad,this)}}}_onSpriteAssetChange(t){this._onSpriteAssetLoad(t)}_onSpriteAssetRemove(t){}_bindSprite(t){this._evtSetMeshes=t.on("set:meshes",this._onSpriteMeshesChange,this),t.on("set:pixelsPerUnit",this._onSpritePpuChange,this),t.on("set:atlas",this._onAtlasTextureChange,this),t.atlas&&t.atlas.on("set:texture",this._onAtlasTextureChange,this)}_unbindSprite(t){var e;(e=this._evtSetMeshes)==null||e.off(),this._evtSetMeshes=null,t.off("set:pixelsPerUnit",this._onSpritePpuChange,this),t.off("set:atlas",this._onAtlasTextureChange,this),t.atlas&&t.atlas.off("set:texture",this._onAtlasTextureChange,this)}_onSpriteMeshesChange(){this._sprite&&(this._spriteFrame=Y.clamp(this._spriteFrame,0,this._sprite.frameKeys.length-1)),this._updateSprite()}_onSpritePpuChange(){this.sprite.renderMode!==hi&&this._pixelsPerUnit===null&&this._updateSprite()}_onAtlasTextureChange(){this.sprite&&this.sprite.atlas&&this.sprite.atlas.texture?(this._renderable.setParameter("texture_emissiveMap",this._sprite.atlas.texture),this._renderable.setParameter("texture_opacityMap",this._sprite.atlas.texture)):(this._renderable.deleteParameter("texture_emissiveMap"),this._renderable.deleteParameter("texture_opacityMap"))}_onTextureAtlasLoad(t){const e=this._spriteAsset;e instanceof _e?this._onSpriteAssetLoad(e):this._onSpriteAssetLoad(this._system.app.assets.get(e))}onEnable(){if(this._materialAsset){const t=this._system.app.assets.get(this._materialAsset);t&&t.resource!==this._material&&this._bindMaterialAsset(t)}if(this._textureAsset){const t=this._system.app.assets.get(this._textureAsset);t&&t.resource!==this._texture&&this._bindTextureAsset(t)}if(this._spriteAsset){const t=this._system.app.assets.get(this._spriteAsset);t&&t.resource!==this._sprite&&this._bindSpriteAsset(t)}this._element.addModelToLayers(this._renderable.model)}onDisable(){this._element.removeModelFromLayers(this._renderable.model)}_setStencil(t){this._renderable.meshInstance.stencilFront=t,this._renderable.meshInstance.stencilBack=t;let e=0;if(this._element.maskedBy&&(e=this._element.maskedBy.element._image._maskRef),this._renderable.unmaskMeshInstance){const s=new pi({ref:e+1,func:Wh,zpass:Zx});this._renderable.unmaskMeshInstance.stencilFront=s,this._renderable.unmaskMeshInstance.stencilBack=s}}_updateRenderableEmissive(){dh.linear(this._color),this._colorUniform[0]=dh.r,this._colorUniform[1]=dh.g,this._colorUniform[2]=dh.b,this._renderable.setParameter("material_emissive",this._colorUniform)}set color(t){this._color===t&&y.warn("Setting element.color to itself will have no effect");const{r:e,g:s,b:i}=t;(this._color.r!==e||this._color.g!==s||this._color.b!==i)&&(this._color.r=e,this._color.g=s,this._color.b=i,this._updateRenderableEmissive()),this._element&&this._element.fire("set:color",this._color)}get color(){return this._color}set opacity(t){t!==this._color.a&&(this._color.a=t,this._renderable.setParameter("material_opacity",t)),this._element&&this._element.fire("set:opacity",t)}get opacity(){return this._color.a}set rect(t){this._rect===t&&console.warn("Setting element.rect to itself will have no effect");let e,s,i,r;t instanceof oe?(e=t.x,s=t.y,i=t.z,r=t.w):(e=t[0],s=t[1],i=t[2],r=t[3]),!(e===this._rect.x&&s===this._rect.y&&i===this._rect.z&&r===this._rect.w)&&(this._rect.set(e,s,i,r),this._renderable.mesh&&(this._element._beingInitialized?this._meshDirty=!0:this._updateMesh(this._renderable.mesh)))}get rect(){return this._rect}_removeMaterialAssetEvents(){if(this._materialAsset){const t=this._system.app.assets;t.off(`add:${this._materialAsset}`,this._onMaterialAdded,this);const e=t.get(this._materialAsset);e&&(e.off("load",this._onMaterialLoad,this),e.off("change",this._onMaterialChange,this),e.off("remove",this._onMaterialRemove,this))}}set material(t){if(this._material!==t){if(!t){const e=this._element._isScreenSpace();this.mask?t=e?this._system.defaultScreenSpaceImageMaskMaterial:this._system.defaultImageMaskMaterial:t=e?this._system.defaultScreenSpaceImageMaterial:this._system.defaultImageMaterial}if(this._material=t,this._materialAsset){const e=this._system.app.assets.get(this._materialAsset);(!e||e.resource!==t)&&(this._removeMaterialAssetEvents(),this._materialAsset=null)}t&&(this._renderable.setMaterial(t),this._hasUserMaterial()?(this._renderable.deleteParameter("material_opacity"),this._renderable.deleteParameter("material_emissive")):(this._updateRenderableEmissive(),this._renderable.setParameter("material_opacity",this._color.a)))}}get material(){return this._material}set materialAsset(t){const e=this._system.app.assets;let s=t;if(t instanceof _e&&(s=t.id),this._materialAsset!==s)if(this._removeMaterialAssetEvents(),this._materialAsset=s,this._materialAsset){const i=e.get(this._materialAsset);i?this._bindMaterialAsset(i):(this._materialAsset=null,this.material=null,this._materialAsset=s,e.on(`add:${this._materialAsset}`,this._onMaterialAdded,this))}else this._materialAsset=null,this.material=null,this._materialAsset=s}get materialAsset(){return this._materialAsset}set texture(t){if(this._texture!==t){if(this._textureAsset){const e=this._system.app.assets.get(this._textureAsset);e&&e.resource!==t&&(this.textureAsset=null)}if(this._texture=t,t){this._spriteAsset&&(this.spriteAsset=null),this._renderable.setParameter("texture_emissiveMap",this._texture),this._renderable.setParameter("texture_opacityMap",this._texture),this._updateRenderableEmissive(),this._renderable.setParameter("material_opacity",this._color.a);const e=this._texture.width/this._texture.height;e!==this._targetAspectRatio&&(this._targetAspectRatio=e,this._element.fitMode!==Oh&&this.refreshMesh())}else this._renderable.deleteParameter("texture_emissiveMap"),this._renderable.deleteParameter("texture_opacityMap"),this._targetAspectRatio=-1,this._element.fitMode!==Oh&&this.refreshMesh()}}get texture(){return this._texture}set textureAsset(t){const e=this._system.app.assets;let s=t;if(t instanceof _e&&(s=t.id),this._textureAsset!==s){if(this._textureAsset){e.off(`add:${this._textureAsset}`,this._onTextureAdded,this);const i=e.get(this._textureAsset);i&&(i.off("load",this._onTextureLoad,this),i.off("change",this._onTextureChange,this),i.off("remove",this._onTextureRemove,this))}if(this._textureAsset=s,this._textureAsset){const i=e.get(this._textureAsset);i?this._bindTextureAsset(i):(this.texture=null,e.on(`add:${this._textureAsset}`,this._onTextureAdded,this))}else this.texture=null}}get textureAsset(){return this._textureAsset}set spriteAsset(t){const e=this._system.app.assets;let s=t;if(t instanceof _e&&(s=t.id),this._spriteAsset!==s){if(this._spriteAsset){e.off(`add:${this._spriteAsset}`,this._onSpriteAssetAdded,this);const i=e.get(this._spriteAsset);i&&this._unbindSpriteAsset(i)}if(this._spriteAsset=s,this._spriteAsset){const i=e.get(this._spriteAsset);i?this._bindSpriteAsset(i):(this.sprite=null,e.on(`add:${this._spriteAsset}`,this._onSpriteAssetAdded,this))}else this.sprite=null}this._element&&this._element.fire("set:spriteAsset",s)}get spriteAsset(){return this._spriteAsset}set sprite(t){if(this._sprite!==t){if(this._sprite&&this._unbindSprite(this._sprite),this._spriteAsset){const e=this._system.app.assets.get(this._spriteAsset);e&&e.resource!==t&&(this.spriteAsset=null)}this._sprite=t,this._sprite&&(this._bindSprite(this._sprite),this._textureAsset&&(this.textureAsset=null)),this._sprite&&this._sprite.atlas&&this._sprite.atlas.texture?(this._renderable.setParameter("texture_emissiveMap",this._sprite.atlas.texture),this._renderable.setParameter("texture_opacityMap",this._sprite.atlas.texture)):(this._renderable.deleteParameter("texture_emissiveMap"),this._renderable.deleteParameter("texture_opacityMap")),this._sprite&&(this._spriteFrame=Y.clamp(this._spriteFrame,0,this._sprite.frameKeys.length-1)),this._updateSprite()}}get sprite(){return this._sprite}set spriteFrame(t){const e=this._spriteFrame;this._sprite?this._spriteFrame=Y.clamp(t,0,this._sprite.frameKeys.length-1):this._spriteFrame=t,this._spriteFrame!==e&&this._updateSprite(),this._element&&this._element.fire("set:spriteFrame",t)}get spriteFrame(){return this._spriteFrame}set mesh(t){this._renderable.setMesh(t),this._defaultMesh===t?this._renderable.setAabbFunc(null):this._renderable.setAabbFunc(this._updateAabbFunc)}get mesh(){return this._renderable.mesh}set mask(t){this._mask!==t&&(this._mask=t,this._toggleMask())}get mask(){return this._mask}set pixelsPerUnit(t){this._pixelsPerUnit!==t&&(this._pixelsPerUnit=t,this._sprite&&(this._sprite.renderMode===At||this._sprite.renderMode===Ct)&&this._updateSprite())}get pixelsPerUnit(){return this._pixelsPerUnit}get aabb(){return this._renderable.meshInstance?this._renderable.meshInstance.aabb:null}}class uL extends Se{constructor(t){super(),this._app=t,t.i18n.on(xa.EVENT_CHANGE,this._onSetLocale,this),this._autoLoad=!1,this._disableLocalization=!1,this._defaultAsset=null,this._localizedAsset=null}set defaultAsset(t){const e=t instanceof _e?t.id:t;this._defaultAsset!==e&&(this._defaultAsset&&this._unbindDefaultAsset(),this._defaultAsset=e,this._defaultAsset&&this._bindDefaultAsset(),this._onSetLocale(this._app.i18n.locale))}get defaultAsset(){return this._defaultAsset}set localizedAsset(t){const e=t instanceof _e?t.id:t;this._localizedAsset!==e&&(this._localizedAsset&&(this._app.assets.off(`add:${this._localizedAsset}`,this._onLocalizedAssetAdd,this),this._unbindLocalizedAsset()),this._localizedAsset=e,this._localizedAsset&&(this._app.assets.get(this._localizedAsset)?this._bindLocalizedAsset():this._app.assets.once(`add:${this._localizedAsset}`,this._onLocalizedAssetAdd,this)))}get localizedAsset(){return this._localizedAsset}set autoLoad(t){this._autoLoad!==t&&(this._autoLoad=t,this._autoLoad&&this._localizedAsset&&(this._unbindLocalizedAsset(),this._bindLocalizedAsset()))}get autoLoad(){return this._autoLoad}set disableLocalization(t){this._disableLocalization!==t&&(this._disableLocalization=t,this._onSetLocale(this._app.i18n.locale))}get disableLocalization(){return this._disableLocalization}_bindDefaultAsset(){const t=this._app.assets.get(this._defaultAsset);t?this._onDefaultAssetAdd(t):this._app.assets.once(`add:${this._defaultAsset}`,this._onDefaultAssetAdd,this)}_unbindDefaultAsset(){if(!this._defaultAsset)return;this._app.assets.off(`add:${this._defaultAsset}`,this._onDefaultAssetAdd,this);const t=this._app.assets.get(this._defaultAsset);t&&(t.off("add:localized",this._onLocaleAdd,this),t.off("remove:localized",this._onLocaleRemove,this),t.off("remove",this._onDefaultAssetRemove,this))}_onDefaultAssetAdd(t){this._defaultAsset===t.id&&(t.on("add:localized",this._onLocaleAdd,this),t.on("remove:localized",this._onLocaleRemove,this),t.once("remove",this._onDefaultAssetRemove,this))}_onDefaultAssetRemove(t){this._defaultAsset===t.id&&(t.off("add:localized",this._onLocaleAdd,this),t.off("remove:localized",this._onLocaleAdd,this),this._app.assets.once(`add:${this._defaultAsset}`,this._onDefaultAssetAdd,this))}_bindLocalizedAsset(){if(!this._autoLoad)return;const t=this._app.assets.get(this._localizedAsset);t&&(t.on("load",this._onLocalizedAssetLoad,this),t.on("change",this._onLocalizedAssetChange,this),t.on("remove",this._onLocalizedAssetRemove,this),t.resource?this._onLocalizedAssetLoad(t):this._app.assets.load(t))}_unbindLocalizedAsset(){const t=this._app.assets.get(this._localizedAsset);t&&(t.off("load",this._onLocalizedAssetLoad,this),t.off("change",this._onLocalizedAssetChange,this),t.off("remove",this._onLocalizedAssetRemove,this))}_onLocalizedAssetAdd(t){this._localizedAsset===t.id&&this._bindLocalizedAsset()}_onLocalizedAssetLoad(t){this.fire("load",t)}_onLocalizedAssetChange(t,e,s,i){this.fire("change",t,e,s,i)}_onLocalizedAssetRemove(t){this._localizedAsset===t.id&&(this.localizedAsset=this._defaultAsset),this.fire("remove",t)}_onLocaleAdd(t,e){this._app.i18n.locale===t&&this._onSetLocale(t)}_onLocaleRemove(t,e){this._app.i18n.locale===t&&this._onSetLocale(t)}_onSetLocale(t){if(!this._defaultAsset){this.localizedAsset=null;return}const e=this._app.assets.get(this._defaultAsset);if(!e||this._disableLocalization){this.localizedAsset=this._defaultAsset;return}const s=e.getLocalizedAssetId(t);if(!s){this.localizedAsset=this._defaultAsset;return}this.localizedAsset=s}destroy(){this.defaultAsset=null,this._app.i18n.off(xa.EVENT_CHANGE,this._onSetLocale,this),this.off()}}const fc="msdf",pL="bitmap",vo=0,Ja=1,iu=2,ov=3,ru=4,au=5,nu=6,ou=7,lg=8,mL=` 	
\r\v\f`,_L=/[\w|/]/;class gL{constructor(t){this._symbols=t,this._index=0,this._last=0,this._cur=this._symbols.length>0?this._symbols[0]:null,this._buf=[],this._mode="text",this._error=null}read(){let t=this._read();for(;t===lg;)t=this._read();return t!==vo&&t!==Ja&&(this._last=this._index),t}buf(){return this._buf}last(){return this._last}error(){return this._error}debugPrint(){const t=["EOF","ERROR","TEXT","OPEN_BRACKET","CLOSE_BRACKET","EQUALS","STRING","IDENTIFIER","WHITESPACE"];let e=this.read(),s="";for(;s+=`${(s.length>0?`
`:"")+t[e]} '${this.buf().join("")}'`,!(e===vo||e===Ja);)e=this.read();return s}_read(){return this._buf=[],this._eof()?vo:this._mode==="text"?this._text():this._tag()}_text(){for(;;)switch(this._cur){case null:return this._buf.length>0?iu:vo;case"[":return this._mode="tag",this._buf.length>0?iu:this._tag();case"\\":switch(this._next(),this._cur){case"[":this._store();break;default:this._output("\\");break}break;default:this._store();break}}_tag(){switch(this._cur){case null:return this._error="unexpected end of input reading tag",Ja;case"[":return this._store(),ov;case"]":return this._store(),this._mode="text",ru;case"=":return this._store(),au;case" ":case"	":case`
`:case"\r":case"\v":case"\f":return this._whitespace();case'"':return this._string();default:return this._isIdentifierSymbol(this._cur)?this._identifier():(this._error="unrecognized character",Ja)}}_whitespace(){for(this._store();mL.indexOf(this._cur)!==-1;)this._store();return lg}_string(){for(this._next();;)switch(this._cur){case null:return this._error="unexpected end of input reading string",Ja;case'"':return this._next(),nu;default:this._store();break}}_identifier(){for(this._store();this._cur!==null&&this._isIdentifierSymbol(this._cur);)this._store();return ou}_isIdentifierSymbol(t){return t.length===1&&t.match(_L)!==null}_eof(){return this._cur===null}_next(){return this._eof()||(this._index++,this._cur=this._index<this._symbols.length?this._symbols[this._index]:null),this._cur}_store(){return this._buf.push(this._cur),this._next()}_output(t){this._buf.push(t)}}class SL{constructor(t){this._scanner=new gL(t),this._error=null}parse(t,e){for(;;)switch(this._scanner.read()){case vo:return!0;case Ja:return!1;case iu:Array.prototype.push.apply(t,this._scanner.buf());break;case ov:if(!this._parseTag(t,e))return!1;break;default:return!1}}error(){return`Error evaluating markup at #${this._scanner.last().toString()} (${this._scanner.error()||this._error})`}_parseTag(t,e){let s=this._scanner.read();if(s!==ou)return this._error="expected identifier",!1;const i=this._scanner.buf().join("");if(i[0]==="/"){for(let a=e.length-1;a>=0;--a)if(i===`/${e[a].name}`&&e[a].end===null)return e[a].end=t.length,s=this._scanner.read(),s!==ru?(this._error="expected close bracket",!1):!0;return this._error="failed to find matching tag",!1}const r={name:i,value:null,attributes:{},start:t.length,end:null};if(s=this._scanner.read(),s===au){if(s=this._scanner.read(),s!==nu)return this._error="expected string",!1;r.value=this._scanner.buf().join(""),s=this._scanner.read()}for(;;){switch(s){case ru:return e.push(r),!0;case ou:{const a=this._scanner.buf().join("");if(s=this._scanner.read(),s!==au)return this._error="expected equals",!1;if(s=this._scanner.read(),s!==nu)return this._error="expected string",!1;const n=this._scanner.buf().join("");r.attributes[a]=n;break}default:return this._error="expected close bracket or identifier",!1}s=this._scanner.read()}}}function lv(l,t){for(const e in t){if(!t.hasOwnProperty(e))continue;const s=t[e];s instanceof Object?(l.hasOwnProperty(e)||(l[e]={}),lv(l[e],t[e])):l[e]=s}}function yL(l){if(l.length===0)return null;const t={};for(let e=0;e<l.length;++e){const s=l[e],i={};i[s.name]={value:s.value,attributes:s.attributes},lv(t,i)}return t}function vL(l,t){if(l.length===0)return null;const e={};for(let d=0;d<l.length;++d){const f=l[d];e.hasOwnProperty(f.start)?e[f.start].open===null?e[f.start].open=[f]:e[f.start].open.push(f):e[f.start]={open:[f],close:null},e.hasOwnProperty(f.end)?e[f.end].close===null?e[f.end].close=[f]:e[f.end].close.push(f):e[f.end]={open:null,close:[f]}}let s=[];function i(d){s=s.filter(f=>d.find(u=>u===f)===void 0)}function r(d){for(let f=0;f<d.length;++f)s.push(d[f])}const a=Object.keys(e).sort((d,f)=>d-f),n=[];for(let d=0;d<a.length;++d){const f=e[a[d]];f.close!==null&&i(f.close),f.open!==null&&r(f.open),n.push({start:a[d],tags:yL(s)})}const o=[];let c=null;for(let d=0;d<n.length;++d){const f=n[d];for(;o.length<f.start;)o.push(c?c.tags:null);c=f}for(;o.length<t;)o.push(null);return o}function xL(l){const t=new SL(l),e=[],s=[];if(!t.parse(e,s))return console.warn(t.error()),{symbols:l,tags:null};const i=s.find(a=>a.end===null);if(i)return console.warn(`Markup error: found unclosed tag='${i.name}'`),{symbols:l,tags:null};const r=vL(s,e.length);return{symbols:e,tags:r}}class TL{static evaluate(t){return xL(t)}}class wL{constructor(){this.count=0,this.quad=0,this.lines={},this.positions=[],this.normals=[],this.uvs=[],this.colors=[],this.indices=[],this.outlines=[],this.shadows=[],this.meshInstance=null}}function EL(l,t){const e=new Ve(l);return e.setPositions(t.positions),e.setNormals(t.normals),e.setColors32(t.colors),e.setUvs(0,t.uvs),e.setIndices(t.indices),e.setVertexStream(zo,t.outlines,3,void 0,ze,!1),e.setVertexStream(Vo,t.shadows,3,void 0,ze,!1),e.update(),e}const hg=/^[\r\n]$/,bL=/^[ \t]$/,cg=/^[ \t\-]|\u200b$/,AL=/^[a-z0-9]$/i,dg=/^[\u1100-\u11ff]|[\u3000-\u9fff\ua960-\ua97f]|[\uac00-\ud7ff]$/,CL=/^[〕〉》」』】〙〗〟ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻]$/,PL=["​","؜","‎","‏","‪","‫","‬","‭","‮","⁦","⁧","⁨","⁩"],DL={width:0,height:0,xadvance:0,xoffset:0,yoffset:0},fg=new ae,IL=new J,We=new ae;class ML{constructor(t){this._element=t,this._system=t.system,this._entity=t.entity,this._text="",this._symbols=[],this._colorPalette=[],this._outlinePalette=[],this._shadowPalette=[],this._symbolColors=null,this._symbolOutlineParams=null,this._symbolShadowParams=null,this._i18nKey=null,this._fontAsset=new uL(this._system.app),this._fontAsset.disableLocalization=!0,this._fontAsset.on("load",this._onFontLoad,this),this._fontAsset.on("change",this._onFontChange,this),this._fontAsset.on("remove",this._onFontRemove,this),this._font=null,this._color=new ae(1,1,1,1),this._colorUniform=new Float32Array(3),this._spacing=1,this._fontSize=32,this._fontMinY=0,this._fontMaxY=0,this._originalFontSize=32,this._maxFontSize=32,this._minFontSize=8,this._autoFitWidth=!1,this._autoFitHeight=!1,this._maxLines=-1,this._lineHeight=32,this._scaledLineHeight=32,this._wrapLines=!1,this._drawOrder=0,this._alignment=new J(.5,.5),this._autoWidth=!0,this._autoHeight=!0,this.width=0,this.height=0,this._node=new De,this._model=new ir,this._model.graph=this._node,this._entity.addChild(this._node),this._meshInfo=[],this._material=null,this._aabbDirty=!0,this._aabb=new Me,this._noResize=!1,this._currentMaterialType=null,this._maskedMaterialSrc=null,this._rtlReorder=!1,this._unicodeConverter=!1,this._rtl=!1,this._outlineColor=new ae(0,0,0,1),this._outlineColorUniform=new Float32Array(4),this._outlineThicknessScale=.2,this._outlineThickness=0,this._shadowColor=new ae(0,0,0,1),this._shadowColorUniform=new Float32Array(4),this._shadowOffsetScale=.005,this._shadowOffset=new J(0,0),this._shadowOffsetUniform=new Float32Array(2),this._enableMarkup=!1,this._onScreenChange(this._element.screen),t.on("resize",this._onParentResize,this),t.on("set:screen",this._onScreenChange,this),t.on("screen:set:screenspace",this._onScreenSpaceChange,this),t.on("set:draworder",this._onDrawOrderChange,this),t.on("set:pivot",this._onPivotChange,this),this._system.app.i18n.on(xa.EVENT_CHANGE,this._onLocaleSet,this),this._system.app.i18n.on("data:add",this._onLocalizationData,this),this._system.app.i18n.on("data:remove",this._onLocalizationData,this),this._rangeStart=0,this._rangeEnd=0}destroy(){this._setMaterial(null),this._model&&(this._element.removeModelFromLayers(this._model),this._model.destroy(),this._model=null),this._fontAsset.destroy(),this.font=null,this._element.off("resize",this._onParentResize,this),this._element.off("set:screen",this._onScreenChange,this),this._element.off("screen:set:screenspace",this._onScreenSpaceChange,this),this._element.off("set:draworder",this._onDrawOrderChange,this),this._element.off("set:pivot",this._onPivotChange,this),this._system.app.i18n.off(xa.EVENT_CHANGE,this._onLocaleSet,this),this._system.app.i18n.off("data:add",this._onLocalizationData,this),this._system.app.i18n.off("data:remove",this._onLocalizationData,this)}_onParentResize(t,e){this._noResize||this._font&&this._updateText()}_onScreenChange(t){t?this._updateMaterial(t.screen.screenSpace):this._updateMaterial(!1)}_onScreenSpaceChange(t){this._updateMaterial(t)}_onDrawOrderChange(t){if(this._drawOrder=t,this._model)for(let e=0,s=this._model.meshInstances.length;e<s;e++)this._model.meshInstances[e].drawOrder=t}_onPivotChange(t){this._font&&this._updateText()}_onLocaleSet(t){if(this._i18nKey){if(this.fontAsset){const e=this._system.app.assets.get(this.fontAsset);(!e||!e.resource||e.resource!==this._font)&&(this.font=null)}this._resetLocalizedText()}}_onLocalizationData(t,e){this._i18nKey&&e[this._i18nKey]&&this._resetLocalizedText()}_resetLocalizedText(){this._setText(this._system.app.i18n.getText(this._i18nKey))}_setText(t){if(this.unicodeConverter){const e=this._system.getUnicodeConverter();e?t=e(t):console.warn("Element created with unicodeConverter option but no unicodeConverter function registered")}this._text!==t&&(this._font&&this._updateText(t),this._text=t)}_updateText(t){let e;if(t===void 0&&(t=this._text),this._symbols=wh.getSymbols(t.normalize?t.normalize("NFC"):t),this._symbols.length===0&&(this._symbols=[" "]),this._enableMarkup){const f=TL.evaluate(this._symbols);this._symbols=f.symbols,e=f.tags||[]}if(this._rtlReorder){const f=this._system.app.systems.element.getRtlReorder();if(f){const u=f(this._symbols);this._rtl=u.rtl,this._symbols=u.mapping.map(function(p){return this._symbols[p]},this),e&&(e=u.mapping.map(p=>e[p]))}else console.warn("Element created with rtlReorder option but no rtlReorder function registered")}else this._rtl=!1;const s=(f,u)=>`${f.toString(!0).toLowerCase()}:${u.toFixed(2)}`,i=(f,u)=>`${f.toString(!0).toLowerCase()}:${u.x.toFixed(2)}:${u.y.toFixed(2)}`;if(e){const f={},u={},p={};this._colorPalette=[Math.round(this._color.r*255),Math.round(this._color.g*255),Math.round(this._color.b*255)],this._outlinePalette=[Math.round(this._outlineColor.r*255),Math.round(this._outlineColor.g*255),Math.round(this._outlineColor.b*255),Math.round(this._outlineColor.a*255),Math.round(this._outlineThickness*255)],this._shadowPalette=[Math.round(this._shadowColor.r*255),Math.round(this._shadowColor.g*255),Math.round(this._shadowColor.b*255),Math.round(this._shadowColor.a*255),Math.round(this._shadowOffset.x*127),Math.round(this._shadowOffset.y*127)],this._symbolColors=[],this._symbolOutlineParams=[],this._symbolShadowParams=[],f[this._color.toString(!1).toLowerCase()]=0,u[s(this._outlineColor,this._outlineThickness)]=0,p[i(this._shadowColor,this._shadowOffset)]=0;for(let m=0,_=this._symbols.length;m<_;++m){const S=e[m];let g=0;if(S&&S.color&&S.color.value){const x=S.color.value;if(x.length===7&&x[0]==="#"){const b=x.substring(1).toLowerCase();f.hasOwnProperty(b)?g=f[b]:/^[0-9a-f]{6}$/.test(b)&&(g=this._colorPalette.length/3,f[b]=g,this._colorPalette.push(parseInt(b.substring(0,2),16)),this._colorPalette.push(parseInt(b.substring(2,4),16)),this._colorPalette.push(parseInt(b.substring(4,6),16)))}}this._symbolColors.push(g);let v=0;if(S&&S.outline&&(S.outline.attributes.color||S.outline.attributes.thickness)){let x=S.outline.attributes.color?fg.fromString(S.outline.attributes.color):this._outlineColor,b=Number(S.outline.attributes.thickness);(Number.isNaN(x.r)||Number.isNaN(x.g)||Number.isNaN(x.b)||Number.isNaN(x.a))&&(x=this._outlineColor),Number.isNaN(b)&&(b=this._outlineThickness);const C=s(x,b);u.hasOwnProperty(C)?v=u[C]:(v=this._outlinePalette.length/5,u[C]=v,this._outlinePalette.push(Math.round(x.r*255),Math.round(x.g*255),Math.round(x.b*255),Math.round(x.a*255),Math.round(b*255)))}this._symbolOutlineParams.push(v);let w=0;if(S&&S.shadow&&(S.shadow.attributes.color||S.shadow.attributes.offset||S.shadow.attributes.offsetX||S.shadow.attributes.offsetY)){let x=S.shadow.attributes.color?fg.fromString(S.shadow.attributes.color):this._shadowColor;const b=Number(S.shadow.attributes.offset),C=Number(S.shadow.attributes.offsetX),D=Number(S.shadow.attributes.offsetY);(Number.isNaN(x.r)||Number.isNaN(x.g)||Number.isNaN(x.b)||Number.isNaN(x.a))&&(x=this._shadowColor);const T=IL.set(Number.isNaN(C)?Number.isNaN(b)?this._shadowOffset.x:b:C,Number.isNaN(D)?Number.isNaN(b)?this._shadowOffset.y:b:D),I=i(x,T);p.hasOwnProperty(I)?w=p[I]:(w=this._shadowPalette.length/6,p[I]=w,this._shadowPalette.push(Math.round(x.r*255),Math.round(x.g*255),Math.round(x.b*255),Math.round(x.a*255),Math.round(T.x*127),Math.round(T.y*127)))}this._symbolShadowParams.push(w)}}else this._colorPalette=[],this._symbolColors=null,this._symbolOutlineParams=null,this._symbolShadowParams=null;this._updateMaterialEmissive(),this._updateMaterialOutline(),this._updateMaterialShadow();const r=this._calculateCharsPerTexture();let a=!1;const n=this._element,o=n._isScreenSpace(),c=n._isScreenCulled(),d=function(f){return n.isVisibleForCamera(f)};for(let f=0,u=this._meshInfo.length;f<u;f++){const p=r[f]||0,m=this._meshInfo[f];if(m.count!==p){if(a||(n.removeModelFromLayers(this._model),a=!0),m.count=p,m.positions.length=m.normals.length=p*3*4,m.indices.length=p*3*2,m.uvs.length=p*2*4,m.colors.length=p*4*4,m.outlines.length=p*4*3,m.shadows.length=p*4*3,m.meshInstance&&this._removeMeshInstance(m.meshInstance),p===0){m.meshInstance=null;continue}for(let g=0;g<p;g++)m.indices[g*3*2+0]=g*4,m.indices[g*3*2+1]=g*4+1,m.indices[g*3*2+2]=g*4+3,m.indices[g*3*2+3]=g*4+2,m.indices[g*3*2+4]=g*4+3,m.indices[g*3*2+5]=g*4+1,m.normals[g*4*3+0]=0,m.normals[g*4*3+1]=0,m.normals[g*4*3+2]=-1,m.normals[g*4*3+3]=0,m.normals[g*4*3+4]=0,m.normals[g*4*3+5]=-1,m.normals[g*4*3+6]=0,m.normals[g*4*3+7]=0,m.normals[g*4*3+8]=-1,m.normals[g*4*3+9]=0,m.normals[g*4*3+10]=0,m.normals[g*4*3+11]=-1;const _=EL(this._system.app.graphicsDevice,m),S=new Ge(_,this._material,this._node);if(S.name=`Text Element: ${this._entity.name}`,S.castShadow=!1,S.receiveShadow=!1,S.cull=!o,S.screenSpace=o,S.drawOrder=this._drawOrder,c&&(S.cull=!0,S.isVisibleFunc=d),this._setTextureParams(S,this._font.textures[f]),S.setParameter("material_emissive",this._colorUniform),S.setParameter("material_opacity",this._color.a),S.setParameter("font_sdfIntensity",this._font.intensity),S.setParameter("font_pxrange",this._getPxRange(this._font)),S.setParameter("font_textureWidth",this._font.data.info.maps[f].width),S.setParameter("outline_color",this._outlineColorUniform),S.setParameter("outline_thickness",this._outlineThicknessScale*this._outlineThickness),S.setParameter("shadow_color",this._shadowColorUniform),this._symbolShadowParams)this._shadowOffsetUniform[0]=0,this._shadowOffsetUniform[1]=0;else{const g=-this._font.data.info.maps[f].width/this._font.data.info.maps[f].height;this._shadowOffsetUniform[0]=this._shadowOffsetScale*this._shadowOffset.x,this._shadowOffsetUniform[1]=g*this._shadowOffsetScale*this._shadowOffset.y}S.setParameter("shadow_offset",this._shadowOffsetUniform),m.meshInstance=S,this._model.meshInstances.push(S)}}this._element.maskedBy&&this._element._setMaskedBy(this._element.maskedBy),a&&this._element.enabled&&this._entity.enabled&&this._element.addModelToLayers(this._model),this._updateMeshes(),this._rangeStart=0,this._rangeEnd=this._symbols.length,this._updateRenderRange()}_removeMeshInstance(t){t.destroy();const e=this._model.meshInstances.indexOf(t);e!==-1&&this._model.meshInstances.splice(e,1)}_setMaterial(t){if(this._material=t,this._model)for(let e=0,s=this._model.meshInstances.length;e<s;e++){const i=this._model.meshInstances[e];i.material=t}}_updateMaterial(t){const e=this._element,s=e._isScreenCulled(),i=function(a){return e.isVisibleForCamera(a)},r=this._font&&this._font.type===fc;if(this._material=this._system.getTextElementMaterial(t,r,this._enableMarkup),this._model)for(let a=0,n=this._model.meshInstances.length;a<n;a++){const o=this._model.meshInstances[a];o.cull=!t,o.material=this._material,o.screenSpace=t,s?(o.cull=!0,o.isVisibleFunc=i):o.isVisibleFunc=null}}_updateMaterialEmissive(){this._symbolColors?(this._colorUniform[0]=1,this._colorUniform[1]=1,this._colorUniform[2]=1):(We.linear(this._color),this._colorUniform[0]=We.r,this._colorUniform[1]=We.g,this._colorUniform[2]=We.b)}_updateMaterialOutline(){this._symbolOutlineParams?(this._outlineColorUniform[0]=0,this._outlineColorUniform[1]=0,this._outlineColorUniform[2]=0,this._outlineColorUniform[3]=1):(We.linear(this._outlineColor),this._outlineColorUniform[0]=We.r,this._outlineColorUniform[1]=We.g,this._outlineColorUniform[2]=We.b,this._outlineColorUniform[3]=We.a)}_updateMaterialShadow(){this._symbolOutlineParams?(this._shadowColorUniform[0]=0,this._shadowColorUniform[1]=0,this._shadowColorUniform[2]=0,this._shadowColorUniform[3]=0):(We.linear(this._shadowColor),this._shadowColorUniform[0]=We.r,this._shadowColorUniform[1]=We.g,this._shadowColorUniform[2]=We.b,this._shadowColorUniform[3]=We.a)}_isWordBoundary(t){return cg.test(t)}_isValidNextChar(t){return t!==null&&!CL.test(t)}_isNextCJKBoundary(t,e){return dg.test(t)&&(cg.test(e)||AL.test(e))}_isNextCJKWholeWord(t){return dg.test(t)}_updateMeshes(){const t=this._font.data,e=this,s=Math.min(this._minFontSize,this._maxFontSize),i=this._maxFontSize,r=this._shouldAutoFit();r&&(this._fontSize=this._maxFontSize);const a=32,n=this._symbols.length;let o=0,c=0,d=0,f=0,u=1,p=0,m=0,_=0,S=0,g=0,v=0;const w=Math.abs(this._element.anchor.x-this._element.anchor.z)>=1e-4;let x=this._element.calculatedWidth;(this.autoWidth&&!w||!this._wrapLines)&&(x=Number.POSITIVE_INFINITY);let b=0,C=0,D,T,I,L;function E(R,B,V){e._lineWidths.push(Math.abs(V));const O=_>B?B+1:_,M=_>B?_+1:B,P=R.slice(O,M);if(v){let N=P.length;for(;N--&&v>0;)hg.test(P[N])&&(P.splice(N,1),v--)}e._lineContents.push(P.join("")),o=0,c-=e._scaledLineHeight,u++,S=0,g=0,v=0,p=0,_=B}let F=!0;for(;F;){F=!1,r?this._scaledLineHeight=this._lineHeight*this._fontSize/(this._maxFontSize||1e-4):this._scaledLineHeight=this._lineHeight,this.width=0,this.height=0,this._lineWidths=[],this._lineContents=[],o=0,c=0,d=0,f=0,u=1,p=0,m=0,_=0,S=0,g=0,v=0;const R=this._fontSize/a;b=this._fontMinY*R,C=this._fontMaxY*R;for(let X=0;X<this._meshInfo.length;X++)this._meshInfo[X].quad=0,this._meshInfo[X].lines={};let B=255,V=255,O=255,M=255+255*256,P=255+255*256,N=0,U=255+255*256,z=255+255*256,$=127+127*256;for(let X=0;X<n;X++){if(D=this._symbols[X],L=X+1>=n?null:this._symbols[X+1],hg.test(D)){v++,(!this._wrapLines||this._maxLines<0||u<this._maxLines)&&(E(this._symbols,X,f),m=X+1,_=X+1);continue}let q=0,re=0,ee=0,se=1,ne,Q;if(T=t.chars[D],!T)if(PL.indexOf(D)!==-1)T=DL;else{if(t.chars[" "])T=t.chars[" "];else for(const j in t.chars){T=t.chars[j];break}t.missingChars||(t.missingChars=new Set),t.missingChars.has(D)||(console.warn(`Character '${D}' is missing from the font ${t.info.face}`),t.missingChars.add(D))}if(T){let j=0;if(g>0){const pt=this._font.data.kerning;if(pt){const Ce=pt[wh.getCodePoint(this._symbols[X-1])||0];Ce&&(j=Ce[wh.getCodePoint(this._symbols[X])||0]||0)}}ne=T.scale||1,Q=(T.width+T.height)/2,se=R*Q/ne,ee=(T.xadvance+j)*R,q=(T.xoffset-j)*R,re=T.yoffset*R}else console.error(`Couldn't substitute missing character: '${D}'`);const ce=bL.test(D),le=T&&T.map||0,he=-this._font.data.info.maps[le].width/this._font.data.info.maps[le].height,te=this._meshInfo[le],He=o+this._spacing*ee;if(He>x&&g>0&&!ce&&(this._maxLines<0||u<this._maxLines))if(S===0)m=X,E(this._symbols,X,f);else{const j=Math.max(X-m,0);if(this._meshInfo.length<=1)te.lines[u-1]-=j,te.quad-=j;else{const pt=m,Ce=X;for(let Je=pt;Je<Ce;Je++){const bt=this._symbols[Je],Ot=t.chars[bt],Qs=this._meshInfo[Ot&&Ot.map||0];Qs.lines[u-1]-=1,Qs.quad-=1}}X-=j+1,E(this._symbols,m,p);continue}I=te.quad,te.lines[u-1]=I;let ss=o-q,Xt=ss+se;const vi=c-re,xi=vi+se;if(this._rtl){const j=se-q-this._spacing*ee-q;ss-=j,Xt-=j}te.positions[I*4*3+0]=ss,te.positions[I*4*3+1]=vi,te.positions[I*4*3+2]=d,te.positions[I*4*3+3]=Xt,te.positions[I*4*3+4]=vi,te.positions[I*4*3+5]=d,te.positions[I*4*3+6]=Xt,te.positions[I*4*3+7]=xi,te.positions[I*4*3+8]=d,te.positions[I*4*3+9]=ss,te.positions[I*4*3+10]=xi,te.positions[I*4*3+11]=d,this.width=Math.max(this.width,He);let ys;if(this._shouldAutoFitWidth()&&this.width>this._element.calculatedWidth&&(ys=Math.floor(this._element.fontSize*this._element.calculatedWidth/(this.width||1e-4)),ys=Y.clamp(ys,s,i),ys!==this._element.fontSize)){this._fontSize=ys,F=!0;break}if(this.height=Math.max(this.height,C-(c+b)),this._shouldAutoFitHeight()&&this.height>this._element.calculatedHeight&&(ys=Y.clamp(this._fontSize-1,s,i),ys!==this._element.fontSize)){this._fontSize=ys,F=!0;break}o+=this._spacing*ee,ce||(f=o),(this._isWordBoundary(D)||this._isValidNextChar(L)&&(this._isNextCJKBoundary(D,L)||this._isNextCJKWholeWord(L)))&&(S++,p=f,m=X+1),g++;const ye=this._getUv(D);if(te.uvs[I*4*2+0]=ye[0],te.uvs[I*4*2+1]=1-ye[1],te.uvs[I*4*2+2]=ye[2],te.uvs[I*4*2+3]=1-ye[1],te.uvs[I*4*2+4]=ye[2],te.uvs[I*4*2+5]=1-ye[3],te.uvs[I*4*2+6]=ye[0],te.uvs[I*4*2+7]=1-ye[3],this._symbolColors){const j=this._symbolColors[X]*3;B=this._colorPalette[j],V=this._colorPalette[j+1],O=this._colorPalette[j+2]}if(te.colors[I*4*4+0]=B,te.colors[I*4*4+1]=V,te.colors[I*4*4+2]=O,te.colors[I*4*4+3]=255,te.colors[I*4*4+4]=B,te.colors[I*4*4+5]=V,te.colors[I*4*4+6]=O,te.colors[I*4*4+7]=255,te.colors[I*4*4+8]=B,te.colors[I*4*4+9]=V,te.colors[I*4*4+10]=O,te.colors[I*4*4+11]=255,te.colors[I*4*4+12]=B,te.colors[I*4*4+13]=V,te.colors[I*4*4+14]=O,te.colors[I*4*4+15]=255,this._symbolOutlineParams){const j=this._symbolOutlineParams[X]*5;M=this._outlinePalette[j]+this._outlinePalette[j+1]*256,P=this._outlinePalette[j+2]+this._outlinePalette[j+3]*256,N=this._outlinePalette[j+4]}if(te.outlines[I*4*3+0]=M,te.outlines[I*4*3+1]=P,te.outlines[I*4*3+2]=N,te.outlines[I*4*3+3]=M,te.outlines[I*4*3+4]=P,te.outlines[I*4*3+5]=N,te.outlines[I*4*3+6]=M,te.outlines[I*4*3+7]=P,te.outlines[I*4*3+8]=N,te.outlines[I*4*3+9]=M,te.outlines[I*4*3+10]=P,te.outlines[I*4*3+11]=N,this._symbolShadowParams){const j=this._symbolShadowParams[X]*6;U=this._shadowPalette[j]+this._shadowPalette[j+1]*256,z=this._shadowPalette[j+2]+this._shadowPalette[j+3]*256,$=this._shadowPalette[j+4]+127+Math.round(he*this._shadowPalette[j+5]+127)*256}te.shadows[I*4*3+0]=U,te.shadows[I*4*3+1]=z,te.shadows[I*4*3+2]=$,te.shadows[I*4*3+3]=U,te.shadows[I*4*3+4]=z,te.shadows[I*4*3+5]=$,te.shadows[I*4*3+6]=U,te.shadows[I*4*3+7]=z,te.shadows[I*4*3+8]=$,te.shadows[I*4*3+9]=U,te.shadows[I*4*3+10]=z,te.shadows[I*4*3+11]=$,te.quad++}F||_<n&&E(this._symbols,n,o)}this._noResize=!0,this.autoWidth=this._autoWidth,this.autoHeight=this._autoHeight,this._noResize=!1;const k=this._element.pivot.x,H=this._element.pivot.y,G=this._alignment.x,W=this._alignment.y;for(let R=0;R<this._meshInfo.length;R++){if(this._meshInfo[R].count===0)continue;let B=0;for(const P in this._meshInfo[R].lines){const N=this._meshInfo[R].lines[P],U=this._lineWidths[parseInt(P,10)],z=-k*this._element.calculatedWidth+G*(this._element.calculatedWidth-U)*(this._rtl?-1:1),$=(1-H)*this._element.calculatedHeight-C-(1-W)*(this._element.calculatedHeight-this.height);for(let X=B;X<=N;X++)this._meshInfo[R].positions[X*4*3]+=z,this._meshInfo[R].positions[X*4*3+3]+=z,this._meshInfo[R].positions[X*4*3+6]+=z,this._meshInfo[R].positions[X*4*3+9]+=z,this._meshInfo[R].positions[X*4*3+1]+=$,this._meshInfo[R].positions[X*4*3+4]+=$,this._meshInfo[R].positions[X*4*3+7]+=$,this._meshInfo[R].positions[X*4*3+10]+=$;if(this._rtl)for(let X=B;X<=N;X++){const K=X*4*3;for(let ee=0;ee<4;++ee)this._meshInfo[R].positions[K+ee*3]=this._element.calculatedWidth-this._meshInfo[R].positions[K+ee*3]+z*2;const q=this._meshInfo[R].positions[K+3],re=this._meshInfo[R].positions[K+6];this._meshInfo[R].positions[K+3]=this._meshInfo[R].positions[K+0],this._meshInfo[R].positions[K+6]=this._meshInfo[R].positions[K+9],this._meshInfo[R].positions[K+0]=q,this._meshInfo[R].positions[K+9]=re}B=N+1}const V=this._meshInfo[R].count*4,O=this._meshInfo[R].quad*4,M=new Po(this._meshInfo[R].meshInstance.mesh.vertexBuffer);for(let P=0;P<V;P++)P>=O?(M.element[Ae].set(0,0,0),M.element[ts].set(0,0),M.element[Ht].set(0,0,0,0),M.element[zo].set(0,0,0,0),M.element[Vo].set(0,0,0,0)):(M.element[Ae].set(this._meshInfo[R].positions[P*3+0],this._meshInfo[R].positions[P*3+1],this._meshInfo[R].positions[P*3+2]),M.element[ts].set(this._meshInfo[R].uvs[P*2+0],this._meshInfo[R].uvs[P*2+1]),M.element[Ht].set(this._meshInfo[R].colors[P*4+0],this._meshInfo[R].colors[P*4+1],this._meshInfo[R].colors[P*4+2],this._meshInfo[R].colors[P*4+3]),M.element[zo].set(this._meshInfo[R].outlines[P*3+0],this._meshInfo[R].outlines[P*3+1],this._meshInfo[R].outlines[P*3+2]),M.element[Vo].set(this._meshInfo[R].shadows[P*3+0],this._meshInfo[R].shadows[P*3+1],this._meshInfo[R].shadows[P*3+2])),M.next();M.end(),this._meshInfo[R].meshInstance.mesh.aabb.compute(this._meshInfo[R].positions),this._meshInfo[R].meshInstance._aabbVer=-1}this._aabbDirty=!0}_onFontRender(){this.font=this._font}_onFontLoad(t){this.font!==t.resource&&(this.font=t.resource)}_onFontChange(t,e,s,i){if(e==="data"){this._font.data=s;const r=this._font.data.info.maps.length;for(let a=0;a<r;a++){if(!this._meshInfo[a])continue;const n=this._meshInfo[a].meshInstance;n&&(n.setParameter("font_sdfIntensity",this._font.intensity),n.setParameter("font_pxrange",this._getPxRange(this._font)),n.setParameter("font_textureWidth",this._font.data.info.maps[a].width))}}}_onFontRemove(t){}_setTextureParams(t,e){this._font&&(this._font.type===fc?(t.deleteParameter("texture_emissiveMap"),t.deleteParameter("texture_opacityMap"),t.setParameter("texture_msdfMap",e)):this._font.type===pL&&(t.deleteParameter("texture_msdfMap"),t.setParameter("texture_emissiveMap",e),t.setParameter("texture_opacityMap",e)))}_getPxRange(t){const e=Object.keys(this._font.data.chars);for(let s=0;s<e.length;s++){const i=this._font.data.chars[e[s]];if(i.range)return(i.scale||1)*i.range}return 2}_getUv(t){const e=this._font.data;if(!e.chars[t])return e.chars[" "]?this._getUv(" "):[0,0,0,0];const s=e.chars[t].map,i=e.info.maps[s].width,r=e.info.maps[s].height,a=e.chars[t].x,n=e.chars[t].y,o=a,c=n,d=a+e.chars[t].width,f=n-e.chars[t].height,u=1-e.chars[t].height/r;return[o/i,u-c/r,d/i,u-f/r]}onEnable(){this._fontAsset.autoLoad=!0,this._model&&this._element.addModelToLayers(this._model)}onDisable(){this._fontAsset.autoLoad=!1,this._model&&this._element.removeModelFromLayers(this._model)}_setStencil(t){if(this._model){const e=this._model.meshInstances;for(let s=0;s<e.length;s++)e[s].stencilFront=t,e[s].stencilBack=t}}_shouldAutoFitWidth(){return this._autoFitWidth&&!this._autoWidth}_shouldAutoFitHeight(){return this._autoFitHeight&&!this._autoHeight}_shouldAutoFit(){return this._autoFitWidth&&!this._autoWidth||this._autoFitHeight&&!this._autoHeight}_calculateCharsPerTexture(t){const e={};t===void 0&&(t=this._symbols.length);for(let s=0,i=t;s<i;s++){const r=this._symbols[s];let a=this._font.data.chars[r];a||(a=this._font.data.chars[" "],a||(a=this._font.data.chars[Object.keys(this._font.data.chars)[0]]));const n=a.map;e[n]?e[n]++:e[n]=1}return e}_updateRenderRange(){const t=this._rangeStart===0?0:this._calculateCharsPerTexture(this._rangeStart),e=this._rangeEnd===0?0:this._calculateCharsPerTexture(this._rangeEnd);for(let s=0,i=this._meshInfo.length;s<i;s++){const r=t[s]||0,a=e[s]||0,n=this._meshInfo[s].meshInstance;if(n){const o=n.mesh;o&&(o.primitive[0].base=r*3*2,o.primitive[0].count=(a-r)*3*2)}}}set text(t){this._i18nKey=null;const e=t!=null&&t.toString()||"";this._setText(e)}get text(){return this._text}set key(t){const e=t!==null?t.toString():null;this._i18nKey!==e&&(this._i18nKey=e,e?(this._fontAsset.disableLocalization=!1,this._resetLocalizedText()):this._fontAsset.disableLocalization=!0)}get key(){return this._i18nKey}set color(t){const e=t.r,s=t.g,i=t.b;if(this._color===t&&console.warn("Setting element.color to itself will have no effect"),!(this._color.r===e&&this._color.g===s&&this._color.b===i)&&(this._color.r=e,this._color.g=s,this._color.b=i,!!this._model)){if(this._symbolColors)this._font&&this._updateText();else{We.linear(this._color),this._colorUniform[0]=We.r,this._colorUniform[1]=We.g,this._colorUniform[2]=We.b;for(let r=0,a=this._model.meshInstances.length;r<a;r++)this._model.meshInstances[r].setParameter("material_emissive",this._colorUniform)}this._element&&this._element.fire("set:color",this._color)}}get color(){return this._color}set opacity(t){if(this._color.a!==t&&(this._color.a=t,this._model))for(let e=0,s=this._model.meshInstances.length;e<s;e++)this._model.meshInstances[e].setParameter("material_opacity",t);this._element&&this._element.fire("set:opacity",t)}get opacity(){return this._color.a}set lineHeight(t){const e=this._lineHeight;this._lineHeight=t,this._scaledLineHeight=t,e!==t&&this._font&&this._updateText()}get lineHeight(){return this._lineHeight}set wrapLines(t){const e=this._wrapLines;this._wrapLines=t,e!==t&&this._font&&this._updateText()}get wrapLines(){return this._wrapLines}get lines(){return this._lineContents}set spacing(t){const e=this._spacing;this._spacing=t,e!==t&&this._font&&this._updateText()}get spacing(){return this._spacing}set fontSize(t){const e=this._fontSize;this._fontSize=t,this._originalFontSize=t,e!==t&&this._font&&this._updateText()}get fontSize(){return this._fontSize}set fontAsset(t){this._fontAsset.defaultAsset=t}get fontAsset(){return this._fontAsset.localizedAsset}set font(t){let e;if(this._font&&(e=this._font.type,this._font.off&&this._font.off("render",this._onFontRender,this)),this._font=t,this._fontMinY=0,this._fontMaxY=0,!t)return;const s=this._font.data;for(const r in s.chars){const a=s.chars[r];a.bounds&&(this._fontMinY=Math.min(this._fontMinY,a.bounds[1]),this._fontMaxY=Math.max(this._fontMaxY,a.bounds[3]))}if(this._font.on&&this._font.on("render",this._onFontRender,this),this._fontAsset.localizedAsset&&this._system.app.assets.get(this._fontAsset.localizedAsset).resource!==this._font&&(this._fontAsset.defaultAsset=null),t.type!==e){const r=this._element._isScreenSpace();this._updateMaterial(r)}for(let r=0,a=this._font.textures.length;r<a;r++)if(!this._meshInfo[r])this._meshInfo[r]=new wL;else{const n=this._meshInfo[r].meshInstance;n&&(n.setParameter("font_sdfIntensity",this._font.intensity),n.setParameter("font_pxrange",this._getPxRange(this._font)),n.setParameter("font_textureWidth",this._font.data.info.maps[r].width),this._setTextureParams(n,this._font.textures[r]))}let i=!1;for(let r=this._font.textures.length;r<this._meshInfo.length;r++)this._meshInfo[r].meshInstance&&(i||(this._element.removeModelFromLayers(this._model),i=!0),this._removeMeshInstance(this._meshInfo[r].meshInstance));this._meshInfo.length>this._font.textures.length&&(this._meshInfo.length=this._font.textures.length),this._updateText()}get font(){return this._font}set alignment(t){t instanceof J?this._alignment.set(t.x,t.y):this._alignment.set(t[0],t[1]),this._font&&this._updateText()}get alignment(){return this._alignment}set autoWidth(t){const e=this._autoWidth;if(this._autoWidth=t,t&&Math.abs(this._element.anchor.x-this._element.anchor.z)<1e-4&&(this._element.width=this.width),e!==t){const s=this._shouldAutoFit()?this._maxFontSize:this._originalFontSize;s!==this._fontSize&&(this._fontSize=s,this._font&&this._updateText())}}get autoWidth(){return this._autoWidth}set autoHeight(t){const e=this._autoHeight;if(this._autoHeight=t,t&&Math.abs(this._element.anchor.y-this._element.anchor.w)<1e-4&&(this._element.height=this.height),e!==t){const s=this._shouldAutoFit()?this._maxFontSize:this._originalFontSize;s!==this._fontSize&&(this._fontSize=s,this._font&&this._updateText())}}get autoHeight(){return this._autoHeight}set rtlReorder(t){this._rtlReorder!==t&&(this._rtlReorder=t,this._font&&this._updateText())}get rtlReorder(){return this._rtlReorder}set unicodeConverter(t){this._unicodeConverter!==t&&(this._unicodeConverter=t,this._setText(this._text))}get unicodeConverter(){return this._unicodeConverter}get aabb(){if(this._aabbDirty){let t=!1;for(let e=0;e<this._meshInfo.length;e++)this._meshInfo[e].meshInstance&&(t?this._aabb.add(this._meshInfo[e].meshInstance.aabb):(this._aabb.copy(this._meshInfo[e].meshInstance.aabb),t=!0));this._aabbDirty=!1}return this._aabb}set outlineColor(t){const e=t instanceof ae?t.r:t[0],s=t instanceof ae?t.g:t[1],i=t instanceof ae?t.b:t[2],r=t instanceof ae?t.a:t[3];if(this._outlineColor===t&&console.warn("Setting element.outlineColor to itself will have no effect"),!(this._outlineColor.r===e&&this._outlineColor.g===s&&this._outlineColor.b===i&&this._outlineColor.a===r)&&(this._outlineColor.r=e,this._outlineColor.g=s,this._outlineColor.b=i,this._outlineColor.a=r,!!this._model)){if(this._symbolOutlineParams)this._font&&this._updateText();else{We.linear(this._outlineColor),this._outlineColorUniform[0]=We.r,this._outlineColorUniform[1]=We.g,this._outlineColorUniform[2]=We.b,this._outlineColorUniform[3]=We.a;for(let a=0,n=this._model.meshInstances.length;a<n;a++)this._model.meshInstances[a].setParameter("outline_color",this._outlineColorUniform)}this._element&&this._element.fire("set:outline",this._color)}}get outlineColor(){return this._outlineColor}set outlineThickness(t){const e=this._outlineThickness;if(this._outlineThickness=t,e!==t&&this._font){if(!this._model)return;if(this._symbolOutlineParams)this._font&&this._updateText();else for(let s=0,i=this._model.meshInstances.length;s<i;s++)this._model.meshInstances[s].setParameter("outline_thickness",this._outlineThicknessScale*this._outlineThickness)}}get outlineThickness(){return this._outlineThickness}set shadowColor(t){const e=t instanceof ae?t.r:t[0],s=t instanceof ae?t.g:t[1],i=t instanceof ae?t.b:t[2],r=t instanceof ae?t.a:t[3];if(this._shadowColor===t&&y.warn("Setting element.shadowColor to itself will have no effect"),!(this._shadowColor.r===e&&this._shadowColor.g===s&&this._shadowColor.b===i&&this._shadowColor.a===r)&&(this._shadowColor.r=e,this._shadowColor.g=s,this._shadowColor.b=i,this._shadowColor.a=r,!!this._model))if(this._symbolShadowParams)this._font&&this._updateText();else{We.linear(this._shadowColor),this._shadowColorUniform[0]=We.r,this._shadowColorUniform[1]=We.g,this._shadowColorUniform[2]=We.b,this._shadowColorUniform[3]=We.a;for(let a=0,n=this._model.meshInstances.length;a<n;a++)this._model.meshInstances[a].setParameter("shadow_color",this._shadowColorUniform)}}get shadowColor(){return this._shadowColor}set shadowOffset(t){const e=t instanceof J?t.x:t[0],s=t instanceof J?t.y:t[1];if(!(this._shadowOffset.x===e&&this._shadowOffset.y===s)&&(this._shadowOffset.set(e,s),this._font&&this._model))if(this._symbolShadowParams)this._updateText();else for(let i=0,r=this._model.meshInstances.length;i<r;i++){const a=-this._font.data.info.maps[i].width/this._font.data.info.maps[i].height;this._shadowOffsetUniform[0]=this._shadowOffsetScale*this._shadowOffset.x,this._shadowOffsetUniform[1]=a*this._shadowOffsetScale*this._shadowOffset.y,this._model.meshInstances[i].setParameter("shadow_offset",this._shadowOffsetUniform)}}get shadowOffset(){return this._shadowOffset}set minFontSize(t){this._minFontSize!==t&&(this._minFontSize=t,this.font&&this._shouldAutoFit()&&this._updateText())}get minFontSize(){return this._minFontSize}set maxFontSize(t){this._maxFontSize!==t&&(this._maxFontSize=t,this.font&&this._shouldAutoFit()&&this._updateText())}get maxFontSize(){return this._maxFontSize}set autoFitWidth(t){this._autoFitWidth!==t&&(this._autoFitWidth=t,this._fontSize=this._shouldAutoFit()?this._maxFontSize:this._originalFontSize,this.font&&this._updateText())}get autoFitWidth(){return this._autoFitWidth}set autoFitHeight(t){this._autoFitHeight!==t&&(this._autoFitHeight=t,this._fontSize=this._shouldAutoFit()?this._maxFontSize:this._originalFontSize,this.font&&this._updateText())}get autoFitHeight(){return this._autoFitHeight}set maxLines(t){this._maxLines!==t&&(t===null&&this._maxLines===-1||(this._maxLines=t===null?-1:t,this.font&&this._wrapLines&&this._updateText()))}get maxLines(){return this._maxLines}set enableMarkup(t){if(t=!!t,this._enableMarkup===t)return;this._enableMarkup=t,this.font&&this._updateText();const e=this._element._isScreenSpace();this._updateMaterial(e)}get enableMarkup(){return this._enableMarkup}get symbols(){return this._symbols}get symbolColors(){return this._symbolColors===null?null:this._symbolColors.map(function(t){return this._colorPalette.slice(t*3,t*3+3)},this)}get symbolOutlineParams(){return this._symbolOutlineParams===null?null:this._symbolOutlineParams.map(function(t){return this._outlinePalette.slice(t*5,t*5+5)},this)}get symbolShadowParams(){return this._symbolShadowParams===null?null:this._symbolShadowParams.map(function(t){return this._shadowPalette.slice(t*6,t*6+6)},this)}get rtl(){return this._rtl}set rangeStart(t){t=Math.max(0,Math.min(t,this._symbols.length)),t!==this._rangeStart&&(this._rangeStart=t,this._updateRenderRange())}get rangeStart(){return this._rangeStart}set rangeEnd(t){t=Math.max(this._rangeStart,Math.min(t,this._symbols.length)),t!==this._rangeEnd&&(this._rangeEnd=t,this._updateRenderRange())}get rangeEnd(){return this._rangeEnd}}const ef=new A,ug=new ie,Ii=new A,LL=new A,ws=new ie,fh=new ie,uh=new ie,Ga=new ie;class hs extends we{constructor(e,s){super(e,s);h(this,"_evtLayersChanged",null);h(this,"_evtLayerAdded",null);h(this,"_evtLayerRemoved",null);this._beingInitialized=!1,this._anchor=new oe,this._localAnchor=new oe,this._pivot=new J,this._width=this._calculatedWidth=32,this._height=this._calculatedHeight=32,this._margin=new oe(0,0,-32,-32),this._modelTransform=new ie,this._screenToWorld=new ie,this._anchorTransform=new ie,this._anchorDirty=!0,this._parentWorldTransform=new ie,this._screenTransform=new ie,this._screenCorners=[new A,new A,new A,new A],this._canvasCorners=[new J,new J,new J,new J],this._worldCorners=[new A,new A,new A,new A],this._cornersDirty=!0,this._canvasCornersDirty=!0,this._worldCornersDirty=!0,this.entity.on("insert",this._onInsert,this),this._patch(),this.screen=null,this._type=Rh,this._image=null,this._text=null,this._group=null,this._drawOrder=0,this._fitMode=Oh,this._useInput=!1,this._layers=[xl],this._addedModels=[],this._batchGroupId=-1,this._batchGroup=null,this._offsetReadAt=0,this._maskOffset=.5,this._maskedBy=null}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){const s=this.data,i=s.enabled;s.enabled=e,this.fire("set","enabled",i,e)}get enabled(){return this.data.enabled}get _absLeft(){return this._localAnchor.x+this._margin.x}get _absRight(){return this._localAnchor.z-this._margin.z}get _absTop(){return this._localAnchor.w-this._margin.w}get _absBottom(){return this._localAnchor.y+this._margin.y}get _hasSplitAnchorsX(){return Math.abs(this._anchor.x-this._anchor.z)>.001}get _hasSplitAnchorsY(){return Math.abs(this._anchor.y-this._anchor.w)>.001}get aabb(){return this._image?this._image.aabb:this._text?this._text.aabb:null}set anchor(e){e instanceof oe?this._anchor.copy(e):this._anchor.set(...e),!this.entity._parent&&!this.screen?this._calculateLocalAnchors():this._calculateSize(this._hasSplitAnchorsX,this._hasSplitAnchorsY),this._anchorDirty=!0,this.entity._dirtyLocal||this.entity._dirtifyLocal(),this.fire("set:anchor",this._anchor)}get anchor(){return this._anchor}set batchGroupId(e){var s,i;this._batchGroupId!==e&&(this.entity.enabled&&this._batchGroupId>=0&&((s=this.system.app.batcher)==null||s.remove(gt.ELEMENT,this.batchGroupId,this.entity)),this.entity.enabled&&e>=0&&((i=this.system.app.batcher)==null||i.insert(gt.ELEMENT,e,this.entity)),e<0&&this._batchGroupId>=0&&this.enabled&&this.entity.enabled&&(this._image&&this._image._renderable.model?this.addModelToLayers(this._image._renderable.model):this._text&&this._text._model&&this.addModelToLayers(this._text._model)),this._batchGroupId=e)}get batchGroupId(){return this._batchGroupId}set bottom(e){this._margin.y=e;const s=this.entity.getLocalPosition(),i=this._absTop,r=this._localAnchor.y+e;this._setHeight(i-r),s.y=e+this._calculatedHeight*this._pivot.y,this.entity.setLocalPosition(s)}get bottom(){return this._margin.y}set calculatedWidth(e){this._setCalculatedWidth(e,!0)}get calculatedWidth(){return this._calculatedWidth}set calculatedHeight(e){this._setCalculatedHeight(e,!0)}get calculatedHeight(){return this._calculatedHeight}get canvasCorners(){if(!this._canvasCornersDirty||!this.screen||!this.screen.screen.screenSpace)return this._canvasCorners;const e=this.system.app.graphicsDevice,s=this.screenCorners,i=e.canvas.clientWidth/e.width,r=e.canvas.clientHeight/e.height;for(let a=0;a<4;a++)this._canvasCorners[a].set(s[a].x*i,(e.height-s[a].y)*r);return this._canvasCornersDirty=!1,this._canvasCorners}set drawOrder(e){let s=0;this.screen&&(s=this.screen.screen.priority),e>16777215&&(y.warn("Element.drawOrder larger than max size of: 16777215"),e=16777215),this._drawOrder=(s<<24)+e,this.fire("set:draworder",this._drawOrder)}get drawOrder(){return this._drawOrder}set height(e){this._height=e,this._hasSplitAnchorsY||this._setCalculatedHeight(e,!0),this.fire("set:height",this._height)}get height(){return this._height}set layers(e){if(this._addedModels.length)for(let s=0;s<this._layers.length;s++){const i=this.system.app.scene.layers.getLayerById(this._layers[s]);if(i)for(let r=0;r<this._addedModels.length;r++)i.removeMeshInstances(this._addedModels[r].meshInstances)}if(this._layers=e,!(!this.enabled||!this.entity.enabled||!this._addedModels.length))for(let s=0;s<this._layers.length;s++){const i=this.system.app.scene.layers.getLayerById(this._layers[s]);if(i)for(let r=0;r<this._addedModels.length;r++)i.addMeshInstances(this._addedModels[r].meshInstances)}}get layers(){return this._layers}set left(e){this._margin.x=e;const s=this.entity.getLocalPosition(),i=this._absRight,r=this._localAnchor.x+e;this._setWidth(i-r),s.x=e+this._calculatedWidth*this._pivot.x,this.entity.setLocalPosition(s)}get left(){return this._margin.x}set margin(e){this._margin.copy(e),this._calculateSize(!0,!0),this.fire("set:margin",this._margin)}get margin(){return this._margin}get maskedBy(){return this._maskedBy}set pivot(e){const{pivot:s,margin:i}=this,r=s.x,a=s.y;e instanceof J?s.copy(e):s.set(...e);const n=i.x+i.z,o=s.x-r;i.x+=n*o,i.z-=n*o;const c=i.y+i.w,d=s.y-a;i.y+=c*d,i.w-=c*d,this._anchorDirty=!0,this._cornersDirty=!0,this._worldCornersDirty=!0,this._calculateSize(!1,!1),this._flagChildrenAsDirty(),this.fire("set:pivot",s)}get pivot(){return this._pivot}set right(e){this._margin.z=e;const s=this.entity.getLocalPosition(),i=this._absLeft,r=this._localAnchor.z-e;this._setWidth(r-i),s.x=this._localAnchor.z-this._localAnchor.x-e-this._calculatedWidth*(1-this._pivot.x),this.entity.setLocalPosition(s)}get right(){return this._margin.z}get screenCorners(){if(!this._cornersDirty||!this.screen)return this._screenCorners;const e=this.entity.parent&&this.entity.parent.element&&this.entity.parent.element.screenCorners[0];this._screenCorners[0].set(this._absLeft,this._absBottom,0),this._screenCorners[1].set(this._absRight,this._absBottom,0),this._screenCorners[2].set(this._absRight,this._absTop,0),this._screenCorners[3].set(this._absLeft,this._absTop,0);const s=this.screen.screen.screenSpace;for(let i=0;i<4;i++)this._screenTransform.transformPoint(this._screenCorners[i],this._screenCorners[i]),s&&this._screenCorners[i].mulScalar(this.screen.screen.scale),e&&this._screenCorners[i].add(e);return this._cornersDirty=!1,this._canvasCornersDirty=!0,this._worldCornersDirty=!0,this._screenCorners}get textWidth(){return this._text?this._text.width:0}get textHeight(){return this._text?this._text.height:0}set top(e){this._margin.w=e;const s=this.entity.getLocalPosition(),i=this._absBottom,r=this._localAnchor.w-e;this._setHeight(r-i),s.y=this._localAnchor.w-this._localAnchor.y-e-this._calculatedHeight*(1-this._pivot.y),this.entity.setLocalPosition(s)}get top(){return this._margin.w}set type(e){e!==this._type&&(this._type=e,this._image&&(this._image.destroy(),this._image=null),this._text&&(this._text.destroy(),this._text=null),e===eu?this._image=new fL(this):e===rv&&(this._text=new ML(this)))}get type(){return this._type}set useInput(e){this._useInput!==e&&(this._useInput=e,this.system.app.elementInput?e?this.enabled&&this.entity.enabled&&this.system.app.elementInput.addElement(this):this.system.app.elementInput.removeElement(this):this._useInput===!0&&y.warn("Elements will not get any input events because this.system.app.elementInput is not created"),this.fire("set:useInput",e))}get useInput(){return this._useInput}set fitMode(e){this._fitMode=e,this._calculateSize(!0,!0),this._image&&this._image.refreshMesh()}get fitMode(){return this._fitMode}set width(e){this._width=e,this._hasSplitAnchorsX||this._setCalculatedWidth(e,!0),this.fire("set:width",this._width)}get width(){return this._width}get worldCorners(){if(!this._worldCornersDirty)return this._worldCorners;if(this.screen){const e=this.screenCorners;if(!this.screen.screen.screenSpace){ws.copy(this.screen.screen._screenMatrix),ws.data[13]=-ws.data[13],ws.mul2(this.screen.getWorldTransform(),ws);for(let s=0;s<4;s++)ws.transformPoint(e[s],this._worldCorners[s])}}else{const e=this.entity.getLocalPosition();ws.setTranslate(-e.x,-e.y,-e.z),fh.setTRS(A.ZERO,this.entity.getLocalRotation(),this.entity.getLocalScale()),uh.setTranslate(e.x,e.y,e.z);const s=this.entity.parent?this.entity.parent:this.entity;Ga.copy(s.getWorldTransform()),Ga.mul(uh).mul(fh).mul(ws),Ii.set(e.x-this.pivot.x*this.calculatedWidth,e.y-this.pivot.y*this.calculatedHeight,e.z),Ga.transformPoint(Ii,this._worldCorners[0]),Ii.set(e.x+(1-this.pivot.x)*this.calculatedWidth,e.y-this.pivot.y*this.calculatedHeight,e.z),Ga.transformPoint(Ii,this._worldCorners[1]),Ii.set(e.x+(1-this.pivot.x)*this.calculatedWidth,e.y+(1-this.pivot.y)*this.calculatedHeight,e.z),Ga.transformPoint(Ii,this._worldCorners[2]),Ii.set(e.x-this.pivot.x*this.calculatedWidth,e.y+(1-this.pivot.y)*this.calculatedHeight,e.z),Ga.transformPoint(Ii,this._worldCorners[3])}return this._worldCornersDirty=!1,this._worldCorners}set fontSize(e){this._setValue("fontSize",e)}get fontSize(){return this._text?this._text.fontSize:null}set minFontSize(e){this._setValue("minFontSize",e)}get minFontSize(){return this._text?this._text.minFontSize:null}set maxFontSize(e){this._setValue("maxFontSize",e)}get maxFontSize(){return this._text?this._text.maxFontSize:null}set maxLines(e){this._setValue("maxLines",e)}get maxLines(){return this._text?this._text.maxLines:null}set autoFitWidth(e){this._setValue("autoFitWidth",e)}get autoFitWidth(){return this._text?this._text.autoFitWidth:null}set autoFitHeight(e){this._setValue("autoFitHeight",e)}get autoFitHeight(){return this._text?this._text.autoFitHeight:null}set color(e){this._setValue("color",e)}get color(){return this._text?this._text.color:this._image?this._image.color:null}set font(e){this._setValue("font",e)}get font(){return this._text?this._text.font:null}set fontAsset(e){this._setValue("fontAsset",e)}get fontAsset(){return this._text&&typeof this._text.fontAsset=="number"?this._text.fontAsset:null}set spacing(e){this._setValue("spacing",e)}get spacing(){return this._text?this._text.spacing:null}set lineHeight(e){this._setValue("lineHeight",e)}get lineHeight(){return this._text?this._text.lineHeight:null}set wrapLines(e){this._setValue("wrapLines",e)}get wrapLines(){return this._text?this._text.wrapLines:null}set lines(e){this._setValue("lines",e)}get lines(){return this._text?this._text.lines:null}set alignment(e){this._setValue("alignment",e)}get alignment(){return this._text?this._text.alignment:null}set autoWidth(e){this._setValue("autoWidth",e)}get autoWidth(){return this._text?this._text.autoWidth:null}set autoHeight(e){this._setValue("autoHeight",e)}get autoHeight(){return this._text?this._text.autoHeight:null}set rtlReorder(e){this._setValue("rtlReorder",e)}get rtlReorder(){return this._text?this._text.rtlReorder:null}set unicodeConverter(e){this._setValue("unicodeConverter",e)}get unicodeConverter(){return this._text?this._text.unicodeConverter:null}set text(e){this._setValue("text",e)}get text(){return this._text?this._text.text:null}set key(e){this._setValue("key",e)}get key(){return this._text?this._text.key:null}set texture(e){this._setValue("texture",e)}get texture(){return this._image?this._image.texture:null}set textureAsset(e){this._setValue("textureAsset",e)}get textureAsset(){return this._image?this._image.textureAsset:null}set material(e){this._setValue("material",e)}get material(){return this._image?this._image.material:null}set materialAsset(e){this._setValue("materialAsset",e)}get materialAsset(){return this._image?this._image.materialAsset:null}set sprite(e){this._setValue("sprite",e)}get sprite(){return this._image?this._image.sprite:null}set spriteAsset(e){this._setValue("spriteAsset",e)}get spriteAsset(){return this._image?this._image.spriteAsset:null}set spriteFrame(e){this._setValue("spriteFrame",e)}get spriteFrame(){return this._image?this._image.spriteFrame:null}set pixelsPerUnit(e){this._setValue("pixelsPerUnit",e)}get pixelsPerUnit(){return this._image?this._image.pixelsPerUnit:null}set opacity(e){this._setValue("opacity",e)}get opacity(){return this._text?this._text.opacity:this._image?this._image.opacity:null}set rect(e){this._setValue("rect",e)}get rect(){return this._image?this._image.rect:null}set mask(e){this._setValue("mask",e)}get mask(){return this._image?this._image.mask:null}set outlineColor(e){this._setValue("outlineColor",e)}get outlineColor(){return this._text?this._text.outlineColor:null}set outlineThickness(e){this._setValue("outlineThickness",e)}get outlineThickness(){return this._text?this._text.outlineThickness:null}set shadowColor(e){this._setValue("shadowColor",e)}get shadowColor(){return this._text?this._text.shadowColor:null}set shadowOffset(e){this._setValue("shadowOffset",e)}get shadowOffset(){return this._text?this._text.shadowOffset:null}set enableMarkup(e){this._setValue("enableMarkup",e)}get enableMarkup(){return this._text?this._text.enableMarkup:null}set rangeStart(e){this._setValue("rangeStart",e)}get rangeStart(){return this._text?this._text.rangeStart:null}set rangeEnd(e){this._setValue("rangeEnd",e)}get rangeEnd(){return this._text?this._text.rangeEnd:null}_setValue(e,s){this._text?(this._text[e]!==s&&this._dirtyBatch(),this._text[e]=s):this._image&&(this._image[e]!==s&&this._dirtyBatch(),this._image[e]=s)}_patch(){this.entity._sync=this._sync,this.entity.setPosition=this._setPosition,this.entity.setLocalPosition=this._setLocalPosition}_unpatch(){this.entity._sync=lt.prototype._sync,this.entity.setPosition=lt.prototype.setPosition,this.entity.setLocalPosition=lt.prototype.setLocalPosition}_setPosition(e,s,i){if(!this.element.screen){lt.prototype.setPosition.call(this,e,s,i);return}e instanceof A?ef.copy(e):ef.set(e,s,i),this.getWorldTransform(),ug.copy(this.element._screenToWorld).invert(),ug.transformPoint(ef,this.localPosition),this._dirtyLocal||this._dirtifyLocal()}_setLocalPosition(e,s,i){e instanceof A?this.localPosition.copy(e):this.localPosition.set(e,s,i);const r=this.element,a=this.localPosition,n=r._pivot;r._margin.x=a.x-r._calculatedWidth*n.x,r._margin.z=r._localAnchor.z-r._localAnchor.x-r._calculatedWidth-r._margin.x,r._margin.y=a.y-r._calculatedHeight*n.y,r._margin.w=r._localAnchor.w-r._localAnchor.y-r._calculatedHeight-r._margin.y,this._dirtyLocal||this._dirtifyLocal()}_sync(){const e=this.element,s=e.screen;if(s){if(e._anchorDirty){let i=0,r=0,a=0,n=1;if(this._parent&&this._parent.element)i=this._parent.element.calculatedWidth,r=this._parent.element.calculatedHeight,a=this._parent.element.pivot.x,n=this._parent.element.pivot.y;else{const o=s.screen.resolution;i=o.x/s.screen.scale,r=o.y/s.screen.scale}e._anchorTransform.setTranslate(i*(e.anchor.x-a),-(r*(n-e.anchor.y)),0),e._anchorDirty=!1,e._calculateLocalAnchors()}e._sizeDirty&&e._calculateSize(!1,!1)}if(this._dirtyLocal){this.localTransform.setTRS(this.localPosition,this.localRotation,this.localScale);const i=this.localPosition,r=e._pivot;e._margin.x=i.x-e._calculatedWidth*r.x,e._margin.z=e._localAnchor.z-e._localAnchor.x-e._calculatedWidth-e._margin.x,e._margin.y=i.y-e._calculatedHeight*r.y,e._margin.w=e._localAnchor.w-e._localAnchor.y-e._calculatedHeight-e._margin.y,this._dirtyLocal=!1}if(!s){this._dirtyWorld&&(e._cornersDirty=!0,e._canvasCornersDirty=!0,e._worldCornersDirty=!0),lt.prototype._sync.call(this);return}if(this._dirtyWorld){if(this._parent===null)this.worldTransform.copy(this.localTransform);else if(this._parent.element?e._screenToWorld.mul2(this._parent.element._modelTransform,e._anchorTransform):e._screenToWorld.copy(e._anchorTransform),e._modelTransform.mul2(e._screenToWorld,this.localTransform),s){e._screenToWorld.mul2(s.screen._screenMatrix,e._screenToWorld),s.screen.screenSpace||e._screenToWorld.mul2(s.worldTransform,e._screenToWorld),this.worldTransform.mul2(e._screenToWorld,this.localTransform);const i=e._parentWorldTransform;i.setIdentity();const r=this._parent;r&&r.element&&r!==s&&(ws.setTRS(A.ZERO,r.getLocalRotation(),r.getLocalScale()),i.mul2(r.element._parentWorldTransform,ws));const a=Ii;a.set(0,0,this.localPosition.z);const n=LL;n.set(e._absLeft+e._pivot.x*e.calculatedWidth,e._absBottom+e._pivot.y*e.calculatedHeight,0),ws.setTranslate(-n.x,-n.y,-n.z),fh.setTRS(a,this.getLocalRotation(),this.getLocalScale()),uh.setTranslate(n.x,n.y,n.z),e._screenTransform.mul2(e._parentWorldTransform,uh).mul(fh).mul(ws),e._cornersDirty=!0,e._canvasCornersDirty=!0,e._worldCornersDirty=!0}else this.worldTransform.copy(e._modelTransform);this._dirtyWorld=!1}}_onInsert(e){const s=this._parseUpToScreen();this.entity._dirtifyWorld(),this._updateScreen(s.screen),this._dirtifyMask()}_dirtifyMask(){let e=this.entity;for(;e;){const s=e.parent;if((s===null||s.screen)&&e.element){(!this.system._prerender||!this.system._prerender.length)&&(this.system._prerender=[],this.system.app.once("prerender",this._onPrerender,this),y.trace(Bs,"register prerender"));const i=this.system._prerender.indexOf(this.entity);i>=0&&this.system._prerender.splice(i,1),this.system._prerender.indexOf(e)<0&&this.system._prerender.push(e),y.trace(Bs,`set prerender root to: ${e.name}`)}e=s}}_onPrerender(){for(let e=0;e<this.system._prerender.length;e++){const s=this.system._prerender[e];y.trace(Bs,`prerender from: ${s.name}`),s.element&&s.element.syncMask(1)}this.system._prerender.length=0}_bindScreen(e){e._bindElement(this)}_unbindScreen(e){e._unbindElement(this)}_updateScreen(e){this.screen&&this.screen!==e&&this._unbindScreen(this.screen.screen);const s=this.screen;this.screen=e,this.screen&&this._bindScreen(this.screen.screen),this._calculateSize(this._hasSplitAnchorsX,this._hasSplitAnchorsY),this.fire("set:screen",this.screen,s),this._anchorDirty=!0;const i=this.entity.children;for(let r=0,a=i.length;r<a;r++)i[r].element&&i[r].element._updateScreen(e);this.screen&&this.screen.screen.syncDrawOrder()}syncMask(e){const s=this._parseUpToScreen();this._updateMask(s.mask,e)}_setMaskedBy(e){const s=this._image||this._text;if(e){const i=e.element._image._maskRef;y.trace(Bs,`masking: ${this.entity.name} with ${i}`),s==null||s._setStencil(new pi({ref:i,func:Wh})),this._maskedBy=e}else y.trace(Bs,`no masking on: ${this.entity.name}`),s==null||s._setStencil(null),this._maskedBy=null}_updateMask(e,s){var i,r;if(e){if(this._setMaskedBy(e),this.mask){const n=e.element._image._maskRef,o=new pi({ref:n,func:Wh,zpass:Kx});this._image._setStencil(o),this._image._maskRef=s,s++,y.trace(Bs,`masking from: ${this.entity.name} with ${o.ref+1}`),y.trace(Bs,"depth++ to: ",s),e=this.entity}const a=this.entity.children;for(let n=0,o=a.length;n<o;n++)(i=a[n].element)==null||i._updateMask(e,s);this.mask&&s--}else{if(this._setMaskedBy(null),this.mask){const n=new pi({ref:s,func:$i,zpass:Yx});this._image._setStencil(n),this._image._maskRef=s,s++,y.trace(Bs,`masking from: ${this.entity.name} with ${n.ref}`),y.trace(Bs,"depth++ to: ",s),e=this.entity}const a=this.entity.children;for(let n=0,o=a.length;n<o;n++)(r=a[n].element)==null||r._updateMask(e,s);this.mask&&s--}}_parseUpToScreen(){const e={screen:null,mask:null};let s=this.entity._parent;for(;s&&!s.screen;)s.element&&s.element.mask&&(e.mask||(e.mask=s)),s=s.parent;return s&&s.screen&&(e.screen=s),e}_onScreenResize(e){this._anchorDirty=!0,this._cornersDirty=!0,this._worldCornersDirty=!0,this._calculateSize(this._hasSplitAnchorsX,this._hasSplitAnchorsY),this.fire("screen:set:resolution",e)}_onScreenSpaceChange(){this.fire("screen:set:screenspace",this.screen.screen.screenSpace)}_onScreenRemove(){this.screen&&(this.screen._destroying?this.screen=null:this._updateScreen(null))}_calculateLocalAnchors(){let e=1e3,s=1e3;const i=this.entity._parent;if(i&&i.element)e=i.element.calculatedWidth,s=i.element.calculatedHeight;else if(this.screen){const r=this.screen.screen.resolution,a=this.screen.screen.scale;e=r.x/a,s=r.y/a}this._localAnchor.set(this._anchor.x*e,this._anchor.y*s,this._anchor.z*e,this._anchor.w*s)}getOffsetPosition(e,s){const i=this.entity.getLocalPosition().clone();return i.x+=e,i.y+=s,this._screenToWorld.transformPoint(i,i),i}onLayersChanged(e,s){this.addModelToLayers(this._image?this._image._renderable.model:this._text._model),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),s.on("add",this.onLayerAdded,this),s.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||(this._image?e.addMeshInstances(this._image._renderable.model.meshInstances):this._text&&e.addMeshInstances(this._text._model.meshInstances))}onLayerRemoved(e){this.layers.indexOf(e.id)<0||(this._image?e.removeMeshInstances(this._image._renderable.model.meshInstances):this._text&&e.removeMeshInstances(this._text._model.meshInstances))}onEnable(){var i;const e=this.system.app.scene,s=e.layers;this._image&&this._image.onEnable(),this._text&&this._text.onEnable(),this._group&&this._group.onEnable(),this.useInput&&this.system.app.elementInput&&this.system.app.elementInput.addElement(this),this._evtLayersChanged=e.on("set:layers",this.onLayersChanged,this),s&&(this._evtLayerAdded=s.on("add",this.onLayerAdded,this),this._evtLayerRemoved=s.on("remove",this.onLayerRemoved,this)),this._batchGroupId>=0&&((i=this.system.app.batcher)==null||i.insert(gt.ELEMENT,this.batchGroupId,this.entity)),this.fire("enableelement")}onDisable(){var i,r,a,n;const s=this.system.app.scene.layers;(i=this._evtLayersChanged)==null||i.off(),this._evtLayersChanged=null,s&&((r=this._evtLayerAdded)==null||r.off(),this._evtLayerAdded=null,(a=this._evtLayerRemoved)==null||a.off(),this._evtLayerRemoved=null),this._image&&this._image.onDisable(),this._text&&this._text.onDisable(),this._group&&this._group.onDisable(),this.system.app.elementInput&&this.useInput&&this.system.app.elementInput.removeElement(this),this._batchGroupId>=0&&((n=this.system.app.batcher)==null||n.remove(gt.ELEMENT,this.batchGroupId,this.entity)),this.fire("disableelement")}onRemove(){this.entity.off("insert",this._onInsert,this),this._unpatch(),this._image&&this._image.destroy(),this._text&&this._text.destroy(),this.system.app.elementInput&&this.useInput&&this.system.app.elementInput.removeElement(this),this.screen&&this.screen.screen&&(this._unbindScreen(this.screen.screen),this.screen.screen.syncDrawOrder()),this.off()}_calculateSize(e,s){if(!this.entity._parent&&!this.screen)return;this._calculateLocalAnchors();const i=this._absRight-this._absLeft,r=this._absTop-this._absBottom;e?this._setWidth(i):this._setCalculatedWidth(i,!1),s?this._setHeight(r):this._setCalculatedHeight(r,!1);const a=this.entity.getLocalPosition();a.x=this._margin.x+this._calculatedWidth*this._pivot.x,a.y=this._margin.y+this._calculatedHeight*this._pivot.y,this.entity.setLocalPosition(a),this._sizeDirty=!1}_setWidth(e){this._width=e,this._setCalculatedWidth(e,!1),this.fire("set:width",this._width)}_setHeight(e){this._height=e,this._setCalculatedHeight(e,!1),this.fire("set:height",this._height)}_setCalculatedWidth(e,s){if(!(Math.abs(e-this._calculatedWidth)<=1e-4)){if(this._calculatedWidth=e,this.entity._dirtifyLocal(),s){const i=this.entity.getLocalPosition(),r=this._pivot;this._margin.x=i.x-this._calculatedWidth*r.x,this._margin.z=this._localAnchor.z-this._localAnchor.x-this._calculatedWidth-this._margin.x}this._flagChildrenAsDirty(),this.fire("set:calculatedWidth",this._calculatedWidth),this.fire("resize",this._calculatedWidth,this._calculatedHeight)}}_setCalculatedHeight(e,s){if(!(Math.abs(e-this._calculatedHeight)<=1e-4)){if(this._calculatedHeight=e,this.entity._dirtifyLocal(),s){const i=this.entity.getLocalPosition(),r=this._pivot;this._margin.y=i.y-this._calculatedHeight*r.y,this._margin.w=this._localAnchor.w-this._localAnchor.y-this._calculatedHeight-this._margin.y}this._flagChildrenAsDirty(),this.fire("set:calculatedHeight",this._calculatedHeight),this.fire("resize",this._calculatedWidth,this._calculatedHeight)}}_flagChildrenAsDirty(){const e=this.entity._children;for(let s=0,i=e.length;s<i;s++)e[s].element&&(e[s].element._anchorDirty=!0,e[s].element._sizeDirty=!0)}addModelToLayers(e){this._addedModels.push(e);for(let s=0;s<this.layers.length;s++){const i=this.system.app.scene.layers.getLayerById(this.layers[s]);i&&i.addMeshInstances(e.meshInstances)}}removeModelFromLayers(e){const s=this._addedModels.indexOf(e);s>=0&&this._addedModels.splice(s,1);for(let i=0;i<this.layers.length;i++){const r=this.system.app.scene.layers.getLayerById(this.layers[i]);r&&r.removeMeshInstances(e.meshInstances)}}getMaskOffset(){const e=this.system.app.frame;this._offsetReadAt!==e&&(this._maskOffset=.5,this._offsetReadAt=e);const s=this._maskOffset;return this._maskOffset-=.001,s}isVisibleForCamera(e){let s,i,r,a;if(this.maskedBy){const u=this.maskedBy.element.screenCorners;s=Math.min(Math.min(u[0].x,u[1].x),Math.min(u[2].x,u[3].x)),i=Math.max(Math.max(u[0].x,u[1].x),Math.max(u[2].x,u[3].x)),a=Math.min(Math.min(u[0].y,u[1].y),Math.min(u[2].y,u[3].y)),r=Math.max(Math.max(u[0].y,u[1].y),Math.max(u[2].y,u[3].y))}else{const u=this.system.app.graphicsDevice.width,p=this.system.app.graphicsDevice.height,m=e._rect.z*u,_=e._rect.w*p;s=e._rect.x*u,i=s+m,r=(1-e._rect.y)*p,a=r-_}const n=this.screenCorners,o=Math.min(Math.min(n[0].x,n[1].x),Math.min(n[2].x,n[3].x)),c=Math.max(Math.max(n[0].x,n[1].x),Math.max(n[2].x,n[3].x)),d=Math.min(Math.min(n[0].y,n[1].y),Math.min(n[2].y,n[3].y)),f=Math.max(Math.max(n[0].y,n[1].y),Math.max(n[2].y,n[3].y));return!(c<s||o>i||d>r||f<a)}_isScreenSpace(){return this.screen&&this.screen.screen?this.screen.screen.screenSpace:!1}_isScreenCulled(){return this.screen&&this.screen.screen?this.screen.screen.cull:!1}_dirtyBatch(){var e;this.batchGroupId!==-1&&((e=this.system.app.batcher)==null||e.markGroupDirty(this.batchGroupId))}}h(hs,"EVENT_MOUSEDOWN","mousedown"),h(hs,"EVENT_MOUSEUP","mouseup"),h(hs,"EVENT_MOUSEENTER","mouseenter"),h(hs,"EVENT_MOUSELEAVE","mouseleave"),h(hs,"EVENT_MOUSEMOVE","mousemove"),h(hs,"EVENT_MOUSEWHEEL","mousewheel"),h(hs,"EVENT_CLICK","click"),h(hs,"EVENT_TOUCHSTART","touchstart"),h(hs,"EVENT_TOUCHEND","touchend"),h(hs,"EVENT_TOUCHMOVE","touchmove"),h(hs,"EVENT_TOUCHCANCEL","touchcancel");class RL{constructor(){this.enabled=!0}}const OL=["enabled"];class FL extends ht{constructor(t){super(t),this.id="element",this.ComponentType=hs,this.DataType=RL,this.schema=OL,this._unicodeConverter=null,this._rtlReorder=null,this._defaultTexture=new ge(t.graphicsDevice,{width:1,height:1,format:ms,name:"element-system"});const e=this._defaultTexture.lock(),s=new Uint8Array(4);s[0]=255,s[1]=255,s[2]=255,s[3]=255,e.set(s),this._defaultTexture.unlock(),this.defaultImageMaterial=null,this.defaultImage9SlicedMaterial=null,this.defaultImage9TiledMaterial=null,this.defaultImageMaskMaterial=null,this.defaultImage9SlicedMaskMaterial=null,this.defaultImage9TiledMaskMaterial=null,this.defaultScreenSpaceImageMaterial=null,this.defaultScreenSpaceImage9SlicedMaterial=null,this.defaultScreenSpaceImage9TiledMaterial=null,this.defaultScreenSpaceImageMask9SlicedMaterial=null,this.defaultScreenSpaceImageMask9TiledMaterial=null,this.defaultScreenSpaceImageMaskMaterial=null,this._defaultTextMaterials={},this.defaultImageMaterials=[],this.on("add",this.onAddComponent,this),this.on("beforeremove",this.onRemoveComponent,this)}destroy(){super.destroy(),this._defaultTexture.destroy()}initializeComponentData(t,e,s){t._beingInitialized=!0,e.anchor!==void 0&&(e.anchor instanceof oe?t.anchor.copy(e.anchor):t.anchor.set(e.anchor[0],e.anchor[1],e.anchor[2],e.anchor[3])),e.pivot!==void 0&&(e.pivot instanceof J?t.pivot.copy(e.pivot):t.pivot.set(e.pivot[0],e.pivot[1]));const i=Math.abs(t.anchor.x-t.anchor.z)>.001,r=Math.abs(t.anchor.y-t.anchor.w)>.001;let a=!1,n;e.margin!==void 0&&(e.margin instanceof oe?t.margin.copy(e.margin):t._margin.set(e.margin[0],e.margin[1],e.margin[2],e.margin[3]),a=!0),e.left!==void 0&&(t._margin.x=e.left,a=!0),e.bottom!==void 0&&(t._margin.y=e.bottom,a=!0),e.right!==void 0&&(t._margin.z=e.right,a=!0),e.top!==void 0&&(t._margin.w=e.top,a=!0),a&&(t.margin=t._margin);let o=!1;e.width!==void 0&&!i?t.width=e.width:i&&(o=!0),e.height!==void 0&&!r?t.height=e.height:r&&(o=!0),o&&(t.anchor=t.anchor),e.enabled!==void 0&&(t.enabled=e.enabled),e.useInput!==void 0&&(t.useInput=e.useInput),e.fitMode!==void 0&&(t.fitMode=e.fitMode),t.batchGroupId=e.batchGroupId===void 0||e.batchGroupId===null?-1:e.batchGroupId,e.layers&&Array.isArray(e.layers)&&(t.layers=e.layers.slice(0)),e.type!==void 0&&(t.type=e.type),t.type===eu?(e.rect!==void 0&&(t.rect=e.rect),e.color!==void 0&&(n=e.color,n instanceof ae||(n=new ae(e.color[0],e.color[1],e.color[2])),t.color=n),e.opacity!==void 0&&(t.opacity=e.opacity),e.textureAsset!==void 0&&(t.textureAsset=e.textureAsset),e.texture&&(t.texture=e.texture),e.spriteAsset!==void 0&&(t.spriteAsset=e.spriteAsset),e.sprite&&(t.sprite=e.sprite),e.spriteFrame!==void 0&&(t.spriteFrame=e.spriteFrame),e.pixelsPerUnit!==void 0&&e.pixelsPerUnit!==null&&(t.pixelsPerUnit=e.pixelsPerUnit),e.materialAsset!==void 0&&(t.materialAsset=e.materialAsset),e.material&&(t.material=e.material),e.mask!==void 0&&(t.mask=e.mask)):t.type===rv&&(e.autoWidth!==void 0&&(t.autoWidth=e.autoWidth),e.autoHeight!==void 0&&(t.autoHeight=e.autoHeight),e.rtlReorder!==void 0&&(t.rtlReorder=e.rtlReorder),e.unicodeConverter!==void 0&&(t.unicodeConverter=e.unicodeConverter),e.text!==null&&e.text!==void 0?t.text=e.text:e.key!==null&&e.key!==void 0&&(t.key=e.key),e.color!==void 0&&(n=e.color,n instanceof ae||(n=new ae(n[0],n[1],n[2])),t.color=n),e.opacity!==void 0&&(t.opacity=e.opacity),e.spacing!==void 0&&(t.spacing=e.spacing),e.fontSize!==void 0&&(t.fontSize=e.fontSize,e.lineHeight||(t.lineHeight=e.fontSize)),e.lineHeight!==void 0&&(t.lineHeight=e.lineHeight),e.maxLines!==void 0&&(t.maxLines=e.maxLines),e.wrapLines!==void 0&&(t.wrapLines=e.wrapLines),e.minFontSize!==void 0&&(t.minFontSize=e.minFontSize),e.maxFontSize!==void 0&&(t.maxFontSize=e.maxFontSize),e.autoFitWidth&&(t.autoFitWidth=e.autoFitWidth),e.autoFitHeight&&(t.autoFitHeight=e.autoFitHeight),e.fontAsset!==void 0&&(t.fontAsset=e.fontAsset),e.font!==void 0&&(t.font=e.font),e.alignment!==void 0&&(t.alignment=e.alignment),e.outlineColor!==void 0&&(t.outlineColor=e.outlineColor),e.outlineThickness!==void 0&&(t.outlineThickness=e.outlineThickness),e.shadowColor!==void 0&&(t.shadowColor=e.shadowColor),e.shadowOffset!==void 0&&(t.shadowOffset=e.shadowOffset),e.enableMarkup!==void 0&&(t.enableMarkup=e.enableMarkup));const c=t._parseUpToScreen();c.screen&&t._updateScreen(c.screen),super.initializeComponentData(t,e,s),t._beingInitialized=!1,t.type===eu&&t._image._meshDirty&&t._image._updateMesh(t._image.mesh)}onAddComponent(t,e){t.fire("element:add")}onRemoveComponent(t,e){e.onRemove()}cloneComponent(t,e){const s=t.element,i={enabled:s.enabled,width:s.width,height:s.height,anchor:s.anchor.clone(),pivot:s.pivot.clone(),margin:s.margin.clone(),alignment:s.alignment&&s.alignment.clone()||s.alignment,autoWidth:s.autoWidth,autoHeight:s.autoHeight,type:s.type,rect:s.rect&&s.rect.clone()||s.rect,rtlReorder:s.rtlReorder,unicodeConverter:s.unicodeConverter,materialAsset:s.materialAsset,material:s.material,color:s.color&&s.color.clone()||s.color,opacity:s.opacity,textureAsset:s.textureAsset,texture:s.texture,spriteAsset:s.spriteAsset,sprite:s.sprite,spriteFrame:s.spriteFrame,pixelsPerUnit:s.pixelsPerUnit,spacing:s.spacing,lineHeight:s.lineHeight,wrapLines:s.wrapLines,layers:s.layers,fontSize:s.fontSize,minFontSize:s.minFontSize,maxFontSize:s.maxFontSize,autoFitWidth:s.autoFitWidth,autoFitHeight:s.autoFitHeight,maxLines:s.maxLines,fontAsset:s.fontAsset,font:s.font,useInput:s.useInput,fitMode:s.fitMode,batchGroupId:s.batchGroupId,mask:s.mask,outlineColor:s.outlineColor&&s.outlineColor.clone()||s.outlineColor,outlineThickness:s.outlineThickness,shadowColor:s.shadowColor&&s.shadowColor.clone()||s.shadowColor,shadowOffset:s.shadowOffset&&s.shadowOffset.clone()||s.shadowOffset,enableMarkup:s.enableMarkup};return s.key!==void 0&&s.key!==null?i.key=s.key:i.text=s.text,this.addComponent(e,i)}getTextElementMaterial(t,e,s){const i=(t&&1)|(e&&2)|(s&&4);let r=this._defaultTextMaterials[i];if(r)return r;let a="TextMaterial";return r=new kt,e?(r.msdfMap=this._defaultTexture,r.msdfTextAttribute=s,r.emissive.set(1,1,1)):(a=`Bitmap${a}`,r.emissive.set(1,1,1),r.emissiveMap=this._defaultTexture,r.opacityMap=this._defaultTexture,r.opacityMapChannel="a"),t&&(a=`ScreenSpace${a}`,r.depthTest=!1),r.name=`default${a}`,r.useLighting=!1,r.useTonemap=!1,r.useFog=!1,r.useSkybox=!1,r.diffuse.set(0,0,0),r.opacity=.5,r.blendType=Nn,r.depthWrite=!1,r.emissiveVertexColor=!0,r.update(),this._defaultTextMaterials[i]=r,r}_createBaseImageMaterial(){const t=new kt;return t.diffuse.set(0,0,0),t.emissive.set(1,1,1),t.emissiveMap=this._defaultTexture,t.opacityMap=this._defaultTexture,t.opacityMapChannel="a",t.useLighting=!1,t.useTonemap=!1,t.useFog=!1,t.useSkybox=!1,t.blendType=Nn,t.depthWrite=!1,t}getImageElementMaterial(t,e,s,i){return t?e?s?(this.defaultScreenSpaceImageMask9SlicedMaterial||(this.defaultScreenSpaceImageMask9SlicedMaterial=this._createBaseImageMaterial(),this.defaultScreenSpaceImageMask9SlicedMaterial.name="defaultScreenSpaceImageMask9SlicedMaterial",this.defaultScreenSpaceImageMask9SlicedMaterial.nineSlicedMode=At,this.defaultScreenSpaceImageMask9SlicedMaterial.depthTest=!1,this.defaultScreenSpaceImageMask9SlicedMaterial.alphaTest=1,this.defaultScreenSpaceImageMask9SlicedMaterial.redWrite=!1,this.defaultScreenSpaceImageMask9SlicedMaterial.greenWrite=!1,this.defaultScreenSpaceImageMask9SlicedMaterial.blueWrite=!1,this.defaultScreenSpaceImageMask9SlicedMaterial.alphaWrite=!1,this.defaultScreenSpaceImageMask9SlicedMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImageMask9SlicedMaterial)),this.defaultScreenSpaceImageMask9SlicedMaterial):i?(this.defaultScreenSpaceImageMask9TiledMaterial||(this.defaultScreenSpaceImageMask9TiledMaterial=this.defaultScreenSpaceImage9TiledMaterial.clone(),this.defaultScreenSpaceImageMask9TiledMaterial.name="defaultScreenSpaceImageMask9TiledMaterial",this.defaultScreenSpaceImageMask9TiledMaterial.nineSlicedMode=Ct,this.defaultScreenSpaceImageMask9TiledMaterial.depthTest=!1,this.defaultScreenSpaceImageMask9TiledMaterial.alphaTest=1,this.defaultScreenSpaceImageMask9TiledMaterial.redWrite=!1,this.defaultScreenSpaceImageMask9TiledMaterial.greenWrite=!1,this.defaultScreenSpaceImageMask9TiledMaterial.blueWrite=!1,this.defaultScreenSpaceImageMask9TiledMaterial.alphaWrite=!1,this.defaultScreenSpaceImageMask9TiledMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImageMask9TiledMaterial)),this.defaultScreenSpaceImageMask9TiledMaterial):(this.defaultScreenSpaceImageMaskMaterial||(this.defaultScreenSpaceImageMaskMaterial=this._createBaseImageMaterial(),this.defaultScreenSpaceImageMaskMaterial.name="defaultScreenSpaceImageMaskMaterial",this.defaultScreenSpaceImageMaskMaterial.depthTest=!1,this.defaultScreenSpaceImageMaskMaterial.alphaTest=1,this.defaultScreenSpaceImageMaskMaterial.redWrite=!1,this.defaultScreenSpaceImageMaskMaterial.greenWrite=!1,this.defaultScreenSpaceImageMaskMaterial.blueWrite=!1,this.defaultScreenSpaceImageMaskMaterial.alphaWrite=!1,this.defaultScreenSpaceImageMaskMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImageMaskMaterial)),this.defaultScreenSpaceImageMaskMaterial):s?(this.defaultScreenSpaceImage9SlicedMaterial||(this.defaultScreenSpaceImage9SlicedMaterial=this._createBaseImageMaterial(),this.defaultScreenSpaceImage9SlicedMaterial.name="defaultScreenSpaceImage9SlicedMaterial",this.defaultScreenSpaceImage9SlicedMaterial.nineSlicedMode=At,this.defaultScreenSpaceImage9SlicedMaterial.depthTest=!1,this.defaultScreenSpaceImage9SlicedMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImage9SlicedMaterial)),this.defaultScreenSpaceImage9SlicedMaterial):i?(this.defaultScreenSpaceImage9TiledMaterial||(this.defaultScreenSpaceImage9TiledMaterial=this._createBaseImageMaterial(),this.defaultScreenSpaceImage9TiledMaterial.name="defaultScreenSpaceImage9TiledMaterial",this.defaultScreenSpaceImage9TiledMaterial.nineSlicedMode=Ct,this.defaultScreenSpaceImage9TiledMaterial.depthTest=!1,this.defaultScreenSpaceImage9TiledMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImage9TiledMaterial)),this.defaultScreenSpaceImage9TiledMaterial):(this.defaultScreenSpaceImageMaterial||(this.defaultScreenSpaceImageMaterial=this._createBaseImageMaterial(),this.defaultScreenSpaceImageMaterial.name="defaultScreenSpaceImageMaterial",this.defaultScreenSpaceImageMaterial.depthTest=!1,this.defaultScreenSpaceImageMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImageMaterial)),this.defaultScreenSpaceImageMaterial):e?s?(this.defaultImage9SlicedMaskMaterial||(this.defaultImage9SlicedMaskMaterial=this._createBaseImageMaterial(),this.defaultImage9SlicedMaskMaterial.name="defaultImage9SlicedMaskMaterial",this.defaultImage9SlicedMaskMaterial.nineSlicedMode=At,this.defaultImage9SlicedMaskMaterial.alphaTest=1,this.defaultImage9SlicedMaskMaterial.redWrite=!1,this.defaultImage9SlicedMaskMaterial.greenWrite=!1,this.defaultImage9SlicedMaskMaterial.blueWrite=!1,this.defaultImage9SlicedMaskMaterial.alphaWrite=!1,this.defaultImage9SlicedMaskMaterial.update(),this.defaultImageMaterials.push(this.defaultImage9SlicedMaskMaterial)),this.defaultImage9SlicedMaskMaterial):i?(this.defaultImage9TiledMaskMaterial||(this.defaultImage9TiledMaskMaterial=this._createBaseImageMaterial(),this.defaultImage9TiledMaskMaterial.name="defaultImage9TiledMaskMaterial",this.defaultImage9TiledMaskMaterial.nineSlicedMode=Ct,this.defaultImage9TiledMaskMaterial.alphaTest=1,this.defaultImage9TiledMaskMaterial.redWrite=!1,this.defaultImage9TiledMaskMaterial.greenWrite=!1,this.defaultImage9TiledMaskMaterial.blueWrite=!1,this.defaultImage9TiledMaskMaterial.alphaWrite=!1,this.defaultImage9TiledMaskMaterial.update(),this.defaultImageMaterials.push(this.defaultImage9TiledMaskMaterial)),this.defaultImage9TiledMaskMaterial):(this.defaultImageMaskMaterial||(this.defaultImageMaskMaterial=this._createBaseImageMaterial(),this.defaultImageMaskMaterial.name="defaultImageMaskMaterial",this.defaultImageMaskMaterial.alphaTest=1,this.defaultImageMaskMaterial.redWrite=!1,this.defaultImageMaskMaterial.greenWrite=!1,this.defaultImageMaskMaterial.blueWrite=!1,this.defaultImageMaskMaterial.alphaWrite=!1,this.defaultImageMaskMaterial.update(),this.defaultImageMaterials.push(this.defaultImageMaskMaterial)),this.defaultImageMaskMaterial):s?(this.defaultImage9SlicedMaterial||(this.defaultImage9SlicedMaterial=this._createBaseImageMaterial(),this.defaultImage9SlicedMaterial.name="defaultImage9SlicedMaterial",this.defaultImage9SlicedMaterial.nineSlicedMode=At,this.defaultImage9SlicedMaterial.update(),this.defaultImageMaterials.push(this.defaultImage9SlicedMaterial)),this.defaultImage9SlicedMaterial):i?(this.defaultImage9TiledMaterial||(this.defaultImage9TiledMaterial=this._createBaseImageMaterial(),this.defaultImage9TiledMaterial.name="defaultImage9TiledMaterial",this.defaultImage9TiledMaterial.nineSlicedMode=Ct,this.defaultImage9TiledMaterial.update(),this.defaultImageMaterials.push(this.defaultImage9TiledMaterial)),this.defaultImage9TiledMaterial):(this.defaultImageMaterial||(this.defaultImageMaterial=this._createBaseImageMaterial(),this.defaultImageMaterial.name="defaultImageMaterial",this.defaultImageMaterial.update(),this.defaultImageMaterials.push(this.defaultImageMaterial)),this.defaultImageMaterial)}registerUnicodeConverter(t){this._unicodeConverter=t}registerRtlReorder(t){this._rtlReorder=t}getUnicodeConverter(){return this._unicodeConverter}getRtlReorder(){return this._rtlReorder}}const Ha="free",Wa="limited",$a="locked",NL=["angularDampingX","angularDampingY","angularDampingZ","angularEquilibriumX","angularEquilibriumY","angularEquilibriumZ","angularLimitsX","angularLimitsY","angularLimitsZ","angularMotionX","angularMotionY","angularMotionZ","angularSpringX","angularSpringY","angularSpringZ","angularStiffnessX","angularStiffnessY","angularStiffnessZ","breakForce","enableCollision","enabled","entityA","entityB","linearDampingX","linearDampingY","linearDampingZ","linearEquilibriumX","linearEquilibriumY","linearEquilibriumZ","linearLimitsX","linearLimitsY","linearLimitsZ","linearMotionX","linearMotionY","linearMotionZ","linearSpringX","linearSpringY","linearSpringZ","linearStiffnessX","linearStiffnessY","linearStiffnessZ"];class $p extends we{constructor(t,e){super(t,e),y.assert(typeof Ammo<"u","ERROR: Attempting to create a pc.JointComponent but Ammo.js is not loaded"),this._constraint=null,this._entityA=null,this._entityB=null,this._breakForce=34e37,this._enableCollision=!0,this._linearMotionX=$a,this._linearLimitsX=new J(0,0),this._linearSpringX=!1,this._linearStiffnessX=0,this._linearDampingX=1,this._linearEquilibriumX=0,this._linearMotionY=$a,this._linearLimitsY=new J(0,0),this._linearSpringY=!1,this._linearStiffnessY=0,this._linearDampingY=1,this._linearEquilibriumY=0,this._linearMotionZ=$a,this._linearLimitsZ=new J(0,0),this._linearSpringZ=!1,this._linearStiffnessZ=0,this._linearDampingZ=1,this._linearEquilibriumZ=0,this._angularMotionX=$a,this._angularLimitsX=new J(0,0),this._angularSpringX=!1,this._angularStiffnessX=0,this._angularDampingX=1,this._angularEquilibriumX=0,this._angularMotionY=$a,this._angularLimitsY=new J(0,0),this._angularSpringY=!1,this._angularStiffnessY=0,this._angularDampingY=1,this._angularEquilibriumY=0,this._angularMotionZ=$a,this._angularLimitsZ=new J(0,0),this._angularSpringZ=!1,this._angularEquilibriumZ=0,this._angularDampingZ=1,this._angularStiffnessZ=0,this.on("set_enabled",this._onSetEnabled,this)}set entityA(t){this._destroyConstraint(),this._entityA=t,this._createConstraint()}get entityA(){return this._entityA}set entityB(t){this._destroyConstraint(),this._entityB=t,this._createConstraint()}get entityB(){return this._entityB}set breakForce(t){this._constraint&&this._breakForce!==t&&(this._constraint.setBreakingImpulseThreshold(t),this._breakForce=t)}get breakForce(){return this._breakForce}set enableCollision(t){this._destroyConstraint(),this._enableCollision=t,this._createConstraint()}get enableCollision(){return this._enableCollision}set angularLimitsX(t){this._angularLimitsX.equals(t)||(this._angularLimitsX.copy(t),this._updateAngularLimits())}get angularLimitsX(){return this._angularLimitsX}set angularMotionX(t){this._angularMotionX!==t&&(this._angularMotionX=t,this._updateAngularLimits())}get angularMotionX(){return this._angularMotionX}set angularLimitsY(t){this._angularLimitsY.equals(t)||(this._angularLimitsY.copy(t),this._updateAngularLimits())}get angularLimitsY(){return this._angularLimitsY}set angularMotionY(t){this._angularMotionY!==t&&(this._angularMotionY=t,this._updateAngularLimits())}get angularMotionY(){return this._angularMotionY}set angularLimitsZ(t){this._angularLimitsZ.equals(t)||(this._angularLimitsZ.copy(t),this._updateAngularLimits())}get angularLimitsZ(){return this._angularLimitsZ}set angularMotionZ(t){this._angularMotionZ!==t&&(this._angularMotionZ=t,this._updateAngularLimits())}get angularMotionZ(){return this._angularMotionZ}set linearLimitsX(t){this._linearLimitsX.equals(t)||(this._linearLimitsX.copy(t),this._updateLinearLimits())}get linearLimitsX(){return this._linearLimitsX}set linearMotionX(t){this._linearMotionX!==t&&(this._linearMotionX=t,this._updateLinearLimits())}get linearMotionX(){return this._linearMotionX}set linearLimitsY(t){this._linearLimitsY.equals(t)||(this._linearLimitsY.copy(t),this._updateLinearLimits())}get linearLimitsY(){return this._linearLimitsY}set linearMotionY(t){this._linearMotionY!==t&&(this._linearMotionY=t,this._updateLinearLimits())}get linearMotionY(){return this._linearMotionY}set linearLimitsZ(t){this._linearLimitsZ.equals(t)||(this._linearLimitsZ.copy(t),this._updateLinearLimits())}get linearLimitsZ(){return this._linearLimitsZ}set linearMotionZ(t){this._linearMotionZ!==t&&(this._linearMotionZ=t,this._updateLinearLimits())}get linearMotionZ(){return this._linearMotionZ}_convertTransform(t,e){const s=t.getTranslation(),i=new ue;i.setFromMat4(t);const r=new Ammo.btVector3(s.x,s.y,s.z),a=new Ammo.btQuaternion(i.x,i.y,i.z,i.w);e.setOrigin(r),e.setRotation(a),Ammo.destroy(r),Ammo.destroy(a)}_updateAngularLimits(){const t=this._constraint;if(t){let e,s,i,r,a,n;this._angularMotionX===Wa?(e=this._angularLimitsX.x*Y.DEG_TO_RAD,r=this._angularLimitsX.y*Y.DEG_TO_RAD):this._angularMotionX===Ha?(e=1,r=0):e=r=0,this._angularMotionY===Wa?(s=this._angularLimitsY.x*Y.DEG_TO_RAD,a=this._angularLimitsY.y*Y.DEG_TO_RAD):this._angularMotionY===Ha?(s=1,a=0):s=a=0,this._angularMotionZ===Wa?(i=this._angularLimitsZ.x*Y.DEG_TO_RAD,n=this._angularLimitsZ.y*Y.DEG_TO_RAD):this._angularMotionZ===Ha?(i=1,n=0):i=n=0;const o=new Ammo.btVector3(e,s,i);t.setAngularLowerLimit(o),o.setValue(r,a,n),t.setAngularUpperLimit(o),Ammo.destroy(o)}}_updateLinearLimits(){const t=this._constraint;if(t){let e,s,i,r,a,n;this._linearMotionX===Wa?(e=this._linearLimitsX.x,r=this._linearLimitsX.y):this._linearMotionX===Ha?(e=1,r=0):e=r=0,this._linearMotionY===Wa?(s=this._linearLimitsY.x,a=this._linearLimitsY.y):this._linearMotionY===Ha?(s=1,a=0):s=a=0,this._linearMotionZ===Wa?(i=this._linearLimitsZ.x,n=this._linearLimitsZ.y):this._linearMotionZ===Ha?(i=1,n=0):i=n=0;const o=new Ammo.btVector3(e,s,i);t.setLinearLowerLimit(o),o.setValue(r,a,n),t.setLinearUpperLimit(o),Ammo.destroy(o)}}_createConstraint(){if(this._entityA&&this._entityA.rigidbody){this._destroyConstraint();const t=new ie,e=this._entityA.rigidbody.body;e.activate();const s=this.entity.getWorldTransform(),r=this._entityA.getWorldTransform().clone().invert();t.mul2(r,s);const a=new Ammo.btTransform;if(this._convertTransform(t,a),this._entityB&&this._entityB.rigidbody){const d=this._entityB.rigidbody.body;d.activate();const u=this._entityB.getWorldTransform().clone().invert();t.mul2(u,s);const p=new Ammo.btTransform;this._convertTransform(t,p),this._constraint=new Ammo.btGeneric6DofSpringConstraint(e,d,a,p,!this._enableCollision),Ammo.destroy(p)}else this._constraint=new Ammo.btGeneric6DofSpringConstraint(e,a,!this._enableCollision);Ammo.destroy(a);const n=["X","Y","Z","X","Y","Z"];for(let d=0;d<6;d++){const f=d<3?"_linear":"_angular";this._constraint.enableSpring(d,this[`${f}Spring${n[d]}`]),this._constraint.setDamping(d,this[`${f}Damping${n[d]}`]),this._constraint.setEquilibriumPoint(d,this[`${f}Equilibrium${n[d]}`]),this._constraint.setStiffness(d,this[`${f}Stiffness${n[d]}`])}this._constraint.setBreakingImpulseThreshold(this._breakForce),this._updateLinearLimits(),this._updateAngularLimits(),this.system.app.systems.rigidbody.dynamicsWorld.addConstraint(this._constraint,!this._enableCollision)}}_destroyConstraint(){this._constraint&&(this.system.app.systems.rigidbody.dynamicsWorld.removeConstraint(this._constraint),Ammo.destroy(this._constraint),this._constraint=null)}initFromData(t){for(const e of NL)t.hasOwnProperty(e)&&(t[e]instanceof J?this[`_${e}`].copy(t[e]):this[`_${e}`]=t[e]);this._createConstraint()}onEnable(){this._createConstraint()}onDisable(){this._destroyConstraint()}_onSetEnabled(t,e,s){}_onBeforeRemove(){this.fire("remove")}}const kL={Damping:"setDamping",Equilibrium:"setEquilibriumPoint",Spring:"enableSpring",Stiffness:"setStiffness"};["linear","angular"].forEach(l=>{["Damping","Equilibrium","Spring","Stiffness"].forEach(t=>{["X","Y","Z"].forEach(e=>{const s=l+t+e,i=`_${s}`;let r=l==="linear"?0:3;e==="Y"&&(r+=1),e==="Z"&&(r+=2),Object.defineProperty($p.prototype,s,{get:function(){return this[i]},set:function(a){this[i]!==a&&(this[i]=a,this._constraint[kL[t]](r,a))}})})})});class UL{constructor(){this.enabled=!0}}const lu=["enabled"];class BL extends ht{constructor(t){super(t),this.id="joint",this.app=t,this.ComponentType=$p,this.DataType=UL,this.schema=lu}initializeComponentData(t,e,s){t.initFromData(e),super.initializeComponentData(t,e,lu)}}we._buildAccessors($p.prototype,lu);class hv extends we{constructor(){super(...arguments);h(this,"_minWidth",0);h(this,"_minHeight",0);h(this,"_maxWidth",null);h(this,"_maxHeight",null);h(this,"_fitWidthProportion",0);h(this,"_fitHeightProportion",0);h(this,"_excludeFromLayout",!1)}set minWidth(e){e!==this._minWidth&&(this._minWidth=e,this.fire("resize"))}get minWidth(){return this._minWidth}set minHeight(e){e!==this._minHeight&&(this._minHeight=e,this.fire("resize"))}get minHeight(){return this._minHeight}set maxWidth(e){e!==this._maxWidth&&(this._maxWidth=e,this.fire("resize"))}get maxWidth(){return this._maxWidth}set maxHeight(e){e!==this._maxHeight&&(this._maxHeight=e,this.fire("resize"))}get maxHeight(){return this._maxHeight}set fitWidthProportion(e){e!==this._fitWidthProportion&&(this._fitWidthProportion=e,this.fire("resize"))}get fitWidthProportion(){return this._fitWidthProportion}set fitHeightProportion(e){e!==this._fitHeightProportion&&(this._fitHeightProportion=e,this.fire("resize"))}get fitHeightProportion(){return this._fitHeightProportion}set excludeFromLayout(e){e!==this._excludeFromLayout&&(this._excludeFromLayout=e,this.fire("resize"))}get excludeFromLayout(){return this._excludeFromLayout}}class zL{constructor(){this.enabled=!0}}const cv=["enabled"];class VL extends ht{constructor(t){super(t),this.id="layoutchild",this.ComponentType=hv,this.DataType=zL,this.schema=cv}initializeComponentData(t,e,s){e.enabled!==void 0&&(t.enabled=e.enabled),e.minWidth!==void 0&&(t.minWidth=e.minWidth),e.minHeight!==void 0&&(t.minHeight=e.minHeight),e.maxWidth!==void 0&&(t.maxWidth=e.maxWidth),e.maxHeight!==void 0&&(t.maxHeight=e.maxHeight),e.fitWidthProportion!==void 0&&(t.fitWidthProportion=e.fitWidthProportion),e.fitHeightProportion!==void 0&&(t.fitHeightProportion=e.fitHeightProportion),e.excludeFromLayout!==void 0&&(t.excludeFromLayout=e.excludeFromLayout),super.initializeComponentData(t,e,s)}cloneComponent(t,e){const s=t.layoutchild;return this.addComponent(e,{enabled:s.enabled,minWidth:s.minWidth,minHeight:s.minHeight,maxWidth:s.maxWidth,maxHeight:s.maxHeight,fitWidthProportion:s.fitWidthProportion,fitHeightProportion:s.fitHeightProportion,excludeFromLayout:s.excludeFromLayout})}}we._buildAccessors(hv.prototype,cv);const hu=0,GL=1,pg=2,HL=3,uc={};uc[Ee]={axis:"x",size:"width",calculatedSize:"calculatedWidth",minSize:"minWidth",maxSize:"maxWidth",fitting:"widthFitting",fittingProportion:"fitWidthProportion"};uc[je]={axis:"y",size:"height",calculatedSize:"calculatedHeight",minSize:"minHeight",maxSize:"maxHeight",fitting:"heightFitting",fittingProportion:"fitHeightProportion"};const Xp={};Xp[Ee]=je;Xp[je]=Ee;const WL={minWidth:0,minHeight:0,maxWidth:Number.POSITIVE_INFINITY,maxHeight:Number.POSITIVE_INFINITY,width:null,height:null,fitWidthProportion:0,fitHeightProportion:0},ns={NONE:"NONE",APPLY_STRETCHING:"APPLY_STRETCHING",APPLY_SHRINKING:"APPLY_SHRINKING"},os=new J;function dv(l){let t;const e=uc[l],s=uc[Xp[l]];function i(R,B){return-B[e.size]*R.pivot[e.axis]}function r(R,B){return-B[s.size]*R.pivot[s.axis]}function a(R,B){return B[e.size]*(1-R.pivot[e.axis])}function n(R,B){R=R.filter(o),t=B,os.x=t.containerSize.x-t.padding.x-t.padding.z,os.y=t.containerSize.y-t.padding.y-t.padding.w,c(R);const V=f(d(R)),O=p(V,u(V)),M=w(V,O);return x(V,O,M),b(V,O,M),C(V)}function o(R){const B=R.entity.layoutchild;return!B||!B.enabled||!B.excludeFromLayout}function c(R){for(let B=0;B<R.length;++B){const V=R[B],O=V.anchor;(O.x!==0||O.y!==0||O.z!==0||O.w!==0)&&(V.anchor=oe.ZERO)}}function d(R){if(!t.wrap)return[R];const B=[[]],V=D(R);let O=0;const M=t[e.fitting]===pg;for(let P=0;P<R.length;++P){B[B.length-1].length>0&&(O+=t.spacing[e.axis]);const N=V[P][e.size];O+=N,!M&&O>os[e.axis]&&B[B.length-1].length!==0&&(O=N,B.push([])),B[B.length-1].push(R[P]),M&&O>os[e.axis]&&P!==R.length-1&&(O=0,B.push([]))}return B}function f(R){const B=t.orientation===Ee&&t.reverseX||t.orientation===je&&t.reverseY,V=t.orientation===Ee&&t.reverseY||t.orientation===je&&t.reverseX;if(B)for(let O=0;O<R.length;++O)B&&R[O].reverse();return V&&R.reverse(),R}function u(R){const B=[];for(let V=0;V<R.length;++V){const O=R[V],M=D(O),P=_(M,e),N=m(t[e.fitting],P,os[e.axis]);N===ns.APPLY_STRETCHING?S(M,P,e):N===ns.APPLY_SHRINKING&&g(M,P,e),B.push(M)}return B}function p(R,B){const V=[],O=[];for(let N=0;N<R.length;++N){const U=R[N];U.largestElement=null,U.largestSize={width:Number.NEGATIVE_INFINITY,height:Number.NEGATIVE_INFINITY};for(let z=0;z<U.length;++z){const $=B[N][z];$[s.size]>U.largestSize[s.size]&&(U.largestElement=U[z],U.largestSize=$)}V.push(U.largestElement),O.push(U.largestSize)}const M=_(O,s),P=m(t[s.fitting],M,os[s.axis]);P===ns.APPLY_STRETCHING?S(O,M,s):P===ns.APPLY_SHRINKING&&g(O,M,s);for(let N=0;N<R.length;++N){const U=R[N];for(let z=0;z<U.length;++z){const $=B[N][z],X=$[s.size],K=R.length===1?os[s.axis]:U.largestSize[s.size],q=m(t[s.fitting],X,K);q===ns.APPLY_STRETCHING?$[s.size]=Math.min(K,$[s.maxSize]):q===ns.APPLY_SHRINKING&&($[s.size]=Math.max(K,$[s.minSize]))}}return B}function m(R,B,V){switch(R){case hu:return ns.NONE;case GL:return B<V?ns.APPLY_STRETCHING:ns.NONE;case pg:return B>=V?ns.APPLY_SHRINKING:ns.NONE;case HL:return B<V?ns.APPLY_STRETCHING:ns.APPLY_SHRINKING;default:throw new Error(`Unrecognized fitting mode: ${R}`)}}function _(R,B){const V=L(R,B.size),O=(R.length-1)*t.spacing[B.axis];return V+O}function S(R,B,V){const O=k(R,V.maxSize),M=E(R,V.fittingProportion),P=W(M,O);let N=os[V.axis]-B;for(let U=0;U<R.length;++U){const z=O[U],$=v(z,N,M,P),X=R[z][V.size]+$,K=R[z][V.maxSize],q=Math.min(X,K);R[z][V.size]=q;const re=Math.max(X-q,0),ee=$-re;N-=ee}}function g(R,B,V){const O=k(R,V.minSize,!0),M=E(R,V.fittingProportion),P=F(M),N=W(P,O);let U=B-os[V.axis];for(let z=0;z<R.length;++z){const $=O[z],X=v($,U,P,N),K=R[$][V.size]-X,q=R[$][V.minSize],re=Math.max(K,q);R[$][V.size]=re;const ee=Math.max(re-K,0),se=X-ee;U-=se}}function v(R,B,V,O){const M=V[R],P=O[R];return Math.abs(M)<1e-5&&Math.abs(P)<1e-5?B:B*M/P}function w(R,B){const V={};V[e.axis]=0,V[s.axis]=0,R[e.size]=Number.NEGATIVE_INFINITY;const O=[];for(let M=0;M<R.length;++M){const P=R[M];if(P.length===0){O.push([]);continue}const N=[],U=B[M];for(let z=0;z<P.length;++z){const $=P[z],X=U[z];V[s.axis]-=r($,X),V[e.axis]-=i($,X),N[z]={},N[z][e.axis]=V[e.axis],N[z][s.axis]=V[s.axis],V[s.axis]+=r($,X),V[e.axis]+=a($,X)+t.spacing[e.axis]}P[e.size]=V[e.axis]-t.spacing[e.axis],P[s.size]=P.largestSize[s.size],R[e.size]=Math.max(R[e.size],P[e.size]),V[e.axis]=0,V[s.axis]+=P[s.size]+t.spacing[s.axis],O.push(N)}return R[s.size]=V[s.axis]-t.spacing[s.axis],O}function x(R,B,V){const O=t.alignment[e.axis],M=t.alignment[s.axis],P=t.padding[e.axis],N=t.padding[s.axis];for(let U=0;U<R.length;++U){const z=R[U],$=B[U],X=V[U],K=(os[e.axis]-z[e.size])*O+P,q=(os[s.axis]-R[s.size])*M+N;for(let re=0;re<z.length;++re){const ee=(z[s.size]-$[re][s.size])*t.alignment[s.axis];X[re][e.axis]+=K,X[re][s.axis]+=q+ee}}}function b(R,B,V){for(let O=0;O<R.length;++O){const M=R[O],P=B[O],N=V[O];for(let U=0;U<M.length;++U){const z=M[U];z[e.calculatedSize]=P[U][e.size],z[s.calculatedSize]=P[U][s.size],t.orientation===Ee?z.entity.setLocalPosition(N[U][e.axis],N[U][s.axis],z.entity.getLocalPosition().z):z.entity.setLocalPosition(N[U][s.axis],N[U][e.axis],z.entity.getLocalPosition().z)}}}function C(R){const B=R.width,V=R.height,O=(os.x-B)*t.alignment.x+t.padding.x,M=(os.y-V)*t.alignment.y+t.padding.y;return{bounds:new oe(O,M,B,V)}}function D(R){const B=[];for(let V=0;V<R.length;++V){const O=R[V],M=Math.max(T(O,"minWidth"),0),P=Math.max(T(O,"minHeight"),0),N=Math.max(T(O,"maxWidth"),M),U=Math.max(T(O,"maxHeight"),P),z=I(T(O,"width"),M,N),$=I(T(O,"height"),P,U),X=T(O,"fitWidthProportion"),K=T(O,"fitHeightProportion");B.push({minWidth:M,minHeight:P,maxWidth:N,maxHeight:U,width:z,height:$,fitWidthProportion:X,fitHeightProportion:K})}return B}function T(R,B){const V=R.entity.layoutchild;return V&&V.enabled&&V[B]!==void 0&&V[B]!==null?V[B]:R[B]!==void 0?R[B]:WL[B]}function I(R,B,V){return Math.min(Math.max(R,B),V)}function L(R,B){return R.reduce((V,O)=>V+O[B],0)}function E(R,B){const V=L(R,B),O=[],M=R.length;if(V===0)for(let P=0;P<M;++P)O.push(1/M);else for(let P=0;P<M;++P)O.push(R[P][B]/V);return O}function F(R){if(R.length===1)return[1];const B=[],V=R.length;for(let O=0;O<V;++O)B.push((1-R[O])/(V-1));return B}function k(R,B,V){return R.forEach(H),R.slice().sort((O,M)=>V?M[B]-O[B]:O[B]-M[B]).map(G)}function H(R,B){R.index=B}function G(R){return R.index}function W(R,B){const V=[];V[B[R.length-1]]=R[B[R.length-1]];for(let O=R.length-2;O>=0;--O)V[B[O]]=V[B[O+1]]+R[B[O]];return V}return n}const qp={};qp[Ee]=dv(Ee);qp[je]=dv(je);class $L{calculateLayout(t,e){const s=qp[e.orientation];if(s)return s(t,e);throw new Error(`Unrecognized orientation value: ${e.orientation}`)}}function mg(l){return l.element}function XL(l){return l.enabled&&l.element&&l.element.enabled}class fv extends we{constructor(e,s){super(e,s);h(this,"_orientation",Ee);h(this,"_reverseX",!1);h(this,"_reverseY",!0);h(this,"_alignment",new J(0,1));h(this,"_padding",new oe);h(this,"_spacing",new J);h(this,"_widthFitting",hu);h(this,"_heightFitting",hu);h(this,"_wrap",!1);h(this,"_layoutCalculator",new $L);this._listenForReflowEvents(this.entity,"on"),this.entity.children.forEach(i=>{this._listenForReflowEvents(i,"on")}),this.entity.on("childinsert",this._onChildInsert,this),this.entity.on("childremove",this._onChildRemove,this),y.assert(e.app.systems.element,"System 'element' doesn't exist"),e.app.systems.element.on("add",this._onElementOrLayoutComponentAdd,this),e.app.systems.element.on("beforeremove",this._onElementOrLayoutComponentRemove,this),y.assert(e.app.systems.layoutchild,"System 'layoutchild' doesn't exist"),e.app.systems.layoutchild.on("add",this._onElementOrLayoutComponentAdd,this),e.app.systems.layoutchild.on("beforeremove",this._onElementOrLayoutComponentRemove,this)}set orientation(e){e!==this._orientation&&(this._orientation=e,this._scheduleReflow())}get orientation(){return this._orientation}set reverseX(e){e!==this._reverseX&&(this._reverseX=e,this._scheduleReflow())}get reverseX(){return this._reverseX}set reverseY(e){e!==this._reverseY&&(this._reverseY=e,this._scheduleReflow())}get reverseY(){return this._reverseY}set alignment(e){e.equals(this._alignment)||(this._alignment.copy(e),this._scheduleReflow())}get alignment(){return this._alignment}set padding(e){e.equals(this._padding)||(this._padding.copy(e),this._scheduleReflow())}get padding(){return this._padding}set spacing(e){e.equals(this._spacing)||(this._spacing.copy(e),this._scheduleReflow())}get spacing(){return this._spacing}set widthFitting(e){e!==this._widthFitting&&(this._widthFitting=e,this._scheduleReflow())}get widthFitting(){return this._widthFitting}set heightFitting(e){e!==this._heightFitting&&(this._heightFitting=e,this._scheduleReflow())}get heightFitting(){return this._heightFitting}set wrap(e){e!==this._wrap&&(this._wrap=e,this._scheduleReflow())}get wrap(){return this._wrap}_isSelfOrChild(e){return e===this.entity||this.entity.children.indexOf(e)!==-1}_listenForReflowEvents(e,s){e.element&&(e.element[s]("enableelement",this._scheduleReflow,this),e.element[s]("disableelement",this._scheduleReflow,this),e.element[s]("resize",this._scheduleReflow,this),e.element[s]("set:pivot",this._scheduleReflow,this)),e.layoutchild&&(e.layoutchild[s]("set_enabled",this._scheduleReflow,this),e.layoutchild[s]("resize",this._scheduleReflow,this))}_onElementOrLayoutComponentAdd(e){this._isSelfOrChild(e)&&(this._listenForReflowEvents(e,"on"),this._scheduleReflow())}_onElementOrLayoutComponentRemove(e){this._isSelfOrChild(e)&&(this._listenForReflowEvents(e,"off"),this._scheduleReflow())}_onChildInsert(e){this._listenForReflowEvents(e,"on"),this._scheduleReflow()}_onChildRemove(e){this._listenForReflowEvents(e,"off"),this._scheduleReflow()}_scheduleReflow(){this.enabled&&this.entity&&this.entity.enabled&&!this._isPerformingReflow&&this.system.scheduleReflow(this)}reflow(){const e=mg(this.entity),s=this.entity.children.filter(XL).map(mg);if(!e||s.length===0)return;const i=Math.max(e.calculatedWidth,0),r=Math.max(e.calculatedHeight,0),a={orientation:this._orientation,reverseX:this._reverseX,reverseY:this._reverseY,alignment:this._alignment,padding:this._padding,spacing:this._spacing,widthFitting:this._widthFitting,heightFitting:this._heightFitting,wrap:this._wrap,containerSize:new J(i,r)};this._isPerformingReflow=!0;const n=this._layoutCalculator.calculateLayout(s,a);this._isPerformingReflow=!1,this.fire("reflow",n)}onEnable(){this._scheduleReflow()}onRemove(){this.entity.off("childinsert",this._onChildInsert,this),this.entity.off("childremove",this._onChildRemove,this),this._listenForReflowEvents(this.entity,"off"),this.entity.children.forEach(e=>{this._listenForReflowEvents(e,"off")}),this.system.app.systems.element.off("add",this._onElementOrLayoutComponentAdd,this),this.system.app.systems.element.off("beforeremove",this._onElementOrLayoutComponentRemove,this),this.system.app.systems.layoutchild.off("add",this._onElementOrLayoutComponentAdd,this),this.system.app.systems.layoutchild.off("beforeremove",this._onElementOrLayoutComponentRemove,this)}}class qL{constructor(){this.enabled=!0}}const uv=["enabled"],jL=100;class YL extends ht{constructor(t){super(t),this.id="layoutgroup",this.ComponentType=fv,this.DataType=qL,this.schema=uv,this._reflowQueue=[],this.on("beforeremove",this._onRemoveComponent,this),this.app.systems.on("postUpdate",this._onPostUpdate,this)}initializeComponentData(t,e,s){e.enabled!==void 0&&(t.enabled=e.enabled),e.orientation!==void 0&&(t.orientation=e.orientation),e.reverseX!==void 0&&(t.reverseX=e.reverseX),e.reverseY!==void 0&&(t.reverseY=e.reverseY),e.alignment!==void 0&&(t.alignment=Array.isArray(e.alignment)?new J(e.alignment):e.alignment),e.padding!==void 0&&(t.padding=Array.isArray(e.padding)?new oe(e.padding):e.padding),e.spacing!==void 0&&(t.spacing=Array.isArray(e.spacing)?new J(e.spacing):e.spacing),e.widthFitting!==void 0&&(t.widthFitting=e.widthFitting),e.heightFitting!==void 0&&(t.heightFitting=e.heightFitting),e.wrap!==void 0&&(t.wrap=e.wrap),super.initializeComponentData(t,e,s)}cloneComponent(t,e){const s=t.layoutgroup;return this.addComponent(e,{enabled:s.enabled,orientation:s.orientation,reverseX:s.reverseX,reverseY:s.reverseY,alignment:s.alignment,padding:s.padding,spacing:s.spacing,widthFitting:s.widthFitting,heightFitting:s.heightFitting,wrap:s.wrap})}scheduleReflow(t){this._reflowQueue.indexOf(t)===-1&&this._reflowQueue.push(t)}_onPostUpdate(){this._processReflowQueue()}_processReflowQueue(){if(this._reflowQueue.length===0)return;let t=0;for(;this._reflowQueue.length>0;){const e=this._reflowQueue.slice();this._reflowQueue.length=0,e.sort((s,i)=>s.entity.graphDepth-i.entity.graphDepth);for(let s=0;s<e.length;++s)e[s].reflow();if(++t>=jL){console.warn("Max reflow iterations limit reached, bailing.");break}}}_onRemoveComponent(t,e){e.onRemove()}destroy(){super.destroy(),this.app.systems.off("postUpdate",this._onPostUpdate,this)}}we._buildAccessors(fv.prototype,uv);class KL{constructor(){h(this,"map",new Map)}destroy(t){this.map.forEach(e=>e.mesh.destroy())}}const ZL=new jt,pv=(l,t)=>{const e=ZL.get(l,()=>new KL);let s=e.map.get(t);if(!s){let i,r;switch(t){case"box":i=Ve.fromGeometry(l,new Gf),r={x:2,y:2,z:2,uv:2/3};break;case"capsule":i=Ve.fromGeometry(l,new eA({radius:.5,height:2})),r={x:Math.PI*2,y:Math.PI,z:Math.PI*2,uv:1/3+1/3/3*2};break;case"cone":i=Ve.fromGeometry(l,new tA({baseRadius:.5,peakRadius:0,height:1})),r={x:2.54,y:2.54,z:2.54,uv:1/3+1/3/3};break;case"cylinder":i=Ve.fromGeometry(l,new sA({radius:.5,height:1})),r={x:Math.PI,y:.79*2,z:Math.PI,uv:1/3+1/3/3*2};break;case"plane":i=Ve.fromGeometry(l,new iA({halfExtents:new J(.5,.5),widthSegments:1,lengthSegments:1})),r={x:0,y:1,z:0,uv:1};break;case"sphere":i=Ve.fromGeometry(l,new Gp({radius:.5})),r={x:Math.PI,y:Math.PI,z:Math.PI,uv:1};break;case"torus":i=Ve.fromGeometry(l,new rA({tubeRadius:.2,ringRadius:.3})),r={x:Math.PI*.5*.5-Math.PI*.1*.1,y:.4,z:.4,uv:1};break;default:throw new Error(`Invalid primitive type: ${t}`)}i.incRefCount(),s={mesh:i,area:r},e.map.set(t,s)}return s};class jp extends we{constructor(e,s){super(e,s);h(this,"_type","asset");h(this,"_asset",null);h(this,"_model",null);h(this,"_mapping",{});h(this,"_castShadows",!0);h(this,"_receiveShadows",!0);h(this,"_materialAsset",null);h(this,"_material");h(this,"_castShadowsLightmap",!0);h(this,"_lightmapped",!1);h(this,"_lightmapSizeMultiplier",1);h(this,"isStatic",!1);h(this,"_layers",[tr]);h(this,"_batchGroupId",-1);h(this,"_customAabb",null);h(this,"_area",null);h(this,"_materialEvents",null);h(this,"_clonedModel",!1);h(this,"_batchGroup",null);h(this,"_evtLayersChanged",null);h(this,"_evtLayerAdded",null);h(this,"_evtLayerRemoved",null);this._material=e.defaultMaterial,s.on("remove",this.onRemoveChild,this),s.on("removehierarchy",this.onRemoveChild,this),s.on("insert",this.onInsertChild,this),s.on("inserthierarchy",this.onInsertChild,this)}set meshInstances(e){this._model&&(this._model.meshInstances=e)}get meshInstances(){return this._model?this._model.meshInstances:null}set customAabb(e){if(this._customAabb=e,this._model){const s=this._model.meshInstances;if(s)for(let i=0;i<s.length;i++)s[i].setCustomAabb(this._customAabb)}}get customAabb(){return this._customAabb}set type(e){if(this._type!==e)if(this._area=null,this._type=e,e==="asset")this._asset!==null?this._bindModelAsset(this._asset):this.model=null;else{const s=pv(this.system.app.graphicsDevice,e);this._area=s.area;const i=s.mesh,r=new De,a=new ir;a.graph=r,a.meshInstances=[new Ge(i,this._material,r)],this.model=a,this._asset=null}}get type(){return this._type}set asset(e){const s=this.system.app.assets;let i=e;if(e instanceof _e&&(i=e.id),this._asset!==i){if(this._asset){s.off(`add:${this._asset}`,this._onModelAssetAdded,this);const r=s.get(this._asset);r&&this._unbindModelAsset(r)}if(this._asset=i,this._asset){const r=s.get(this._asset);r?this._bindModelAsset(r):(this.model=null,s.on(`add:${this._asset}`,this._onModelAssetAdded,this))}else this.model=null}}get asset(){return this._asset}set model(e){if(this._model!==e){if(e&&e._immutable){y.error("Invalid attempt to assign a model to multiple ModelComponents");return}if(this._model&&(this._model._immutable=!1,this.removeModelFromLayers(),this._model.getGraph().destroy(),delete this._model._entity,this._clonedModel&&(this._model.destroy(),this._clonedModel=!1)),this._model=e,this._model){this._model._immutable=!0;const s=this._model.meshInstances;for(let i=0;i<s.length;i++)s[i].castShadow=this._castShadows,s[i].receiveShadow=this._receiveShadows,s[i].setCustomAabb(this._customAabb);this.lightmapped=this._lightmapped,this.entity.addChild(this._model.graph),this.enabled&&this.entity.enabled&&this.addModelToLayers(),this._model._entity=this.entity,this.entity.animation&&this.entity.animation.setModel(this._model),this.entity.anim&&this.entity.anim.rebind(),this.type==="asset"?this.mapping=this._mapping:this._unsetMaterialEvents()}}}get model(){return this._model}set lightmapped(e){if(e!==this._lightmapped&&(this._lightmapped=e,this._model)){const s=this._model.meshInstances;for(let i=0;i<s.length;i++)s[i].setLightmapped(e)}}get lightmapped(){return this._lightmapped}set castShadows(e){if(this._castShadows===e)return;const s=this._model;if(s){const i=this.layers,r=this.system.app.scene;if(this._castShadows&&!e)for(let n=0;n<i.length;n++){const o=this.system.app.scene.layers.getLayerById(this.layers[n]);o&&o.removeShadowCasters(s.meshInstances)}const a=s.meshInstances;for(let n=0;n<a.length;n++)a[n].castShadow=e;if(!this._castShadows&&e)for(let n=0;n<i.length;n++){const o=r.layers.getLayerById(i[n]);o&&o.addShadowCasters(s.meshInstances)}}this._castShadows=e}get castShadows(){return this._castShadows}set receiveShadows(e){if(this._receiveShadows!==e&&(this._receiveShadows=e,this._model)){const s=this._model.meshInstances;for(let i=0,r=s.length;i<r;i++)s[i].receiveShadow=e}}get receiveShadows(){return this._receiveShadows}set castShadowsLightmap(e){this._castShadowsLightmap=e}get castShadowsLightmap(){return this._castShadowsLightmap}set lightmapSizeMultiplier(e){this._lightmapSizeMultiplier=e}get lightmapSizeMultiplier(){return this._lightmapSizeMultiplier}set layers(e){const s=this.system.app.scene.layers;if(this.meshInstances)for(let i=0;i<this._layers.length;i++){const r=s.getLayerById(this._layers[i]);r&&r.removeMeshInstances(this.meshInstances)}this._layers.length=0;for(let i=0;i<e.length;i++)this._layers[i]=e[i];if(!(!this.enabled||!this.entity.enabled||!this.meshInstances))for(let i=0;i<this._layers.length;i++){const r=s.getLayerById(this._layers[i]);r&&r.addMeshInstances(this.meshInstances)}}get layers(){return this._layers}set batchGroupId(e){var s,i;this._batchGroupId!==e&&(this.entity.enabled&&this._batchGroupId>=0&&((s=this.system.app.batcher)==null||s.remove(gt.MODEL,this.batchGroupId,this.entity)),this.entity.enabled&&e>=0&&((i=this.system.app.batcher)==null||i.insert(gt.MODEL,e,this.entity)),e<0&&this._batchGroupId>=0&&this.enabled&&this.entity.enabled&&this.addModelToLayers(),this._batchGroupId=e)}get batchGroupId(){return this._batchGroupId}set materialAsset(e){let s=e;e instanceof _e&&(s=e.id);const i=this.system.app.assets;if(s!==this._materialAsset){if(this._materialAsset){i.off(`add:${this._materialAsset}`,this._onMaterialAssetAdd,this);const r=i.get(this._materialAsset);r&&this._unbindMaterialAsset(r)}if(this._materialAsset=s,this._materialAsset){const r=i.get(this._materialAsset);r?this._bindMaterialAsset(r):(this._setMaterial(this.system.defaultMaterial),i.on(`add:${this._materialAsset}`,this._onMaterialAssetAdd,this))}else this._setMaterial(this.system.defaultMaterial)}}get materialAsset(){return this._materialAsset}set material(e){this._material!==e&&(this.materialAsset=null,this._setMaterial(e))}get material(){return this._material}set mapping(e){if(this._type!=="asset"||(this._unsetMaterialEvents(),e||(e={}),this._mapping=e,!this._model))return;const s=this._model.meshInstances,i=this.asset?this.system.app.assets.get(this.asset):null,r=i?i.data.mapping:null;let a=null;for(let n=0,o=s.length;n<o;n++)if(e[n]!==void 0)e[n]?(a=this.system.app.assets.get(e[n]),this._loadAndSetMeshInstanceMaterial(a,s[n],n)):s[n].material=this.system.defaultMaterial;else if(r)if(r[n]&&(r[n].material||r[n].path)){if(r[n].material!==void 0)a=this.system.app.assets.get(r[n].material);else if(r[n].path!==void 0){const c=this._getMaterialAssetUrl(r[n].path);c&&(a=this.system.app.assets.getByUrl(c))}this._loadAndSetMeshInstanceMaterial(a,s[n],n)}else s[n].material=this.system.defaultMaterial}get mapping(){return this._mapping}addModelToLayers(){const e=this.system.app.scene.layers;for(let s=0;s<this._layers.length;s++){const i=e.getLayerById(this._layers[s]);i&&i.addMeshInstances(this.meshInstances)}}removeModelFromLayers(){const e=this.system.app.scene.layers;for(let s=0;s<this._layers.length;s++){const i=e.getLayerById(this._layers[s]);i&&i.removeMeshInstances(this.meshInstances)}}onRemoveChild(){this._model&&this.removeModelFromLayers()}onInsertChild(){this._model&&this.enabled&&this.entity.enabled&&this.addModelToLayers()}onRemove(){this.asset=null,this.model=null,this.materialAsset=null,this._unsetMaterialEvents(),this.entity.off("remove",this.onRemoveChild,this),this.entity.off("insert",this.onInsertChild,this)}onLayersChanged(e,s){this.addModelToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),s.on("add",this.onLayerAdded,this),s.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||e.addMeshInstances(this.meshInstances)}onLayerRemoved(e){this.layers.indexOf(e.id)<0||e.removeMeshInstances(this.meshInstances)}_setMaterialEvent(e,s,i,r){const a=`${s}:${i}`;this.system.app.assets.on(a,r,this),this._materialEvents||(this._materialEvents=[]),this._materialEvents[e]||(this._materialEvents[e]={}),this._materialEvents[e][a]={id:i,handler:r}}_unsetMaterialEvents(){const e=this.system.app.assets,s=this._materialEvents;if(s){for(let i=0,r=s.length;i<r;i++){if(!s[i])continue;const a=s[i];for(const n in a)e.off(n,a[n].handler,this)}this._materialEvents=null}}_getAssetByIdOrPath(e){let s=null;if(!isNaN(parseInt(e,10)))s=this.system.app.assets.get(e);else if(this.asset){const r=this._getMaterialAssetUrl(e);r&&(s=this.system.app.assets.getByUrl(r))}return s}_getMaterialAssetUrl(e){if(!this.asset)return null;const s=this.system.app.assets.get(this.asset);return s?s.getAbsoluteUrl(e):null}_loadAndSetMeshInstanceMaterial(e,s,i){const r=this.system.app.assets;e&&(e.resource?(s.material=e.resource,this._setMaterialEvent(i,"remove",e.id,function(){s.material=this.system.defaultMaterial})):(this._setMaterialEvent(i,"load",e.id,function(a){s.material=a.resource,this._setMaterialEvent(i,"remove",e.id,function(){s.material=this.system.defaultMaterial})}),this.enabled&&this.entity.enabled&&r.load(e)))}onEnable(){var n;const e=this.system.app,s=e.scene,i=s==null?void 0:s.layers;this._evtLayersChanged=s.on("set:layers",this.onLayersChanged,this),i&&(this._evtLayerAdded=i.on("add",this.onLayerAdded,this),this._evtLayerRemoved=i.on("remove",this.onLayerRemoved,this));const r=this._type==="asset";let a;if(this._model?this.addModelToLayers():r&&this._asset&&(a=e.assets.get(this._asset),a&&a.resource!==this._model&&this._bindModelAsset(a)),this._materialAsset&&(a=e.assets.get(this._materialAsset),a&&a.resource!==this._material&&this._bindMaterialAsset(a)),r&&this._mapping)for(const o in this._mapping)this._mapping[o]&&(a=this._getAssetByIdOrPath(this._mapping[o]),a&&!a.resource&&e.assets.load(a));this._batchGroupId>=0&&((n=e.batcher)==null||n.insert(gt.MODEL,this.batchGroupId,this.entity))}onDisable(){var r,a,n,o;const e=this.system.app,i=e.scene.layers;(r=this._evtLayersChanged)==null||r.off(),this._evtLayersChanged=null,i&&((a=this._evtLayerAdded)==null||a.off(),this._evtLayerAdded=null,(n=this._evtLayerRemoved)==null||n.off(),this._evtLayerRemoved=null),this._batchGroupId>=0&&((o=e.batcher)==null||o.remove(gt.MODEL,this.batchGroupId,this.entity)),this._model&&this.removeModelFromLayers()}hide(){if(this._model){const e=this._model.meshInstances;for(let s=0,i=e.length;s<i;s++)e[s].visible=!1}}show(){if(this._model){const e=this._model.meshInstances;for(let s=0,i=e.length;s<i;s++)e[s].visible=!0}}_bindMaterialAsset(e){if(e.on("load",this._onMaterialAssetLoad,this),e.on("unload",this._onMaterialAssetUnload,this),e.on("remove",this._onMaterialAssetRemove,this),e.on("change",this._onMaterialAssetChange,this),e.resource)this._onMaterialAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindMaterialAsset(e){e.off("load",this._onMaterialAssetLoad,this),e.off("unload",this._onMaterialAssetUnload,this),e.off("remove",this._onMaterialAssetRemove,this),e.off("change",this._onMaterialAssetChange,this)}_onMaterialAssetAdd(e){this.system.app.assets.off(`add:${e.id}`,this._onMaterialAssetAdd,this),this._materialAsset===e.id&&this._bindMaterialAsset(e)}_onMaterialAssetLoad(e){this._setMaterial(e.resource)}_onMaterialAssetUnload(e){this._setMaterial(this.system.defaultMaterial)}_onMaterialAssetRemove(e){this._onMaterialAssetUnload(e)}_onMaterialAssetChange(e){}_bindModelAsset(e){if(this._unbindModelAsset(e),e.on("load",this._onModelAssetLoad,this),e.on("unload",this._onModelAssetUnload,this),e.on("change",this._onModelAssetChange,this),e.on("remove",this._onModelAssetRemove,this),e.resource)this._onModelAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindModelAsset(e){e.off("load",this._onModelAssetLoad,this),e.off("unload",this._onModelAssetUnload,this),e.off("change",this._onModelAssetChange,this),e.off("remove",this._onModelAssetRemove,this)}_onModelAssetAdded(e){this.system.app.assets.off(`add:${e.id}`,this._onModelAssetAdded,this),e.id===this._asset&&this._bindModelAsset(e)}_onModelAssetLoad(e){this.model=e.resource.clone(),this._clonedModel=!0}_onModelAssetUnload(e){this.model=null}_onModelAssetChange(e,s,i,r){s==="data"&&(this.mapping=this._mapping)}_onModelAssetRemove(e){this.model=null}_setMaterial(e){if(this._material===e)return;this._material=e;const s=this._model;if(s&&this._type!=="asset"){const i=s.meshInstances;for(let r=0,a=i.length;r<a;r++)i[r].material=e}}}class QL{constructor(){this.enabled=!0}}const mv=["enabled"];class JL extends ht{constructor(t){super(t),this.id="model",this.ComponentType=jp,this.DataType=QL,this.schema=mv,this.defaultMaterial=$n(t.graphicsDevice),this.on("beforeremove",this.onRemove,this)}initializeComponentData(t,e,s){s=["material","materialAsset","asset","castShadows","receiveShadows","castShadowsLightmap","lightmapped","lightmapSizeMultiplier","type","mapping","layers","isStatic","batchGroupId"],(e.batchGroupId===null||e.batchGroupId===void 0)&&(e.batchGroupId=-1),e.layers&&e.layers.length&&(e.layers=e.layers.slice(0));for(let i=0;i<s.length;i++)e.hasOwnProperty(s[i])&&(t[s[i]]=e[s[i]]);e.aabbCenter&&e.aabbHalfExtents&&(t.customAabb=new Me(new A(e.aabbCenter),new A(e.aabbHalfExtents))),super.initializeComponentData(t,e,["enabled"])}cloneComponent(t,e){const s={type:t.model.type,asset:t.model.asset,castShadows:t.model.castShadows,receiveShadows:t.model.receiveShadows,castShadowsLightmap:t.model.castShadowsLightmap,lightmapped:t.model.lightmapped,lightmapSizeMultiplier:t.model.lightmapSizeMultiplier,isStatic:t.model.isStatic,enabled:t.model.enabled,layers:t.model.layers,batchGroupId:t.model.batchGroupId,mapping:Uh({},t.model.mapping)};let i=t.model.materialAsset;!(i instanceof _e)&&i!=null&&(i=this.app.assets.get(i));const r=t.model.material;(!r||r===this.defaultMaterial||!i||r===i.resource)&&(s.materialAsset=i);const a=this.addComponent(e,s);if(t.model.model&&t.model.type==="asset"&&!t.model.asset&&(a.model=t.model.model.clone(),a._clonedModel=!0),s.materialAsset||(a.material=r),t.model.model){const n=t.model.model.meshInstances,o=a.model.meshInstances;for(let c=0;c<n.length;c++)o[c].mask=n[c].mask,o[c].material=n[c].material,o[c].layer=n[c].layer,o[c].receiveShadow=n[c].receiveShadow}return t.model.customAabb&&(a.customAabb=t.model.customAabb.clone()),a}onRemove(t,e){e.onRemove()}}we._buildAccessors(jp.prototype,mv);const eR=["emitterExtents","emitterRadius","emitterExtentsInner","emitterRadiusInner","loop","initialVelocity","animSpeed","normalMap","particleNormal"],tR=["numParticles","lifetime","rate","rate2","startAngle","startAngle2","lighting","halfLambert","intensity","wrap","wrapBounds","depthWrite","noFog","sort","stretch","alignToMotion","preWarm","emitterShape","animTilesX","animTilesY","animStartFrame","animNumFrames","animNumAnimations","animIndex","randomizeAnimIndex","animLoop","colorMap","localSpace","screenSpace","orientation"],sR=["scaleGraph","scaleGraph2","colorGraph","colorGraph2","alphaGraph","alphaGraph2","velocityGraph","velocityGraph2","localVelocityGraph","localVelocityGraph2","rotationSpeedGraph","rotationSpeedGraph2","radialSpeedGraph","radialSpeedGraph2"],ph=["colorMapAsset","normalMapAsset","meshAsset","renderAsset"];let Xa;class iR extends we{constructor(e,s){super(e,s);h(this,"_requestedDepth",!1);h(this,"_drawOrder",0);h(this,"_evtLayersChanged",null);h(this,"_evtLayerAdded",null);h(this,"_evtLayerRemoved",null);h(this,"_evtSetMeshes",null);this.on("set_colorMapAsset",this.onSetColorMapAsset,this),this.on("set_normalMapAsset",this.onSetNormalMapAsset,this),this.on("set_meshAsset",this.onSetMeshAsset,this),this.on("set_mesh",this.onSetMesh,this),this.on("set_renderAsset",this.onSetRenderAsset,this),this.on("set_loop",this.onSetLoop,this),this.on("set_blendType",this.onSetBlendType,this),this.on("set_depthSoftening",this.onSetDepthSoftening,this),this.on("set_layers",this.onSetLayers,this),eR.forEach(i=>{this.on(`set_${i}`,this.onSetSimpleProperty,this)}),tR.forEach(i=>{this.on(`set_${i}`,this.onSetComplexProperty,this)}),sR.forEach(i=>{this.on(`set_${i}`,this.onSetGraphProperty,this)})}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e)}get enabled(){return this.data.enabled}set autoPlay(e){this._setValue("autoPlay",e)}get autoPlay(){return this.data.autoPlay}set numParticles(e){this._setValue("numParticles",e)}get numParticles(){return this.data.numParticles}set lifetime(e){this._setValue("lifetime",e)}get lifetime(){return this.data.lifetime}set rate(e){this._setValue("rate",e)}get rate(){return this.data.rate}set rate2(e){this._setValue("rate2",e)}get rate2(){return this.data.rate2}set startAngle(e){this._setValue("startAngle",e)}get startAngle(){return this.data.startAngle}set startAngle2(e){this._setValue("startAngle2",e)}get startAngle2(){return this.data.startAngle2}set loop(e){this._setValue("loop",e)}get loop(){return this.data.loop}set preWarm(e){this._setValue("preWarm",e)}get preWarm(){return this.data.preWarm}set lighting(e){this._setValue("lighting",e)}get lighting(){return this.data.lighting}set halfLambert(e){this._setValue("halfLambert",e)}get halfLambert(){return this.data.halfLambert}set intensity(e){this._setValue("intensity",e)}get intensity(){return this.data.intensity}set depthWrite(e){this._setValue("depthWrite",e)}get depthWrite(){return this.data.depthWrite}set noFog(e){this._setValue("noFog",e)}get noFog(){return this.data.noFog}set depthSoftening(e){this._setValue("depthSoftening",e)}get depthSoftening(){return this.data.depthSoftening}set sort(e){this._setValue("sort",e)}get sort(){return this.data.sort}set blendType(e){this._setValue("blendType",e)}get blendType(){return this.data.blendType}set stretch(e){this._setValue("stretch",e)}get stretch(){return this.data.stretch}set alignToMotion(e){this._setValue("alignToMotion",e)}get alignToMotion(){return this.data.alignToMotion}set emitterShape(e){this._setValue("emitterShape",e)}get emitterShape(){return this.data.emitterShape}set emitterExtents(e){this._setValue("emitterExtents",e)}get emitterExtents(){return this.data.emitterExtents}set emitterExtentsInner(e){this._setValue("emitterExtentsInner",e)}get emitterExtentsInner(){return this.data.emitterExtentsInner}set emitterRadius(e){this._setValue("emitterRadius",e)}get emitterRadius(){return this.data.emitterRadius}set emitterRadiusInner(e){this._setValue("emitterRadiusInner",e)}get emitterRadiusInner(){return this.data.emitterRadiusInner}set initialVelocity(e){this._setValue("initialVelocity",e)}get initialVelocity(){return this.data.initialVelocity}set wrap(e){this._setValue("wrap",e)}get wrap(){return this.data.wrap}set wrapBounds(e){this._setValue("wrapBounds",e)}get wrapBounds(){return this.data.wrapBounds}set localSpace(e){this._setValue("localSpace",e)}get localSpace(){return this.data.localSpace}set screenSpace(e){this._setValue("screenSpace",e)}get screenSpace(){return this.data.screenSpace}set colorMapAsset(e){this._setValue("colorMapAsset",e)}get colorMapAsset(){return this.data.colorMapAsset}set normalMapAsset(e){this._setValue("normalMapAsset",e)}get normalMapAsset(){return this.data.normalMapAsset}set mesh(e){this._setValue("mesh",e)}get mesh(){return this.data.mesh}set meshAsset(e){this._setValue("meshAsset",e)}get meshAsset(){return this.data.meshAsset}set renderAsset(e){this._setValue("renderAsset",e)}get renderAsset(){return this.data.renderAsset}set orientation(e){this._setValue("orientation",e)}get orientation(){return this.data.orientation}set particleNormal(e){this._setValue("particleNormal",e)}get particleNormal(){return this.data.particleNormal}set localVelocityGraph(e){this._setValue("localVelocityGraph",e)}get localVelocityGraph(){return this.data.localVelocityGraph}set localVelocityGraph2(e){this._setValue("localVelocityGraph2",e)}get localVelocityGraph2(){return this.data.localVelocityGraph2}set velocityGraph(e){this._setValue("velocityGraph",e)}get velocityGraph(){return this.data.velocityGraph}set velocityGraph2(e){this._setValue("velocityGraph2",e)}get velocityGraph2(){return this.data.velocityGraph2}set rotationSpeedGraph(e){this._setValue("rotationSpeedGraph",e)}get rotationSpeedGraph(){return this.data.rotationSpeedGraph}set rotationSpeedGraph2(e){this._setValue("rotationSpeedGraph2",e)}get rotationSpeedGraph2(){return this.data.rotationSpeedGraph2}set radialSpeedGraph(e){this._setValue("radialSpeedGraph",e)}get radialSpeedGraph(){return this.data.radialSpeedGraph}set radialSpeedGraph2(e){this._setValue("radialSpeedGraph2",e)}get radialSpeedGraph2(){return this.data.radialSpeedGraph2}set scaleGraph(e){this._setValue("scaleGraph",e)}get scaleGraph(){return this.data.scaleGraph}set scaleGraph2(e){this._setValue("scaleGraph2",e)}get scaleGraph2(){return this.data.scaleGraph2}set colorGraph(e){this._setValue("colorGraph",e)}get colorGraph(){return this.data.colorGraph}set colorGraph2(e){this._setValue("colorGraph2",e)}get colorGraph2(){return this.data.colorGraph2}set alphaGraph(e){this._setValue("alphaGraph",e)}get alphaGraph(){return this.data.alphaGraph}set alphaGraph2(e){this._setValue("alphaGraph2",e)}get alphaGraph2(){return this.data.alphaGraph2}set colorMap(e){this._setValue("colorMap",e)}get colorMap(){return this.data.colorMap}set normalMap(e){this._setValue("normalMap",e)}get normalMap(){return this.data.normalMap}set animTilesX(e){this._setValue("animTilesX",e)}get animTilesX(){return this.data.animTilesX}set animTilesY(e){this._setValue("animTilesY",e)}get animTilesY(){return this.data.animTilesY}set animStartFrame(e){this._setValue("animStartFrame",e)}get animStartFrame(){return this.data.animStartFrame}set animNumFrames(e){this._setValue("animNumFrames",e)}get animNumFrames(){return this.data.animNumFrames}set animNumAnimations(e){this._setValue("animNumAnimations",e)}get animNumAnimations(){return this.data.animNumAnimations}set animIndex(e){this._setValue("animIndex",e)}get animIndex(){return this.data.animIndex}set randomizeAnimIndex(e){this._setValue("randomizeAnimIndex",e)}get randomizeAnimIndex(){return this.data.randomizeAnimIndex}set animSpeed(e){this._setValue("animSpeed",e)}get animSpeed(){return this.data.animSpeed}set animLoop(e){this._setValue("animLoop",e)}get animLoop(){return this.data.animLoop}set layers(e){this._setValue("layers",e)}get layers(){return this.data.layers}set drawOrder(e){this._drawOrder=e,this.emitter&&(this.emitter.drawOrder=e)}get drawOrder(){return this._drawOrder}_setValue(e,s){const i=this.data,r=i[e];i[e]=s,this.fire("set",e,r,s)}addMeshInstanceToLayers(){if(this.emitter)for(let e=0;e<this.layers.length;e++){const s=this.system.app.scene.layers.getLayerById(this.layers[e]);s&&(s.addMeshInstances([this.emitter.meshInstance]),this.emitter._layer=s)}}removeMeshInstanceFromLayers(){if(this.emitter)for(let e=0;e<this.layers.length;e++){const s=this.system.app.scene.layers.getLayerById(this.layers[e]);s&&s.removeMeshInstances([this.emitter.meshInstance])}}onSetLayers(e,s,i){if(this.emitter){for(let r=0;r<s.length;r++){const a=this.system.app.scene.layers.getLayerById(s[r]);a&&a.removeMeshInstances([this.emitter.meshInstance])}if(!(!this.enabled||!this.entity.enabled))for(let r=0;r<i.length;r++){const a=this.system.app.scene.layers.getLayerById(i[r]);a&&a.addMeshInstances([this.emitter.meshInstance])}}}onLayersChanged(e,s){this.addMeshInstanceToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),s.on("add",this.onLayerAdded,this),s.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){!this.emitter||this.layers.indexOf(e.id)<0||e.addMeshInstances([this.emitter.meshInstance])}onLayerRemoved(e){!this.emitter||this.layers.indexOf(e.id)<0||e.removeMeshInstances([this.emitter.meshInstance])}_bindColorMapAsset(e){if(e.on("load",this._onColorMapAssetLoad,this),e.on("unload",this._onColorMapAssetUnload,this),e.on("remove",this._onColorMapAssetRemove,this),e.on("change",this._onColorMapAssetChange,this),e.resource)this._onColorMapAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindColorMapAsset(e){e.off("load",this._onColorMapAssetLoad,this),e.off("unload",this._onColorMapAssetUnload,this),e.off("remove",this._onColorMapAssetRemove,this),e.off("change",this._onColorMapAssetChange,this)}_onColorMapAssetLoad(e){this.colorMap=e.resource}_onColorMapAssetUnload(e){this.colorMap=null}_onColorMapAssetRemove(e){this._onColorMapAssetUnload(e)}_onColorMapAssetChange(e){}onSetColorMapAsset(e,s,i){const r=this.system.app.assets;if(s){const a=r.get(s);a&&this._unbindColorMapAsset(a)}if(i){i instanceof _e&&(this.data.colorMapAsset=i.id,i=i.id);const a=r.get(i);a?this._bindColorMapAsset(a):r.once(`add:${i}`,n=>{this._bindColorMapAsset(n)})}else this.colorMap=null}_bindNormalMapAsset(e){if(e.on("load",this._onNormalMapAssetLoad,this),e.on("unload",this._onNormalMapAssetUnload,this),e.on("remove",this._onNormalMapAssetRemove,this),e.on("change",this._onNormalMapAssetChange,this),e.resource)this._onNormalMapAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindNormalMapAsset(e){e.off("load",this._onNormalMapAssetLoad,this),e.off("unload",this._onNormalMapAssetUnload,this),e.off("remove",this._onNormalMapAssetRemove,this),e.off("change",this._onNormalMapAssetChange,this)}_onNormalMapAssetLoad(e){this.normalMap=e.resource}_onNormalMapAssetUnload(e){this.normalMap=null}_onNormalMapAssetRemove(e){this._onNormalMapAssetUnload(e)}_onNormalMapAssetChange(e){}onSetNormalMapAsset(e,s,i){const r=this.system.app.assets;if(s){const a=r.get(s);a&&this._unbindNormalMapAsset(a)}if(i){i instanceof _e&&(this.data.normalMapAsset=i.id,i=i.id);const a=r.get(i);a?this._bindNormalMapAsset(a):r.once(`add:${i}`,n=>{this._bindNormalMapAsset(n)})}else this.normalMap=null}_bindMeshAsset(e){if(e.on("load",this._onMeshAssetLoad,this),e.on("unload",this._onMeshAssetUnload,this),e.on("remove",this._onMeshAssetRemove,this),e.on("change",this._onMeshAssetChange,this),e.resource)this._onMeshAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindMeshAsset(e){e.off("load",this._onMeshAssetLoad,this),e.off("unload",this._onMeshAssetUnload,this),e.off("remove",this._onMeshAssetRemove,this),e.off("change",this._onMeshAssetChange,this)}_onMeshAssetLoad(e){this._onMeshChanged(e.resource)}_onMeshAssetUnload(e){this.mesh=null}_onMeshAssetRemove(e){this._onMeshAssetUnload(e)}_onMeshAssetChange(e){}onSetMeshAsset(e,s,i){const r=this.system.app.assets;if(s){const a=r.get(s);a&&this._unbindMeshAsset(a)}if(i){i instanceof _e&&(this.data.meshAsset=i.id,i=i.id);const a=r.get(i);a&&this._bindMeshAsset(a)}else this._onMeshChanged(null)}onSetMesh(e,s,i){!i||i instanceof _e||typeof i=="number"?this.meshAsset=i:this._onMeshChanged(i)}_onMeshChanged(e){e&&!(e instanceof Ve)&&(e.meshInstances[0]?e=e.meshInstances[0].mesh:e=null),this.data.mesh=e,this.emitter&&(this.emitter.mesh=e,this.emitter.resetMaterial(),this.rebuild())}onSetRenderAsset(e,s,i){const r=this.system.app.assets;if(s){const a=r.get(s);a&&this._unbindRenderAsset(a)}if(i){i instanceof _e&&(this.data.renderAsset=i.id,i=i.id);const a=r.get(i);a&&this._bindRenderAsset(a)}else this._onRenderChanged(null)}_bindRenderAsset(e){if(e.on("load",this._onRenderAssetLoad,this),e.on("unload",this._onRenderAssetUnload,this),e.on("remove",this._onRenderAssetRemove,this),e.resource)this._onRenderAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindRenderAsset(e){var s;e.off("load",this._onRenderAssetLoad,this),e.off("unload",this._onRenderAssetUnload,this),e.off("remove",this._onRenderAssetRemove,this),(s=this._evtSetMeshes)==null||s.off(),this._evtSetMeshes=null}_onRenderAssetLoad(e){this._onRenderChanged(e.resource)}_onRenderAssetUnload(e){this._onRenderChanged(null)}_onRenderAssetRemove(e){this._onRenderAssetUnload(e)}_onRenderChanged(e){var s;if(!e){this._onMeshChanged(null);return}(s=this._evtSetMeshes)==null||s.off(),this._evtSetMeshes=e.on("set:meshes",this._onRenderSetMeshes,this),e.meshes&&this._onRenderSetMeshes(e.meshes)}_onRenderSetMeshes(e){this._onMeshChanged(e&&e[0])}onSetLoop(e,s,i){this.emitter&&(this.emitter[e]=i,this.emitter.resetTime())}onSetBlendType(e,s,i){this.emitter&&(this.emitter[e]=i,this.emitter.material.blendType=i,this.emitter.resetMaterial(),this.rebuild())}_requestDepth(){this._requestedDepth||(Xa||(Xa=this.system.app.scene.layers.getLayerById(us)),Xa&&(Xa.incrementCounter(),this._requestedDepth=!0))}_releaseDepth(){this._requestedDepth&&Xa&&(Xa.decrementCounter(),this._requestedDepth=!1)}onSetDepthSoftening(e,s,i){s!==i&&(i?(this.enabled&&this.entity.enabled&&this._requestDepth(),this.emitter&&(this.emitter[e]=i)):(this.enabled&&this.entity.enabled&&this._releaseDepth(),this.emitter&&(this.emitter[e]=i)),this.emitter&&(this.reset(),this.emitter.resetMaterial(),this.rebuild()))}onSetSimpleProperty(e,s,i){this.emitter&&(this.emitter[e]=i,this.emitter.resetMaterial())}onSetComplexProperty(e,s,i){this.emitter&&(this.emitter[e]=i,this.emitter.resetMaterial(),this.rebuild(),this.reset())}onSetGraphProperty(e,s,i){this.emitter&&(this.emitter[e]=i,this.emitter.rebuildGraphs(),this.emitter.resetMaterial())}onEnable(){const e=this.system.app.scene,s=e.layers,i=this.data;for(let r=0,a=ph.length;r<a;r++){let n=i[ph[r]];if(n){if(!(n instanceof _e))if(parseInt(n,10)>=0)n=this.system.app.assets.get(n);else continue;n&&!n.resource&&this.system.app.assets.load(n)}}if(!this.system.app.graphicsDevice.disableParticleSystem){if(!this.emitter){let r=i.mesh;r instanceof Ve||(r=null),this.emitter=new Bb(this.system.app.graphicsDevice,{numParticles:i.numParticles,emitterExtents:i.emitterExtents,emitterExtentsInner:i.emitterExtentsInner,emitterRadius:i.emitterRadius,emitterRadiusInner:i.emitterRadiusInner,emitterShape:i.emitterShape,initialVelocity:i.initialVelocity,wrap:i.wrap,localSpace:i.localSpace,screenSpace:i.screenSpace,wrapBounds:i.wrapBounds,lifetime:i.lifetime,rate:i.rate,rate2:i.rate2,orientation:i.orientation,particleNormal:i.particleNormal,animTilesX:i.animTilesX,animTilesY:i.animTilesY,animStartFrame:i.animStartFrame,animNumFrames:i.animNumFrames,animNumAnimations:i.animNumAnimations,animIndex:i.animIndex,randomizeAnimIndex:i.randomizeAnimIndex,animSpeed:i.animSpeed,animLoop:i.animLoop,startAngle:i.startAngle,startAngle2:i.startAngle2,scaleGraph:i.scaleGraph,scaleGraph2:i.scaleGraph2,colorGraph:i.colorGraph,colorGraph2:i.colorGraph2,alphaGraph:i.alphaGraph,alphaGraph2:i.alphaGraph2,localVelocityGraph:i.localVelocityGraph,localVelocityGraph2:i.localVelocityGraph2,velocityGraph:i.velocityGraph,velocityGraph2:i.velocityGraph2,rotationSpeedGraph:i.rotationSpeedGraph,rotationSpeedGraph2:i.rotationSpeedGraph2,radialSpeedGraph:i.radialSpeedGraph,radialSpeedGraph2:i.radialSpeedGraph2,colorMap:i.colorMap,normalMap:i.normalMap,loop:i.loop,preWarm:i.preWarm,sort:i.sort,stretch:i.stretch,alignToMotion:i.alignToMotion,lighting:i.lighting,halfLambert:i.halfLambert,intensity:i.intensity,depthSoftening:i.depthSoftening,scene:this.system.app.scene,mesh:r,depthWrite:i.depthWrite,noFog:i.noFog,node:this.entity,blendType:i.blendType}),this.emitter.meshInstance.node=this.entity,this.emitter.drawOrder=this.drawOrder,i.autoPlay||(this.pause(),this.emitter.meshInstance.visible=!1)}this.emitter.colorMap&&this.addMeshInstanceToLayers(),this._evtLayersChanged=e.on("set:layers",this.onLayersChanged,this),s&&(this._evtLayerAdded=s.on("add",this.onLayerAdded,this),this._evtLayerRemoved=s.on("remove",this.onLayerRemoved,this)),this.enabled&&this.entity.enabled&&i.depthSoftening&&this._requestDepth()}}onDisable(){var i,r,a;const s=this.system.app.scene.layers;(i=this._evtLayersChanged)==null||i.off(),this._evtLayersChanged=null,s&&((r=this._evtLayerAdded)==null||r.off(),this._evtLayerAdded=null,(a=this._evtLayerRemoved)==null||a.off(),this._evtLayerRemoved=null),this.emitter&&(this.removeMeshInstanceFromLayers(),this.data.depthSoftening&&this._releaseDepth(),this.emitter.camera=null)}onBeforeRemove(){this.enabled&&(this.enabled=!1),this.emitter&&(this.emitter.destroy(),this.emitter=null);for(let e=0;e<ph.length;e++){const s=ph[e];this.data[s]&&(this[s]=null)}this.off()}reset(){this.emitter&&this.emitter.reset()}stop(){this.emitter&&(this.emitter.loop=!1,this.emitter.resetTime(),this.emitter.addTime(0,!0))}pause(){this.data.paused=!0}unpause(){this.data.paused=!1}play(){this.data.paused=!1,this.emitter&&(this.emitter.meshInstance.visible=!0,this.emitter.loop=this.data.loop,this.emitter.resetTime())}isPlaying(){return this.data.paused?!1:this.emitter&&this.emitter.loop?!0:Date.now()<=this.emitter.endTime}setInTools(){const{emitter:e}=this;e&&!e.inTools&&(e.inTools=!0,this.rebuild())}rebuild(){const e=this.enabled;this.enabled=!1,this.emitter&&this.emitter.rebuild(),this.enabled=e}}class rR{constructor(){this.numParticles=1,this.rate=1,this.rate2=null,this.startAngle=0,this.startAngle2=null,this.lifetime=50,this.emitterExtents=new A,this.emitterExtentsInner=new A,this.emitterRadius=0,this.emitterRadiusInner=0,this.emitterShape=ai,this.initialVelocity=0,this.wrap=!1,this.wrapBounds=new A,this.localSpace=!1,this.screenSpace=!1,this.colorMap=null,this.colorMapAsset=null,this.normalMap=null,this.normalMapAsset=null,this.loop=!0,this.preWarm=!1,this.sort=0,this.mode=uy,this.scene=null,this.lighting=!1,this.halfLambert=!1,this.intensity=1,this.stretch=0,this.alignToMotion=!1,this.depthSoftening=0,this.renderAsset=null,this.meshAsset=null,this.mesh=null,this.depthWrite=!1,this.noFog=!1,this.orientation=Qh,this.particleNormal=new A(0,1,0),this.animTilesX=1,this.animTilesY=1,this.animStartFrame=0,this.animNumFrames=1,this.animNumAnimations=1,this.animIndex=0,this.randomizeAnimIndex=!1,this.animSpeed=1,this.animLoop=!0,this.scaleGraph=null,this.scaleGraph2=null,this.colorGraph=null,this.colorGraph2=null,this.alphaGraph=null,this.alphaGraph2=null,this.localVelocityGraph=null,this.localVelocityGraph2=null,this.velocityGraph=null,this.velocityGraph2=null,this.rotationSpeedGraph=null,this.rotationSpeedGraph2=null,this.radialSpeedGraph=null,this.radialSpeedGraph2=null,this.blendType=Ks,this.enabled=!0,this.paused=!1,this.autoPlay=!0,this.layers=[tr]}}const aR=`
varying vec4 texCoordsAlphaLife;

uniform sampler2D colorMap;
uniform sampler2D colorParam;
uniform float graphSampleSize;
uniform float graphNumSamples;

#ifndef CAMERAPLANES
    #define CAMERAPLANES
    uniform vec4 camera_params;
#endif

uniform float softening;
uniform float colorMult;

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

void main(void) {
    vec4 tex  = texture2D(colorMap, vec2(texCoordsAlphaLife.x, 1.0 - texCoordsAlphaLife.y));
    vec4 ramp = texture2D(colorParam, vec2(texCoordsAlphaLife.w, 0.0));
    ramp.rgb *= colorMult;

    ramp.a += texCoordsAlphaLife.z;

    vec3 rgb = tex.rgb * ramp.rgb;
    float a  = tex.a * ramp.a;
`,nR=`
vec3 unpack3NFloats(float src) {
    float r = fract(src);
    float g = fract(src * 256.0);
    float b = fract(src * 65536.0);
    return vec3(r, g, b);
}

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

vec4 tex1Dlod_lerp(TEXTURE_ACCEPT_HIGHP(tex), vec2 tc) {
    return mix( texture2D(tex,tc), texture2D(tex,tc + graphSampleSize), fract(tc.x*graphNumSamples) );
}

vec4 tex1Dlod_lerp(TEXTURE_ACCEPT_HIGHP(tex), vec2 tc, out vec3 w) {
    vec4 a = texture2D(tex,tc);
    vec4 b = texture2D(tex,tc + graphSampleSize);
    float c = fract(tc.x*graphNumSamples);

    vec3 unpackedA = unpack3NFloats(a.w);
    vec3 unpackedB = unpack3NFloats(b.w);
    w = mix(unpackedA, unpackedB, c);

    return mix(a, b, c);
}

vec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix) {
    float c = cos(pRotation);
    float s = sin(pRotation);

    mat2 m = mat2(c, -s, s, c);
    rotMatrix = m;

    return m * quadXY;
}

vec3 billboard(vec3 InstanceCoords, vec2 quadXY) {
    #ifdef SCREEN_SPACE
        vec3 pos = vec3(-1, 0, 0) * quadXY.x + vec3(0, -1, 0) * quadXY.y;
    #else
        vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;
    #endif

    return pos;
}

vec3 customFace(vec3 InstanceCoords, vec2 quadXY) {
    vec3 pos = faceTangent * quadXY.x + faceBinorm * quadXY.y;
    return pos;
}

vec2 safeNormalize(vec2 v) {
    float l = length(v);
    return (l > 1e-06) ? v / l : v;
}

void main(void) {
    vec3 meshLocalPos = particle_vertexData.xyz;
    float id = floor(particle_vertexData.w);

    float rndFactor = fract(sin(id + 1.0 + seed));
    vec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));

    float uv = id / numParticlesPot;
    readInput(uv);

#ifdef LOCAL_SPACE
    inVel = mat3(matrix_model) * inVel;
#endif
    vec2 velocityV = safeNormalize((mat3(matrix_view) * inVel).xy); // should be removed by compiler if align/stretch is not used

    float particleLifetime = lifetime;

    if (inLife <= 0.0 || inLife > particleLifetime || !inShow)
        meshLocalPos = vec3(0.0);
    vec2 quadXY = meshLocalPos.xy;
    float nlife = clamp(inLife / particleLifetime, 0.0, 1.0);

    vec3 paramDiv;
    vec4 params = tex1Dlod_lerp(TEXTURE_PASS(internalTex2), vec2(nlife, 0), paramDiv);
    float scale = params.y;
    float scaleDiv = paramDiv.x;
    float alphaDiv = paramDiv.z;

    scale += (scaleDiv * 2.0 - 1.0) * scaleDivMult * fract(rndFactor*10000.0);

#ifndef USE_MESH
    texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, (alphaDiv * 2.0 - 1.0) * alphaDivMult * fract(rndFactor*1000.0), nlife);
#else
    texCoordsAlphaLife = vec4(particle_uv, (alphaDiv * 2.0 - 1.0) * alphaDivMult * fract(rndFactor*1000.0), nlife);
#endif

    vec3 particlePos = inPos;
    vec3 particlePosMoved = vec3(0.0);

    mat2 rotMatrix;
`,oR=`
    float animFrame = min(floor(texCoordsAlphaLife.w * animTexParams.y) + animTexParams.x, animTexParams.z);
`,lR=`
    float animFrame = floor(mod(texCoordsAlphaLife.w * animTexParams.y + animTexParams.x, animTexParams.z + 1.0));
`,hR=`
    float animationIndex;

    if (animTexIndexParams.y == 1.0) {
        animationIndex = floor((animTexParams.w + 1.0) * rndFactor3.z) * (animTexParams.z + 1.0);
    } else {
        animationIndex = animTexIndexParams.x * (animTexParams.z + 1.0);
    }

    float atlasX = (animationIndex + animFrame) * animTexTilesParams.x;
    float atlasY = 1.0 - floor(atlasX + 1.0) * animTexTilesParams.y;
    atlasX = fract(atlasX);

    texCoordsAlphaLife.xy *= animTexTilesParams.xy;
    texCoordsAlphaLife.xy += vec2(atlasX, atlasY);
`,cR=`
void readInput(float uv) {
    vec4 tex = texture2D(particleTexIN, vec2(uv, 0.25));
    vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.75));

    inPos = tex.xyz;
    inVel = tex2.xyz;
    inAngle = (tex.w < 0.0? -tex.w : tex.w) - 1000.0;
    inShow = tex.w >= 0.0;
    inLife = tex2.w;
}
`,dR=`
//RG=X, BA=Y
//RG=Z, BA=A
//RGB=V, A=visMode
//RGBA=life

#define PI2 6.283185307179586

uniform vec3 inBoundsSize;
uniform vec3 inBoundsCenter;

uniform float maxVel;

float decodeFloatRG(vec2 rg) {
    return rg.y * (1.0 / 255.0) + rg.x;
}

float decodeFloatRGBA( vec4 rgba ) {
    return dot(rgba, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));
}

void readInput(float uv) {
    vec4 tex0 = texture2D(particleTexIN, vec2(uv, 0.125));
    vec4 tex1 = texture2D(particleTexIN, vec2(uv, 0.375));
    vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.625));
    vec4 tex3 = texture2D(particleTexIN, vec2(uv, 0.875));

    inPos = vec3(decodeFloatRG(tex0.rg), decodeFloatRG(tex0.ba), decodeFloatRG(tex1.rg));
    inPos = (inPos - vec3(0.5)) * inBoundsSize + inBoundsCenter;

    inVel = tex2.xyz;
    inVel = (inVel - vec3(0.5)) * maxVel;

    inAngle = decodeFloatRG(tex1.ba) * PI2;
    inShow = tex2.a > 0.5;

    inLife = decodeFloatRGBA(tex3);
    float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));
    float maxPosLife = lifetime+1.0;
    inLife = inLife * (maxNegLife + maxPosLife) - maxNegLife;
}
`,fR=`
void writeOutput() {
    if (gl_FragCoord.y<1.0) {
        gl_FragColor = vec4(outPos, (outAngle + 1000.0) * visMode);
    } else {
        gl_FragColor = vec4(outVel, outLife);
    }
}
`,uR=`
uniform vec3 outBoundsMul;
uniform vec3 outBoundsAdd;

vec2 encodeFloatRG( float v ) {
    vec2 enc = vec2(1.0, 255.0) * v;
    enc = fract(enc);
    enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);
    return enc;
}

vec4 encodeFloatRGBA( float v ) {
    vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * v;
    enc = fract(enc);
    enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);
    return enc;
}

void writeOutput() {
    outPos = outPos * outBoundsMul + outBoundsAdd;
    outAngle = fract(outAngle / PI2);

    outVel = (outVel / maxVel) + vec3(0.5); // TODO: mul

    float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));
    float maxPosLife = lifetime+1.0;
    outLife = (outLife + maxNegLife) / (maxNegLife + maxPosLife);

    if (gl_FragCoord.y < 1.0) {
        gl_FragColor = vec4(encodeFloatRG(outPos.x), encodeFloatRG(outPos.y));
    } else if (gl_FragCoord.y < 2.0) {
        gl_FragColor = vec4(encodeFloatRG(outPos.z), encodeFloatRG(outAngle));
    } else if (gl_FragCoord.y < 3.0) {
        gl_FragColor = vec4(outVel, visMode*0.5+0.5);
    } else {
        gl_FragColor = encodeFloatRGBA(outLife);
    }
}
`,pR=`
uniform mat3 spawnBounds;
uniform vec3 spawnPosInnerRatio;

vec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {
    vec3 pos = inBounds - vec3(0.5);

    vec3 posAbs = abs(pos);
    vec3 maxPos = vec3(max(posAbs.x, max(posAbs.y, posAbs.z)));

    vec3 edge = maxPos + (vec3(0.5) - maxPos) * spawnPosInnerRatio;

    pos.x = edge.x * (maxPos.x == posAbs.x ? sign(pos.x) : 2.0 * pos.x);
    pos.y = edge.y * (maxPos.y == posAbs.y ? sign(pos.y) : 2.0 * pos.y);
    pos.z = edge.z * (maxPos.z == posAbs.z ? sign(pos.z) : 2.0 * pos.z);

#ifndef LOCAL_SPACE
    return emitterPos + spawnBounds * pos;
#else
    return spawnBounds * pos;
#endif
}

void addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {
    localVelocity -= vec3(0, 0, initialVelocity);
}
`,mR=`
    writeOutput();
}
`,_R=`
varying vec2 vUv0;

uniform highp sampler2D particleTexIN;
uniform highp sampler2D internalTex0;
uniform highp sampler2D internalTex1;
uniform highp sampler2D internalTex2;
uniform highp sampler2D internalTex3;

uniform mat3 emitterMatrix;
uniform mat3 emitterMatrixInv;
uniform vec3 emitterScale;

uniform vec3 emitterPos;
uniform vec3 frameRandom;
uniform vec3 localVelocityDivMult;
uniform vec3 velocityDivMult;
uniform float delta;
uniform float rate;
uniform float rateDiv;
uniform float lifetime;
uniform float numParticles;
uniform float rotSpeedDivMult;
uniform float radialSpeedDivMult;
uniform float seed;
uniform float startAngle;
uniform float startAngle2;
uniform float initialVelocity;

uniform float graphSampleSize;
uniform float graphNumSamples;

vec3 inPos;
vec3 inVel;
float inAngle;
bool inShow;
float inLife;
float visMode;

vec3 outPos;
vec3 outVel;
float outAngle;
bool outShow;
float outLife;
`,gR=`
    if (outLife >= lifetime) {
        outLife -= max(lifetime, (numParticles - 1.0) * particleRate);
        visMode = -1.0;
    }
`,SR=`
    visMode = outLife < 0.0? -1.0: visMode;
`,yR=`
    if (outLife >= lifetime) {
        outLife -= max(lifetime, (numParticles - 1.0) * particleRate);
        visMode = 1.0;
    }
    visMode = outLife < 0.0? 1.0: visMode;
`,vR=`
uniform float spawnBoundsSphere;
uniform float spawnBoundsSphereInnerRatio;

vec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {
    float rnd4 = fract(rndFactor * 1000.0);
    vec3 norm = normalize(inBounds.xyz - vec3(0.5));
    float r = rnd4 * (1.0 - spawnBoundsSphereInnerRatio) + spawnBoundsSphereInnerRatio;
#ifndef LOCAL_SPACE
    return emitterPos + norm * r * spawnBoundsSphere;
#else
    return norm * r * spawnBoundsSphere;
#endif
}

void addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {
    localVelocity += normalize(inBounds - vec3(0.5)) * initialVelocity;
}
`,xR=`
float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

vec3 unpack3NFloats(float src) {
    float r = fract(src);
    float g = fract(src * 256.0);
    float b = fract(src * 65536.0);
    return vec3(r, g, b);
}

vec3 tex1Dlod_lerp(TEXTURE_ACCEPT_HIGHP(tex), vec2 tc, out vec3 w) {
    vec4 a = texture2D(tex, tc);
    vec4 b = texture2D(tex, tc + graphSampleSize);
    float c = fract(tc.x * graphNumSamples);

    vec3 unpackedA = unpack3NFloats(a.w);
    vec3 unpackedB = unpack3NFloats(b.w);
    w = mix(unpackedA, unpackedB, c);

    return mix(a.xyz, b.xyz, c);
}

#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)
vec4 hash41(float p) {
    vec4 p4 = fract(vec4(p) * HASHSCALE4);
    p4 += dot(p4, p4.wzxy+19.19);
    return fract(vec4((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));
}

void main(void) {
    if (gl_FragCoord.x > numParticles) discard;

    readInput(vUv0.x);
    visMode = inShow? 1.0 : -1.0;

    vec4 rndFactor = hash41(gl_FragCoord.x + seed);

    float particleRate = rate + rateDiv * rndFactor.x;

    outLife = inLife + delta;
    float nlife = clamp(outLife / lifetime, 0.0, 1.0);

    vec3 localVelocityDiv;
    vec3 velocityDiv;
    vec3 paramDiv;
    vec3 localVelocity = tex1Dlod_lerp(TEXTURE_PASS(internalTex0), vec2(nlife, 0), localVelocityDiv);
    vec3 velocity =      tex1Dlod_lerp(TEXTURE_PASS(internalTex1), vec2(nlife, 0), velocityDiv);
    vec3 params =        tex1Dlod_lerp(TEXTURE_PASS(internalTex2), vec2(nlife, 0), paramDiv);
    float rotSpeed = params.x;
    float rotSpeedDiv = paramDiv.y;

    vec3 radialParams = tex1Dlod_lerp(TEXTURE_PASS(internalTex3), vec2(nlife, 0), paramDiv);
    float radialSpeed = radialParams.x;
    float radialSpeedDiv = radialParams.y;

    bool respawn = inLife <= 0.0 || outLife >= lifetime;
    inPos = respawn ? calcSpawnPosition(rndFactor.xyz, rndFactor.x) : inPos;
    inAngle = respawn ? mix(startAngle, startAngle2, rndFactor.x) : inAngle;

#ifndef LOCAL_SPACE
    vec3 radialVel = inPos - emitterPos;
#else
    vec3 radialVel = inPos;
#endif
    radialVel = (dot(radialVel, radialVel) > 1.0E-8) ? radialSpeed * normalize(radialVel) : vec3(0.0);
    radialVel += (radialSpeedDiv * vec3(2.0) - vec3(1.0)) * radialSpeedDivMult * rndFactor.xyz;

    localVelocity +=    (localVelocityDiv * vec3(2.0) - vec3(1.0)) * localVelocityDivMult * rndFactor.xyz;
    velocity +=         (velocityDiv * vec3(2.0) - vec3(1.0)) * velocityDivMult * rndFactor.xyz;
    rotSpeed +=         (rotSpeedDiv * 2.0 - 1.0) * rotSpeedDivMult * rndFactor.y;

    addInitialVelocity(localVelocity, rndFactor.xyz);

#ifndef LOCAL_SPACE
    outVel = emitterMatrix * localVelocity + (radialVel + velocity) * emitterScale;
#else
    outVel = (localVelocity + radialVel) / emitterScale + emitterMatrixInv * velocity;
#endif

    outPos = inPos + outVel * delta;
    outAngle = inAngle + rotSpeed * delta;
`,TR=`
    quadXY = rotate(quadXY, inAngle, rotMatrix);
    vec3 localPos = billboard(particlePos, quadXY);
`,wR=`
    dBlendModeFogFactor = 0.0;
    rgb *= saturate(gammaCorrectInput(max(a, 0.0)));
    if ((rgb.r + rgb.g + rgb.b) < 0.000001) discard;
`,ER=`
    rgb = mix(vec3(1.0), rgb, vec3(a));
    if (rgb.r + rgb.g + rgb.b > 2.99) discard;
`,bR=`
    if (a < 0.01) discard;
`,AR=`
attribute vec4 particle_vertexData;   // XYZ = world pos, W = life
attribute vec4 particle_vertexData2;  // X = angle, Y = scale, Z = alpha, W = velocity.x
attribute vec4 particle_vertexData3;  // XYZ = particle local pos, W = velocity.y
attribute float particle_vertexData4; // particle id

// type depends on useMesh property. Start with X = velocity.z, Y = particle ID and for mesh particles proceeds with Z = mesh UV.x, W = mesh UV.y
// Note: This generates a duplicate attribute warning, as the scanning we do is very simple.
#ifndef USE_MESH
    attribute vec2 particle_vertexData5;
#else
    attribute vec4 particle_vertexData5;
#endif

uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;

#ifndef VIEWMATRIX
    #define VIEWMATRIX
    uniform mat4 matrix_view;
#endif

uniform mat3 matrix_normal;
uniform mat4 matrix_viewInverse;

uniform float numParticles;
uniform float lifetime;
uniform float stretch;
uniform float seed;
uniform vec3 wrapBounds;
uniform vec3 emitterScale;
uniform vec3 faceTangent;
uniform vec3 faceBinorm;

#ifdef PARTICLE_GPU
    uniform highp sampler2D internalTex0;
    uniform highp sampler2D internalTex1;
    uniform highp sampler2D internalTex2;
#endif
uniform vec3 emitterPos;

varying vec4 texCoordsAlphaLife;

vec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix)
{
    float c = cos(pRotation);
    float s = sin(pRotation);
    //vec4 rotationMatrix = vec4(c, -s, s, c);

    mat2 m = mat2(c, -s, s, c);
    rotMatrix = m;

    return m * quadXY;
}

vec3 billboard(vec3 InstanceCoords, vec2 quadXY)
{
    vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;
    return pos;
}

vec3 customFace(vec3 InstanceCoords, vec2 quadXY)
{
    vec3 pos = faceTangent * quadXY.x + faceBinorm * quadXY.y;
    return pos;
}

void main(void)
{
    vec3 particlePos = particle_vertexData.xyz;
    vec3 inPos = particlePos;
    vec3 vertPos = particle_vertexData3.xyz;
    vec3 inVel = vec3(particle_vertexData2.w, particle_vertexData3.w, particle_vertexData5.x);

    float id = floor(particle_vertexData4);
    float rndFactor = fract(sin(id + 1.0 + seed));
    vec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));

#ifdef LOCAL_SPACE
    inVel = mat3(matrix_model) * inVel;
#endif
    vec2 velocityV = normalize((mat3(matrix_view) * inVel).xy); // should be removed by compiler if align/stretch is not used

    vec2 quadXY = vertPos.xy;

#ifdef USE_MESH
    texCoordsAlphaLife = vec4(particle_vertexData5.zw, particle_vertexData2.z, particle_vertexData.w);
#else
    texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, particle_vertexData2.z, particle_vertexData.w);
#endif
    mat2 rotMatrix;

    float inAngle = particle_vertexData2.x;
    vec3 particlePosMoved = vec3(0.0);
    vec3 meshLocalPos = particle_vertexData3.xyz;
`,CR=`
    localPos *= particle_vertexData2.y * emitterScale;
    localPos += particlePos;

    gl_Position = matrix_viewProjection * vec4(localPos, 1.0);
`,PR=`
    quadXY = rotate(quadXY, inAngle, rotMatrix);
    vec3 localPos = customFace(particlePos, quadXY);
`,DR=`
    rgb = addFog(rgb);
    rgb = toneMap(rgb);
    rgb = gammaCorrectOutput(rgb);
    gl_FragColor = vec4(rgb, a);
}
`,IR=`
    localPos *= scale * emitterScale;
    localPos += particlePos;

    #ifdef SCREEN_SPACE
    gl_Position = vec4(localPos.x, localPos.y, 0.0, 1.0);
    #else
    gl_Position = matrix_viewProjection * vec4(localPos.xyz, 1.0);
    #endif
`,MR=`
    vec3 negNormal = normal * 0.5 + 0.5;
    vec3 posNormal = -normal * 0.5 + 0.5;
    negNormal *= negNormal;
    posNormal *= posNormal;
`,LR=`
attribute vec4 particle_vertexData; // XYZ = particle position, W = particle ID + random factor

#if defined(USE_MESH)
    #if defined(USE_MESH_UV)
        attribute vec2 particle_uv;         // mesh UV
    #else
        vec2 particle_uv = vec2(0.0, 0.0);
    #endif
#endif

uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform mat4 matrix_viewInverse;

#ifndef VIEWMATRIX
    #define VIEWMATRIX
    uniform mat4 matrix_view;
#endif

uniform float numParticles;
uniform float numParticlesPot;
uniform float graphSampleSize;
uniform float graphNumSamples;
uniform float stretch;
uniform vec3 wrapBounds;
uniform vec3 emitterScale;
uniform vec3 emitterPos;
uniform vec3 faceTangent;
uniform vec3 faceBinorm;
uniform float rate;
uniform float rateDiv;
uniform float lifetime;
uniform float deltaRandomnessStatic;
uniform float scaleDivMult;
uniform float alphaDivMult;
uniform float seed;
uniform float delta;
uniform sampler2D particleTexOUT;
uniform sampler2D particleTexIN;

#ifdef PARTICLE_GPU
    uniform highp sampler2D internalTex0;
    uniform highp sampler2D internalTex1;
    uniform highp sampler2D internalTex2;
#endif

#ifndef CAMERAPLANES
    #define CAMERAPLANES
    uniform vec4 camera_params;
#endif

varying vec4 texCoordsAlphaLife;

vec3 inPos;
vec3 inVel;
float inAngle;
bool inShow;
float inLife;
`,RR=`
    vec3 negNormal = max(normal, vec3(0.0));
    vec3 posNormal = max(-normal, vec3(0.0));
`,OR=`
    vec3 light = negNormal.x*lightCube[0] + posNormal.x*lightCube[1] +
                        negNormal.y*lightCube[2] + posNormal.y*lightCube[3] +
                        negNormal.z*lightCube[4] + posNormal.z*lightCube[5];

    rgb *= light;
`,FR=`
    particlePos = (matrix_model * vec4(particlePos, 1.0)).xyz;
`,NR=`
    vec3 localPos = meshLocalPos;
    localPos.xy = rotate(localPos.xy, inAngle, rotMatrix);
    localPos.yz = rotate(localPos.yz, inAngle, rotMatrix);

    billboard(particlePos, quadXY);
`,kR=`
    Normal = normalize(localPos + matrix_viewInverse[2].xyz);
`,UR=`
    vec3 normalMap = normalize(texture2D(normalMap, vec2(texCoordsAlphaLife.x, 1.0 - texCoordsAlphaLife.y)).xyz * 2.0 - 1.0);
    vec3 normal = ParticleMat * normalMap;
`,BR=`
    // not the fastest way, but easier to plug in; TODO: create rot matrix right from vectors
    inAngle = atan(velocityV.x, velocityV.y);

`,zR=`
    #include "particleUpdaterInitPS"

    #ifdef PACK8
        #include "particleInputRgba8PS"
        #include "particleOutputRgba8PS"
    #else
        #include "particleInputFloatPS"
        #include "particleOutputFloatPS"
    #endif

    #ifdef EMITTERSHAPE_BOX
        #include "particleUpdaterAABBPS"
    #else
        #include "particleUpdaterSpherePS"
    #endif

    #include "particleUpdaterStartPS"

    #ifdef RESPAWN
        #include "particleUpdaterRespawnPS"
    #endif

    #ifdef NO_RESPAWN
        #include "particleUpdaterNoRespawnPS"
    #endif

    #ifdef ON_STOP
        #include "particleUpdaterOnStopPS"
    #endif

    #include "particleUpdaterEndPS"
`,VR=`
    #if NORMAL != NONE
        #if NORMAL == VERTEX
            varying vec3 Normal;
        #endif

        #if NORMAL == MAP
            varying mat3 ParticleMat;
        #endif

        uniform vec3 lightCube[6];
    #endif

    #ifdef SOFT
        varying float vDepth;
        #include "screenDepthPS"
    #endif

    #include "gammaPS"
    #include "tonemappingPS"
    #include "fogPS"

    #if NORMAL == MAP
        uniform sampler2D normalMap;
    #endif

    #include "particlePS"

    #ifdef SOFT
        #include "particle_softPS"
    #endif

    #if NORMAL == VERTEX
        vec3 normal = Normal;
    #endif

    #if NORMAL == MAP
        #include "particle_normalMapPS"
    #endif

    #if NORMAL != NONE
        #ifdef HALF_LAMBERT
            #include "particle_halflambertPS"
        #else
            #include "particle_lambertPS"
        #endif

        #include "particle_lightingPS"
    #endif

    #if BLEND == NORMAL
        #include "particle_blendNormalPS"
    #elif BLEND == ADDITIVE
        #include "particle_blendAddPS"
    #elif BLEND == MULTIPLICATIVE
        #include "particle_blendMultiplyPS"
    #endif

    #include "particle_endPS"
`,GR=`
    #ifdef ANIMTEX
        uniform vec2 animTexTilesParams;
        uniform vec4 animTexParams;
        uniform vec2 animTexIndexParams;
    #endif

    #if NORMAL == MAP
        varying mat3 ParticleMat;
    #endif

    #if NORMAL == VERTEX
        varying vec3 Normal;
    #endif

    #ifdef SOFT
        varying float vDepth;
    #endif

    #ifdef PARTICLE_GPU

        #include "particle_initVS"

        #ifdef PACK8
            #include "particleInputRgba8PS"     // why are these PS and not VS?
        #else
            #include  "particleInputFloatPS"    // why are these PS and not VS?
        #endif

        #ifdef SOFT
            #include "screenDepthPS"
        #endif

        #include "particleVS"

    #else // PARTICLE_CPU

        #ifdef SOFT
            #include "screenDepthPS"
        #endif

        #include "particle_cpuVS"

    #endif

    #ifdef LOCAL_SPACE
        #include "particle_localShiftVS"
    #endif

    #ifdef ANIMTEX
        #ifdef ANIMTEX_LOOP
            #include "particleAnimFrameLoopVS"
        #else
            #include "particleAnimFrameClampVS"
        #endif
        #include "particleAnimTexVS"
    #endif

    // wrap is not used on CPU, it was commented out. TODO: investigate why
    #ifdef PARTICLE_GPU
        #ifdef WRAP
            #include "particle_wrapVS"
        #endif
    #endif

    #ifdef ALIGN_TO_MOTION
        #include "particle_pointAlongVS"
    #endif

    #ifdef USE_MESH
        #include "particle_meshVS"
    #else
        #ifdef CUSTOM_FACE
            #include "particle_customFaceVS"
        #else
            #include "particle_billboardVS"
        #endif
    #endif

    #if NORMAL == VERTEX
        #include "particle_normalVS"
    #endif

    #if NORMAL == MAP
        #include "particle_TBNVS"
    #endif

    #ifdef STRETCH
        #include "particle_stretchVS"
    #endif


    #ifdef PARTICLE_GPU
        #include "particle_endVS"
    #else // PARTICLE_CPU
        #include "particle_cpu_endVS"
    #endif

    #ifdef SOFT
        #include "particle_softVS"
    #endif

    }
`,HR=`
    float depth = getLinearScreenDepth();
    float particleDepth = vDepth;
    float depthDiff = saturate(abs(particleDepth - depth) * softening);
    a *= depthDiff;
`,WR=`
    vDepth = getLinearDepth(localPos);
`,$R=`
    vec3 moveDir = inVel * stretch;
    vec3 posPrev = particlePos - moveDir;
    posPrev += particlePosMoved;

    vec2 centerToVertexV = normalize((mat3(matrix_view) * localPos).xy);

    float interpolation = dot(-velocityV, centerToVertexV) * 0.5 + 0.5;

    particlePos = mix(particlePos, posPrev, interpolation);
`,XR=`
    mat3 rot3 = mat3(rotMatrix[0][0], rotMatrix[0][1], 0.0, rotMatrix[1][0], rotMatrix[1][1], 0.0, 0.0, 0.0, 1.0);
    ParticleMat = mat3(-matrix_viewInverse[0].xyz, -matrix_viewInverse[1].xyz, matrix_viewInverse[2].xyz) * rot3;
`,qR=`
    vec3 origParticlePos = particlePos;
    particlePos -= matrix_model[3].xyz;
    particlePos = mod(particlePos, wrapBounds) - wrapBounds * 0.5;
    particlePos += matrix_model[3].xyz;
    particlePosMoved = particlePos - origParticlePos;
`,jR={particlePS:aR,particleVS:nR,particleAnimFrameClampVS:oR,particleAnimFrameLoopVS:lR,particleAnimTexVS:hR,particleInputFloatPS:cR,particleInputRgba8PS:dR,particleOutputFloatPS:fR,particleOutputRgba8PS:uR,particleUpdaterAABBPS:pR,particleUpdaterEndPS:mR,particleUpdaterInitPS:_R,particleUpdaterNoRespawnPS:gR,particleUpdaterOnStopPS:SR,particleUpdaterRespawnPS:yR,particleUpdaterSpherePS:vR,particleUpdaterStartPS:xR,particle_billboardVS:TR,particle_blendAddPS:wR,particle_blendMultiplyPS:ER,particle_blendNormalPS:bR,particle_cpuVS:AR,particle_cpu_endVS:CR,particle_customFaceVS:PR,particle_endPS:DR,particle_endVS:IR,particle_halflambertPS:MR,particle_initVS:LR,particle_lambertPS:RR,particle_lightingPS:OR,particle_localShiftVS:FR,particle_meshVS:NR,particle_normalVS:kR,particle_normalMapPS:UR,particle_pointAlongVS:BR,particle_simulationPS:zR,particle_shaderPS:VR,particle_shaderVS:GR,particle_softPS:HR,particle_softVS:WR,particle_stretchVS:$R,particle_TBNVS:XR,particle_wrapVS:qR},YR=`
varying texCoordsAlphaLife: vec4f;

var colorMap: texture_2d<f32>;
var colorMapSampler: sampler;
var colorParam: texture_2d<f32>;
var colorParamSampler: sampler;

uniform graphSampleSize: f32;
uniform graphNumSamples: f32;

#ifndef CAMERAPLANES
    #define CAMERAPLANES
    uniform camera_params: vec4f;
#endif

uniform softening: f32;
uniform colorMult: f32;

fn saturate(x: f32) -> f32 {
    return clamp(x, 0.0, 1.0);
}

@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
    var output: FragmentOutput;

    let tex: vec4f  = textureSample(colorMap, colorMapSampler, vec2f(input.texCoordsAlphaLife.x, 1.0 - input.texCoordsAlphaLife.y));
    var ramp: vec4f = textureSample(colorParam, colorParamSampler, vec2f(input.texCoordsAlphaLife.w, 0.0));
    ramp = vec4f(ramp.rgb * uniform.colorMult, ramp.a);

    ramp.a = ramp.a + input.texCoordsAlphaLife.z;

    var rgb: vec3f = tex.rgb * ramp.rgb;
    var a: f32 = tex.a * ramp.a;
`,KR=`
fn unpack3NFloats(src: f32) -> vec3f {
    let r = fract(src);
    let g = fract(src * 256.0);
    let b = fract(src * 65536.0);
    return vec3f(r, g, b);
}

fn saturate(x: f32) -> f32 {
    return clamp(x, 0.0, 1.0);
}

struct TexLerpUnpackResult {
    result: vec4f,
    unpacked: vec3f
}

fn tex1Dlod_lerp_simple(tex: texture_2d<f32>, texSampler: sampler, tc: vec2f) -> vec4f {
    let tc_next = tc + vec2f(uniform.graphSampleSize);
    return mix( textureSample(tex, texSampler, tc), textureSample(tex, texSampler, tc_next), fract(tc.x * uniform.graphNumSamples) );
}

fn tex1Dlod_lerp_unpack(tex: texture_2d<f32>, texSampler: sampler, tc: vec2f) -> TexLerpUnpackResult {
    let tc_next = tc + vec2f(uniform.graphSampleSize);
    let a = textureSampleLevel(tex, texSampler, tc, 0.0);
    let b = textureSampleLevel(tex, texSampler, tc_next, 0.0);
    let c = fract(tc.x * uniform.graphNumSamples);
    let unpackedA = unpack3NFloats(a.w);
    let unpackedB = unpack3NFloats(b.w);
    let w_out = mix(unpackedA, unpackedB, c);
    return TexLerpUnpackResult(mix(a, b, c), w_out);
}

struct RotateResult {
    rotatedVec: vec2f,
    matrix: mat2x2f
}

fn rotateWithMatrix(quadXY: vec2f, pRotation: f32) -> RotateResult {
    let c = cos(pRotation);
    let s = sin(pRotation);
    let m = mat2x2f(vec2f(c, s), vec2f(-s, c));
    return RotateResult(m * quadXY, m);
}

fn billboard(InstanceCoords: vec3f, quadXY: vec2f) -> vec3f {
    var pos: vec3f;
    #ifdef SCREEN_SPACE
        pos = vec3f(-1.0, 0.0, 0.0) * quadXY.x + vec3f(0.0, -1.0, 0.0) * quadXY.y;
    #else
        pos = -uniform.matrix_viewInverse[0].xyz * quadXY.x + -uniform.matrix_viewInverse[1].xyz * quadXY.y;
    #endif
    return pos;
}

fn customFace(InstanceCoords: vec3f, quadXY: vec2f) -> vec3f {
    let pos = uniform.faceTangent * quadXY.x + uniform.faceBinorm * quadXY.y;
    return pos;
}

fn safeNormalize(v: vec2f) -> vec2f {
    let l = length(v);
    return select(v, v / l, l > 1e-06);
}

@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
    var output: VertexOutput;

    let meshLocalPos_in = input.particle_vertexData.xyz;
    let id = floor(input.particle_vertexData.w);

    let rndFactor = fract(sin(id + 1.0 + uniform.seed));
    let rndFactor3 = vec3f(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));

    let uv = id / uniform.numParticlesPot;
    readInput(uv);

    #ifdef LOCAL_SPACE
        let modelRotation = mat3x3f(uniform.matrix_model[0].xyz, uniform.matrix_model[1].xyz, uniform.matrix_model[2].xyz);
        inVel = modelRotation * inVel;
    #endif
    let viewRotation = mat3x3f(uniform.matrix_view[0].xyz, uniform.matrix_view[1].xyz, uniform.matrix_view[2].xyz);
    let velocityV = safeNormalize((viewRotation * inVel).xy);

    let particleLifetime = uniform.lifetime;

    var meshLocalPos = meshLocalPos_in;
    if (inLife <= 0.0 || inLife > particleLifetime || !inShow) {
         meshLocalPos = vec3f(0.0);
    }
    let quadXY = meshLocalPos.xy;
    let nlife = clamp(inLife / particleLifetime, 0.0, 1.0);

    let lerp_result = tex1Dlod_lerp_unpack(internalTex2, internalTex2Sampler, vec2f(nlife, 0.0));
    let params = lerp_result.result;
    let paramDiv = lerp_result.unpacked;

    var scale = params.y;
    let scaleDiv = paramDiv.x;
    let alphaDiv = paramDiv.z;

    scale = scale + (scaleDiv * 2.0 - 1.0) * uniform.scaleDivMult * fract(rndFactor*10000.0);

    #ifndef USE_MESH
        output.texCoordsAlphaLife = vec4f(quadXY * -0.5 + 0.5, (alphaDiv * 2.0 - 1.0) * uniform.alphaDivMult * fract(rndFactor*1000.0), nlife);
    #else
        output.texCoordsAlphaLife = vec4f(particle_uv, (alphaDiv * 2.0 - 1.0) * uniform.alphaDivMult * fract(rndFactor*1000.0), nlife);
    #endif

    var particlePos = inPos;
    var particlePosMoved = vec3f(0.0);

    var rotMatrix: mat2x2f;
`,ZR=`
    let animFrame: f32 = min(floor(input.texCoordsAlphaLife.w * uniform.animTexParams.y) + uniform.animTexParams.x, uniform.animTexParams.z);
`,QR=`
    let animFrame: f32 = floor((output.texCoordsAlphaLife.w * uniform.animTexParams.y + uniform.animTexParams.x) % (uniform.animTexParams.z + 1.0));    
`,JR=`
    var animationIndex: f32;

    if (uniform.animTexIndexParams.y == 1.0) {
        animationIndex = floor((uniform.animTexParams.w + 1.0) * rndFactor3.z) * (uniform.animTexParams.z + 1.0);
    } else {
        animationIndex = uniform.animTexIndexParams.x * (uniform.animTexParams.z + 1.0);
    }

    var atlasX: f32 = (animationIndex + animFrame) * uniform.animTexTilesParams.x;
    let atlasY: f32 = 1.0 - floor(atlasX + 1.0) * uniform.animTexTilesParams.y;
    atlasX = fract(atlasX); // Reassign atlasX

    let current_tcal_xy = output.texCoordsAlphaLife.xy;
    let scaled_tcal_xy = current_tcal_xy * uniform.animTexTilesParams.xy;
    let final_tcal_xy = scaled_tcal_xy + vec2f(atlasX, atlasY);
    output.texCoordsAlphaLife = vec4f(final_tcal_xy, output.texCoordsAlphaLife.z, output.texCoordsAlphaLife.w);
`,e3=`
fn readInput(uv: f32) {
    let tex: vec4f = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.25), 0.0);
    let tex2: vec4f = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.75), 0.0);

    inPos = tex.xyz;
    inVel = tex2.xyz;
    inAngle = abs(tex.w) - 1000.0;
    inShow = tex.w >= 0.0;
    inLife = tex2.w;
}
`,t3=`
//RG=X, BA=Y
//RG=Z, BA=A
//RGB=V, A=visMode
//RGBA=life

const PI2: f32 = 6.283185307179586;

uniform inBoundsSize: vec3f;
uniform inBoundsCenter: vec3f;

uniform maxVel: f32;

fn decodeFloatRG(rg: vec2f) -> f32 {
    return rg.y * (1.0 / 255.0) + rg.x;
}

fn decodeFloatRGBA( rgba: vec4f ) -> f32 {
    return dot(rgba, vec4f(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));
}

fn readInput(uv: f32) {
    let tex0 = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.125), 0.0);
    let tex1 = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.375), 0.0);
    let tex2 = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.625), 0.0);
    let tex3 = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.875), 0.0);

    inPos = vec3f(decodeFloatRG(tex0.rg), decodeFloatRG(tex0.ba), decodeFloatRG(tex1.rg));
    inPos = (inPos - vec3f(0.5)) * uniform.inBoundsSize + uniform.inBoundsCenter;

    inVel = tex2.xyz;
    inVel = (inVel - vec3f(0.5)) * uniform.maxVel;

    inAngle = decodeFloatRG(tex1.ba) * PI2;
    inShow = tex2.a > 0.5;

    let life_decoded = decodeFloatRGBA(tex3);
    let maxNegLife = max(uniform.lifetime, (uniform.numParticles - 1.0) * (uniform.rate + uniform.rateDiv));
    let maxPosLife = uniform.lifetime + 1.0;
    inLife = life_decoded * (maxNegLife + maxPosLife) - maxNegLife;
}`,s3=`
fn getOutput() -> vec4f {
    if (pcPosition.y < 1.0) {
        return vec4f(outPos, (outAngle + 1000.0) * visMode);
    } else {
        return vec4f(outVel, outLife);
    }
}
`,i3=`
uniform outBoundsMul: vec3f;
uniform outBoundsAdd: vec3f;

fn encodeFloatRG( v: f32 ) -> vec2f {
    var enc: vec2f = vec2f(1.0, 255.0) * v;
    enc = fract(enc);
    enc = enc - enc.yy * (1.0 / 255.0);
    return enc;
}

fn encodeFloatRGBA( v: f32 ) -> vec4f {
    let factors = vec4f(1.0, 255.0, 65025.0, 160581375.0);
    var enc: vec4f = factors * v;
    enc = fract(enc);
    enc = enc - enc.yzww * vec4f(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);
    return enc;
}

fn getOutput() -> vec4f {
    outPos = outPos * uniform.outBoundsMul + uniform.outBoundsAdd;
    outAngle = fract(outAngle / PI2);

    outVel = (outVel / uniform.maxVel) + vec3f(0.5); // TODO: mul

    let maxNegLife = max(uniform.lifetime, (uniform.numParticles - 1.0) * (uniform.rate + uniform.rateDiv));
    let maxPosLife = uniform.lifetime + 1.0;
    outLife = (outLife + maxNegLife) / (maxNegLife + maxPosLife);

    if (pcPosition.y < 1.0) {
        return vec4f(encodeFloatRG(outPos.x), encodeFloatRG(outPos.y));
    } else if (pcPosition.y < 2.0) {
        return vec4f(encodeFloatRG(outPos.z), encodeFloatRG(outAngle));
    } else if (pcPosition.y < 3.0) {
        return vec4f(outVel, visMode * 0.5 + 0.5);
    } else {
        return encodeFloatRGBA(outLife);
    }
}
`,r3=`
uniform spawnBounds: mat3x3f;
uniform spawnPosInnerRatio: vec3f;

fn calcSpawnPosition(inBounds: vec3f, rndFactor: f32) -> vec3f {
    var pos = inBounds - vec3f(0.5);

    let posAbs = abs(pos);
    let maxComp = max(posAbs.x, max(posAbs.y, posAbs.z));
    let maxPos = vec3f(maxComp);

    let edge = maxPos + (vec3f(0.5) - maxPos) * uniform.spawnPosInnerRatio;

    pos.x = edge.x * select(2.0 * pos.x, sign(pos.x), maxPos.x == posAbs.x);
    pos.y = edge.y * select(2.0 * pos.y, sign(pos.y), maxPos.y == posAbs.y);
    pos.z = edge.z * select(2.0 * pos.z, sign(pos.z), maxPos.z == posAbs.z);

    #ifndef LOCAL_SPACE
        return uniform.emitterPos + uniform.spawnBounds * pos;
    #else
        return uniform.spawnBounds * pos;
    #endif
}

fn addInitialVelocity(localVelocity: ptr<function, vec3f>, inBounds: vec3f) {
    *localVelocity = *localVelocity - vec3f(0.0, 0.0, uniform.initialVelocity);
}
`,a3=`
    output.color = getOutput();
    return output;
}
`,n3=`
varying vUv0: vec2f;

var particleTexIN: texture_2d<f32>;
var particleTexINSampler: sampler;
var internalTex0: texture_2d<f32>;
var internalTex0Sampler: sampler;
var internalTex1: texture_2d<f32>;
var internalTex1Sampler: sampler;
var internalTex2: texture_2d<f32>;
var internalTex2Sampler: sampler;
var internalTex3: texture_2d<f32>;
var internalTex3Sampler: sampler;

uniform emitterMatrix: mat3x3f;
uniform emitterMatrixInv: mat3x3f;
uniform emitterScale: vec3f;

uniform emitterPos: vec3f;
uniform frameRandom: vec3f;
uniform localVelocityDivMult: vec3f;
uniform velocityDivMult: vec3f;
uniform delta: f32;
uniform rate: f32;
uniform rateDiv: f32;
uniform lifetime: f32;
uniform numParticles: f32;
uniform rotSpeedDivMult: f32;
uniform radialSpeedDivMult: f32;
uniform seed: f32;
uniform startAngle: f32;
uniform startAngle2: f32;
uniform initialVelocity: f32;

uniform graphSampleSize: f32;
uniform graphNumSamples: f32;

var<private> inPos: vec3f;
var<private> inVel: vec3f;
var<private> inAngle: f32;
var<private> inShow: bool;
var<private> inLife: f32;
var<private> visMode: f32;

var<private> outPos: vec3f;
var<private> outVel: vec3f;
var<private> outAngle: f32;
var<private> outShow: bool;
var<private> outLife: f32;
`,o3=`
    if (outLife >= uniform.lifetime) {
        outLife = outLife - max(uniform.lifetime, (uniform.numParticles - 1.0) * particleRate);
        visMode = -1.0;
    }
`,l3=`
    visMode = select(visMode, -1.0, outLife < 0.0);
`,h3=`
    if (outLife >= uniform.lifetime) {
        let subtractAmount = max(uniform.lifetime, (uniform.numParticles - 1.0) * particleRate);
        outLife = outLife - subtractAmount;
        visMode = 1.0;
    }
    visMode = select(visMode, 1.0, outLife < 0.0);
`,c3=`
uniform spawnBoundsSphere: f32;
uniform spawnBoundsSphereInnerRatio: f32;

fn calcSpawnPosition(inBounds: vec3f, rndFactor: f32) -> vec3f {
    let rnd4: f32 = fract(rndFactor * 1000.0);
    let norm: vec3f = normalize(inBounds.xyz - vec3f(0.5));
    let r: f32 = rnd4 * (1.0 - uniform.spawnBoundsSphereInnerRatio) + uniform.spawnBoundsSphereInnerRatio;

    #ifndef LOCAL_SPACE
        return uniform.emitterPos + norm * r * uniform.spawnBoundsSphere;
    #else
        return norm * r * uniform.spawnBoundsSphere;
    #endif
}

fn addInitialVelocity(localVelocity: ptr<function, vec3f>, inBounds: vec3f) {
    let initialVelOffset: vec3f = normalize(inBounds - vec3f(0.5)) * uniform.initialVelocity;
    *localVelocity = *localVelocity + initialVelOffset;
}
`,d3=`
fn saturate(x: f32) -> f32 {
    return clamp(x, 0.0, 1.0);
}

fn unpack3NFloats(src: f32) -> vec3f {
    let r = fract(src);
    let g = fract(src * 256.0);
    let b = fract(src * 65536.0);
    return vec3f(r, g, b);
}

// Struct to handle multiple return values from tex1Dlod_lerp
struct TexLerpUnpackResult {
    result: vec3f,
    unpacked: vec3f
}

fn tex1Dlod_lerp(tex: texture_2d<f32>, texSampler: sampler, tc: vec2f) -> TexLerpUnpackResult {
    let tc_next = tc + vec2f(uniform.graphSampleSize);
    let a = textureSampleLevel(tex, texSampler, tc, 0.0);
    let b = textureSampleLevel(tex, texSampler, tc_next, 0.0);
    let c = fract(tc.x * uniform.graphNumSamples);

    let unpackedA = unpack3NFloats(a.w);
    let unpackedB = unpack3NFloats(b.w);
    let w_out = mix(unpackedA, unpackedB, c);

    return TexLerpUnpackResult(mix(a.xyz, b.xyz, c), w_out);
}

const HASHSCALE4: vec4f = vec4f(1031.0, 0.1030, 0.0973, 0.1099);
fn hash41(p: f32) -> vec4f {
    var p4 = fract(vec4f(p) * HASHSCALE4);
    p4 = p4 + dot(p4, p4.wzxy + 19.19);
    return fract(vec4f((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));
}

@fragment
fn fragmentMain(input : FragmentInput) -> FragmentOutput {
    var output: FragmentOutput;

    if (pcPosition.x > uniform.numParticles) {
        discard;
        return output;
    }

    readInput(input.vUv0.x);
    visMode = select(-1.0, 1.0, inShow);

    let rndFactor = hash41(pcPosition.x + uniform.seed);

    let particleRate = uniform.rate + uniform.rateDiv * rndFactor.x;

    outLife = inLife + uniform.delta;
    let nlife = clamp(outLife / uniform.lifetime, 0.0, 1.0);

    let lerpResult0 = tex1Dlod_lerp(internalTex0, internalTex0Sampler, vec2f(nlife, 0.0));
    var localVelocity = lerpResult0.result;
    let localVelocityDiv = lerpResult0.unpacked;

    let lerpResult1 = tex1Dlod_lerp(internalTex1, internalTex1Sampler, vec2f(nlife, 0.0));
    var velocity = lerpResult1.result;
    let velocityDiv = lerpResult1.unpacked;

    let lerpResult2 = tex1Dlod_lerp(internalTex2, internalTex2Sampler, vec2f(nlife, 0.0));
    let params = lerpResult2.result;
    let paramDiv = lerpResult2.unpacked;
    var rotSpeed = params.x;
    let rotSpeedDiv = paramDiv.y;

    let lerpResult3 = tex1Dlod_lerp(internalTex3, internalTex3Sampler, vec2f(nlife, 0.0));
    let radialParams = lerpResult3.result;
    let radialParamDiv = lerpResult3.unpacked;
    let radialSpeed = radialParams.x;
    let radialSpeedDiv = radialParamDiv.y;

    let respawn = inLife <= 0.0 || outLife >= uniform.lifetime;
    inPos = select(inPos, calcSpawnPosition(rndFactor.xyz, rndFactor.x), respawn);
    inAngle = select(inAngle, mix(uniform.startAngle, uniform.startAngle2, rndFactor.x), respawn);

    #ifndef LOCAL_SPACE
        var radialVel: vec3f = inPos - uniform.emitterPos;
    #else
        var radialVel: vec3f = inPos;
    #endif
    radialVel = select(vec3f(0.0), radialSpeed * normalize(radialVel), dot(radialVel, radialVel) > 1.0E-8);
    radialVel = radialVel + (radialSpeedDiv * vec3f(2.0) - vec3f(1.0)) * uniform.radialSpeedDivMult * rndFactor.xyz;

    localVelocity = localVelocity + (localVelocityDiv * vec3f(2.0) - vec3f(1.0)) * uniform.localVelocityDivMult * rndFactor.xyz;
    velocity = velocity + (velocityDiv * vec3f(2.0) - vec3f(1.0)) * uniform.velocityDivMult * rndFactor.xyz;
    rotSpeed = rotSpeed + (rotSpeedDiv * 2.0 - 1.0) * uniform.rotSpeedDivMult * rndFactor.y;

    addInitialVelocity(&localVelocity, rndFactor.xyz);

    #ifndef LOCAL_SPACE
        outVel = uniform.emitterMatrix * localVelocity + (radialVel + velocity) * uniform.emitterScale;
    #else
        outVel = (localVelocity + radialVel) / uniform.emitterScale + uniform.emitterMatrixInv * velocity;
    #endif

    outPos = inPos + outVel * uniform.delta;
    outAngle = inAngle + rotSpeed * uniform.delta;
`,f3=`
    let rotationResult = rotateWithMatrix(quadXY, inAngle);
    let rotatedQuadXY = rotationResult.rotatedVec;
    rotMatrix = rotationResult.matrix;
    var localPos = billboard(particlePos, rotatedQuadXY);
`,u3=`
    dBlendModeFogFactor = 0.0;
    rgb = rgb * saturate(gammaCorrectInput(max(a, 0.0)));
    if ((rgb.r + rgb.g + rgb.b) < 0.000001) {
        discard;
    }    
`,p3=`
    rgb = mix(vec3f(1.0), rgb, a);
    if ((rgb.r + rgb.g + rgb.b) > 2.99) {
        discard;
    }
`,m3=`
    if (a < 0.01) {
        discard;
    }
`,_3=`
attribute particle_vertexData: vec4f;   // XYZ = world pos, W = life
attribute particle_vertexData2: vec4f;  // X = angle, Y = scale, Z = alpha, W = velocity.x
attribute particle_vertexData3: vec4f;  // XYZ = particle local pos, W = velocity.y
attribute particle_vertexData4: f32;    // particle id

// type depends on useMesh property. Start with X = velocity.z, Y = particle ID and for mesh particles proceeds with Z = mesh UV.x, W = mesh UV.y
#ifndef USE_MESH
    attribute particle_vertexData5: vec2f;
#else
    attribute particle_vertexData5: vec4f;
#endif

uniform matrix_viewProjection: mat4x4f;
uniform matrix_model: mat4x4f;

#ifndef VIEWMATRIX
    #define VIEWMATRIX
    uniform matrix_view: mat4x4f;
#endif

uniform matrix_normal: mat3x3f;
uniform matrix_viewInverse: mat4x4f;

uniform numParticles: f32;
uniform lifetime: f32;
uniform stretch: f32;
uniform seed: f32;
uniform wrapBounds: vec3f;
uniform emitterScale: vec3f;
uniform faceTangent: vec3f;
uniform faceBinorm: vec3f;

#ifdef PARTICLE_GPU
    var internalTex0: texture_2d<f32>;
    var internalTex0Sampler: sampler;
    var internalTex1: texture_2d<f32>;
    var internalTex1Sampler: sampler;
    var internalTex2: texture_2d<f32>;
    var internalTex2Sampler: sampler;
#endif
uniform emitterPos: vec3f;

varying texCoordsAlphaLife: vec4f;

struct RotateResult {
    rotatedVec: vec2f,
    matrix: mat2x2f
}

fn rotateWithMatrix(quadXY: vec2f, pRotation: f32) -> RotateResult {
    let c = cos(pRotation);
    let s = sin(pRotation);
    let m = mat2x2f(vec2f(c, s), vec2f(-s, c));
    return RotateResult(m * quadXY, m);
}


fn billboard(InstanceCoords: vec3f, quadXY: vec2f) -> vec3f {
    let pos = -uniform.matrix_viewInverse[0].xyz * quadXY.x + -uniform.matrix_viewInverse[1].xyz * quadXY.y;
    return pos;
}

fn customFace(InstanceCoords: vec3f, quadXY: vec2f) -> vec3f {
    let pos = uniform.faceTangent * quadXY.x + uniform.faceBinorm * quadXY.y;
    return pos;
}

fn safeNormalize(v: vec2f) -> vec2f {
    let l = length(v);
    return select(v, v / l, l > 1e-06);
}

@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
    var output: VertexOutput;

    var particlePos = input.particle_vertexData.xyz;
    let inPos = particlePos;
    let vertPos = input.particle_vertexData3.xyz;
    var inVel = vec3f(input.particle_vertexData2.w, input.particle_vertexData3.w, input.particle_vertexData5.x);

    let id = floor(input.particle_vertexData4);
    let rndFactor = fract(sin(id + 1.0 + uniform.seed));
    let rndFactor3 = vec3f(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));

    #ifdef LOCAL_SPACE
        let modelRotation = mat3x3f(uniform.matrix_model[0].xyz, uniform.matrix_model[1].xyz, uniform.matrix_model[2].xyz);
        inVel = modelRotation * inVel;
    #endif
    let velocityV = safeNormalize((mat3x3f(uniform.matrix_view[0].xyz, uniform.matrix_view[1].xyz, uniform.matrix_view[2].xyz) * inVel).xy);

    let quadXY = vertPos.xy;

    #ifdef USE_MESH
        output.texCoordsAlphaLife = vec4f(input.particle_vertexData5.zw, input.particle_vertexData2.z, input.particle_vertexData.w);
    #else
        output.texCoordsAlphaLife = vec4f(quadXY * -0.5 + 0.5, input.particle_vertexData2.z, input.particle_vertexData.w);
    #endif
    var rotMatrix: mat2x2f;

    var inAngle = input.particle_vertexData2.x;
    var particlePosMoved = vec3f(0.0);
    let meshLocalPos = input.particle_vertexData3.xyz;
`,g3=`
    localPos = localPos * input.particle_vertexData2.y * uniform.emitterScale;
    localPos = localPos + particlePos;

    output.position = uniform.matrix_viewProjection * vec4f(localPos, 1.0);
`,S3=`
    let rotationResult = rotateWithMatrix(quadXY, inAngle);
    let rotatedQuadXY = rotationResult.rotatedVec;
    rotMatrix = rotationResult.matrix;
    var localPos = customFace(particlePos, rotatedQuadXY);
`,y3=`
    rgb = addFog(rgb);
    rgb = toneMap(rgb);
    rgb = gammaCorrectOutput(rgb);
    output.color = vec4f(rgb, a);
    return output;
}
`,v3=`
    localPos = localPos * scale * uniform.emitterScale;
    localPos = localPos + particlePos;

    #ifdef SCREEN_SPACE
        output.position = vec4f(localPos.x, localPos.y, 0.0, 1.0);
    #else
        output.position = uniform.matrix_viewProjection * vec4f(localPos.xyz, 1.0);
    #endif
`,x3=`
    var negNormal: vec3f = normal * 0.5 + 0.5;
    var posNormal: vec3f = -normal * 0.5 + 0.5;
    negNormal = negNormal * negNormal;
    posNormal = posNormal * posNormal;
`,T3=`
attribute particle_vertexData: vec4f; // XYZ = particle position, W = particle ID + random factor
#if defined(USE_MESH)
    #if defined(USE_MESH_UV)
        attribute particle_uv: vec2f;         // mesh UV
    #else
        var<private> particle_uv: vec2f = vec2f(0.0, 0.0);
    #endif
#endif

uniform matrix_viewProjection: mat4x4f;
uniform matrix_model: mat4x4f;
uniform matrix_normal: mat3x3f;
uniform matrix_viewInverse: mat4x4f;

#ifndef VIEWMATRIX
    #define VIEWMATRIX
    uniform matrix_view: mat4x4f;
#endif

uniform numParticles: f32;
uniform numParticlesPot: f32;
uniform graphSampleSize: f32;
uniform graphNumSamples: f32;
uniform stretch: f32;
uniform wrapBounds: vec3f;
uniform emitterScale: vec3f;
uniform emitterPos: vec3f;
uniform faceTangent: vec3f;
uniform faceBinorm: vec3f;
uniform rate: f32;
uniform rateDiv: f32;
uniform lifetime: f32;
uniform deltaRandomnessStatic: f32;
uniform scaleDivMult: f32;
uniform alphaDivMult: f32;
uniform seed: f32;
uniform delta: f32;

var particleTexOUT: texture_2d<f32>;
var particleTexOUTSampler: sampler;
var particleTexIN: texture_2d<f32>;
var particleTexINSampler: sampler;

#ifdef PARTICLE_GPU
    var internalTex0: texture_2d<f32>;
    var internalTex0Sampler: sampler;
    var internalTex1: texture_2d<f32>;
    var internalTex1Sampler: sampler;
    var internalTex2: texture_2d<f32>;
    var internalTex2Sampler: sampler;
#endif

#ifndef CAMERAPLANES
    #define CAMERAPLANES
    uniform camera_params: vec4f;
#endif

varying texCoordsAlphaLife: vec4f;

var<private> inPos: vec3f;
var<private> inVel: vec3f;
var<private> inAngle: f32;
var<private> inShow: bool;
var<private> inLife: f32;
`,w3=`
    var negNormal: vec3f = max(normal, vec3(0.0));
    var posNormal: vec3f = max(-normal, vec3(0.0));
`,E3=`
    let light: vec3f = negNormal.x * uniform.lightCube[0] + posNormal.x * uniform.lightCube[1] +
                       negNormal.y * uniform.lightCube[2] + posNormal.y * uniform.lightCube[3] +
                       negNormal.z * uniform.lightCube[4] + posNormal.z * uniform.lightCube[5];

    rgb = rgb * light;
`,b3=`
particlePos = (uniform.matrix_model * vec4f(particlePos, 1.0)).xyz;
`,A3=`
var localPos = meshLocalPos;
let rotResultXY = rotateWithMatrix(localPos.xy, inAngle);
localPos = vec3f(rotResultXY.rotatedVec, localPos.z);
rotMatrix = rotResultXY.matrix;

let rotResultYZ = rotateWithMatrix(localPos.yz, inAngle);
localPos = vec3f(localPos.x, rotResultYZ.rotatedVec);
rotMatrix = rotResultYZ.matrix;

billboard(particlePos, quadXY);
`,C3=`
output.Normal = normalize(localPos + uniform.matrix_viewInverse[2].xyz);
`,P3=`
    let sampledNormal: vec4f = textureSample(normalMap, normalMapSampler, vec2f(input.texCoordsAlphaLife.x, 1.0 - input.texCoordsAlphaLife.y));
    let normalMap: vec3f = normalize(sampledNormal.xyz * 2.0 - 1.0);

    let ParticleMat = mat3x3<f32>(ParticleMat0, ParticleMat1, ParticleMat2);
    let normal: vec3f = ParticleMat * normalMap;
`,D3=`
    // not the fastest way, but easier to plug in; TODO: create rot matrix right from vectors
    inAngle = atan2(velocityV.x, velocityV.y);
`,I3=`
    #include "particleUpdaterInitPS"

    #ifdef PACK8
        #include "particleInputRgba8PS"
        #include "particleOutputRgba8PS"
    #else
        #include "particleInputFloatPS"
        #include "particleOutputFloatPS"
    #endif

    #ifdef EMITTERSHAPE_BOX
        #include "particleUpdaterAABBPS"
    #else
        #include "particleUpdaterSpherePS"
    #endif

    #include "particleUpdaterStartPS"

    #ifdef RESPAWN
        #include "particleUpdaterRespawnPS"
    #endif

    #ifdef NO_RESPAWN
        #include "particleUpdaterNoRespawnPS"
    #endif

    #ifdef ON_STOP
        #include "particleUpdaterOnStopPS"
    #endif

    #include "particleUpdaterEndPS"
`,M3=`
    #if NORMAL != NONE
        #if NORMAL == VERTEX
            varying Normal: vec3f;
        #endif

        #if NORMAL == MAP
            varying ParticleMat0: vec3f;
            varying ParticleMat1: vec3f;
            varying ParticleMat2: vec3f;
        #endif

        uniform lightCube: array<vec3f, 6>;
    #endif

    #ifdef SOFT
        varying vDepth: f32;
        #include "screenDepthPS"
    #endif

    #include "gammaPS"
    #include "tonemappingPS"
    #include "fogPS"

    #if NORMAL == MAP
        var normalMap: texture_2d<f32>;
        var normalMapSampler: sampler;
    #endif

    #include "particlePS"

    #ifdef SOFT
        #include "particle_softPS"
    #endif

    #if NORMAL == VERTEX
        var normal: vec3f = Normal;
    #endif

    #if NORMAL == MAP
        #include "particle_normalMapPS"
    #endif

    #if NORMAL != NONE
        #ifdef HALF_LAMBERT
            #include "particle_halflambertPS"
        #else
            #include "particle_lambertPS"
        #endif

        #include "particle_lightingPS"
    #endif

    #if BLEND == NORMAL
        #include "particle_blendNormalPS"
    #elif BLEND == ADDITIVE
        #include "particle_blendAddPS"
    #elif BLEND == MULTIPLICATIVE
        #include "particle_blendMultiplyPS"
    #endif

    #include "particle_endPS"
`,L3=`
    #ifdef ANIMTEX
        uniform animTexTilesParams: vec2f;
        uniform animTexParams: vec4f;
        uniform animTexIndexParams: vec2f;
    #endif

    #if NORMAL == MAP
        varying ParticleMat0: vec3f;
        varying ParticleMat1: vec3f;
        varying ParticleMat2: vec3f;
    #endif

    #if NORMAL == VERTEX
        varying Normal: vec3f;
    #endif

    #ifdef SOFT
        varying vDepth: f32;
    #endif

    #ifdef PARTICLE_GPU

        #include "particle_initVS"

        #ifdef PACK8
            #include "particleInputRgba8PS"     // why are these PS and not VS?
        #else
            #include  "particleInputFloatPS"    // why are these PS and not VS?
        #endif

        #ifdef SOFT
            #include "screenDepthPS"
        #endif

        #include "particleVS"

    #else // PARTICLE_CPU

        #ifdef SOFT
            #include "screenDepthPS"
        #endif

        #include "particle_cpuVS"

    #endif

    #ifdef LOCAL_SPACE
        #include "particle_localShiftVS"
    #endif

    #ifdef ANIMTEX
        #ifdef ANIMTEX_LOOP
            #include "particleAnimFrameLoopVS"
        #else
            #include "particleAnimFrameClampVS"
        #endif
        #include "particleAnimTexVS"
    #endif

    // wrap is not used on CPU, it was commented out. TODO: investigate why
    #ifdef PARTICLE_GPU
        #ifdef WRAP
            #include "particle_wrapVS"
        #endif
    #endif

    #ifdef ALIGN_TO_MOTION
        #include "particle_pointAlongVS"
    #endif

    #ifdef USE_MESH
        #include "particle_meshVS"
    #else
        #ifdef CUSTOM_FACE
            #include "particle_customFaceVS"
        #else
            #include "particle_billboardVS"
        #endif
    #endif

    #if NORMAL == VERTEX
        #include "particle_normalVS"
    #endif

    #if NORMAL == MAP
        #include "particle_TBNVS"
    #endif

    #ifdef STRETCH
        #include "particle_stretchVS"
    #endif


    #ifdef PARTICLE_GPU
        #include "particle_endVS"
    #else // PARTICLE_CPU
        #include "particle_cpu_endVS"
    #endif

    #ifdef SOFT
        #include "particle_softVS"
    #endif

    return output;
}
`,R3=`
    var depth: f32 = getLinearScreenDepthFrag();
    var particleDepth: f32 = vDepth;
    var depthDiff: f32 = saturate(abs(particleDepth - depth) * uniform.softening);
    a = a * depthDiff;
`,O3=`
    output.vDepth = getLinearDepth(localPos);
`,F3=`
    let moveDir: vec3f = inVel * uniform.stretch;
    var posPrev: vec3f = particlePos - moveDir;
    posPrev = posPrev + particlePosMoved;

    let viewRotationTemp: mat3x3f = mat3x3f(uniform.matrix_view[0].xyz, uniform.matrix_view[1].xyz, uniform.matrix_view[2].xyz);
    let centerToVertexV: vec2f = normalize((viewRotationTemp * localPos).xy);

    let interpolation: f32 = dot(-velocityV, centerToVertexV) * 0.5 + 0.5;

    particlePos = mix(particlePos, posPrev, interpolation);
`,N3=`
    let rot3 = mat3x3f(
        vec3f(rotMatrix[0][0], rotMatrix[1][0], 0.0),
        vec3f(rotMatrix[0][1], rotMatrix[1][1], 0.0),
        vec3f(0.0, 0.0, 1.0)
    );

    let viewBasis = mat3x3f(
        -uniform.matrix_viewInverse[0].xyz,
        -uniform.matrix_viewInverse[1].xyz,
        uniform.matrix_viewInverse[2].xyz
    );

    let tempMat = viewBasis * rot3;

    // WGSL does not support matrix varyings, decompose it to vec3s
    output.ParticleMat0 = tempMat[0];
    output.ParticleMat1 = tempMat[1];
    output.ParticleMat2 = tempMat[2];
`,k3=`
    let origParticlePos: vec3f = particlePos;
    particlePos = particlePos - uniform.matrix_model[3].xyz;
    particlePos = (particlePos % uniform.wrapBounds) - uniform.wrapBounds * 0.5;
    particlePos = particlePos + uniform.matrix_model[3].xyz;
    particlePosMoved = particlePos - origParticlePos;
`,U3={particlePS:YR,particleVS:KR,particleAnimFrameClampVS:ZR,particleAnimFrameLoopVS:QR,particleAnimTexVS:JR,particleInputFloatPS:e3,particleInputRgba8PS:t3,particleOutputFloatPS:s3,particleOutputRgba8PS:i3,particleUpdaterAABBPS:r3,particleUpdaterEndPS:a3,particleUpdaterInitPS:n3,particleUpdaterNoRespawnPS:o3,particleUpdaterOnStopPS:l3,particleUpdaterRespawnPS:h3,particleUpdaterSpherePS:c3,particleUpdaterStartPS:d3,particle_billboardVS:f3,particle_blendAddPS:u3,particle_blendMultiplyPS:p3,particle_blendNormalPS:m3,particle_cpuVS:_3,particle_cpu_endVS:g3,particle_customFaceVS:S3,particle_endPS:y3,particle_endVS:v3,particle_halflambertPS:x3,particle_initVS:T3,particle_lambertPS:w3,particle_lightingPS:E3,particle_localShiftVS:b3,particle_meshVS:A3,particle_normalVS:C3,particle_normalMapPS:P3,particle_pointAlongVS:D3,particle_simulationPS:I3,particle_shaderPS:M3,particle_shaderVS:L3,particle_softPS:R3,particle_softVS:O3,particle_stretchVS:F3,particle_TBNVS:N3,particle_wrapVS:k3},B3=["enabled","autoPlay","numParticles","lifetime","rate","rate2","startAngle","startAngle2","loop","preWarm","lighting","halfLambert","intensity","depthWrite","noFog","depthSoftening","sort","blendType","stretch","alignToMotion","emitterShape","emitterExtents","emitterExtentsInner","emitterRadius","emitterRadiusInner","initialVelocity","wrap","wrapBounds","localSpace","screenSpace","colorMapAsset","normalMapAsset","mesh","meshAsset","renderAsset","orientation","particleNormal","localVelocityGraph","localVelocityGraph2","velocityGraph","velocityGraph2","rotationSpeedGraph","rotationSpeedGraph2","radialSpeedGraph","radialSpeedGraph2","scaleGraph","scaleGraph2","colorGraph","colorGraph2","alphaGraph","alphaGraph2","colorMap","normalMap","animTilesX","animTilesY","animStartFrame","animNumFrames","animNumAnimations","animIndex","randomizeAnimIndex","animSpeed","animLoop","layers"];class z3 extends ht{constructor(t){super(t),this.id="particlesystem",this.ComponentType=iR,this.DataType=rR,this.schema=B3,this.propertyTypes={emitterExtents:"vec3",emitterExtentsInner:"vec3",particleNormal:"vec3",wrapBounds:"vec3",localVelocityGraph:"curveset",localVelocityGraph2:"curveset",velocityGraph:"curveset",velocityGraph2:"curveset",colorGraph:"curveset",colorGraph2:"curveset",alphaGraph:"curve",alphaGraph2:"curve",rotationSpeedGraph:"curve",rotationSpeedGraph2:"curve",radialSpeedGraph:"curve",radialSpeedGraph2:"curve",scaleGraph:"curve",scaleGraph2:"curve"},this.on("beforeremove",this.onBeforeRemove,this),this.app.systems.on("update",this.onUpdate,this),be.get(t.graphicsDevice,Oe).add(jR),be.get(t.graphicsDevice,it).add(U3)}initializeComponentData(t,e,s){const i={};s=[];const r=this.propertyTypes;(e.mesh instanceof _e||typeof e.mesh=="number")&&(e.meshAsset=e.mesh,delete e.mesh);for(const a in e){if(e.hasOwnProperty(a)&&(s.push(a),i[a]=e[a]),r[a]==="vec3")Array.isArray(i[a])&&(i[a]=new A(i[a][0],i[a][1],i[a][2]));else if(r[a]==="curve"){if(!(i[a]instanceof $s)){const n=i[a].type;i[a]=new $s(i[a].keys),i[a].type=n}}else if(r[a]==="curveset"&&!(i[a]instanceof ra)){const n=i[a].type;i[a]=new ra(i[a].keys),i[a].type=n}i.layers&&Array.isArray(i.layers)&&(i.layers=i.layers.slice(0))}super.initializeComponentData(t,i,s)}cloneComponent(t,e){const s=t.particlesystem.data,i=this.schema,r={};for(let a=0,n=i.length;a<n;a++){const o=i[a];let c=s[o];c instanceof A||c instanceof $s||c instanceof ra?(c=c.clone(),r[o]=c):o==="layers"?r.layers=s.layers.slice(0):c!=null&&(r[o]=c)}return this.addComponent(e,r)}onUpdate(t){const e=this.store,s=this.app.stats.particles,i=this.app.scene.layers;for(let r=0;r<i.layerList.length;r++)i.layerList[r].requiresLightCube=!1;for(const r in e)if(e.hasOwnProperty(r)){const a=e[r],n=a.entity,o=a.data;if(o.enabled&&n.enabled){const c=n.particlesystem.emitter;if(!(c!=null&&c.meshInstance.visible))continue;if(c.lighting){const d=o.layers;for(let f=0;f<d.length;f++){const u=i.getLayerById(d[f]);u&&(u.requiresLightCube=!0)}}if(!o.paused){let d=0;if(c.simTime+=t,c.simTime>=c.fixedTimeStep&&(d=Math.floor(c.simTime/c.fixedTimeStep),c.simTime-=d*c.fixedTimeStep),d){d=Math.min(d,c.maxSubSteps);for(let f=0;f<d;f++)c.addTime(c.fixedTimeStep,!1);s._updatesPerFrame+=d,s._frameTime+=c._addTimeTime,c._addTimeTime=0}c.finishFrame()}}}}onBeforeRemove(t,e){e.onBeforeRemove()}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}class V3 extends sd{constructor(t,e){super(),this.skin=t,this.skinInstance=e}}const zs=class zs{static logCachedSkinInstances(){console.log("CachedSkinInstances"),zs._skinInstanceCache.forEach((t,e)=>{console.log(`${e.name}: Array(${t.length})`);for(let s=0;s<t.length;s++)console.log(`  ${s}: RefCount ${t[s].refCount}`)})}static createCachedSkinInstance(t,e,s){let i=zs.getCachedSkinInstance(t,e);return i||(i=new El(t),i.resolve(e,s),zs.addCachedSkinInstance(t,e,i)),i}static getCachedSkinInstance(t,e){let s=null;const i=zs._skinInstanceCache.get(e);if(i){const r=i.find(a=>a.skin===t);r&&(r.incRefCount(),s=r.skinInstance)}return s}static addCachedSkinInstance(t,e,s){let i=zs._skinInstanceCache.get(e);i||(i=[],zs._skinInstanceCache.set(e,i));let r=i.find(a=>a.skin===t);r||(r=new V3(t,s),i.push(r)),r.incRefCount()}static removeCachedSkinInstance(t){if(t){const e=t.rootBone;if(e){const s=zs._skinInstanceCache.get(e);if(s){const i=s.findIndex(r=>r.skinInstance===t);if(i>=0){const r=s[i];r.decRefCount(),r.refCount===0&&(s.splice(i,1),s.length||zs._skinInstanceCache.delete(e),t&&(t.destroy(),r.skinInstance=null))}}}}}};h(zs,"_skinInstanceCache",new Map);let nl=zs;class ol{constructor(t,e,s,i,r){h(this,"_evtLoadById",null);h(this,"_evtUnloadById",null);h(this,"_evtAddById",null);h(this,"_evtRemoveById",null);h(this,"_evtLoadByUrl",null);h(this,"_evtAddByUrl",null);h(this,"_evtRemoveByUrl",null);this.propertyName=t,this.parent=e,this._scope=r,this._registry=s,this.id=null,this.url=null,this.asset=null,this._onAssetLoad=i.load,this._onAssetAdd=i.add,this._onAssetRemove=i.remove,this._onAssetUnload=i.unload}set id(t){if(this.url)throw Error("Can't set id and url");this._unbind(),this._id=t,this.asset=this._registry.get(this._id),this._bind()}get id(){return this._id}set url(t){if(this.id)throw Error("Can't set id and url");this._unbind(),this._url=t,this.asset=this._registry.getByUrl(this._url),this._bind()}get url(){return this._url}_bind(){this.id&&(this._onAssetLoad&&(this._evtLoadById=this._registry.on(`load:${this.id}`,this._onLoad,this)),this._onAssetAdd&&(this._evtAddById=this._registry.once(`add:${this.id}`,this._onAdd,this)),this._onAssetRemove&&(this._evtRemoveById=this._registry.on(`remove:${this.id}`,this._onRemove,this)),this._onAssetUnload&&(this._evtUnloadById=this._registry.on(`unload:${this.id}`,this._onUnload,this))),this.url&&(this._onAssetLoad&&(this._evtLoadByUrl=this._registry.on(`load:url:${this.url}`,this._onLoad,this)),this._onAssetAdd&&(this._evtAddByUrl=this._registry.once(`add:url:${this.url}`,this._onAdd,this)),this._onAssetRemove&&(this._evtRemoveByUrl=this._registry.on(`remove:url:${this.url}`,this._onRemove,this)))}_unbind(){var t,e,s,i,r,a,n;this.id&&((t=this._evtLoadById)==null||t.off(),this._evtLoadById=null,(e=this._evtAddById)==null||e.off(),this._evtAddById=null,(s=this._evtRemoveById)==null||s.off(),this._evtRemoveById=null,(i=this._evtUnloadById)==null||i.off(),this._evtUnloadById=null),this.url&&((r=this._evtLoadByUrl)==null||r.off(),this._evtLoadByUrl=null,(a=this._evtAddByUrl)==null||a.off(),this._evtAddByUrl=null,(n=this._evtRemoveByUrl)==null||n.off(),this._evtRemoveByUrl=null)}_onLoad(t){this._onAssetLoad.call(this._scope,this.propertyName,this.parent,t)}_onAdd(t){this.asset=t,this._onAssetAdd.call(this._scope,this.propertyName,this.parent,t)}_onRemove(t){this._onAssetRemove.call(this._scope,this.propertyName,this.parent,t),this.asset=null}_onUnload(t){this._onAssetUnload.call(this._scope,this.propertyName,this.parent,t)}}class _v extends we{constructor(e,s){super(e,s);h(this,"_type","asset");h(this,"_castShadows",!0);h(this,"_receiveShadows",!0);h(this,"_castShadowsLightmap",!0);h(this,"_lightmapped",!1);h(this,"_lightmapSizeMultiplier",1);h(this,"isStatic",!1);h(this,"_batchGroupId",-1);h(this,"_layers",[tr]);h(this,"_renderStyle",ln);h(this,"_meshInstances",[]);h(this,"_customAabb",null);h(this,"_area",null);h(this,"_assetReference");h(this,"_materialReferences",[]);h(this,"_material");h(this,"_rootBone",null);h(this,"_evtLayersChanged",null);h(this,"_evtLayerAdded",null);h(this,"_evtLayerRemoved",null);h(this,"_evtSetMeshes",null);this._assetReference=new ol("asset",this,e.app.assets,{add:this._onRenderAssetAdded,load:this._onRenderAssetLoad,remove:this._onRenderAssetRemove,unload:this._onRenderAssetUnload},this),this._material=e.defaultMaterial,s.on("remove",this.onRemoveChild,this),s.on("removehierarchy",this.onRemoveChild,this),s.on("insert",this.onInsertChild,this),s.on("inserthierarchy",this.onInsertChild,this)}set renderStyle(e){this._renderStyle!==e&&(this._renderStyle=e,Ge._prepareRenderStyleForArray(this._meshInstances,e))}get renderStyle(){return this._renderStyle}set customAabb(e){this._customAabb=e;const s=this._meshInstances;if(s)for(let i=0;i<s.length;i++)s[i].setCustomAabb(this._customAabb)}get customAabb(){return this._customAabb}set type(e){if(this._type!==e&&(this._area=null,this._type=e,this.destroyMeshInstances(),e!=="asset")){let s=this._material;(!s||s===this.system.defaultMaterial)&&(s=this._materialReferences[0]&&this._materialReferences[0].asset&&this._materialReferences[0].asset.resource);const i=pv(this.system.app.graphicsDevice,e);this._area=i.area,this.meshInstances=[new Ge(i.mesh,s||this.system.defaultMaterial,this.entity)]}}get type(){return this._type}set meshInstances(e){if(y.assert(Array.isArray(e),"MeshInstances set to a Render component must be an array."),this.destroyMeshInstances(),this._meshInstances=e,this._meshInstances){const s=this._meshInstances;for(let i=0;i<s.length;i++)s[i].node||(s[i].node=this.entity),s[i].castShadow=this._castShadows,s[i].receiveShadow=this._receiveShadows,s[i].renderStyle=this._renderStyle,s[i].setLightmapped(this._lightmapped),s[i].setCustomAabb(this._customAabb);this.enabled&&this.entity.enabled&&this.addToLayers()}}get meshInstances(){return this._meshInstances}set lightmapped(e){if(e!==this._lightmapped){this._lightmapped=e;const s=this._meshInstances;if(s)for(let i=0;i<s.length;i++)s[i].setLightmapped(e)}}get lightmapped(){return this._lightmapped}set castShadows(e){if(this._castShadows!==e){const s=this._meshInstances;if(s){const i=this.layers,r=this.system.app.scene;if(this._castShadows&&!e)for(let a=0;a<i.length;a++){const n=r.layers.getLayerById(this.layers[a]);n&&n.removeShadowCasters(s)}for(let a=0;a<s.length;a++)s[a].castShadow=e;if(!this._castShadows&&e)for(let a=0;a<i.length;a++){const n=r.layers.getLayerById(i[a]);n&&n.addShadowCasters(s)}}this._castShadows=e}}get castShadows(){return this._castShadows}set receiveShadows(e){if(this._receiveShadows!==e){this._receiveShadows=e;const s=this._meshInstances;if(s)for(let i=0;i<s.length;i++)s[i].receiveShadow=e}}get receiveShadows(){return this._receiveShadows}set castShadowsLightmap(e){this._castShadowsLightmap=e}get castShadowsLightmap(){return this._castShadowsLightmap}set lightmapSizeMultiplier(e){this._lightmapSizeMultiplier=e}get lightmapSizeMultiplier(){return this._lightmapSizeMultiplier}set layers(e){const s=this.system.app.scene.layers;let i;if(this._meshInstances)for(let r=0;r<this._layers.length;r++)i=s.getLayerById(this._layers[r]),i&&i.removeMeshInstances(this._meshInstances);this._layers.length=0;for(let r=0;r<e.length;r++)this._layers[r]=e[r];if(!(!this.enabled||!this.entity.enabled||!this._meshInstances))for(let r=0;r<this._layers.length;r++)i=s.getLayerById(this._layers[r]),i&&i.addMeshInstances(this._meshInstances)}get layers(){return this._layers}set batchGroupId(e){var s,i;this._batchGroupId!==e&&(this.entity.enabled&&this._batchGroupId>=0&&((s=this.system.app.batcher)==null||s.remove(gt.RENDER,this.batchGroupId,this.entity)),this.entity.enabled&&e>=0&&((i=this.system.app.batcher)==null||i.insert(gt.RENDER,e,this.entity)),e<0&&this._batchGroupId>=0&&this.enabled&&this.entity.enabled&&this.addToLayers(),this._batchGroupId=e)}get batchGroupId(){return this._batchGroupId}set material(e){if(this._material!==e&&(this._material=e,this._meshInstances&&this._type!=="asset"))for(let s=0;s<this._meshInstances.length;s++)this._meshInstances[s].material=e}get material(){return this._material}set materialAssets(e=[]){if(this._materialReferences.length>e.length){for(let s=e.length;s<this._materialReferences.length;s++)this._materialReferences[s].id=null;this._materialReferences.length=e.length}for(let s=0;s<e.length;s++)if(this._materialReferences[s]||this._materialReferences.push(new ol(s,this,this.system.app.assets,{add:this._onMaterialAdded,load:this._onMaterialLoad,remove:this._onMaterialRemove,unload:this._onMaterialUnload},this)),e[s]){const i=e[s]instanceof _e?e[s].id:e[s];this._materialReferences[s].id!==i&&(this._materialReferences[s].id=i),this._materialReferences[s].asset&&this._onMaterialAdded(s,this,this._materialReferences[s].asset)}else this._materialReferences[s].id=null,this._meshInstances[s]&&(this._meshInstances[s].material=this.system.defaultMaterial)}get materialAssets(){return this._materialReferences.map(e=>e.id)}set asset(e){const s=e instanceof _e?e.id:e;this._assetReference.id!==s&&(this._assetReference.asset&&this._assetReference.asset.resource&&this._onRenderAssetRemove(),this._assetReference.id=s,this._assetReference.asset&&this._onRenderAssetAdded())}get asset(){return this._assetReference.id}assignAsset(e){const s=e instanceof _e?e.id:e;this._assetReference.id=s}set rootBone(e){if(this._rootBone!==e){const s=typeof e=="string";if(this._rootBone&&s&&this._rootBone.getGuid()===e)return;this._rootBone&&this._clearSkinInstances(),e instanceof De?this._rootBone=e:s?(this._rootBone=this.system.app.getEntityFromIndex(e)||null,this._rootBone||y.warn("Failed to find rootBone Entity by GUID")):this._rootBone=null,this._rootBone&&this._cloneSkinInstances()}}get rootBone(){return this._rootBone}destroyMeshInstances(){const e=this._meshInstances;if(e){this.removeFromLayers(),this._clearSkinInstances();for(let s=0;s<e.length;s++)e[s].destroy();this._meshInstances.length=0}}addToLayers(){const e=this.system.app.scene.layers;for(let s=0;s<this._layers.length;s++){const i=e.getLayerById(this._layers[s]);i&&i.addMeshInstances(this._meshInstances)}}removeFromLayers(){if(this._meshInstances&&this._meshInstances.length){const e=this.system.app.scene.layers;for(let s=0;s<this._layers.length;s++){const i=e.getLayerById(this._layers[s]);i&&i.removeMeshInstances(this._meshInstances)}}}onRemoveChild(){this.removeFromLayers()}onInsertChild(){this._meshInstances&&this.enabled&&this.entity.enabled&&this.addToLayers()}onRemove(){this.destroyMeshInstances(),this.asset=null,this.materialAsset=null,this._assetReference.id=null;for(let e=0;e<this._materialReferences.length;e++)this._materialReferences[e].id=null;this.entity.off("remove",this.onRemoveChild,this),this.entity.off("insert",this.onInsertChild,this)}onLayersChanged(e,s){this.addToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),s.on("add",this.onLayerAdded,this),s.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||e.addMeshInstances(this._meshInstances)}onLayerRemoved(e){this.layers.indexOf(e.id)<0||e.removeMeshInstances(this._meshInstances)}onEnable(){var a;const e=this.system.app,s=e.scene,i=s.layers;this._rootBone&&this._cloneSkinInstances(),this._evtLayersChanged=s.on("set:layers",this.onLayersChanged,this),i&&(this._evtLayerAdded=i.on("add",this.onLayerAdded,this),this._evtLayerRemoved=i.on("remove",this.onLayerRemoved,this));const r=this._type==="asset";this._meshInstances&&this._meshInstances.length?this.addToLayers():r&&this.asset&&this._onRenderAssetAdded();for(let n=0;n<this._materialReferences.length;n++)this._materialReferences[n].asset&&this.system.app.assets.load(this._materialReferences[n].asset);this._batchGroupId>=0&&((a=e.batcher)==null||a.insert(gt.RENDER,this.batchGroupId,this.entity))}onDisable(){var r,a,n,o;const e=this.system.app,i=e.scene.layers;(r=this._evtLayersChanged)==null||r.off(),this._evtLayersChanged=null,this._rootBone&&this._clearSkinInstances(),i&&((a=this._evtLayerAdded)==null||a.off(),this._evtLayerAdded=null,(n=this._evtLayerRemoved)==null||n.off(),this._evtLayerRemoved=null),this._batchGroupId>=0&&((o=e.batcher)==null||o.remove(gt.RENDER,this.batchGroupId,this.entity)),this.removeFromLayers()}hide(){if(this._meshInstances)for(let e=0;e<this._meshInstances.length;e++)this._meshInstances[e].visible=!1}show(){if(this._meshInstances)for(let e=0;e<this._meshInstances.length;e++)this._meshInstances[e].visible=!0}_onRenderAssetAdded(){this._assetReference.asset&&(this._assetReference.asset.resource?this._onRenderAssetLoad():this.enabled&&this.entity.enabled&&this.system.app.assets.load(this._assetReference.asset))}_onRenderAssetLoad(){var e;if(this.destroyMeshInstances(),this._assetReference.asset){const s=this._assetReference.asset.resource;(e=this._evtSetMeshes)==null||e.off(),this._evtSetMeshes=s.on("set:meshes",this._onSetMeshes,this),s.meshes&&this._onSetMeshes(s.meshes)}}_onSetMeshes(e){this._cloneMeshes(e)}_clearSkinInstances(){for(let e=0;e<this._meshInstances.length;e++){const s=this._meshInstances[e];nl.removeCachedSkinInstance(s.skinInstance),s.skinInstance=null}}_cloneSkinInstances(){if(this._meshInstances.length&&this._rootBone instanceof De)for(let e=0;e<this._meshInstances.length;e++){const s=this._meshInstances[e],i=s.mesh;i.skin&&!s.skinInstance&&(s.skinInstance=nl.createCachedSkinInstance(i.skin,this._rootBone,this.entity))}}_cloneMeshes(e){if(e&&e.length){const s=[];for(let i=0;i<e.length;i++){const r=e[i],a=this._materialReferences[i]&&this._materialReferences[i].asset&&this._materialReferences[i].asset.resource,n=new Ge(r,a||this.system.defaultMaterial,this.entity);s.push(n),r.morph&&(n.morphInstance=new ya(r.morph))}this.meshInstances=s,this._cloneSkinInstances()}}_onRenderAssetUnload(){this._type==="asset"&&this.destroyMeshInstances()}_onRenderAssetRemove(){var e;(e=this._evtSetMeshes)==null||e.off(),this._evtSetMeshes=null,this._onRenderAssetUnload()}_onMaterialAdded(e,s,i){i.resource?this._onMaterialLoad(e,s,i):this.enabled&&this.entity.enabled&&this.system.app.assets.load(i)}_updateMainMaterial(e,s){e===0&&(this.material=s)}_onMaterialLoad(e,s,i){this._meshInstances[e]&&(this._meshInstances[e].material=i.resource),this._updateMainMaterial(e,i.resource)}_onMaterialRemove(e,s,i){this._meshInstances[e]&&(this._meshInstances[e].material=this.system.defaultMaterial),this._updateMainMaterial(e,this.system.defaultMaterial)}_onMaterialUnload(e,s,i){this._meshInstances[e]&&(this._meshInstances[e].material=this.system.defaultMaterial),this._updateMainMaterial(e,this.system.defaultMaterial)}resolveDuplicatedEntityReferenceProperties(e,s){e.rootBone&&(this.rootBone=s[e.rootBone.getGuid()])}}class G3{constructor(){this.enabled=!0}}const cu=["enabled"],Vr=["material","meshInstances","asset","materialAssets","castShadows","receiveShadows","castShadowsLightmap","lightmapped","lightmapSizeMultiplier","renderStyle","type","layers","isStatic","batchGroupId","rootBone"];class H3 extends ht{constructor(t){super(t),this.id="render",this.ComponentType=_v,this.DataType=G3,this.schema=cu,this.defaultMaterial=$n(t.graphicsDevice),this.on("beforeremove",this.onRemove,this)}initializeComponentData(t,e,s){(e.batchGroupId===null||e.batchGroupId===void 0)&&(e.batchGroupId=-1),e.layers&&e.layers.length&&(e.layers=e.layers.slice(0));for(let i=0;i<Vr.length;i++)e.hasOwnProperty(Vr[i])&&(t[Vr[i]]=e[Vr[i]]);e.aabbCenter&&e.aabbHalfExtents&&(t.customAabb=new Me(new A(e.aabbCenter),new A(e.aabbHalfExtents))),super.initializeComponentData(t,e,cu)}cloneComponent(t,e){const s={};for(let n=0;n<Vr.length;n++)s[Vr[n]]=t.render[Vr[n]];s.enabled=t.render.enabled,delete s.meshInstances;const i=this.addComponent(e,s),r=t.render.meshInstances,a=r.map(n=>n.mesh);i._onSetMeshes(a);for(let n=0;n<r.length;n++)i.meshInstances[n].material=r[n].material;return t.render.customAabb&&(i.customAabb=t.render.customAabb.clone()),i}onRemove(t,e){e.onRemove()}}we._buildAccessors(_v.prototype,cu);class tf{constructor(t,e){h(this,"_constructor");h(this,"_pool",[]);h(this,"_count",0);this._constructor=t,this._resize(e)}_resize(t){if(t>this._pool.length)for(let e=this._pool.length;e<t;e++)this._pool[e]=new this._constructor}allocate(){return this._count>=this._pool.length&&this._resize(this._pool.length*2),this._pool[this._count++]}freeAll(){this._count=0}}let ls,Le,ks,qa;const W3=new ue,$3=new ue,mh=new A;class bs extends we{constructor(){super(...arguments);h(this,"_angularDamping",0);h(this,"_angularFactor",new A(1,1,1));h(this,"_angularVelocity",new A);h(this,"_body",null);h(this,"_friction",.5);h(this,"_group",rg);h(this,"_linearDamping",0);h(this,"_linearFactor",new A(1,1,1));h(this,"_linearVelocity",new A);h(this,"_mask",su);h(this,"_mass",1);h(this,"_restitution",0);h(this,"_rollingFriction",0);h(this,"_simulationEnabled",!1);h(this,"_type",po)}static onLibraryLoaded(){typeof Ammo<"u"&&(ls=new Ammo.btTransform,Le=new Ammo.btVector3,ks=new Ammo.btVector3,qa=new Ammo.btQuaternion)}static onAppDestroy(){Ammo.destroy(ls),Ammo.destroy(Le),Ammo.destroy(ks),Ammo.destroy(qa),ls=null,Le=null,ks=null,qa=null}set angularDamping(e){this._angularDamping!==e&&(this._angularDamping=e,this._body&&this._body.setDamping(this._linearDamping,e))}get angularDamping(){return this._angularDamping}set angularFactor(e){this._angularFactor.equals(e)||(this._angularFactor.copy(e),this._body&&this._type===Fs&&(Le.setValue(e.x,e.y,e.z),this._body.setAngularFactor(Le)))}get angularFactor(){return this._angularFactor}set angularVelocity(e){this._body&&this._type===Fs&&(this._body.activate(),Le.setValue(e.x,e.y,e.z),this._body.setAngularVelocity(Le),this._angularVelocity.copy(e))}get angularVelocity(){if(this._body&&this._type===Fs){const e=this._body.getAngularVelocity();this._angularVelocity.set(e.x(),e.y(),e.z())}return this._angularVelocity}set body(e){this._body!==e&&(this._body=e,e&&this._simulationEnabled&&e.activate())}get body(){return this._body}set friction(e){this._friction!==e&&(this._friction=e,this._body&&this._body.setFriction(e))}get friction(){return this._friction}set group(e){this._group!==e&&(this._group=e,this.enabled&&this.entity.enabled&&(this.disableSimulation(),this.enableSimulation()))}get group(){return this._group}set linearDamping(e){this._linearDamping!==e&&(this._linearDamping=e,this._body&&this._body.setDamping(e,this._angularDamping))}get linearDamping(){return this._linearDamping}set linearFactor(e){this._linearFactor.equals(e)||(this._linearFactor.copy(e),this._body&&this._type===Fs&&(Le.setValue(e.x,e.y,e.z),this._body.setLinearFactor(Le)))}get linearFactor(){return this._linearFactor}set linearVelocity(e){this._body&&this._type===Fs&&(this._body.activate(),Le.setValue(e.x,e.y,e.z),this._body.setLinearVelocity(Le),this._linearVelocity.copy(e))}get linearVelocity(){if(this._body&&this._type===Fs){const e=this._body.getLinearVelocity();this._linearVelocity.set(e.x(),e.y(),e.z())}return this._linearVelocity}set mask(e){this._mask!==e&&(this._mask=e,this.enabled&&this.entity.enabled&&(this.disableSimulation(),this.enableSimulation()))}get mask(){return this._mask}set mass(e){if(this._mass!==e&&(this._mass=e,this._body&&this._type===Fs)){const s=this.enabled&&this.entity.enabled;s&&this.disableSimulation(),this._body.getCollisionShape().calculateLocalInertia(e,Le),this._body.setMassProps(e,Le),this._body.updateInertiaTensor(),s&&this.enableSimulation()}}get mass(){return this._mass}set restitution(e){this._restitution!==e&&(this._restitution=e,this._body&&this._body.setRestitution(e))}get restitution(){return this._restitution}set rollingFriction(e){this._rollingFriction!==e&&(this._rollingFriction=e,this._body&&this._body.setRollingFriction(e))}get rollingFriction(){return this._rollingFriction}set type(e){if(this._type!==e){switch(this._type=e,this.disableSimulation(),e){case Fs:this._group=Z2,this._mask=ng;break;case za:this._group=Q2,this._mask=ng;break;case po:default:this._group=rg,this._mask=su;break}this.createBody()}}get type(){return this._type}createBody(){const e=this.entity;let s;if(e.collision&&(s=e.collision.shape,e.trigger&&(e.trigger.destroy(),delete e.trigger)),s){this._body&&(this.system.removeBody(this._body),this.system.destroyBody(this._body),this._body=null);const i=this._type===Fs?this._mass:0;this._getEntityTransform(ls);const r=this.system.createBody(i,s,ls);if(r.setRestitution(this._restitution),r.setFriction(this._friction),r.setRollingFriction(this._rollingFriction),r.setDamping(this._linearDamping,this._angularDamping),this._type===Fs){const a=this._linearFactor;Le.setValue(a.x,a.y,a.z),r.setLinearFactor(Le);const n=this._angularFactor;Le.setValue(n.x,n.y,n.z),r.setAngularFactor(Le)}else this._type===za&&(r.setCollisionFlags(r.getCollisionFlags()|K2),r.setActivationState(ig));r.entity=e,this.body=r,this.enabled&&e.enabled&&this.enableSimulation()}}isActive(){return this._body?this._body.isActive():!1}activate(){this._body&&this._body.activate()}enableSimulation(){const e=this.entity;if(e.collision&&e.collision.enabled&&!this._simulationEnabled){const s=this._body;if(s){switch(this.system.addBody(s,this._group,this._mask),this._type){case Fs:this.system._dynamic.push(this),s.forceActivationState(tu),this.syncEntityToBody();break;case za:this.system._kinematic.push(this),s.forceActivationState(ig);break;case po:s.forceActivationState(tu),this.syncEntityToBody();break}e.collision.type==="compound"&&this.system._compounds.push(e.collision),s.activate(),this._simulationEnabled=!0}}}disableSimulation(){const e=this._body;if(e&&this._simulationEnabled){const s=this.system;let i=s._compounds.indexOf(this.entity.collision);i>-1&&s._compounds.splice(i,1),i=s._dynamic.indexOf(this),i>-1&&s._dynamic.splice(i,1),i=s._kinematic.indexOf(this),i>-1&&s._kinematic.splice(i,1),s.removeBody(e),e.forceActivationState(av),this._simulationEnabled=!1}}applyForce(e,s,i,r,a,n){const o=this._body;o&&(o.activate(),e instanceof A?Le.setValue(e.x,e.y,e.z):Le.setValue(e,s,i),s instanceof A?ks.setValue(s.x,s.y,s.z):r!==void 0?ks.setValue(r,a,n):ks.setValue(0,0,0),o.applyForce(Le,ks))}applyTorque(e,s,i){const r=this._body;r&&(r.activate(),e instanceof A?Le.setValue(e.x,e.y,e.z):Le.setValue(e,s,i),r.applyTorque(Le))}applyImpulse(e,s,i,r,a,n){const o=this._body;o&&(o.activate(),e instanceof A?Le.setValue(e.x,e.y,e.z):Le.setValue(e,s,i),s instanceof A?ks.setValue(s.x,s.y,s.z):r!==void 0?ks.setValue(r,a,n):ks.setValue(0,0,0),o.applyImpulse(Le,ks))}applyTorqueImpulse(e,s,i){const r=this._body;r&&(r.activate(),e instanceof A?Le.setValue(e.x,e.y,e.z):Le.setValue(e,s,i),r.applyTorqueImpulse(Le))}isStatic(){return this._type===po}isStaticOrKinematic(){return this._type===po||this._type===za}isKinematic(){return this._type===za}_getEntityTransform(e){const s=this.entity,i=s.collision;if(i){const r=i.getShapePosition(),a=i.getShapeRotation();Le.setValue(r.x,r.y,r.z),qa.setValue(a.x,a.y,a.z,a.w)}else{const r=s.getPosition(),a=s.getRotation();Le.setValue(r.x,r.y,r.z),qa.setValue(a.x,a.y,a.z,a.w)}e.setOrigin(Le),e.setRotation(qa)}syncEntityToBody(){const e=this._body;if(e){if(this._getEntityTransform(ls),e.setWorldTransform(ls),this._type===za){const s=e.getMotionState();s&&s.setWorldTransform(ls)}e.activate()}}_updateDynamic(){const e=this._body;if(e.isActive()){const s=e.getMotionState();if(s){const i=this.entity;s.getWorldTransform(ls);const r=ls.getOrigin(),a=ls.getRotation(),n=i.collision;if(n&&n._hasOffset){const o=n.data.linearOffset,c=n.data.angularOffset,d=$3.copy(c).invert(),f=W3.set(a.x(),a.y(),a.z(),a.w()).mul(d);f.transformVector(o,mh),i.setPosition(r.x()-mh.x,r.y()-mh.y,r.z()-mh.z),i.setRotation(f)}else i.setPosition(r.x(),r.y(),r.z()),i.setRotation(a.x(),a.y(),a.z(),a.w())}}}_updateKinematic(){const e=this._body.getMotionState();e&&(this._getEntityTransform(ls),e.setWorldTransform(ls))}teleport(e,s,i,r,a,n){e instanceof A?this.entity.setPosition(e):this.entity.setPosition(e,s,i),s instanceof ue?this.entity.setRotation(s):s instanceof A?this.entity.setEulerAngles(s):r!==void 0&&this.entity.setEulerAngles(r,a,n),this.syncEntityToBody()}onEnable(){this._body||this.createBody(),this.enableSimulation()}onDisable(){this.disableSimulation()}}h(bs,"EVENT_CONTACT","contact"),h(bs,"EVENT_COLLISIONSTART","collisionstart"),h(bs,"EVENT_COLLISIONEND","collisionend"),h(bs,"EVENT_TRIGGERENTER","triggerenter"),h(bs,"EVENT_TRIGGERLEAVE","triggerleave"),h(bs,"order",-1);class X3{constructor(){this.enabled=!0}}let Mi,Li;class _g{constructor(t,e,s,i){h(this,"entity");h(this,"point");h(this,"normal");h(this,"hitFraction");this.entity=t,this.point=e,this.normal=s,this.hitFraction=i}}class q3{constructor(t,e,s){h(this,"a");h(this,"b");h(this,"impulse");h(this,"localPointA");h(this,"localPointB");h(this,"pointA");h(this,"pointB");h(this,"normal");arguments.length!==0?(this.a=t,this.b=e,this.impulse=s.impulse,this.localPointA=s.localPoint,this.localPointB=s.localPointOther,this.pointA=s.point,this.pointB=s.pointOther,this.normal=s.normal):(this.a=null,this.b=null,this.impulse=0,this.localPointA=new A,this.localPointB=new A,this.pointA=new A,this.pointB=new A,this.normal=new A)}}class j3{constructor(t=new A,e=new A,s=new A,i=new A,r=new A,a=0){h(this,"localPoint");h(this,"localPointOther");h(this,"point");h(this,"pointOther");h(this,"normal");h(this,"impulse");this.localPoint=t,this.localPointOther=e,this.point=s,this.pointOther=i,this.normal=r,this.impulse=a}}class Y3{constructor(t,e){h(this,"other");h(this,"contacts");this.other=t,this.contacts=e}}const gv=["enabled"];class Yp extends ht{constructor(e){super(e);h(this,"maxSubSteps",10);h(this,"fixedTimeStep",1/60);h(this,"gravity",new A(0,-9.81,0));h(this,"_gravityFloat32",new Float32Array(3));h(this,"_dynamic",[]);h(this,"_kinematic",[]);h(this,"_triggers",[]);h(this,"_compounds",[]);this.id="rigidbody",this._stats=e.stats.frame,this.ComponentType=bs,this.DataType=X3,this.contactPointPool=null,this.contactResultPool=null,this.singleContactResultPool=null,this.schema=gv,this.collisions={},this.frameCollisions={},this.on("beforeremove",this.onBeforeRemove,this)}onLibraryLoaded(){if(typeof Ammo<"u"){if(this.collisionConfiguration=new Ammo.btDefaultCollisionConfiguration,this.dispatcher=new Ammo.btCollisionDispatcher(this.collisionConfiguration),this.overlappingPairCache=new Ammo.btDbvtBroadphase,this.solver=new Ammo.btSequentialImpulseConstraintSolver,this.dynamicsWorld=new Ammo.btDiscreteDynamicsWorld(this.dispatcher,this.overlappingPairCache,this.solver,this.collisionConfiguration),this.dynamicsWorld.setInternalTickCallback){const e=Ammo.addFunction(this._checkForCollisions.bind(this),"vif");this.dynamicsWorld.setInternalTickCallback(e)}else y.warn("WARNING: This version of ammo.js can potentially fail to report contacts. Please update it to the latest version.");Mi=new Ammo.btVector3,Li=new Ammo.btVector3,bs.onLibraryLoaded(),this.contactPointPool=new tf(j3,1),this.contactResultPool=new tf(Y3,1),this.singleContactResultPool=new tf(q3,1),this.app.systems.on("update",this.onUpdate,this)}else this.app.systems.off("update",this.onUpdate,this)}initializeComponentData(e,s,i){const r=["mass","linearDamping","angularDamping","linearFactor","angularFactor","friction","rollingFriction","restitution","type","group","mask"];for(const a of r)if(s.hasOwnProperty(a)){const n=s[a];Array.isArray(n)?e[a]=new A(n[0],n[1],n[2]):e[a]=n}super.initializeComponentData(e,s,["enabled"])}cloneComponent(e,s){const i=e.rigidbody,r={enabled:i.enabled,mass:i.mass,linearDamping:i.linearDamping,angularDamping:i.angularDamping,linearFactor:[i.linearFactor.x,i.linearFactor.y,i.linearFactor.z],angularFactor:[i.angularFactor.x,i.angularFactor.y,i.angularFactor.z],friction:i.friction,rollingFriction:i.rollingFriction,restitution:i.restitution,type:i.type,group:i.group,mask:i.mask};return this.addComponent(s,r)}onBeforeRemove(e,s){s.enabled&&(s.enabled=!1),s.body&&(this.destroyBody(s.body),s.body=null)}addBody(e,s,i){s!==void 0&&i!==void 0?this.dynamicsWorld.addRigidBody(e,s,i):this.dynamicsWorld.addRigidBody(e)}removeBody(e){this.dynamicsWorld.removeRigidBody(e)}createBody(e,s,i){const r=new Ammo.btVector3(0,0,0);e!==0&&s.calculateLocalInertia(e,r);const a=new Ammo.btDefaultMotionState(i),n=new Ammo.btRigidBodyConstructionInfo(e,a,s,r),o=new Ammo.btRigidBody(n);return Ammo.destroy(n),Ammo.destroy(r),o}destroyBody(e){const s=e.getMotionState();s&&Ammo.destroy(s),Ammo.destroy(e)}raycastFirst(e,s,i={}){if(i.filterTags||i.filterCallback)return i.sort=!0,this.raycastAll(e,s,i)[0]||null;let r=null;Mi.setValue(e.x,e.y,e.z),Li.setValue(s.x,s.y,s.z);const a=new Ammo.ClosestRayResultCallback(Mi,Li);if(typeof i.filterCollisionGroup=="number"&&a.set_m_collisionFilterGroup(i.filterCollisionGroup),typeof i.filterCollisionMask=="number"&&a.set_m_collisionFilterMask(i.filterCollisionMask),this.dynamicsWorld.rayTest(Mi,Li,a),a.hasHit()){const n=a.get_m_collisionObject(),o=Ammo.castObject(n,Ammo.btRigidBody);if(o){const c=a.get_m_hitPointWorld(),d=a.get_m_hitNormalWorld();r=new _g(o.entity,new A(c.x(),c.y(),c.z()),new A(d.x(),d.y(),d.z()),a.get_m_closestHitFraction())}}return Ammo.destroy(a),r}raycastAll(e,s,i={}){y.assert(Ammo.AllHitsRayResultCallback,"pc.RigidBodyComponentSystem#raycastAll: Your version of ammo.js does not expose Ammo.AllHitsRayResultCallback. Update it to latest.");const r=[];Mi.setValue(e.x,e.y,e.z),Li.setValue(s.x,s.y,s.z);const a=new Ammo.AllHitsRayResultCallback(Mi,Li);if(typeof i.filterCollisionGroup=="number"&&a.set_m_collisionFilterGroup(i.filterCollisionGroup),typeof i.filterCollisionMask=="number"&&a.set_m_collisionFilterMask(i.filterCollisionMask),this.dynamicsWorld.rayTest(Mi,Li,a),a.hasHit()){const n=a.get_m_collisionObjects(),o=a.get_m_hitPointWorld(),c=a.get_m_hitNormalWorld(),d=a.get_m_hitFractions(),f=n.size();for(let u=0;u<f;u++){const p=Ammo.castObject(n.at(u),Ammo.btRigidBody);if(p&&p.entity){if(i.filterTags&&!p.entity.tags.has(...i.filterTags)||i.filterCallback&&!i.filterCallback(p.entity))continue;const m=o.at(u),_=c.at(u),S=new _g(p.entity,new A(m.x(),m.y(),m.z()),new A(_.x(),_.y(),_.z()),d.at(u));r.push(S)}}i.sort&&r.sort((u,p)=>u.hitFraction-p.hitFraction)}return Ammo.destroy(a),r}_storeCollision(e,s){let i=!1;const r=e.getGuid();return this.collisions[r]=this.collisions[r]||{others:[],entity:e},this.collisions[r].others.indexOf(s)<0&&(this.collisions[r].others.push(s),i=!0),this.frameCollisions[r]=this.frameCollisions[r]||{others:[],entity:e},this.frameCollisions[r].others.push(s),i}_createContactPointFromAmmo(e){const s=e.get_m_localPointA(),i=e.get_m_localPointB(),r=e.getPositionWorldOnA(),a=e.getPositionWorldOnB(),n=e.get_m_normalWorldOnB(),o=this.contactPointPool.allocate();return o.localPoint.set(s.x(),s.y(),s.z()),o.localPointOther.set(i.x(),i.y(),i.z()),o.point.set(r.x(),r.y(),r.z()),o.pointOther.set(a.x(),a.y(),a.z()),o.normal.set(n.x(),n.y(),n.z()),o.impulse=e.getAppliedImpulse(),o}_createReverseContactPointFromAmmo(e){const s=e.get_m_localPointA(),i=e.get_m_localPointB(),r=e.getPositionWorldOnA(),a=e.getPositionWorldOnB(),n=e.get_m_normalWorldOnB(),o=this.contactPointPool.allocate();return o.localPointOther.set(s.x(),s.y(),s.z()),o.localPoint.set(i.x(),i.y(),i.z()),o.pointOther.set(r.x(),r.y(),r.z()),o.point.set(a.x(),a.y(),a.z()),o.normal.set(n.x(),n.y(),n.z()),o.impulse=e.getAppliedImpulse(),o}_createSingleContactResult(e,s,i){const r=this.singleContactResultPool.allocate();return r.a=e,r.b=s,r.localPointA=i.localPoint,r.localPointB=i.localPointOther,r.pointA=i.point,r.pointB=i.pointOther,r.normal=i.normal,r.impulse=i.impulse,r}_createContactResult(e,s){const i=this.contactResultPool.allocate();return i.other=e,i.contacts=s,i}_cleanOldCollisions(){for(const e in this.collisions)if(this.collisions.hasOwnProperty(e)){const s=this.frameCollisions[e],i=this.collisions[e],r=i.entity,a=r.collision,n=r.rigidbody,o=i.others;let d=o.length;for(;d--;){const f=o[d];(!s||s.others.indexOf(f)<0)&&(o.splice(d,1),r.trigger?(a&&a.fire("triggerleave",f),f.rigidbody&&f.rigidbody.fire("triggerleave",r)):f.trigger||(n&&n.fire("collisionend",f),a&&a.fire("collisionend",f)))}o.length===0&&delete this.collisions[e]}}_hasContactEvent(e){const s=e.collision;if(s&&(s.hasEvent("collisionstart")||s.hasEvent("collisionend")||s.hasEvent("contact")))return!0;const i=e.rigidbody;return i&&(i.hasEvent("collisionstart")||i.hasEvent("collisionend")||i.hasEvent("contact"))}_checkForCollisions(e,s){const r=Ammo.wrapPointer(e,Ammo.btDynamicsWorld).getDispatcher(),a=r.getNumManifolds();this.frameCollisions={};for(let n=0;n<a;n++){const o=r.getManifoldByIndexInternal(n),c=o.getBody0(),d=o.getBody1(),f=Ammo.castObject(c,Ammo.btRigidBody),u=Ammo.castObject(d,Ammo.btRigidBody),p=f.entity,m=u.entity;if(!p||!m)continue;const _=f.getCollisionFlags(),S=u.getCollisionFlags(),g=o.getNumContacts(),v=[],w=[];let x;if(g>0)if(_&yo||S&yo){const b=p.collision&&(p.collision.hasEvent("triggerenter")||p.collision.hasEvent("triggerleave")),C=m.collision&&(m.collision.hasEvent("triggerenter")||m.collision.hasEvent("triggerleave")),D=p.rigidbody&&(p.rigidbody.hasEvent("triggerenter")||p.rigidbody.hasEvent("triggerleave")),T=m.rigidbody&&(m.rigidbody.hasEvent("triggerenter")||m.rigidbody.hasEvent("triggerleave"));b&&(x=this._storeCollision(p,m),x&&!(S&yo)&&p.collision.fire("triggerenter",m)),C&&(x=this._storeCollision(m,p),x&&!(_&yo)&&m.collision.fire("triggerenter",p)),D&&(x||(x=this._storeCollision(m,p)),x&&p.rigidbody.fire("triggerenter",m)),T&&(x||(x=this._storeCollision(p,m)),x&&m.rigidbody.fire("triggerenter",p))}else{const b=this._hasContactEvent(p),C=this._hasContactEvent(m),D=this.hasEvent("contact");if(D||b||C){for(let T=0;T<g;T++){const I=o.getContactPoint(T),L=this._createContactPointFromAmmo(I);if(b||C){v.push(L);const E=this._createReverseContactPointFromAmmo(I);w.push(E)}if(D){const E=this._createSingleContactResult(p,m,L);this.fire("contact",E)}}if(b){const T=this._createContactResult(m,v);x=this._storeCollision(p,m),p.collision&&(p.collision.fire("contact",T),x&&p.collision.fire("collisionstart",T)),p.rigidbody&&(p.rigidbody.fire("contact",T),x&&p.rigidbody.fire("collisionstart",T))}if(C){const T=this._createContactResult(p,w);x=this._storeCollision(m,p),m.collision&&(m.collision.fire("contact",T),x&&m.collision.fire("collisionstart",T)),m.rigidbody&&(m.rigidbody.fire("contact",T),x&&m.rigidbody.fire("collisionstart",T))}}}}this._cleanOldCollisions(),this.contactPointPool.freeAll(),this.contactResultPool.freeAll(),this.singleContactResultPool.freeAll()}onUpdate(e){let s,i;this._stats.physicsStart=pe(),this._gravityFloat32[0]=this.gravity.x,this._gravityFloat32[1]=this.gravity.y,this._gravityFloat32[2]=this.gravity.z;const r=this.dynamicsWorld.getGravity();(r.x()!==this._gravityFloat32[0]||r.y()!==this._gravityFloat32[1]||r.z()!==this._gravityFloat32[2])&&(r.setValue(this.gravity.x,this.gravity.y,this.gravity.z),this.dynamicsWorld.setGravity(r));const a=this._triggers;for(s=0,i=a.length;s<i;s++)a[s].updateTransform();const n=this._compounds;for(s=0,i=n.length;s<i;s++)n[s]._updateCompound();const o=this._kinematic;for(s=0,i=o.length;s<i;s++)o[s]._updateKinematic();this.dynamicsWorld.stepSimulation(e,this.maxSubSteps,this.fixedTimeStep);const c=this._dynamic;for(s=0,i=c.length;s<i;s++)c[s]._updateDynamic();this.dynamicsWorld.setInternalTickCallback||this._checkForCollisions(Ammo.getPointer(this.dynamicsWorld),e),this._stats.physicsTime=pe()-this._stats.physicsStart}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this),typeof Ammo<"u"&&(Ammo.destroy(this.dynamicsWorld),Ammo.destroy(this.solver),Ammo.destroy(this.overlappingPairCache),Ammo.destroy(this.dispatcher),Ammo.destroy(this.collisionConfiguration),Ammo.destroy(Mi),Ammo.destroy(Li),this.dynamicsWorld=null,this.solver=null,this.overlappingPairCache=null,this.dispatcher=null,this.collisionConfiguration=null,Mi=null,Li=null,bs.onAppDestroy())}}h(Yp,"EVENT_CONTACT","contact");we._buildAccessors(bs.prototype,gv);const ja="none",K3="blend",gg=new ie;class Sv extends we{constructor(t,e){super(t,e),this._resolution=new J(640,320),this._referenceResolution=new J(640,320),this._scaleMode=ja,this.scale=1,this._scaleBlend=.5,this._priority=0,this._screenSpace=!1,this.cull=this._screenSpace,this._screenMatrix=new ie,this._elements=new Set,t.app.graphicsDevice.on("resizecanvas",this._onResize,this)}syncDrawOrder(){this.system.queueDrawOrderSync(this.entity.getGuid(),this._processDrawOrderSync,this)}_recurseDrawOrderSync(t,e){var i;if(!(t instanceof lt))return e;if(t.element){const r=t.element.drawOrder;t.element.drawOrder=e++,t.element._batchGroupId>=0&&r!==t.element.drawOrder&&((i=this.system.app.batcher)==null||i.markGroupDirty(t.element._batchGroupId))}t.particlesystem&&(t.particlesystem.drawOrder=e++);const s=t.children;for(let r=0;r<s.length;r++)e=this._recurseDrawOrderSync(s[r],e);return e}_processDrawOrderSync(){this._recurseDrawOrderSync(this.entity,1),this.fire("syncdraworder")}_calcProjectionMatrix(){const t=this._resolution.x/this.scale,e=this._resolution.y/this.scale,s=0,i=t,r=-e;this._screenMatrix.setOrtho(s,i,r,0,1,-1),this._screenSpace||(gg.setScale(.5*t,.5*e,1),this._screenMatrix.mul2(gg,this._screenMatrix))}_updateScale(){this.scale=this._calcScale(this._resolution,this.referenceResolution)}_calcScale(t,e){const s=Math.log2((t.x||1)/e.x),i=Math.log2((t.y||1)/e.y);return Math.pow(2,s*(1-this._scaleBlend)+i*this._scaleBlend)}_onResize(t,e){this._screenSpace&&(this._resolution.set(t,e),this.resolution=this._resolution)}_bindElement(t){this._elements.add(t)}_unbindElement(t){this._elements.delete(t)}onRemove(){this.system.app.graphicsDevice.off("resizecanvas",this._onResize,this),this.fire("remove"),this._elements.forEach(t=>t._onScreenRemove()),this._elements.clear(),this.off()}set resolution(t){this._screenSpace?this._resolution.set(this.system.app.graphicsDevice.width,this.system.app.graphicsDevice.height):this._resolution.set(t.x,t.y),this._updateScale(),this._calcProjectionMatrix(),this.entity._dirtyLocal||this.entity._dirtifyLocal(),this.fire("set:resolution",this._resolution),this._elements.forEach(e=>e._onScreenResize(this._resolution))}get resolution(){return this._resolution}set referenceResolution(t){this._referenceResolution.set(t.x,t.y),this._updateScale(),this._calcProjectionMatrix(),this.entity._dirtyLocal||this.entity._dirtifyLocal(),this.fire("set:referenceresolution",this._resolution),this._elements.forEach(e=>e._onScreenResize(this._resolution))}get referenceResolution(){return this._scaleMode===ja?this._resolution:this._referenceResolution}set screenSpace(t){this._screenSpace=t,this._screenSpace&&this._resolution.set(this.system.app.graphicsDevice.width,this.system.app.graphicsDevice.height),this.resolution=this._resolution,this.entity._dirtyLocal||this.entity._dirtifyLocal(),this.fire("set:screenspace",this._screenSpace),this._elements.forEach(e=>e._onScreenSpaceChange())}get screenSpace(){return this._screenSpace}set scaleMode(t){t!==ja&&t!==K3&&(t=ja),!this._screenSpace&&t!==ja&&(t=ja),this._scaleMode=t,this.resolution=this._resolution,this.fire("set:scalemode",this._scaleMode)}get scaleMode(){return this._scaleMode}set scaleBlend(t){this._scaleBlend=t,this._updateScale(),this._calcProjectionMatrix(),this.entity._dirtyLocal||this.entity._dirtifyLocal(),this.fire("set:scaleblend",this._scaleBlend),this._elements.forEach(e=>e._onScreenResize(this._resolution))}get scaleBlend(){return this._scaleBlend}set priority(t){t>255&&(y.warn(`Clamping screen priority from ${t} to 255`),t=255),this._priority!==t&&(this._priority=t,this.syncDrawOrder())}get priority(){return this._priority}}class Z3{constructor(){this.enabled=!0}}const du=["enabled"];class Q3 extends ht{constructor(t){super(t),this.id="screen",this.ComponentType=Sv,this.DataType=Z3,this.schema=du,this.windowResolution=new J,this._drawOrderSyncQueue=new Ex,this.app.graphicsDevice.on("resizecanvas",this._onResize,this),this.app.systems.on("update",this._onUpdate,this),this.on("beforeremove",this.onRemoveComponent,this)}initializeComponentData(t,e,s){e.priority!==void 0&&(t.priority=e.priority),e.screenSpace!==void 0&&(t.screenSpace=e.screenSpace),t.cull=t.screenSpace,e.scaleMode!==void 0&&(t.scaleMode=e.scaleMode),e.scaleBlend!==void 0&&(t.scaleBlend=e.scaleBlend),e.resolution!==void 0&&(e.resolution instanceof J?t._resolution.copy(e.resolution):t._resolution.set(e.resolution[0],e.resolution[1]),t.resolution=t._resolution),e.referenceResolution!==void 0&&(e.referenceResolution instanceof J?t._referenceResolution.copy(e.referenceResolution):t._referenceResolution.set(e.referenceResolution[0],e.referenceResolution[1]),t.referenceResolution=t._referenceResolution),t.syncDrawOrder(),super.initializeComponentData(t,e,du)}destroy(){super.destroy(),this.app.graphicsDevice.off("resizecanvas",this._onResize,this),this.app.systems.off("update",this._onUpdate,this)}_onUpdate(t){const e=this.store;for(const s in e)e[s].entity.screen.update&&e[s].entity.screen.update(t)}_onResize(t,e){this.windowResolution.x=t,this.windowResolution.y=e}cloneComponent(t,e){const s=t.screen;return this.addComponent(e,{enabled:s.enabled,screenSpace:s.screenSpace,scaleMode:s.scaleMode,resolution:s.resolution.clone(),referenceResolution:s.referenceResolution.clone()})}onRemoveComponent(t,e){e.onRemove()}processDrawOrderSyncQueue(){const t=this._drawOrderSyncQueue.list();for(let e=0;e<t.length;e++){const s=t[e];s.callback.call(s.scope)}this._drawOrderSyncQueue.clear()}queueDrawOrderSync(t,e,s){this._drawOrderSyncQueue.list().length||this.app.once("prerender",this.processDrawOrderSyncQueue,this),this._drawOrderSyncQueue.has(t)||this._drawOrderSyncQueue.push(t,{callback:e,scope:s})}}we._buildAccessors(Sv.prototype,du);const cr=new J,Sg=new A,Gr=new En,yg=new oS,vg=new A,mo=new A,J3=new ue,eO={x:"y",y:"x"};class Lo extends Se{constructor(t,e){if(super(),!t||!(t instanceof hs))throw new Error("Element was null or not an ElementComponent");if(e&&e!=="x"&&e!=="y")throw new Error(`Unrecognized axis: ${e}`);this._element=t,this._app=t.system.app,this._axis=e||null,this._enabled=!0,this._dragScale=new A,this._dragStartMousePosition=new A,this._dragStartHandlePosition=new A,this._deltaMousePosition=new A,this._deltaHandlePosition=new A,this._isDragging=!1,this._toggleLifecycleListeners("on")}_toggleLifecycleListeners(t){this._element[t]("mousedown",this._onMouseDownOrTouchStart,this),this._element[t]("touchstart",this._onMouseDownOrTouchStart,this),this._element[t]("selectstart",this._onMouseDownOrTouchStart,this)}_toggleDragListeners(t){const e=t==="on";this._hasDragListeners&&e||(this._app.mouse&&(this._element[t]("mousemove",this._onMove,this),this._element[t]("mouseup",this._onMouseUpOrTouchEnd,this)),Pe.touch&&(this._element[t]("touchmove",this._onMove,this),this._element[t]("touchend",this._onMouseUpOrTouchEnd,this),this._element[t]("touchcancel",this._onMouseUpOrTouchEnd,this)),this._element[t]("selectmove",this._onMove,this),this._element[t]("selectend",this._onMouseUpOrTouchEnd,this),this._hasDragListeners=e)}_onMouseDownOrTouchStart(t){if(this._element&&!this._isDragging&&this.enabled){this._dragCamera=t.camera,this._calculateDragScale();const e=this._screenToLocal(t);e&&(this._toggleDragListeners("on"),this._isDragging=!0,this._dragStartMousePosition.copy(e),this._dragStartHandlePosition.copy(this._element.entity.getLocalPosition()),this.fire("drag:start"))}}_onMouseUpOrTouchEnd(){this._isDragging&&(this._isDragging=!1,this._toggleDragListeners("off"),this.fire("drag:end"))}_screenToLocal(t){return t.inputSource?Gr.set(t.inputSource.getOrigin(),t.inputSource.getDirection()):(this._determineInputPosition(t),this._chooseRayOriginAndDirection()),vg.copy(this._element.entity.forward).mulScalar(-1),yg.setFromPointNormal(this._element.entity.getPosition(),vg),yg.intersectsRay(Gr,mo)?(J3.copy(this._element.entity.getRotation()).invert().transformVector(mo,mo),mo.mul(this._dragScale),mo):null}_determineInputPosition(t){const e=this._app.graphicsDevice.maxPixelRatio;typeof t.x<"u"&&typeof t.y<"u"?(cr.x=t.x*e,cr.y=t.y*e):t.changedTouches?(cr.x=t.changedTouches[0].x*e,cr.y=t.changedTouches[0].y*e):console.warn("Could not determine position from input event")}_chooseRayOriginAndDirection(){this._element.screen&&this._element.screen.screen.screenSpace?(Gr.origin.set(cr.x,-cr.y,0),Gr.direction.copy(A.FORWARD)):(Sg.copy(this._dragCamera.screenToWorld(cr.x,cr.y,1)),Gr.origin.copy(this._dragCamera.entity.getPosition()),Gr.direction.copy(Sg).sub(Gr.origin).normalize())}_calculateDragScale(){let t=this._element.entity.parent;const e=this._element.screen&&this._element.screen.screen,s=e&&e.screenSpace,i=s?e.scale:1,r=this._dragScale;for(r.set(i,i,i);t&&(r.mul(t.getLocalScale()),t=t.parent,!(s&&t.screen)););r.x=1/r.x,r.y=1/r.y,r.z=0}_onMove(t){const{_element:e,_deltaMousePosition:s,_deltaHandlePosition:i,_axis:r}=this;if(e&&this._isDragging&&this.enabled&&e.enabled&&e.entity.enabled){const a=this._screenToLocal(t);if(a){if(s.sub2(a,this._dragStartMousePosition),i.add2(this._dragStartHandlePosition,s),r){const n=e.entity.getLocalPosition(),o=eO[r];i[o]=n[o]}e.entity.setLocalPosition(i),this.fire("drag:move",i)}}}destroy(){this._toggleLifecycleListeners("off"),this._toggleDragListeners("off")}set enabled(t){this._enabled=t}get enabled(){return this._enabled}get isDragging(){return this._isDragging}}h(Lo,"EVENT_DRAGSTART","drag:start"),h(Lo,"EVENT_DRAGEND","drag:end"),h(Lo,"EVENT_DRAGMOVE","drag:move");const tO=0,xg=1,sO=2,iO=0,rO=1,_o=new J;class yv extends we{constructor(e,s){super(e,s);h(this,"_viewportEntity",null);h(this,"_contentEntity",null);h(this,"_horizontalScrollbarEntity",null);h(this,"_verticalScrollbarEntity",null);h(this,"_evtElementRemove",null);h(this,"_evtViewportElementRemove",null);h(this,"_evtViewportResize",null);h(this,"_evtContentEntityElementAdd",null);h(this,"_evtContentElementRemove",null);h(this,"_evtContentResize",null);h(this,"_evtHorizontalScrollbarAdd",null);h(this,"_evtHorizontalScrollbarRemove",null);h(this,"_evtHorizontalScrollbarValue",null);h(this,"_evtVerticalScrollbarAdd",null);h(this,"_evtVerticalScrollbarRemove",null);h(this,"_evtVerticalScrollbarValue",null);this._scrollbarUpdateFlags={},this._scrollbarEntities={},this._prevContentSizes={},this._prevContentSizes[Ee]=null,this._prevContentSizes[je]=null,this._scroll=new J,this._velocity=new A,this._dragStartPosition=new A,this._disabledContentInput=!1,this._disabledContentInputEntities=[],this._toggleLifecycleListeners("on"),this._toggleElementListeners("on")}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e)}get enabled(){return this.data.enabled}set horizontal(e){this._setValue("horizontal",e)}get horizontal(){return this.data.horizontal}set vertical(e){this._setValue("vertical",e)}get vertical(){return this.data.vertical}set scrollMode(e){this._setValue("scrollMode",e)}get scrollMode(){return this.data.scrollMode}set bounceAmount(e){this._setValue("bounceAmount",e)}get bounceAmount(){return this.data.bounceAmount}set friction(e){this._setValue("friction",e)}get friction(){return this.data.friction}set dragThreshold(e){this._setValue("dragThreshold",e)}get dragThreshold(){return this.data.dragThreshold}set useMouseWheel(e){this._setValue("useMouseWheel",e)}get useMouseWheel(){return this.data.useMouseWheel}set mouseWheelSensitivity(e){this._setValue("mouseWheelSensitivity",e)}get mouseWheelSensitivity(){return this.data.mouseWheelSensitivity}set horizontalScrollbarVisibility(e){this._setValue("horizontalScrollbarVisibility",e)}get horizontalScrollbarVisibility(){return this.data.horizontalScrollbarVisibility}set verticalScrollbarVisibility(e){this._setValue("verticalScrollbarVisibility",e)}get verticalScrollbarVisibility(){return this.data.verticalScrollbarVisibility}set viewportEntity(e){if(this._viewportEntity===e)return;const s=typeof e=="string";this._viewportEntity&&s&&this._viewportEntity.getGuid()===e||(this._viewportEntity&&this._viewportEntityUnsubscribe(),e instanceof De?this._viewportEntity=e:s?this._viewportEntity=this.system.app.getEntityFromIndex(e)||null:this._viewportEntity=null,this._viewportEntity&&this._viewportEntitySubscribe(),this._viewportEntity?this.data.viewportEntity=this._viewportEntity.getGuid():s&&e&&(this.data.viewportEntity=e))}get viewportEntity(){return this._viewportEntity}set contentEntity(e){if(this._contentEntity===e)return;const s=typeof e=="string";this._contentEntity&&s&&this._contentEntity.getGuid()===e||(this._contentEntity&&this._contentEntityUnsubscribe(),e instanceof De?this._contentEntity=e:s?this._contentEntity=this.system.app.getEntityFromIndex(e)||null:this._contentEntity=null,this._contentEntity&&this._contentEntitySubscribe(),this._contentEntity?this.data.contentEntity=this._contentEntity.getGuid():s&&e&&(this.data.contentEntity=e))}get contentEntity(){return this._contentEntity}set horizontalScrollbarEntity(e){if(this._horizontalScrollbarEntity===e)return;const s=typeof e=="string";this._horizontalScrollbarEntity&&s&&this._horizontalScrollbarEntity.getGuid()===e||(this._horizontalScrollbarEntity&&this._horizontalScrollbarEntityUnsubscribe(),e instanceof De?this._horizontalScrollbarEntity=e:s?this._horizontalScrollbarEntity=this.system.app.getEntityFromIndex(e)||null:this._horizontalScrollbarEntity=null,this._scrollbarEntities[Ee]=this._horizontalScrollbarEntity,this._horizontalScrollbarEntity&&this._horizontalScrollbarEntitySubscribe(),this._horizontalScrollbarEntity?this.data.horizontalScrollbarEntity=this._horizontalScrollbarEntity.getGuid():s&&e&&(this.data.horizontalScrollbarEntity=e))}get horizontalScrollbarEntity(){return this._horizontalScrollbarEntity}set verticalScrollbarEntity(e){if(this._verticalScrollbarEntity===e)return;const s=typeof e=="string";this._verticalScrollbarEntity&&s&&this._verticalScrollbarEntity.getGuid()===e||(this._verticalScrollbarEntity&&this._verticalScrollbarEntityUnsubscribe(),e instanceof De?this._verticalScrollbarEntity=e:s?this._verticalScrollbarEntity=this.system.app.getEntityFromIndex(e)||null:this._verticalScrollbarEntity=null,this._scrollbarEntities[je]=this._verticalScrollbarEntity,this._verticalScrollbarEntity&&this._verticalScrollbarEntitySubscribe(),this._verticalScrollbarEntity?this.data.verticalScrollbarEntity=this._verticalScrollbarEntity.getGuid():s&&e&&(this.data.verticalScrollbarEntity=e))}get verticalScrollbarEntity(){return this._verticalScrollbarEntity}set scroll(e){this._onSetScroll(e.x,e.y)}get scroll(){return this._scroll}_setValue(e,s){const i=this.data,r=i[e];i[e]=s,this.fire("set",e,r,s)}_toggleLifecycleListeners(e){this[e]("set_horizontal",this._onSetHorizontalScrollingEnabled,this),this[e]("set_vertical",this._onSetVerticalScrollingEnabled,this),this.entity[e]("element:add",this._onElementComponentAdd,this)}_toggleElementListeners(e){if(this.entity.element){if(e==="on"&&this._hasElementListeners)return;this.entity.element[e]("resize",this._syncAll,this),this.entity.element[e]("mousewheel",this._onMouseWheel,this),this._hasElementListeners=e==="on"}}_onElementComponentAdd(e){this._evtElementRemove=this.entity.element.once("beforeremove",this._onElementComponentRemove,this),this._toggleElementListeners("on")}_onElementComponentRemove(e){var s;(s=this._evtElementRemove)==null||s.off(),this._evtElementRemove=null,this._toggleElementListeners("off")}_viewportEntitySubscribe(){this._evtViewportEntityElementAdd=this._viewportEntity.on("element:add",this._onViewportElementGain,this),this._viewportEntity.element&&this._onViewportElementGain()}_viewportEntityUnsubscribe(){var e,s;(e=this._evtViewportEntityElementAdd)==null||e.off(),this._evtViewportEntityElementAdd=null,(s=this._viewportEntity)!=null&&s.element&&this._onViewportElementLose()}_viewportEntityElementSubscribe(){const e=this._viewportEntity.element;this._evtViewportElementRemove=e.once("beforeremove",this._onViewportElementLose,this),this._evtViewportResize=e.on("resize",this._syncAll,this)}_viewportEntityElementUnsubscribe(){var e,s;(e=this._evtViewportElementRemove)==null||e.off(),this._evtViewportElementRemove=null,(s=this._evtViewportResize)==null||s.off(),this._evtViewportResize=null}_onViewportElementGain(){this._viewportEntityElementSubscribe(),this._syncAll()}_onViewportElementLose(){this._viewportEntityElementUnsubscribe()}_contentEntitySubscribe(){this._evtContentEntityElementAdd=this._contentEntity.on("element:add",this._onContentElementGain,this),this._contentEntity.element&&this._onContentElementGain()}_contentEntityUnsubscribe(){var e,s;(e=this._evtContentEntityElementAdd)==null||e.off(),this._evtContentEntityElementAdd=null,(s=this._contentEntity)!=null&&s.element&&this._onContentElementLose()}_contentEntityElementSubscribe(){const e=this._contentEntity.element;this._evtContentElementRemove=e.once("beforeremove",this._onContentElementLose,this),this._evtContentResize=e.on("resize",this._syncAll,this)}_contentEntityElementUnsubscribe(){var e,s;(e=this._evtContentElementRemove)==null||e.off(),this._evtContentElementRemove=null,(s=this._evtContentResize)==null||s.off(),this._evtContentResize=null}_onContentElementGain(){this._contentEntityElementSubscribe(),this._destroyDragHelper(),this._contentDragHelper=new Lo(this._contentEntity.element),this._contentDragHelper.on("drag:start",this._onContentDragStart,this),this._contentDragHelper.on("drag:end",this._onContentDragEnd,this),this._contentDragHelper.on("drag:move",this._onContentDragMove,this),this._prevContentSizes[Ee]=null,this._prevContentSizes[je]=null,this._syncAll()}_onContentElementLose(){this._contentEntityElementUnsubscribe(),this._destroyDragHelper()}_onContentDragStart(){this._contentEntity&&this.enabled&&this.entity.enabled&&this._dragStartPosition.copy(this._contentEntity.getLocalPosition())}_onContentDragEnd(){this._prevContentDragPosition=null,this._enableContentInput()}_onContentDragMove(e){if(this._contentEntity&&this.enabled&&this.entity.enabled&&(this._wasDragged=!0,this._setScrollFromContentPosition(e),this._setVelocityFromContentPositionDelta(e),!this._disabledContentInput)){const s=e.x-this._dragStartPosition.x,i=e.y-this._dragStartPosition.y;(Math.abs(s)>this.dragThreshold||Math.abs(i)>this.dragThreshold)&&this._disableContentInput()}}_horizontalScrollbarEntitySubscribe(){this._evtHorizontalScrollbarAdd=this._horizontalScrollbarEntity.on("scrollbar:add",this._onHorizontalScrollbarGain,this),this._horizontalScrollbarEntity.scrollbar&&this._onHorizontalScrollbarGain()}_verticalScrollbarEntitySubscribe(){this._evtVerticalScrollbarAdd=this._verticalScrollbarEntity.on("scrollbar:add",this._onVerticalScrollbarGain,this),this._verticalScrollbarEntity.scrollbar&&this._onVerticalScrollbarGain()}_horizontalScrollbarEntityUnsubscribe(){var e;(e=this._evtHorizontalScrollbarAdd)==null||e.off(),this._evtHorizontalScrollbarAdd=null,this._horizontalScrollbarEntity.scrollbar&&this._onHorizontalScrollbarLose()}_verticalScrollbarEntityUnsubscribe(){var e;(e=this._evtVerticalScrollbarAdd)==null||e.off(),this._evtVerticalScrollbarAdd=null,this._verticalScrollbarEntity.scrollbar&&this._onVerticalScrollbarLose()}_onSetHorizontalScrollbarValue(e){!this._scrollbarUpdateFlags[Ee]&&this.enabled&&this.entity.enabled&&this._onSetScroll(e,null)}_onSetVerticalScrollbarValue(e){!this._scrollbarUpdateFlags[je]&&this.enabled&&this.entity.enabled&&this._onSetScroll(null,e)}_onHorizontalScrollbarGain(){var s;const e=(s=this._horizontalScrollbarEntity)==null?void 0:s.scrollbar;this._evtHorizontalScrollbarRemove=e.on("beforeremove",this._onHorizontalScrollbarLose,this),this._evtHorizontalScrollbarValue=e.on("set:value",this._onSetHorizontalScrollbarValue,this),this._syncScrollbarEnabledState(Ee),this._syncScrollbarPosition(Ee)}_onVerticalScrollbarGain(){var s;const e=(s=this._verticalScrollbarEntity)==null?void 0:s.scrollbar;this._evtVerticalScrollbarRemove=e.on("beforeremove",this._onVerticalScrollbarLose,this),this._evtVerticalScrollbarValue=e.on("set:value",this._onSetVerticalScrollbarValue,this),this._syncScrollbarEnabledState(je),this._syncScrollbarPosition(je)}_onHorizontalScrollbarLose(){var e,s;(e=this._evtHorizontalScrollbarRemove)==null||e.off(),this._evtHorizontalScrollbarRemove=null,(s=this._evtHorizontalScrollbarValue)==null||s.off(),this._evtHorizontalScrollbarValue=null}_onVerticalScrollbarLose(){var e,s;(e=this._evtVerticalScrollbarRemove)==null||e.off(),this._evtVerticalScrollbarRemove=null,(s=this._evtVerticalScrollbarValue)==null||s.off(),this._evtVerticalScrollbarValue=null}_onSetHorizontalScrollingEnabled(){this._syncScrollbarEnabledState(Ee)}_onSetVerticalScrollingEnabled(){this._syncScrollbarEnabledState(je)}_onSetScroll(e,s,i){i!==!1&&this._velocity.set(0,0,0);const r=this._updateAxis(e,"x",Ee),a=this._updateAxis(s,"y",je);(r||a)&&this.fire("set:scroll",this._scroll)}_updateAxis(e,s,i){const r=e!==null&&Math.abs(e-this._scroll[s])>1e-5;return(r||this._isDragging()||e===0)&&(this._scroll[s]=this._determineNewScrollValue(e,s,i),this._syncContentPosition(i),this._syncScrollbarPosition(i)),r}_determineNewScrollValue(e,s,i){if(!this._getScrollingEnabled(i))return this._scroll[s];switch(this.scrollMode){case tO:return Y.clamp(e,0,this._getMaxScrollValue(i));case xg:return this._setVelocityFromOvershoot(e,s,i),e;case sO:return e;default:return console.warn(`Unhandled scroll mode:${this.scrollMode}`),e}}_syncAll(){this._syncContentPosition(Ee),this._syncContentPosition(je),this._syncScrollbarPosition(Ee),this._syncScrollbarPosition(je),this._syncScrollbarEnabledState(Ee),this._syncScrollbarEnabledState(je)}_syncContentPosition(e){if(!this._contentEntity)return;const s=this._getAxis(e),i=this._getSign(e),r=this._prevContentSizes[e],a=this._getContentSize(e);if(r!==null&&Math.abs(r-a)>1e-4){const c=this._getMaxOffset(e,r),d=this._getMaxOffset(e,a);d===0?this._scroll[s]=1:this._scroll[s]=Y.clamp(this._scroll[s]*c/d,0,1)}const n=this._scroll[s]*this._getMaxOffset(e),o=this._contentEntity.getLocalPosition();o[s]=n*i,this._contentEntity.setLocalPosition(o),this._prevContentSizes[e]=a}_syncScrollbarPosition(e){const s=this._scrollbarEntities[e];if(!(s!=null&&s.scrollbar))return;const i=this._getAxis(e);this._scrollbarUpdateFlags[e]=!0,s.scrollbar.value=this._scroll[i],s.scrollbar.handleSize=this._getScrollbarHandleSize(i,e),this._scrollbarUpdateFlags[e]=!1}_syncScrollbarEnabledState(e){const s=this._scrollbarEntities[e];if(!s)return;const i=this._getScrollingEnabled(e),r=this._getScrollbarVisibility(e);switch(r){case iO:s.enabled=i;return;case rO:s.enabled=i&&this._contentIsLargerThanViewport(e);return;default:console.warn(`Unhandled scrollbar visibility:${r}`),s.enabled=i}}_contentIsLargerThanViewport(e){return this._getContentSize(e)>this._getViewportSize(e)}_contentPositionToScrollValue(e){const s=this._getMaxOffset(Ee),i=this._getMaxOffset(je);return s===0?_o.x=0:_o.x=e.x/s,i===0?_o.y=0:_o.y=e.y/-i,_o}_getMaxOffset(e,s){s=s===void 0?this._getContentSize(e):s;const i=this._getViewportSize(e);return s<i?-this._getViewportSize(e):i-s}_getMaxScrollValue(e){return this._contentIsLargerThanViewport(e)?1:0}_getScrollbarHandleSize(e,s){const i=this._getViewportSize(s),r=this._getContentSize(s);if(Math.abs(r)<.001)return 1;const a=Math.min(i/r,1),n=this._toOvershoot(this._scroll[e],s);return n===0?a:a/(1+Math.abs(n))}_getViewportSize(e){return this._getSize(e,this._viewportEntity)}_getContentSize(e){return this._getSize(e,this._contentEntity)}_getSize(e,s){return s!=null&&s.element?s.element[this._getCalculatedDimension(e)]:0}_getScrollingEnabled(e){if(e===Ee)return this.horizontal;if(e===je)return this.vertical;y.warn(`Unrecognized orientation: ${e}`)}_getScrollbarVisibility(e){if(e===Ee)return this.horizontalScrollbarVisibility;if(e===je)return this.verticalScrollbarVisibility;y.warn(`Unrecognized orientation: ${e}`)}_getSign(e){return e===Ee?1:-1}_getAxis(e){return e===Ee?"x":"y"}_getCalculatedDimension(e){return e===Ee?"calculatedWidth":"calculatedHeight"}_destroyDragHelper(){this._contentDragHelper&&this._contentDragHelper.destroy()}onUpdate(){this._contentEntity&&(this._updateVelocity(),this._syncScrollbarEnabledState(Ee),this._syncScrollbarEnabledState(je))}_updateVelocity(){if(!this._isDragging()){if(this.scrollMode===xg&&(this._hasOvershoot("x",Ee)&&this._setVelocityFromOvershoot(this.scroll.x,"x",Ee),this._hasOvershoot("y",je)&&this._setVelocityFromOvershoot(this.scroll.y,"y",je)),Math.abs(this._velocity.x)>1e-4||Math.abs(this._velocity.y)>1e-4){const e=this._contentEntity.getLocalPosition();e.x+=this._velocity.x,e.y+=this._velocity.y,this._contentEntity.setLocalPosition(e),this._setScrollFromContentPosition(e)}this._velocity.x*=1-this.friction,this._velocity.y*=1-this.friction}}_hasOvershoot(e,s){return Math.abs(this._toOvershoot(this.scroll[e],s))>.001}_toOvershoot(e,s){const i=this._getMaxScrollValue(s);return e<0?e:e>i?e-i:0}_setVelocityFromOvershoot(e,s,i){const a=this._toOvershoot(e,i)*this._getMaxOffset(i)*this._getSign(i);Math.abs(a)>0&&(this._velocity[s]=-a/(this.bounceAmount*50+1))}_setVelocityFromContentPositionDelta(e){this._prevContentDragPosition?(this._velocity.sub2(e,this._prevContentDragPosition),this._prevContentDragPosition.copy(e)):(this._velocity.set(0,0,0),this._prevContentDragPosition=e.clone())}_setScrollFromContentPosition(e){let s=this._contentPositionToScrollValue(e);this._isDragging()&&(s=this._applyScrollValueTension(s)),this._onSetScroll(s.x,s.y,!1)}_applyScrollValueTension(e){let i=this._getMaxScrollValue(Ee),r=this._toOvershoot(e.x,Ee);return r>0?e.x=i+1*Math.log10(1+r):r<0&&(e.x=-1*Math.log10(1-r)),i=this._getMaxScrollValue(je),r=this._toOvershoot(e.y,je),r>0?e.y=i+1*Math.log10(1+r):r<0&&(e.y=-1*Math.log10(1-r)),e}_isDragging(){return this._contentDragHelper&&this._contentDragHelper.isDragging}_setScrollbarComponentsEnabled(e){var s,i;(s=this._horizontalScrollbarEntity)!=null&&s.scrollbar&&(this._horizontalScrollbarEntity.scrollbar.enabled=e),(i=this._verticalScrollbarEntity)!=null&&i.scrollbar&&(this._verticalScrollbarEntity.scrollbar.enabled=e)}_setContentDraggingEnabled(e){this._contentDragHelper&&(this._contentDragHelper.enabled=e)}_onMouseWheel(e){var o;if(!this.useMouseWheel||!((o=this._contentEntity)!=null&&o.element))return;const s=e.event,i=s.deltaX/this._contentEntity.element.calculatedWidth*this.mouseWheelSensitivity.x,r=s.deltaY/this._contentEntity.element.calculatedHeight*this.mouseWheelSensitivity.y,a=Y.clamp(this._scroll.x+i,0,this._getMaxScrollValue(Ee)),n=Y.clamp(this._scroll.y+r,0,this._getMaxScrollValue(je));this.scroll=new J(a,n)}_enableContentInput(){for(;this._disabledContentInputEntities.length;){const e=this._disabledContentInputEntities.pop();e.element&&(e.element.useInput=!0)}this._disabledContentInput=!1}_disableContentInput(){const e=s=>{s.element&&s.element.useInput&&(this._disabledContentInputEntities.push(s),s.element.useInput=!1);const i=s.children;for(let r=0,a=i.length;r<a;r++)e(i[r])};if(this._contentEntity){const s=this._contentEntity.children;for(let i=0,r=s.length;i<r;i++)e(s[i])}this._disabledContentInput=!0}onEnable(){this._setScrollbarComponentsEnabled(!0),this._setContentDraggingEnabled(!0),this._syncAll()}onDisable(){this._setScrollbarComponentsEnabled(!1),this._setContentDraggingEnabled(!1)}onRemove(){this._toggleLifecycleListeners("off"),this._toggleElementListeners("off"),this._destroyDragHelper()}resolveDuplicatedEntityReferenceProperties(e,s){e.viewportEntity&&(this.viewportEntity=s[e.viewportEntity.getGuid()]),e.contentEntity&&(this.contentEntity=s[e.contentEntity.getGuid()]),e.horizontalScrollbarEntity&&(this.horizontalScrollbarEntity=s[e.horizontalScrollbarEntity.getGuid()]),e.verticalScrollbarEntity&&(this.verticalScrollbarEntity=s[e.verticalScrollbarEntity.getGuid()])}}h(yv,"EVENT_SETSCROLL","set:scroll");const aO=10;class nO{constructor(){h(this,"enabled",!0);h(this,"horizontal");h(this,"vertical");h(this,"scrollMode");h(this,"bounceAmount");h(this,"friction");h(this,"dragThreshold",aO);h(this,"useMouseWheel",!0);h(this,"mouseWheelSensitivity",new J(1,1));h(this,"horizontalScrollbarVisibility",0);h(this,"verticalScrollbarVisibility",0);h(this,"viewportEntity",null);h(this,"contentEntity",null);h(this,"horizontalScrollbarEntity",null);h(this,"verticalScrollbarEntity",null)}}const Tg=[{name:"enabled",type:"boolean"},{name:"horizontal",type:"boolean"},{name:"vertical",type:"boolean"},{name:"scrollMode",type:"number"},{name:"bounceAmount",type:"number"},{name:"friction",type:"number"},{name:"dragThreshold",type:"number"},{name:"useMouseWheel",type:"boolean"},{name:"mouseWheelSensitivity",type:"vec2"},{name:"horizontalScrollbarVisibility",type:"number"},{name:"verticalScrollbarVisibility",type:"number"}],oO=10;class lO extends ht{constructor(t){super(t),this.id="scrollview",this.ComponentType=yv,this.DataType=nO,this.schema=Tg,this.on("beforeremove",this._onRemoveComponent,this),this.app.systems.on("update",this.onUpdate,this)}initializeComponentData(t,e,s){e.dragThreshold===void 0&&(e.dragThreshold=oO),e.useMouseWheel===void 0&&(e.useMouseWheel=!0),e.mouseWheelSensitivity===void 0&&(e.mouseWheelSensitivity=new J(1,1)),super.initializeComponentData(t,e,Tg),t.viewportEntity=e.viewportEntity,t.contentEntity=e.contentEntity,t.horizontalScrollbarEntity=e.horizontalScrollbarEntity,t.verticalScrollbarEntity=e.verticalScrollbarEntity}onUpdate(t){const e=this.store;for(const s in e){const i=e[s].entity,r=i.scrollview;r.enabled&&i.enabled&&r.onUpdate()}}_onRemoveComponent(t,e){e.onRemove()}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}class vv extends we{constructor(e,s){super(e,s);h(this,"_handleEntity",null);h(this,"_evtHandleEntityElementAdd",null);h(this,"_evtHandleEntityChanges",[]);this._toggleLifecycleListeners("on")}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e)}get enabled(){return this.data.enabled}set orientation(e){this._setValue("orientation",e)}get orientation(){return this.data.orientation}set value(e){this._setValue("value",e)}get value(){return this.data.value}set handleSize(e){this._setValue("handleSize",e)}get handleSize(){return this.data.handleSize}set handleEntity(e){if(this._handleEntity===e)return;const s=typeof e=="string";this._handleEntity&&s&&this._handleEntity.getGuid()===e||(this._handleEntity&&this._handleEntityUnsubscribe(),e instanceof De?this._handleEntity=e:s?this._handleEntity=this.system.app.getEntityFromIndex(e)||null:this._handleEntity=null,this._handleEntity&&this._handleEntitySubscribe(),this._handleEntity?this.data.handleEntity=this._handleEntity.getGuid():s&&e&&(this.data.handleEntity=e))}get handleEntity(){return this._handleEntity}_setValue(e,s){const i=this.data,r=i[e];i[e]=s,this.fire("set",e,r,s)}_toggleLifecycleListeners(e){this[e]("set_value",this._onSetValue,this),this[e]("set_handleSize",this._onSetHandleSize,this),this[e]("set_orientation",this._onSetOrientation,this)}_handleEntitySubscribe(){this._evtHandleEntityElementAdd=this._handleEntity.on("element:add",this._onHandleElementGain,this),this._handleEntity.element&&this._onHandleElementGain()}_handleEntityUnsubscribe(){var e,s;(e=this._evtHandleEntityElementAdd)==null||e.off(),this._evtHandleEntityElementAdd=null,(s=this._handleEntity)!=null&&s.element&&this._onHandleElementLose()}_handleEntityElementSubscribe(){const e=this._handleEntity.element,s=this._evtHandleEntityChanges;s.push(e.once("beforeremove",this._onHandleElementLose,this)),s.push(e.on("set:anchor",this._onSetHandleAlignment,this)),s.push(e.on("set:margin",this._onSetHandleAlignment,this)),s.push(e.on("set:pivot",this._onSetHandleAlignment,this))}_handleEntityElementUnsubscribe(){for(let e=0;e<this._evtHandleEntityChanges.length;e++)this._evtHandleEntityChanges[e].off();this._evtHandleEntityChanges.length=0}_onHandleElementGain(){this._handleEntityElementSubscribe(),this._destroyDragHelper(),this._handleDragHelper=new Lo(this._handleEntity.element,this._getAxis()),this._handleDragHelper.on("drag:move",this._onHandleDrag,this),this._updateHandlePositionAndSize()}_onHandleElementLose(){this._handleEntityElementUnsubscribe(),this._destroyDragHelper()}_onHandleDrag(e){this._handleEntity&&this.enabled&&this.entity.enabled&&(this.value=this._handlePositionToScrollValue(e[this._getAxis()]))}_onSetValue(e,s,i){Math.abs(i-s)>1e-5&&(this.data.value=Y.clamp(i,0,1),this._updateHandlePositionAndSize(),this.fire("set:value",this.data.value))}_onSetHandleSize(e,s,i){Math.abs(i-s)>1e-5&&(this.data.handleSize=Y.clamp(i,0,1),this._updateHandlePositionAndSize())}_onSetHandleAlignment(){this._updateHandlePositionAndSize()}_onSetOrientation(e,s,i){var r;i!==s&&((r=this._handleEntity)!=null&&r.element)&&(this._handleEntity.element[this._getOppositeDimension()]=0)}_updateHandlePositionAndSize(){const e=this._handleEntity,s=e==null?void 0:e.element;if(e){const i=e.getLocalPosition();i[this._getAxis()]=this._getHandlePosition(),e.setLocalPosition(i)}s&&(s[this._getDimension()]=this._getHandleLength())}_handlePositionToScrollValue(e){return e*this._getSign()/this._getUsableTrackLength()}_scrollValueToHandlePosition(e){return e*this._getSign()*this._getUsableTrackLength()}_getUsableTrackLength(){return Math.max(this._getTrackLength()-this._getHandleLength(),.001)}_getTrackLength(){return this.entity.element?this.orientation===Ee?this.entity.element.calculatedWidth:this.entity.element.calculatedHeight:0}_getHandleLength(){return this._getTrackLength()*this.handleSize}_getHandlePosition(){return this._scrollValueToHandlePosition(this.value)}_getSign(){return this.orientation===Ee?1:-1}_getAxis(){return this.orientation===Ee?"x":"y"}_getDimension(){return this.orientation===Ee?"width":"height"}_getOppositeDimension(){return this.orientation===Ee?"height":"width"}_destroyDragHelper(){this._handleDragHelper&&this._handleDragHelper.destroy()}_setHandleDraggingEnabled(e){this._handleDragHelper&&(this._handleDragHelper.enabled=e)}onEnable(){this._setHandleDraggingEnabled(!0)}onDisable(){this._setHandleDraggingEnabled(!1)}onRemove(){this._destroyDragHelper(),this._toggleLifecycleListeners("off")}resolveDuplicatedEntityReferenceProperties(e,s){e.handleEntity&&(this.handleEntity=s[e.handleEntity.getGuid()])}}h(vv,"EVENT_SETVALUE","set:value");class hO{constructor(){h(this,"enabled",!0);h(this,"orientation",Ee);h(this,"value",0);h(this,"handleSize",0);h(this,"handleEntity",null)}}const wg=[{name:"enabled",type:"boolean"},{name:"orientation",type:"number"},{name:"value",type:"number"},{name:"handleSize",type:"number"}];class cO extends ht{constructor(t){super(t),this.id="scrollbar",this.ComponentType=vv,this.DataType=hO,this.schema=wg,this.on("add",this._onAddComponent,this),this.on("beforeremove",this._onRemoveComponent,this)}initializeComponentData(t,e,s){super.initializeComponentData(t,e,wg),t.handleEntity=e.handleEntity}_onAddComponent(t){t.fire("scrollbar:add")}_onRemoveComponent(t,e){e.onRemove()}}const dO={volume:0,pitch:0,loop:!1,startTime:0,duration:0,position:new A,maxDistance:0,refDistance:0,rollOffFactor:0,distanceModel:0,onPlay:null,onPause:null,onResume:null,onStop:null,onEnd:null};class Hi extends Se{constructor(e,s="Untitled",i={}){super();h(this,"name");h(this,"instances",[]);this._component=e,this._assets=e.system.app.assets,this._manager=e.system.manager,this.name=s,this._volume=i.volume!==void 0?Y.clamp(Number(i.volume)||0,0,1):1,this._pitch=i.pitch!==void 0?Math.max(.01,Number(i.pitch)||0):1,this._loop=!!(i.loop!==void 0&&i.loop),this._duration=i.duration>0?i.duration:null,this._startTime=Math.max(0,Number(i.startTime)||0),this._overlap=!!i.overlap,this._autoPlay=!!i.autoPlay,this._firstNode=null,this._lastNode=null,this._asset=i.asset,this._asset instanceof _e&&(this._asset=this._asset.id),this._onInstancePlayHandler=this._onInstancePlay.bind(this),this._onInstancePauseHandler=this._onInstancePause.bind(this),this._onInstanceResumeHandler=this._onInstanceResume.bind(this),this._onInstanceStopHandler=this._onInstanceStop.bind(this),this._onInstanceEndHandler=this._onInstanceEnd.bind(this)}play(e){if(this.overlap||this.stop(),!this.isLoaded&&!this._hasAsset()){y.warn(`Trying to play SoundSlot ${this.name} but it is not loaded and doesn't have an asset.`);return}let s=e;if(s||(s=this._createInstance(),this.instances.push(s)),this.isLoaded)s.play();else{const i=function(r){const a=s._playWhenLoaded;s.sound=r,a&&s.play()};this.off("load",i),this.once("load",i),this.load()}return s}pause(){let e=!1;const s=this.instances;for(let i=0,r=s.length;i<r;i++)s[i].pause()&&(e=!0);return e}resume(){let e=!1;const s=this.instances;for(let i=0,r=s.length;i<r;i++)s[i].resume()&&(e=!0);return e}stop(){let e=!1;const s=this.instances;let i=s.length;for(;i--;)s[i].stop(),e=!0;return s.length=0,e}load(){if(!this._hasAsset())return;const e=this._assets.get(this._asset);if(!e){this._assets.off(`add:${this._asset}`,this._onAssetAdd,this),this._assets.once(`add:${this._asset}`,this._onAssetAdd,this);return}if(e.off("remove",this._onAssetRemoved,this),e.on("remove",this._onAssetRemoved,this),!e.resource){e.off("load",this._onAssetLoad,this),e.once("load",this._onAssetLoad,this),this._assets.load(e);return}this.fire("load",e.resource)}setExternalNodes(e,s){if(!e){console.error("The firstNode must have a valid AudioNode");return}if(s||(s=e),this._firstNode=e,this._lastNode=s,!this._overlap){const i=this.instances;for(let r=0,a=i.length;r<a;r++)i[r].setExternalNodes(e,s)}}clearExternalNodes(){if(this._firstNode=null,this._lastNode=null,!this._overlap){const e=this.instances;for(let s=0,i=e.length;s<i;s++)e[s].clearExternalNodes()}}getExternalNodes(){return[this._firstNode,this._lastNode]}_hasAsset(){return this._asset!=null}_createInstance(){let e=null;const s=this._component;let i=null;if(this._hasAsset()){const a=this._assets.get(this._asset);a&&(i=a.resource)}const r=dO;return r.volume=this._volume*s.volume,r.pitch=this._pitch*s.pitch,r.loop=this._loop,r.startTime=this._startTime,r.duration=this._duration,r.onPlay=this._onInstancePlayHandler,r.onPause=this._onInstancePauseHandler,r.onResume=this._onInstanceResumeHandler,r.onStop=this._onInstanceStopHandler,r.onEnd=this._onInstanceEndHandler,s.positional?(r.position.copy(s.entity.getPosition()),r.maxDistance=s.maxDistance,r.refDistance=s.refDistance,r.rollOffFactor=s.rollOffFactor,r.distanceModel=s.distanceModel,e=new Za(this._manager,i,r)):e=new As(this._manager,i,r),this._firstNode&&e.setExternalNodes(this._firstNode,this._lastNode),e}_onInstancePlay(e){this.fire("play",e),this._component.fire("play",this,e)}_onInstancePause(e){this.fire("pause",e),this._component.fire("pause",this,e)}_onInstanceResume(e){this.fire("resume",e),this._component.fire("resume",this,e)}_onInstanceStop(e){const s=this.instances.indexOf(e);s!==-1&&this.instances.splice(s,1),this.fire("stop",e),this._component.fire("stop",this,e)}_onInstanceEnd(e){const s=this.instances.indexOf(e);s!==-1&&this.instances.splice(s,1),this.fire("end",e),this._component.fire("end",this,e)}_onAssetAdd(e){this.load()}_onAssetLoad(e){this.load()}_onAssetRemoved(e){e.off("remove",this._onAssetRemoved,this),this._assets.off(`add:${e.id}`,this._onAssetAdd,this),this.stop()}updatePosition(e){const s=this.instances;for(let i=0,r=s.length;i<r;i++)s[i].position=e}set asset(e){const s=this._asset;if(s){this._assets.off(`add:${s}`,this._onAssetAdd,this);const i=this._assets.get(s);i&&i.off("remove",this._onAssetRemoved,this)}this._asset=e,this._asset instanceof _e&&(this._asset=this._asset.id),this._hasAsset()&&this._component.enabled&&this._component.entity.enabled&&this.load()}get asset(){return this._asset}set autoPlay(e){this._autoPlay=!!e}get autoPlay(){return this._autoPlay}set duration(e){if(this._duration=Math.max(0,Number(e)||0)||null,!this._overlap){const s=this.instances;for(let i=0,r=s.length;i<r;i++)s[i].duration=this._duration}}get duration(){let e=0;if(this._hasAsset()){const s=this._assets.get(this._asset);e=s!=null&&s.resource?s.resource.duration:0}return this._duration!=null?this._duration%(e||1):e}get isLoaded(){if(this._hasAsset()){const e=this._assets.get(this._asset);if(e)return!!e.resource}return!1}get isPaused(){const e=this.instances,s=e.length;if(s===0)return!1;for(let i=0;i<s;i++)if(!e[i].isPaused)return!1;return!0}get isPlaying(){const e=this.instances;for(let s=0,i=e.length;s<i;s++)if(e[s].isPlaying)return!0;return!1}get isStopped(){const e=this.instances;for(let s=0,i=e.length;s<i;s++)if(!e[s].isStopped)return!1;return!0}set loop(e){this._loop=!!e;const s=this.instances;for(let i=0,r=s.length;i<r;i++)s[i].loop=this._loop}get loop(){return this._loop}set overlap(e){this._overlap=!!e}get overlap(){return this._overlap}set pitch(e){if(this._pitch=Math.max(Number(e)||0,.01),!this._overlap){const s=this.instances;for(let i=0,r=s.length;i<r;i++)s[i].pitch=this.pitch*this._component.pitch}}get pitch(){return this._pitch}set startTime(e){if(this._startTime=Math.max(0,Number(e)||0),!this._overlap){const s=this.instances;for(let i=0,r=s.length;i<r;i++)s[i].startTime=this._startTime}}get startTime(){return this._startTime}set volume(e){if(this._volume=Y.clamp(Number(e)||0,0,1),!this._overlap){const s=this.instances;for(let i=0,r=s.length;i<r;i++)s[i].volume=this._volume*this._component.volume}}get volume(){return this._volume}}h(Hi,"EVENT_PLAY","play"),h(Hi,"EVENT_PAUSE","pause"),h(Hi,"EVENT_RESUME","resume"),h(Hi,"EVENT_STOP","stop"),h(Hi,"EVENT_END","end"),h(Hi,"EVENT_LOAD","load");class Yr extends we{constructor(){super(...arguments);h(this,"_volume",1);h(this,"_pitch",1);h(this,"_positional",!0);h(this,"_refDistance",1);h(this,"_maxDistance",1e4);h(this,"_rollOffFactor",1);h(this,"_distanceModel",up);h(this,"_slots",{});h(this,"_playingBeforeDisable",{})}_updateSoundInstances(e,s,i){const r=this._slots;for(const a in r){const n=r[a];if(!n.overlap){const o=n.instances;for(let c=0,d=o.length;c<d;c++)o[c][e]=i?n[e]*s:s}}}set distanceModel(e){this._distanceModel=e,this._updateSoundInstances("distanceModel",e,!1)}get distanceModel(){return this._distanceModel}set maxDistance(e){this._maxDistance=e,this._updateSoundInstances("maxDistance",e,!1)}get maxDistance(){return this._maxDistance}set refDistance(e){this._refDistance=e,this._updateSoundInstances("refDistance",e,!1)}get refDistance(){return this._refDistance}set rollOffFactor(e){this._rollOffFactor=e,this._updateSoundInstances("rollOffFactor",e,!1)}get rollOffFactor(){return this._rollOffFactor}set pitch(e){this._pitch=e,this._updateSoundInstances("pitch",e,!0)}get pitch(){return this._pitch}set volume(e){this._volume=e,this._updateSoundInstances("volume",e,!0)}get volume(){return this._volume}set positional(e){this._positional=e;const s=this._slots;for(const i in s){const r=s[i];if(!r.overlap){const a=r.instances,n=a.length;for(let o=n-1;o>=0;o--){const c=a[o].isPlaying||a[o].isSuspended,d=a[o].currentTime;c&&a[o].stop();const f=r._createInstance();c&&(f.play(),f.currentTime=d),a.push(f)}}}}get positional(){return this._positional}set slots(e){const s=this._slots;if(s)for(const r in s)s[r].stop();const i={};for(const r in e)e[r]instanceof Hi?i[e[r].name]=e[r]:e[r].name&&(i[e[r].name]=new Hi(this,e[r].name,e[r]));this._slots=i,this.enabled&&this.entity.enabled&&this.onEnable()}get slots(){return this._slots}onEnable(){if(this.system._inTools)return;const e=this._slots,s=this._playingBeforeDisable;for(const i in e){const r=e[i];r.autoPlay&&r.isStopped?r.play():s[i]?r.resume():r.isLoaded||r.load()}}onDisable(){const e=this._slots,s={};for(const i in e)e[i].overlap||e[i].isPlaying&&(e[i].pause(),s[i]=!0);this._playingBeforeDisable=s}onRemove(){this.off()}addSlot(e,s){const i=this._slots;if(i[e])return y.warn(`A sound slot with name ${e} already exists on Entity ${this.entity.path}`),null;const r=new Hi(this,e,s);return i[e]=r,r.autoPlay&&this.enabled&&this.entity.enabled&&r.play(),r}removeSlot(e){const s=this._slots;s[e]&&(s[e].stop(),delete s[e])}slot(e){return this._slots[e]}_getSlotProperty(e,s){if(!this.enabled||!this.entity.enabled)return;const i=this._slots[e];if(!i){y.warn(`Trying to get ${s} from sound slot with name ${e} which does not exist`);return}return i[s]}isPlaying(e){return this._getSlotProperty(e,"isPlaying")||!1}isLoaded(e){return this._getSlotProperty(e,"isLoaded")||!1}isPaused(e){return this._getSlotProperty(e,"isPaused")||!1}isStopped(e){return this._getSlotProperty(e,"isStopped")||!1}play(e){if(!this.enabled||!this.entity.enabled)return null;const s=this._slots[e];return s?s.play():(y.warn(`Trying to play sound slot with name ${e} which does not exist`),null)}pause(e){const s=this._slots;if(e){const i=s[e];if(!i){y.warn(`Trying to pause sound slot with name ${e} which does not exist`);return}i.pause()}else for(const i in s)s[i].pause()}resume(e){const s=this._slots;if(e){const i=s[e];if(!i){y.warn(`Trying to resume sound slot with name ${e} which does not exist`);return}i.isPaused&&i.resume()}else for(const i in s)s[i].resume()}stop(e){const s=this._slots;if(e){const i=s[e];if(!i){y.warn(`Trying to stop sound slot with name ${e} which does not exist`);return}i.stop()}else for(const i in s)s[i].stop()}}h(Yr,"EVENT_PLAY","play"),h(Yr,"EVENT_PAUSE","pause"),h(Yr,"EVENT_RESUME","resume"),h(Yr,"EVENT_STOP","stop"),h(Yr,"EVENT_END","end");class fO{constructor(){this.enabled=!0}}const xv=["enabled"];class uO extends ht{constructor(t){super(t),this.id="sound",this.ComponentType=Yr,this.DataType=fO,this.schema=xv,this.manager=t.soundManager,y.assert(this.manager,"SoundComponentSystem cannot be created without sound manager"),this.app.systems.on("update",this.onUpdate,this),this.on("beforeremove",this.onBeforeRemove,this)}set volume(t){this.manager.volume=t}get volume(){return this.manager.volume}get context(){return vl()?this.manager.context:(y.warn("WARNING: Audio context is not supported on this browser"),null)}initializeComponentData(t,e,s){s=["volume","pitch","positional","refDistance","maxDistance","rollOffFactor","distanceModel","slots"];for(let i=0;i<s.length;i++)e.hasOwnProperty(s[i])&&(t[s[i]]=e[s[i]]);super.initializeComponentData(t,e,["enabled"])}cloneComponent(t,e){const s=t.sound,i=s.slots,r={};for(const n in i){const o=i[n];r[n]={name:o.name,volume:o.volume,pitch:o.pitch,loop:o.loop,duration:o.duration,startTime:o.startTime,overlap:o.overlap,autoPlay:o.autoPlay,asset:o.asset}}const a={distanceModel:s.distanceModel,enabled:s.enabled,maxDistance:s.maxDistance,pitch:s.pitch,positional:s.positional,refDistance:s.refDistance,rollOffFactor:s.rollOffFactor,slots:r,volume:s.volume};return this.addComponent(e,a)}onUpdate(t){const e=this.store;for(const s in e)if(e.hasOwnProperty(s)){const r=e[s].entity;if(r.enabled){const a=r.sound;if(a.enabled&&a.positional){const n=r.getPosition(),o=a.slots;for(const c in o)o[c].updatePosition(n)}}}}onBeforeRemove(t,e){const s=e.slots;for(const i in s)s[i].overlap||s[i].stop();e.onRemove()}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}we._buildAccessors(Yr.prototype,xv);const Eg="simple",bg="animated";class Wi extends Se{constructor(e,s){super();h(this,"_evtSetMeshes",null);this._component=e,this._frame=0,this._sprite=null,this._spriteAsset=null,this.spriteAsset=s.spriteAsset,this.name=s.name,this.fps=s.fps||0,this.loop=s.loop||!1,this._playing=!1,this._paused=!1,this._time=0}get duration(){if(this._sprite){const e=this.fps||Number.MIN_VALUE;return this._sprite.frameKeys.length/Math.abs(e)}return 0}set frame(e){this._setFrame(e);const s=this.fps||Number.MIN_VALUE;this._setTime(this._frame/s)}get frame(){return this._frame}get isPaused(){return this._paused}get isPlaying(){return this._playing}set sprite(e){var s;if(this._sprite&&((s=this._evtSetMeshes)==null||s.off(),this._evtSetMeshes=null,this._sprite.off("set:pixelsPerUnit",this._onSpritePpuChanged,this),this._sprite.off("set:atlas",this._onSpriteMeshesChange,this),this._sprite.atlas&&this._sprite.atlas.off("set:texture",this._onSpriteMeshesChange,this)),this._sprite=e,this._sprite&&(this._evtSetMeshes=this._sprite.on("set:meshes",this._onSpriteMeshesChange,this),this._sprite.on("set:pixelsPerUnit",this._onSpritePpuChanged,this),this._sprite.on("set:atlas",this._onSpriteMeshesChange,this),this._sprite.atlas&&this._sprite.atlas.on("set:texture",this._onSpriteMeshesChange,this)),this._component.currentClip===this){let i;!e||!e.atlas?(i=this._component._meshInstance,i&&(i.deleteParameter("texture_emissiveMap"),i.deleteParameter("texture_opacityMap")),this._component._hideModel()):(e.atlas.texture&&(i=this._component._meshInstance,i&&(i.setParameter("texture_emissiveMap",e.atlas.texture),i.setParameter("texture_opacityMap",e.atlas.texture)),this._component.enabled&&this._component.entity.enabled&&this._component._showModel()),this.time&&this.fps?this.time=this.time:this.frame=this.frame)}}get sprite(){return this._sprite}set spriteAsset(e){const s=this._component.system.app.assets;let i=e;if(e instanceof _e&&(i=e.id),this._spriteAsset!==i){if(this._spriteAsset){const r=s.get(this._spriteAsset);r&&this._unbindSpriteAsset(r)}if(this._spriteAsset=i,this._spriteAsset){const r=s.get(this._spriteAsset);r?this._bindSpriteAsset(r):(this.sprite=null,s.on(`add:${this._spriteAsset}`,this._onSpriteAssetAdded,this))}else this.sprite=null}}get spriteAsset(){return this._spriteAsset}set time(e){this._setTime(e),this._sprite?this.frame=Math.min(this._sprite.frameKeys.length-1,Math.floor(this._time*Math.abs(this.fps))):this.frame=0}get time(){return this._time}_onSpriteAssetAdded(e){this._component.system.app.assets.off(`add:${e.id}`,this._onSpriteAssetAdded,this),this._spriteAsset===e.id&&this._bindSpriteAsset(e)}_bindSpriteAsset(e){e.on("load",this._onSpriteAssetLoad,this),e.on("remove",this._onSpriteAssetRemove,this),e.resource?this._onSpriteAssetLoad(e):this._component.system.app.assets.load(e)}_unbindSpriteAsset(e){e&&(e.off("load",this._onSpriteAssetLoad,this),e.off("remove",this._onSpriteAssetRemove,this),e.resource&&!e.resource.atlas&&this._component.system.app.assets.off(`load:${e.data.textureAtlasAsset}`,this._onTextureAtlasLoad,this))}_onSpriteAssetLoad(e){if(!e.resource)this.sprite=null;else if(e.resource.atlas)this.sprite=e.resource;else{const s=e.data.textureAtlasAsset,i=this._component.system.app.assets;i.off(`load:${s}`,this._onTextureAtlasLoad,this),i.once(`load:${s}`,this._onTextureAtlasLoad,this)}}_onTextureAtlasLoad(e){const s=this._spriteAsset;s instanceof _e?this._onSpriteAssetLoad(s):this._onSpriteAssetLoad(this._component.system.app.assets.get(s))}_onSpriteAssetRemove(e){this.sprite=null}_onSpriteMeshesChange(){this._component.currentClip===this&&this._component._showFrame(this.frame)}_onSpritePpuChanged(){this._component.currentClip===this&&this.sprite.renderMode!==hi&&this._component._showFrame(this.frame)}_update(e){if(this.fps===0||!this._playing||this._paused||!this._sprite)return;const s=this.fps<0?-1:1,i=this._time+e*this._component.speed*s,r=this.duration,a=i>r||i<0;this._setTime(i);let n=this.frame;this._sprite?n=Math.floor(this._sprite.frameKeys.length*this._time/r):n=0,n!==this._frame&&this._setFrame(n),a&&(this.loop?(this.fire("loop"),this._component.fire("loop",this)):(this._playing=!1,this._paused=!1,this.fire("end"),this._component.fire("end",this)))}_setTime(e){this._time=e;const s=this.duration;this._time<0?this.loop?this._time=this._time%s+s:this._time=0:this._time>s&&(this.loop?this._time%=s:this._time=s)}_setFrame(e){this._sprite?this._frame=Y.clamp(e,0,this._sprite.frameKeys.length-1):this._frame=e,this._component.currentClip===this&&this._component._showFrame(this._frame)}_destroy(){if(this._spriteAsset){const e=this._component.system.app.assets;this._unbindSpriteAsset(e.get(this._spriteAsset))}this._sprite&&(this.sprite=null),this._spriteAsset&&(this.spriteAsset=null)}play(){this._playing||(this._playing=!0,this._paused=!1,this.frame=0,this.fire("play"),this._component.fire("play",this))}pause(){!this._playing||this._paused||(this._paused=!0,this.fire("pause"),this._component.fire("pause",this))}resume(){this._paused&&(this._paused=!1,this.fire("resume"),this._component.fire("resume",this))}stop(){this._playing&&(this._playing=!1,this._paused=!1,this._time=0,this.frame=0,this.fire("stop"),this._component.fire("stop",this))}}h(Wi,"EVENT_PLAY","play"),h(Wi,"EVENT_PAUSE","pause"),h(Wi,"EVENT_RESUME","resume"),h(Wi,"EVENT_STOP","stop"),h(Wi,"EVENT_END","end"),h(Wi,"EVENT_LOOP","loop");const Ag="texture_emissiveMap",Cg="texture_opacityMap",Pg="material_emissive",Dg="material_opacity",pO="innerOffset",mO="outerScale",_O="atlasRect";class fr extends we{constructor(e,s){super(e,s);h(this,"_evtLayersChanged",null);h(this,"_evtLayerAdded",null);h(this,"_evtLayerRemoved",null);this._type=Eg,this._material=e.defaultMaterial,this._color=new ae(1,1,1,1),this._colorUniform=new Float32Array(3),this._speed=1,this._flipX=!1,this._flipY=!1,this._width=1,this._height=1,this._drawOrder=0,this._layers=[tr],this._outerScale=new J(1,1),this._outerScaleUniform=new Float32Array(2),this._innerOffset=new oe,this._innerOffsetUniform=new Float32Array(4),this._atlasRect=new oe,this._atlasRectUniform=new Float32Array(4),this._batchGroupId=-1,this._batchGroup=null,this._node=new De,this._model=new ir,this._model.graph=this._node,this._meshInstance=null,s.addChild(this._model.graph),this._model._entity=s,this._updateAabbFunc=this._updateAabb.bind(this),this._addedModel=!1,this._autoPlayClip=null,this._clips={},this._defaultClip=new Wi(this,{name:this.entity.name,fps:0,loop:!1,spriteAsset:null}),this._currentClip=this._defaultClip}set type(e){this._type!==e&&(this._type=e,this._type===Eg?(this.stop(),this._currentClip=this._defaultClip,this.enabled&&this.entity.enabled&&(this._currentClip.frame=this.frame,this._currentClip.sprite?this._showModel():this._hideModel())):this._type===bg&&(this.stop(),this._autoPlayClip&&this._tryAutoPlay(),this._currentClip&&this._currentClip.isPlaying&&this.enabled&&this.entity.enabled?this._showModel():this._hideModel()))}get type(){return this._type}set frame(e){this._currentClip.frame=e}get frame(){return this._currentClip.frame}set spriteAsset(e){this._defaultClip.spriteAsset=e}get spriteAsset(){return this._defaultClip._spriteAsset}set sprite(e){this._currentClip.sprite=e}get sprite(){return this._currentClip.sprite}set material(e){this._material=e,this._meshInstance&&(this._meshInstance.material=e)}get material(){return this._material}set color(e){this._color.r=e.r,this._color.g=e.g,this._color.b=e.b,this._meshInstance&&(this._colorUniform[0]=this._color.r,this._colorUniform[1]=this._color.g,this._colorUniform[2]=this._color.b,this._meshInstance.setParameter(Pg,this._colorUniform))}get color(){return this._color}set opacity(e){this._color.a=e,this._meshInstance&&this._meshInstance.setParameter(Dg,e)}get opacity(){return this._color.a}set clips(e){if(!e){for(const s in this._clips)this.removeClip(s);return}for(const s in this._clips){let i=!1;for(const r in e)if(e[r].name===s){i=!0,this._clips[s].fps=e[r].fps,this._clips[s].loop=e[r].loop,e[r].hasOwnProperty("sprite")?this._clips[s].sprite=e[r].sprite:e[r].hasOwnProperty("spriteAsset")&&(this._clips[s].spriteAsset=e[r].spriteAsset);break}i||this.removeClip(s)}for(const s in e)this._clips[e[s].name]||this.addClip(e[s]);this._autoPlayClip&&this._tryAutoPlay(),(!this._currentClip||!this._currentClip.sprite)&&this._hideModel()}get clips(){return this._clips}get currentClip(){return this._currentClip}set speed(e){this._speed=e}get speed(){return this._speed}set flipX(e){this._flipX!==e&&(this._flipX=e,this._updateTransform())}get flipX(){return this._flipX}set flipY(e){this._flipY!==e&&(this._flipY=e,this._updateTransform())}get flipY(){return this._flipY}set width(e){e!==this._width&&(this._width=e,this._outerScale.x=this._width,this.sprite&&(this.sprite.renderMode===Ct||this.sprite.renderMode===At)&&this._updateTransform())}get width(){return this._width}set height(e){e!==this._height&&(this._height=e,this._outerScale.y=this.height,this.sprite&&(this.sprite.renderMode===Ct||this.sprite.renderMode===At)&&this._updateTransform())}get height(){return this._height}set batchGroupId(e){var i,r;if(this._batchGroupId===e)return;const s=this._batchGroupId;this._batchGroupId=e,this.entity.enabled&&s>=0&&((i=this.system.app.batcher)==null||i.remove(gt.SPRITE,s,this.entity)),this.entity.enabled&&e>=0?(r=this.system.app.batcher)==null||r.insert(gt.SPRITE,e,this.entity):s>=0&&this._currentClip&&this._currentClip.sprite&&this.enabled&&this.entity.enabled&&this._showModel()}get batchGroupId(){return this._batchGroupId}set autoPlayClip(e){this._autoPlayClip=e instanceof Wi?e.name:e,this._tryAutoPlay()}get autoPlayClip(){return this._autoPlayClip}set drawOrder(e){this._drawOrder=e,this._meshInstance&&(this._meshInstance.drawOrder=e)}get drawOrder(){return this._drawOrder}set layers(e){this._addedModel&&this._hideModel(),this._layers=e,this._meshInstance&&this.enabled&&this.entity.enabled&&this._showModel()}get layers(){return this._layers}get aabb(){return this._meshInstance?this._meshInstance.aabb:null}onEnable(){var r;const e=this.system.app,s=e.scene,i=s.layers;this._evtLayersChanged=s.on("set:layers",this._onLayersChanged,this),i&&(this._evtLayerAdded=i.on("add",this._onLayerAdded,this),this._evtLayerRemoved=i.on("remove",this._onLayerRemoved,this)),this._showModel(),this._autoPlayClip&&this._tryAutoPlay(),this._batchGroupId>=0&&((r=e.batcher)==null||r.insert(gt.SPRITE,this._batchGroupId,this.entity))}onDisable(){var r,a,n,o;const e=this.system.app,i=e.scene.layers;(r=this._evtLayersChanged)==null||r.off(),this._evtLayersChanged=null,i&&((a=this._evtLayerAdded)==null||a.off(),this._evtLayerAdded=null,(n=this._evtLayerRemoved)==null||n.off(),this._evtLayerRemoved=null),this.stop(),this._hideModel(),this._batchGroupId>=0&&((o=e.batcher)==null||o.remove(gt.SPRITE,this._batchGroupId,this.entity))}onDestroy(){var e;this._currentClip=null,this._defaultClip&&(this._defaultClip._destroy(),this._defaultClip=null);for(const s in this._clips)this._clips[s]._destroy();this._clips=null,this._hideModel(),this._model=null,(e=this._node)==null||e.remove(),this._node=null,this._meshInstance&&(this._meshInstance.material=null,this._meshInstance.mesh=null,this._meshInstance=null)}_showModel(){if(this._addedModel||!this._meshInstance)return;const e=[this._meshInstance];for(let s=0,i=this._layers.length;s<i;s++){const r=this.system.app.scene.layers.getLayerById(this._layers[s]);r&&r.addMeshInstances(e)}this._addedModel=!0}_hideModel(){if(!this._addedModel||!this._meshInstance)return;const e=[this._meshInstance];for(let s=0,i=this._layers.length;s<i;s++){const r=this.system.app.scene.layers.getLayerById(this._layers[s]);r&&r.removeMeshInstances(e)}this._addedModel=!1}_showFrame(e){if(!this.sprite)return;const s=this.sprite.meshes[e];if(!s){this._meshInstance&&(this._meshInstance.mesh=null,this._meshInstance.visible=!1);return}let i;if(this.sprite.renderMode===At?i=this.system.default9SlicedMaterialSlicedMode:this.sprite.renderMode===Ct?i=this.system.default9SlicedMaterialTiledMode:i=this.system.defaultMaterial,this._meshInstance||(this._meshInstance=new Ge(s,this._material,this._node),this._meshInstance.castShadow=!1,this._meshInstance.receiveShadow=!1,this._meshInstance.drawOrder=this._drawOrder,this._model.meshInstances.push(this._meshInstance),this._colorUniform[0]=this._color.r,this._colorUniform[1]=this._color.g,this._colorUniform[2]=this._color.b,this._meshInstance.setParameter(Pg,this._colorUniform),this._meshInstance.setParameter(Dg,this._color.a),this.enabled&&this.entity.enabled&&this._showModel()),this._meshInstance.material!==i&&(this._meshInstance.material=i),this._meshInstance.mesh!==s&&(this._meshInstance.mesh=s,this._meshInstance.visible=!0,this._meshInstance._aabbVer=-1),this.sprite.atlas&&this.sprite.atlas.texture?(this._meshInstance.setParameter(Ag,this.sprite.atlas.texture),this._meshInstance.setParameter(Cg,this.sprite.atlas.texture)):(this._meshInstance.deleteParameter(Ag),this._meshInstance.deleteParameter(Cg)),this.sprite.atlas&&(this.sprite.renderMode===At||this.sprite.renderMode===Ct)){this._meshInstance._updateAabbFunc=this._updateAabbFunc;const r=this.sprite.atlas.frames[this.sprite.frameKeys[e]];if(r){const a=2/r.rect.z,n=2/r.rect.w;this._innerOffset.set(r.border.x*a,r.border.y*n,r.border.z*a,r.border.w*n);const o=this.sprite.atlas.texture;this._atlasRect.set(r.rect.x/o.width,r.rect.y/o.height,r.rect.z/o.width,r.rect.w/o.height)}else this._innerOffset.set(0,0,0,0);this._innerOffsetUniform[0]=this._innerOffset.x,this._innerOffsetUniform[1]=this._innerOffset.y,this._innerOffsetUniform[2]=this._innerOffset.z,this._innerOffsetUniform[3]=this._innerOffset.w,this._meshInstance.setParameter(pO,this._innerOffsetUniform),this._atlasRectUniform[0]=this._atlasRect.x,this._atlasRectUniform[1]=this._atlasRect.y,this._atlasRectUniform[2]=this._atlasRect.z,this._atlasRectUniform[3]=this._atlasRect.w,this._meshInstance.setParameter(_O,this._atlasRectUniform)}else this._meshInstance._updateAabbFunc=null;this._updateTransform()}_updateTransform(){let e=this.flipX?-1:1,s=this.flipY?-1:1,i=0,r=0;if(this.sprite&&(this.sprite.renderMode===At||this.sprite.renderMode===Ct)){let a=1,n=1;if(this.sprite.atlas){const d=this.sprite.atlas.frames[this.sprite.frameKeys[this.frame]];d&&(a=d.rect.z,n=d.rect.w,i=(.5-d.pivot.x)*this._width,r=(.5-d.pivot.y)*this._height)}const o=a/this.sprite.pixelsPerUnit,c=n/this.sprite.pixelsPerUnit;this._outerScale.set(Math.max(this._width,this._innerOffset.x*o),Math.max(this._height,this._innerOffset.y*c)),e*=o,s*=c,this._outerScale.x/=o,this._outerScale.y/=c,e*=Y.clamp(this._width/(this._innerOffset.x*o),1e-4,1),s*=Y.clamp(this._height/(this._innerOffset.y*c),1e-4,1),this._meshInstance&&(this._outerScaleUniform[0]=this._outerScale.x,this._outerScaleUniform[1]=this._outerScale.y,this._meshInstance.setParameter(mO,this._outerScaleUniform))}this._node.setLocalScale(e,s,1),this._node.setLocalPosition(i,r,0)}_updateAabb(e){return e.center.set(0,0,0),e.halfExtents.set(this._outerScale.x*.5,this._outerScale.y*.5,.001),e.setFromTransformedAabb(e,this._node.getWorldTransform()),e}_tryAutoPlay(){if(!this._autoPlayClip||this.type!==bg)return;const e=this._clips[this._autoPlayClip];e&&!e.isPlaying&&(!this._currentClip||!this._currentClip.isPlaying)&&this.enabled&&this.entity.enabled&&this.play(e.name)}_onLayersChanged(e,s){e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),s.on("add",this.onLayerAdded,this),s.on("remove",this.onLayerRemoved,this),this.enabled&&this.entity.enabled&&this._showModel()}_onLayerAdded(e){this.layers.indexOf(e.id)<0||this._addedModel&&this.enabled&&this.entity.enabled&&this._meshInstance&&e.addMeshInstances([this._meshInstance])}_onLayerRemoved(e){!this._meshInstance||this.layers.indexOf(e.id)<0||e.removeMeshInstances([this._meshInstance])}removeModelFromLayers(){for(let e=0;e<this.layers.length;e++){const s=this.system.app.scene.layers.getLayerById(this.layers[e]);s&&s.removeMeshInstances([this._meshInstance])}}addClip(e){const s=new Wi(this,{name:e.name,fps:e.fps,loop:e.loop,spriteAsset:e.spriteAsset});return this._clips[e.name]=s,s.name&&s.name===this._autoPlayClip&&this._tryAutoPlay(),s}removeClip(e){delete this._clips[e]}clip(e){return this._clips[e]}play(e){const s=this._clips[e],i=this._currentClip;return i&&i!==s&&(i._playing=!1),this._currentClip=s,this._currentClip?(this._currentClip=s,this._currentClip.play()):y.warn(`Trying to play sprite animation ${e} which does not exist.`),s}pause(){this._currentClip!==this._defaultClip&&this._currentClip.isPlaying&&this._currentClip.pause()}resume(){this._currentClip!==this._defaultClip&&this._currentClip.isPaused&&this._currentClip.resume()}stop(){this._currentClip!==this._defaultClip&&this._currentClip.stop()}}h(fr,"EVENT_PLAY","play"),h(fr,"EVENT_PAUSE","pause"),h(fr,"EVENT_RESUME","resume"),h(fr,"EVENT_STOP","stop"),h(fr,"EVENT_END","end"),h(fr,"EVENT_LOOP","loop");class gO{constructor(){this.enabled=!0}}const Tv=["enabled"];class SO extends ht{constructor(t){super(t),this.id="sprite",this.ComponentType=fr,this.DataType=gO,this.schema=Tv,this._defaultTexture=null,this._defaultMaterial=null,this._default9SlicedMaterialSlicedMode=null,this._default9SlicedMaterialTiledMode=null,this.app.systems.on("update",this.onUpdate,this),this.on("beforeremove",this.onBeforeRemove,this)}set defaultMaterial(t){this._defaultMaterial=t}get defaultMaterial(){if(!this._defaultMaterial){const t=new ge(this.app.graphicsDevice,{width:1,height:1,format:ms,name:"sprite"}),e=new Uint8Array(t.lock());e[0]=e[1]=e[2]=e[3]=255,t.unlock();const s=new kt;s.diffuse.set(0,0,0),s.emissive.set(1,1,1),s.emissiveMap=t,s.opacityMap=t,s.opacityMapChannel="a",s.useLighting=!1,s.useTonemap=!1,s.useFog=!1,s.useSkybox=!1,s.blendType=Nn,s.depthWrite=!1,s.pixelSnap=!1,s.cull=wt,s.update(),this._defaultTexture=t,this._defaultMaterial=s}return this._defaultMaterial}set default9SlicedMaterialSlicedMode(t){this._default9SlicedMaterialSlicedMode=t}get default9SlicedMaterialSlicedMode(){if(!this._default9SlicedMaterialSlicedMode){const t=this.defaultMaterial.clone();t.nineSlicedMode=At,t.update(),this._default9SlicedMaterialSlicedMode=t}return this._default9SlicedMaterialSlicedMode}set default9SlicedMaterialTiledMode(t){this._default9SlicedMaterialTiledMode=t}get default9SlicedMaterialTiledMode(){if(!this._default9SlicedMaterialTiledMode){const t=this.defaultMaterial.clone();t.nineSlicedMode=Ct,t.update(),this._default9SlicedMaterialTiledMode=t}return this._default9SlicedMaterialTiledMode}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this),this._defaultTexture&&(this._defaultTexture.destroy(),this._defaultTexture=null)}initializeComponentData(t,e,s){if(e.enabled!==void 0&&(t.enabled=e.enabled),t.type=e.type,e.layers&&Array.isArray(e.layers)&&(t.layers=e.layers.slice(0)),e.drawOrder!==void 0&&(t.drawOrder=e.drawOrder),e.color!==void 0&&(e.color instanceof ae?t.color.set(e.color.r,e.color.g,e.color.b,e.opacity??1):t.color.set(e.color[0],e.color[1],e.color[2],e.opacity??1),t.color=t.color),e.opacity!==void 0&&(t.opacity=e.opacity),e.flipX!==void 0&&(t.flipX=e.flipX),e.flipY!==void 0&&(t.flipY=e.flipY),e.width!==void 0&&(t.width=e.width),e.height!==void 0&&(t.height=e.height),e.spriteAsset!==void 0&&(t.spriteAsset=e.spriteAsset),e.sprite&&(t.sprite=e.sprite),e.frame!==void 0&&(t.frame=e.frame),e.clips)for(const i in e.clips)t.addClip(e.clips[i]);e.speed!==void 0&&(t.speed=e.speed),e.autoPlayClip&&(t.autoPlayClip=e.autoPlayClip),t.batchGroupId=e.batchGroupId===void 0||e.batchGroupId===null?-1:e.batchGroupId,super.initializeComponentData(t,e,s)}cloneComponent(t,e){const s=t.sprite;return this.addComponent(e,{enabled:s.enabled,type:s.type,spriteAsset:s.spriteAsset,sprite:s.sprite,width:s.width,height:s.height,frame:s.frame,color:s.color.clone(),opacity:s.opacity,flipX:s.flipX,flipY:s.flipY,speed:s.speed,clips:s.clips,autoPlayClip:s.autoPlayClip,batchGroupId:s.batchGroupId,drawOrder:s.drawOrder,layers:s.layers.slice(0)})}onUpdate(t){const e=this.store;for(const s in e)if(e.hasOwnProperty(s)){const i=e[s];if(i.data.enabled&&i.entity.enabled){const r=i.entity.sprite;r._currentClip&&r._currentClip._update(t)}}}onBeforeRemove(t,e){e.onDestroy()}}we._buildAccessors(fr.prototype,Tv);class dn extends we{constructor(t,e){super(t,e),this._oldState=!0,this._size=new A,this.on("set_enabled",this._onSetEnabled,this)}set size(t){t instanceof A?this._size.copy(t):t instanceof Array&&t.length>=3&&this.size.set(t[0],t[1],t[2])}get size(){return this._size}onEnable(){this._checkState()}onDisable(){this._checkState()}_onSetEnabled(t,e,s){this._checkState()}_checkState(){const t=this.enabled&&this.entity.enabled;t!==this._oldState&&(this._oldState=t,this.fire("enable"),this.fire("state",this.enabled))}_onBeforeRemove(){this.fire("remove")}}h(dn,"EVENT_ENABLE","enable"),h(dn,"EVENT_DISABLE","disable"),h(dn,"EVENT_STATE","state"),h(dn,"EVENT_REMOVE","remove");class yO{constructor(){this.enabled=!0}}const wv=["enabled"];class vO extends ht{constructor(t){super(t),this.id="zone",this.ComponentType=dn,this.DataType=yO,this.schema=wv,this.on("beforeremove",this._onBeforeRemove,this)}initializeComponentData(t,e,s){t.enabled=e.hasOwnProperty("enabled")?!!e.enabled:!0,e.size&&(e.size instanceof A?t.size.copy(e.size):e.size instanceof Array&&e.size.length>=3&&t.size.set(e.size[0],e.size[1],e.size[2]))}cloneComponent(t,e){const s={enabled:t.zone.enabled,size:t.zone.size};return this.addComponent(e,s)}_onBeforeRemove(t,e){e._onBeforeRemove()}}we._buildAccessors(dn.prototype,wv);class xO{constructor(t,e){this.effect=t,this.inputTarget=e,this.outputTarget=null,this.name=t.constructor.name}}class TO{constructor(t,e){this.app=t,this.camera=e,this.destinationRenderTarget=null,this.effects=[],this.enabled=!1,this.depthTarget=null,e.on("set:rect",this.onCameraRectChanged,this)}_allocateColorBuffer(t,e){const s=this.camera.rect,i=this.destinationRenderTarget,r=this.app.graphicsDevice,a=Math.floor(s.z*((i==null?void 0:i.width)??r.width)),n=Math.floor(s.w*((i==null?void 0:i.height)??r.height));return new ge(r,{name:e,format:t,width:a,height:n,mipmaps:!1,minFilter:Te,magFilter:Te,addressU:me,addressV:me})}_createOffscreenTarget(t,e){const s=this.app.graphicsDevice,r=(this.destinationRenderTarget??s.backBuffer).isColorBufferSrgb(0),a=(e&&s.getRenderableHdrFormat([nt,$t],!0))??(r?ms:Fe),n=`${this.camera.entity.name}-posteffect-${this.effects.length}`,o=this._allocateColorBuffer(a,n);return new _t({colorBuffer:o,depth:t,stencil:t&&this.app.graphicsDevice.supportsStencil,samples:t?s.samples:1})}_resizeOffscreenTarget(t){const e=t.colorBuffer.format,s=t.colorBuffer.name;t.destroyFrameBuffers(),t.destroyTextureBuffers(),t._colorBuffer=this._allocateColorBuffer(e,s),t._colorBuffers=[t._colorBuffer]}_destroyOffscreenTarget(t){t.destroyTextureBuffers(),t.destroy()}addEffect(t){const e=this.effects,s=e.length===0,i=this._createOffscreenTarget(s,t.hdr),r=new xO(t,i);e.push(r),this._sourceTarget=r.inputTarget,e.length>1&&(e[e.length-2].outputTarget=r.inputTarget),this._newPostEffect=t,t.needsDepthBuffer&&this._requestDepthMap(),this.enable(),this._newPostEffect=void 0}removeEffect(t){let e=-1;for(let s=0,i=this.effects.length;s<i;s++)if(this.effects[s].effect===t){e=s;break}e>=0&&(e>0?this.effects[e-1].outputTarget=e+1<this.effects.length?this.effects[e+1].inputTarget:null:this.effects.length>1&&(this.effects[1].inputTarget._depth||(this._destroyOffscreenTarget(this.effects[1].inputTarget),this.effects[1].inputTarget=this._createOffscreenTarget(!0,this.effects[1].hdr),this._sourceTarget=this.effects[1].inputTarget),this.camera.renderTarget=this.effects[1].inputTarget),this._destroyOffscreenTarget(this.effects[e].inputTarget),this.effects.splice(e,1)),this.enabled&&t.needsDepthBuffer&&this._releaseDepthMap(),this.effects.length===0&&this.disable()}_requestDepthMaps(){for(let t=0,e=this.effects.length;t<e;t++){const s=this.effects[t].effect;this._newPostEffect!==s&&s.needsDepthBuffer&&this._requestDepthMap()}}_releaseDepthMaps(){for(let t=0,e=this.effects.length;t<e;t++)this.effects[t].effect.needsDepthBuffer&&this._releaseDepthMap()}_requestDepthMap(){const t=this.app.scene.layers.getLayerById(us);t&&(t.incrementCounter(),this.camera.requestSceneDepthMap(!0))}_releaseDepthMap(){const t=this.app.scene.layers.getLayerById(us);t&&(t.decrementCounter(),this.camera.requestSceneDepthMap(!1))}destroy(){for(let t=0,e=this.effects.length;t<e;t++)this.effects[t].inputTarget.destroy();this.effects.length=0,this.disable()}enable(){!this.enabled&&this.effects.length&&(this.enabled=!0,this._requestDepthMaps(),this.app.graphicsDevice.on("resizecanvas",this._onCanvasResized,this),this.destinationRenderTarget=this.camera.renderTarget,this.camera.renderTarget=this.effects[0].inputTarget,this.camera.onPostprocessing=()=>{if(this.enabled){let t=null;const e=this.effects.length;if(e)for(let s=0;s<e;s++){const i=this.effects[s];let r=i.outputTarget;s===e-1&&(t=this.camera.rect,this.destinationRenderTarget&&(r=this.destinationRenderTarget)),Z.pushGpuMarker(this.app.graphicsDevice,i.name),i.effect.render(i.inputTarget,r,t),Z.popGpuMarker(this.app.graphicsDevice)}}})}disable(){this.enabled&&(this.enabled=!1,this.app.graphicsDevice.off("resizecanvas",this._onCanvasResized,this),this._releaseDepthMaps(),this._destroyOffscreenTarget(this._sourceTarget),this.camera.renderTarget=this.destinationRenderTarget,this.camera.onPostprocessing=null)}_onCanvasResized(t,e){const s=this.camera.rect,i=this.destinationRenderTarget;t=(i==null?void 0:i.width)??t,e=(i==null?void 0:i.height)??e,this.camera.camera.aspectRatio=t*s.z/(e*s.w),this.resizeRenderTargets()}resizeRenderTargets(){const t=this.app.graphicsDevice,e=this.destinationRenderTarget,s=(e==null?void 0:e.width)??t.width,i=(e==null?void 0:e.height)??t.height,r=this.camera.rect,a=Math.floor(r.z*s),n=Math.floor(r.w*i),o=this.effects;for(let c=0,d=o.length;c<d;c++){const f=o[c];(f.inputTarget.width!==a||f.inputTarget.height!==n)&&this._resizeOffscreenTarget(f.inputTarget)}}onCameraRectChanged(t,e,s){this.enabled&&this.resizeRenderTargets()}}class Ir extends we{constructor(e,s){super(e,s);h(this,"onPostprocessing",null);h(this,"_renderSceneDepthMap",0);h(this,"_renderSceneColorMap",0);h(this,"_sceneDepthMapRequested",!1);h(this,"_sceneColorMapRequested",!1);h(this,"_priority",0);h(this,"_disablePostEffectsLayer",xl);h(this,"_camera",new bl);h(this,"_evtLayersChanged",null);h(this,"_evtLayerAdded",null);h(this,"_evtLayerRemoved",null);this._camera.node=s,this._postEffects=new TO(e.app,this)}setShaderPass(e){const s=Si.get(this.system.app.graphicsDevice),i=e?s.allocate(e,{isForward:!0}):null;return this._camera.shaderPassInfo=i,i.index}getShaderPass(){var e;return(e=this._camera.shaderPassInfo)==null?void 0:e.name}set renderPasses(e){this._camera.renderPasses=e||[],this.dirtyLayerCompositionCameras(),this.system.app.scene.updateShaders=!0}get renderPasses(){return this._camera.renderPasses}get shaderParams(){return this._camera.shaderParams}set gammaCorrection(e){this.camera.shaderParams.gammaCorrection=e}get gammaCorrection(){return this.camera.shaderParams.gammaCorrection}set toneMapping(e){this.camera.shaderParams.toneMapping=e}get toneMapping(){return this.camera.shaderParams.toneMapping}set fog(e){this._camera.fogParams=e}get fog(){return this._camera.fogParams}set aperture(e){this._camera.aperture=e}get aperture(){return this._camera.aperture}set aspectRatio(e){this._camera.aspectRatio=e}get aspectRatio(){return this._camera.aspectRatio}set aspectRatioMode(e){this._camera.aspectRatioMode=e}get aspectRatioMode(){return this._camera.aspectRatioMode}set calculateProjection(e){this._camera.calculateProjection=e}get calculateProjection(){return this._camera.calculateProjection}set calculateTransform(e){this._camera.calculateTransform=e}get calculateTransform(){return this._camera.calculateTransform}get camera(){return this._camera}set clearColor(e){this._camera.clearColor=e}get clearColor(){return this._camera.clearColor}set clearColorBuffer(e){this._camera.clearColorBuffer=e,this.dirtyLayerCompositionCameras()}get clearColorBuffer(){return this._camera.clearColorBuffer}set clearDepthBuffer(e){this._camera.clearDepthBuffer=e,this.dirtyLayerCompositionCameras()}get clearDepthBuffer(){return this._camera.clearDepthBuffer}set clearStencilBuffer(e){this._camera.clearStencilBuffer=e,this.dirtyLayerCompositionCameras()}get clearStencilBuffer(){return this._camera.clearStencilBuffer}set cullFaces(e){this._camera.cullFaces=e}get cullFaces(){return this._camera.cullFaces}set disablePostEffectsLayer(e){this._disablePostEffectsLayer=e,this.dirtyLayerCompositionCameras()}get disablePostEffectsLayer(){return this._disablePostEffectsLayer}set farClip(e){this._camera.farClip=e}get farClip(){return this._camera.farClip}set flipFaces(e){this._camera.flipFaces=e}get flipFaces(){return this._camera.flipFaces}set fov(e){this._camera.fov=e}get fov(){return this._camera.fov}get frustum(){return this._camera.frustum}set frustumCulling(e){this._camera.frustumCulling=e}get frustumCulling(){return this._camera.frustumCulling}set horizontalFov(e){this._camera.horizontalFov=e}get horizontalFov(){return this._camera.horizontalFov}set layers(e){const s=this._camera.layers,i=this.system.app.scene;s.forEach(r=>{const a=i.layers.getLayerById(r);a==null||a.removeCamera(this)}),this._camera.layers=e,this.enabled&&this.entity.enabled&&e.forEach(r=>{const a=i.layers.getLayerById(r);a==null||a.addCamera(this)}),this.fire("set:layers")}get layers(){return this._camera.layers}get layersSet(){return this._camera.layersSet}set jitter(e){this._camera.jitter=e}get jitter(){return this._camera.jitter}set nearClip(e){this._camera.nearClip=e}get nearClip(){return this._camera.nearClip}set orthoHeight(e){this._camera.orthoHeight=e}get orthoHeight(){return this._camera.orthoHeight}get postEffects(){return this._postEffects}get postEffectsEnabled(){return this._postEffects.enabled}set priority(e){this._priority=e,this.dirtyLayerCompositionCameras()}get priority(){return this._priority}set projection(e){this._camera.projection=e}get projection(){return this._camera.projection}get projectionMatrix(){return this._camera.projectionMatrix}set rect(e){this._camera.rect=e,this.fire("set:rect",this._camera.rect)}get rect(){return this._camera.rect}set renderSceneColorMap(e){e&&!this._sceneColorMapRequested?(this.requestSceneColorMap(!0),this._sceneColorMapRequested=!0):this._sceneColorMapRequested&&(this.requestSceneColorMap(!1),this._sceneColorMapRequested=!1)}get renderSceneColorMap(){return this._renderSceneColorMap>0}set renderSceneDepthMap(e){e&&!this._sceneDepthMapRequested?(this.requestSceneDepthMap(!0),this._sceneDepthMapRequested=!0):this._sceneDepthMapRequested&&(this.requestSceneDepthMap(!1),this._sceneDepthMapRequested=!1)}get renderSceneDepthMap(){return this._renderSceneDepthMap>0}set renderTarget(e){y.call(()=>{this._camera.renderPasses.length>0&&y.warn(`Setting a render target on the camera ${this.entity.name} after the render passes is not supported, set it up first.`)}),this._camera.renderTarget=e,this.dirtyLayerCompositionCameras()}get renderTarget(){return this._camera.renderTarget}set scissorRect(e){this._camera.scissorRect=e}get scissorRect(){return this._camera.scissorRect}set sensitivity(e){this._camera.sensitivity=e}get sensitivity(){return this._camera.sensitivity}set shutter(e){this._camera.shutter=e}get shutter(){return this._camera.shutter}get viewMatrix(){return this._camera.viewMatrix}_enableDepthLayer(e){if(this.layers.find(i=>i===us)){const i=this.system.app.scene.layers.getLayerById(us);e?i==null||i.incrementCounter():i==null||i.decrementCounter()}else if(e)return!1;return!0}requestSceneColorMap(e){this._renderSceneColorMap+=e?1:-1,y.assert(this._renderSceneColorMap>=0),this._enableDepthLayer(e)||y.warnOnce("CameraComponent.requestSceneColorMap was called, but the camera does not have a Depth layer, ignoring."),this.camera._enableRenderPassColorGrab(this.system.app.graphicsDevice,this.renderSceneColorMap),this.system.app.scene.layers.markDirty()}requestSceneDepthMap(e){this._renderSceneDepthMap+=e?1:-1,y.assert(this._renderSceneDepthMap>=0),this._enableDepthLayer(e)||y.warnOnce("CameraComponent.requestSceneDepthMap was called, but the camera does not have a Depth layer, ignoring."),this.camera._enableRenderPassDepthGrab(this.system.app.graphicsDevice,this.system.app.renderer,this.renderSceneDepthMap),this.system.app.scene.layers.markDirty()}dirtyLayerCompositionCameras(){const e=this.system.app.scene.layers;e._dirty=!0}screenToWorld(e,s,i,r){const a=this.system.app.graphicsDevice,{width:n,height:o}=a.clientRect;return this._camera.screenToWorld(e,s,i,n,o,r)}worldToScreen(e,s){const i=this.system.app.graphicsDevice,{width:r,height:a}=i.clientRect;return this._camera.worldToScreen(e,r,a,s)}onAppPrerender(){this._camera._viewMatDirty=!0,this._camera._viewProjMatDirty=!0}addCameraToLayers(){const e=this.layers;for(let s=0;s<e.length;s++){const i=this.system.app.scene.layers.getLayerById(e[s]);i&&i.addCamera(this)}}removeCameraFromLayers(){const e=this.layers;for(let s=0;s<e.length;s++){const i=this.system.app.scene.layers.getLayerById(e[s]);i&&i.removeCamera(this)}}onLayersChanged(e,s){this.addCameraToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),s.on("add",this.onLayerAdded,this),s.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||e.addCamera(this)}onLayerRemoved(e){this.layers.indexOf(e.id)<0||e.removeCamera(this)}onEnable(){var i,r,a;const e=this.system.app.scene,s=e.layers;this.system.addCamera(this),(i=this._evtLayersChanged)==null||i.off(),this._evtLayersChanged=e.on("set:layers",this.onLayersChanged,this),s&&((r=this._evtLayerAdded)==null||r.off(),this._evtLayerAdded=s.on("add",this.onLayerAdded,this),(a=this._evtLayerRemoved)==null||a.off(),this._evtLayerRemoved=s.on("remove",this.onLayerRemoved,this)),this.enabled&&this.entity.enabled&&this.addCameraToLayers(),this.postEffects.enable()}onDisable(){var i,r,a;const s=this.system.app.scene.layers;this.postEffects.disable(),this.removeCameraFromLayers(),(i=this._evtLayersChanged)==null||i.off(),this._evtLayersChanged=null,s&&((r=this._evtLayerAdded)==null||r.off(),this._evtLayerAdded=null,(a=this._evtLayerRemoved)==null||a.off(),this._evtLayerRemoved=null),this.system.removeCamera(this)}onRemove(){this.onDisable(),this.off(),this.camera.destroy()}calculateAspectRatio(e){const s=this.system.app.graphicsDevice,i=e?e.width:s.width,r=e?e.height:s.height;return i*this.rect.z/(r*this.rect.w)}frameUpdate(e){this.aspectRatioMode===Np&&(this.aspectRatio=this.calculateAspectRatio(e))}startXr(e,s,i){this.system.app.xr.start(this,e,s,i)}endXr(e){if(!this._camera.xr){e&&e(new Error("Camera is not in XR"));return}this._camera.xr.end(e)}copy(e){this.aperture=e.aperture,this.aspectRatio=e.aspectRatio,this.aspectRatioMode=e.aspectRatioMode,this.calculateProjection=e.calculateProjection,this.calculateTransform=e.calculateTransform,this.clearColor=e.clearColor,this.clearColorBuffer=e.clearColorBuffer,this.clearDepthBuffer=e.clearDepthBuffer,this.clearStencilBuffer=e.clearStencilBuffer,this.cullFaces=e.cullFaces,this.disablePostEffectsLayer=e.disablePostEffectsLayer,this.farClip=e.farClip,this.flipFaces=e.flipFaces,this.fov=e.fov,this.frustumCulling=e.frustumCulling,this.horizontalFov=e.horizontalFov,this.layers=e.layers,this.nearClip=e.nearClip,this.orthoHeight=e.orthoHeight,this.priority=e.priority,this.projection=e.projection,this.rect=e.rect,this.renderTarget=e.renderTarget,this.scissorRect=e.scissorRect,this.sensitivity=e.sensitivity,this.shutter=e.shutter}}class wO{constructor(){this.enabled=!0}}const Ev=["enabled"];class EO extends ht{constructor(e){super(e);h(this,"cameras",[]);this.id="camera",this.ComponentType=Ir,this.DataType=wO,this.schema=Ev,this.on("beforeremove",this.onBeforeRemove,this),this.app.on("prerender",this.onAppPrerender,this)}initializeComponentData(e,s,i){i=["aspectRatio","aspectRatioMode","calculateProjection","calculateTransform","clearColor","clearColorBuffer","clearDepthBuffer","clearStencilBuffer","renderSceneColorMap","renderSceneDepthMap","cullFaces","farClip","flipFaces","fog","fov","frustumCulling","horizontalFov","layers","renderTarget","nearClip","orthoHeight","projection","priority","rect","scissorRect","aperture","shutter","sensitivity","gammaCorrection","toneMapping"];for(let r=0;r<i.length;r++){const a=i[r];if(s.hasOwnProperty(a)){const n=s[a];switch(a){case"rect":case"scissorRect":Array.isArray(n)?e[a]=new oe(n[0],n[1],n[2],n[3]):e[a]=n;break;case"clearColor":Array.isArray(n)?e[a]=new ae(n[0],n[1],n[2],n[3]):e[a]=n;break;default:e[a]=n;break}}}super.initializeComponentData(e,s,["enabled"])}cloneComponent(e,s){const i=e.camera;return this.addComponent(s,{aspectRatio:i.aspectRatio,aspectRatioMode:i.aspectRatioMode,calculateProjection:i.calculateProjection,calculateTransform:i.calculateTransform,clearColor:i.clearColor,clearColorBuffer:i.clearColorBuffer,clearDepthBuffer:i.clearDepthBuffer,clearStencilBuffer:i.clearStencilBuffer,renderSceneDepthMap:i.renderSceneDepthMap,renderSceneColorMap:i.renderSceneColorMap,cullFaces:i.cullFaces,enabled:i.enabled,farClip:i.farClip,flipFaces:i.flipFaces,fov:i.fov,frustumCulling:i.frustumCulling,horizontalFov:i.horizontalFov,layers:i.layers,renderTarget:i.renderTarget,nearClip:i.nearClip,orthoHeight:i.orthoHeight,projection:i.projection,priority:i.priority,rect:i.rect,scissorRect:i.scissorRect,aperture:i.aperture,sensitivity:i.sensitivity,shutter:i.shutter,gammaCorrection:i.gammaCorrection,toneMapping:i.toneMapping})}onBeforeRemove(e,s){this.removeCamera(s),s.onRemove()}onAppPrerender(){for(let e=0,s=this.cameras.length;e<s;e++)this.cameras[e].onAppPrerender()}addCamera(e){this.cameras.push(e),il(this.cameras)}removeCamera(e){const s=this.cameras.indexOf(e);s>=0&&(this.cameras.splice(s,1),il(this.cameras))}destroy(){this.app.off("prerender",this.onAppPrerender,this),super.destroy()}}we._buildAccessors(Ir.prototype,Ev);class bv{constructor(){h(this,"enabled",!0);h(this,"light");h(this,"type","directional");h(this,"color",new ae(1,1,1));h(this,"intensity",1);h(this,"luminance",0);h(this,"shape",qs);h(this,"affectSpecularity",!0);h(this,"castShadows",!1);h(this,"shadowDistance",40);h(this,"shadowIntensity",1);h(this,"shadowResolution",1024);h(this,"shadowBias",.05);h(this,"numCascades",1);h(this,"cascadeBlend",0);h(this,"bakeNumSamples",1);h(this,"bakeArea",0);h(this,"cascadeDistribution",.5);h(this,"normalOffsetBias",0);h(this,"range",10);h(this,"innerConeAngle",40);h(this,"outerConeAngle",45);h(this,"falloffMode",Ep);h(this,"shadowType",Hs);h(this,"vsmBlurSize",11);h(this,"vsmBlurMode",Ap);h(this,"vsmBias",.01*.25);h(this,"cookieAsset",null);h(this,"cookie",null);h(this,"cookieIntensity",1);h(this,"cookieFalloff",!0);h(this,"cookieChannel","rgb");h(this,"cookieAngle",0);h(this,"cookieScale",null);h(this,"cookieOffset",null);h(this,"shadowUpdateMode",Op);h(this,"mask",1);h(this,"affectDynamic",!0);h(this,"affectLightmapped",!1);h(this,"bake",!1);h(this,"bakeDir",!0);h(this,"isStatic",!1);h(this,"layers",[tr]);h(this,"penumbraSize",1);h(this,"penumbraFalloff",1);h(this,"shadowSamples",16);h(this,"shadowBlockerSamples",16)}}const Ro=Object.keys(new bv);class bO extends we{constructor(){super(...arguments);h(this,"_evtLayersChanged",null);h(this,"_evtLayerAdded",null);h(this,"_evtLayerRemoved",null);h(this,"_cookieAsset",null);h(this,"_cookieAssetId",null);h(this,"_cookieAssetAdd",!1);h(this,"_cookieMatrix",null)}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e,function(s,i){this.onSetEnabled(null,i,s)})}get enabled(){return this.data.enabled}set light(e){this._setValue("light",e)}get light(){return this.data.light}set type(e){this._setValue("type",e,function(s,i){this.system.changeType(this,i,s),this.refreshProperties()})}get type(){return this.data.type}set color(e){this._setValue("color",e,function(s,i){this.light.setColor(s)},!0)}get color(){return this.data.color}set intensity(e){this._setValue("intensity",e,function(s,i){this.light.intensity=s})}get intensity(){return this.data.intensity}set luminance(e){this._setValue("luminance",e,function(s,i){this.light.luminance=s})}get luminance(){return this.data.luminance}set shape(e){this._setValue("shape",e,function(s,i){this.light.shape=s})}get shape(){return this.data.shape}set affectSpecularity(e){this._setValue("affectSpecularity",e,function(s,i){this.light.affectSpecularity=s})}get affectSpecularity(){return this.data.affectSpecularity}set castShadows(e){this._setValue("castShadows",e,function(s,i){this.light.castShadows=s})}get castShadows(){return this.data.castShadows}set shadowDistance(e){this._setValue("shadowDistance",e,function(s,i){this.light.shadowDistance=s})}get shadowDistance(){return this.data.shadowDistance}set shadowIntensity(e){this._setValue("shadowIntensity",e,function(s,i){this.light.shadowIntensity=s})}get shadowIntensity(){return this.data.shadowIntensity}set shadowResolution(e){this._setValue("shadowResolution",e,function(s,i){this.light.shadowResolution=s})}get shadowResolution(){return this.data.shadowResolution}set shadowBias(e){this._setValue("shadowBias",e,function(s,i){this.light.shadowBias=-.01*Y.clamp(s,0,1)})}get shadowBias(){return this.data.shadowBias}set numCascades(e){this._setValue("numCascades",e,function(s,i){this.light.numCascades=Y.clamp(Math.floor(s),1,4)})}get numCascades(){return this.data.numCascades}set cascadeBlend(e){this._setValue("cascadeBlend",e,function(s,i){this.light.cascadeBlend=Y.clamp(s,0,1)})}get cascadeBlend(){return this.data.cascadeBlend}set bakeNumSamples(e){this._setValue("bakeNumSamples",e,function(s,i){this.light.bakeNumSamples=Y.clamp(Math.floor(s),1,255)})}get bakeNumSamples(){return this.data.bakeNumSamples}set bakeArea(e){this._setValue("bakeArea",e,function(s,i){this.light.bakeArea=Y.clamp(s,0,180)})}get bakeArea(){return this.data.bakeArea}set cascadeDistribution(e){this._setValue("cascadeDistribution",e,function(s,i){this.light.cascadeDistribution=Y.clamp(s,0,1)})}get cascadeDistribution(){return this.data.cascadeDistribution}set normalOffsetBias(e){this._setValue("normalOffsetBias",e,function(s,i){this.light.normalOffsetBias=Y.clamp(s,0,1)})}get normalOffsetBias(){return this.data.normalOffsetBias}set range(e){this._setValue("range",e,function(s,i){this.light.attenuationEnd=s})}get range(){return this.data.range}set innerConeAngle(e){this._setValue("innerConeAngle",e,function(s,i){this.light.innerConeAngle=s})}get innerConeAngle(){return this.data.innerConeAngle}set outerConeAngle(e){this._setValue("outerConeAngle",e,function(s,i){this.light.outerConeAngle=s})}get outerConeAngle(){return this.data.outerConeAngle}set falloffMode(e){this._setValue("falloffMode",e,function(s,i){this.light.falloffMode=s})}get falloffMode(){return this.data.falloffMode}set shadowType(e){this._setValue("shadowType",e,function(s,i){this.light.shadowType=s})}get shadowType(){return this.data.shadowType}set vsmBlurSize(e){this._setValue("vsmBlurSize",e,function(s,i){this.light.vsmBlurSize=s})}get vsmBlurSize(){return this.data.vsmBlurSize}set vsmBlurMode(e){this._setValue("vsmBlurMode",e,function(s,i){this.light.vsmBlurMode=s})}get vsmBlurMode(){return this.data.vsmBlurMode}set vsmBias(e){this._setValue("vsmBias",e,function(s,i){this.light.vsmBias=Y.clamp(s,0,1)})}get vsmBias(){return this.data.vsmBias}set cookieAsset(e){this._setValue("cookieAsset",e,function(s,i){if(!(this._cookieAssetId&&(s instanceof _e&&s.id===this._cookieAssetId||s===this._cookieAssetId))){if(this.onCookieAssetRemove(),this._cookieAssetId=null,s instanceof _e)this.data.cookieAsset=s.id,this._cookieAssetId=s.id,this.onCookieAssetAdd(s);else if(typeof s=="number"){this._cookieAssetId=s;const r=this.system.app.assets.get(s);r?this.onCookieAssetAdd(r):(this._cookieAssetAdd=!0,this.system.app.assets.on(`add:${this._cookieAssetId}`,this.onCookieAssetAdd,this))}}})}get cookieAsset(){return this.data.cookieAsset}set cookie(e){this._setValue("cookie",e,function(s,i){this.light.cookie=s})}get cookie(){return this.data.cookie}set cookieIntensity(e){this._setValue("cookieIntensity",e,function(s,i){this.light.cookieIntensity=Y.clamp(s,0,1)})}get cookieIntensity(){return this.data.cookieIntensity}set cookieFalloff(e){this._setValue("cookieFalloff",e,function(s,i){this.light.cookieFalloff=s})}get cookieFalloff(){return this.data.cookieFalloff}set cookieChannel(e){this._setValue("cookieChannel",e,function(s,i){this.light.cookieChannel=s})}get cookieChannel(){return this.data.cookieChannel}set cookieAngle(e){this._setValue("cookieAngle",e,function(s,i){if(s!==0||this.cookieScale!==null){this._cookieMatrix||(this._cookieMatrix=new oe);let r=1,a=1;this.cookieScale&&(r=this.cookieScale.x,a=this.cookieScale.y);const n=Math.cos(s*Y.DEG_TO_RAD),o=Math.sin(s*Y.DEG_TO_RAD);this._cookieMatrix.set(n/r,-o/r,o/a,n/a),this.light.cookieTransform=this._cookieMatrix}else this.light.cookieTransform=null})}get cookieAngle(){return this.data.cookieAngle}set cookieScale(e){this._setValue("cookieScale",e,function(s,i){if(s!==null||this.cookieAngle!==0){this._cookieMatrix||(this._cookieMatrix=new oe);const r=s.x,a=s.y,n=Math.cos(this.cookieAngle*Y.DEG_TO_RAD),o=Math.sin(this.cookieAngle*Y.DEG_TO_RAD);this._cookieMatrix.set(n/r,-o/r,o/a,n/a),this.light.cookieTransform=this._cookieMatrix}else this.light.cookieTransform=null},!0)}get cookieScale(){return this.data.cookieScale}set cookieOffset(e){this._setValue("cookieOffset",e,function(s,i){this.light.cookieOffset=s},!0)}get cookieOffset(){return this.data.cookieOffset}set shadowUpdateMode(e){this._setValue("shadowUpdateMode",e,function(s,i){this.light.shadowUpdateMode=s},!0)}get shadowUpdateMode(){return this.data.shadowUpdateMode}set mask(e){this._setValue("mask",e,function(s,i){this.light.mask=s})}get mask(){return this.data.mask}set affectDynamic(e){this._setValue("affectDynamic",e,function(s,i){s?this.light.mask|=gs:this.light.mask&=~gs,this.light.layersDirty()})}get affectDynamic(){return this.data.affectDynamic}set affectLightmapped(e){this._setValue("affectLightmapped",e,function(s,i){s?(this.light.mask|=di,this.bake&&(this.light.mask&=~fi)):(this.light.mask&=~di,this.bake&&(this.light.mask|=fi))})}get affectLightmapped(){return this.data.affectLightmapped}set bake(e){this._setValue("bake",e,function(s,i){s?(this.light.mask|=fi,this.affectLightmapped&&(this.light.mask&=~di)):(this.light.mask&=~fi,this.affectLightmapped&&(this.light.mask|=di)),this.light.layersDirty()})}get bake(){return this.data.bake}set bakeDir(e){this._setValue("bakeDir",e,function(s,i){this.light.bakeDir=s})}get bakeDir(){return this.data.bakeDir}set isStatic(e){this._setValue("isStatic",e,function(s,i){this.light.isStatic=s})}get isStatic(){return this.data.isStatic}set layers(e){this._setValue("layers",e,function(s,i){for(let r=0;r<i.length;r++){const a=this.system.app.scene.layers.getLayerById(i[r]);a&&(a.removeLight(this),this.light.removeLayer(a))}for(let r=0;r<s.length;r++){const a=this.system.app.scene.layers.getLayerById(s[r]);a&&this.enabled&&this.entity.enabled&&(a.addLight(this),this.light.addLayer(a))}})}get layers(){return this.data.layers}set shadowUpdateOverrides(e){this.light.shadowUpdateOverrides=e}get shadowUpdateOverrides(){return this.light.shadowUpdateOverrides}set shadowSamples(e){this.light.shadowSamples=e}get shadowSamples(){return this.light.shadowSamples}set shadowBlockerSamples(e){this.light.shadowBlockerSamples=e}get shadowBlockerSamples(){return this.light.shadowBlockerSamples}set penumbraSize(e){this.light.penumbraSize=e}get penumbraSize(){return this.light.penumbraSize}set penumbraFalloff(e){this.light.penumbraFalloff=e}get penumbraFalloff(){return this.light.penumbraFalloff}_setValue(e,s,i,r){const a=this.data,n=a[e];!r&&n===s||(a[e]=s,i&&i.call(this,s,n))}addLightToLayers(){for(let e=0;e<this.layers.length;e++){const s=this.system.app.scene.layers.getLayerById(this.layers[e]);s&&(s.addLight(this),this.light.addLayer(s))}}removeLightFromLayers(){for(let e=0;e<this.layers.length;e++){const s=this.system.app.scene.layers.getLayerById(this.layers[e]);s&&(s.removeLight(this),this.light.removeLayer(s))}}onLayersChanged(e,s){this.enabled&&this.entity.enabled&&this.addLightToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),s.on("add",this.onLayerAdded,this),s.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)>=0&&this.enabled&&this.entity.enabled&&(e.addLight(this),this.light.addLayer(e))}onLayerRemoved(e){this.layers.indexOf(e.id)>=0&&(e.removeLight(this),this.light.removeLayer(e))}refreshProperties(){for(let e=0;e<Ro.length;e++){const s=Ro[e];this[s]=this[s]}this.enabled&&this.entity.enabled&&this.onEnable()}onCookieAssetSet(){let e=!1;this._cookieAsset.type==="cubemap"&&!this._cookieAsset.loadFaces&&(this._cookieAsset.loadFaces=!0,e=!0),(!this._cookieAsset.resource||e)&&this.system.app.assets.load(this._cookieAsset),this._cookieAsset.resource&&this.onCookieAssetLoad()}onCookieAssetAdd(e){this._cookieAssetId===e.id&&(this._cookieAsset=e,this.light.enabled&&this.onCookieAssetSet(),this._cookieAsset.on("load",this.onCookieAssetLoad,this),this._cookieAsset.on("remove",this.onCookieAssetRemove,this))}onCookieAssetLoad(){!this._cookieAsset||!this._cookieAsset.resource||(this.cookie=this._cookieAsset.resource)}onCookieAssetRemove(){this._cookieAssetId&&(this._cookieAssetAdd&&(this.system.app.assets.off(`add:${this._cookieAssetId}`,this.onCookieAssetAdd,this),this._cookieAssetAdd=!1),this._cookieAsset&&(this._cookieAsset.off("load",this.onCookieAssetLoad,this),this._cookieAsset.off("remove",this.onCookieAssetRemove,this),this._cookieAsset=null),this.cookie=null)}onEnable(){const e=this.system.app.scene,s=e.layers;this.light.enabled=!0,this._evtLayersChanged=e.on("set:layers",this.onLayersChanged,this),s&&(this._evtLayerAdded=s.on("add",this.onLayerAdded,this),this._evtLayerRemoved=s.on("remove",this.onLayerRemoved,this)),this.enabled&&this.entity.enabled&&this.addLightToLayers(),this._cookieAsset&&!this.cookie&&this.onCookieAssetSet()}onDisable(){var i,r,a;const s=this.system.app.scene.layers;this.light.enabled=!1,(i=this._evtLayersChanged)==null||i.off(),this._evtLayersChanged=null,s&&((r=this._evtLayerAdded)==null||r.off(),this._evtLayerAdded=null,(a=this._evtLayerRemoved)==null||a.off(),this._evtLayerRemoved=null),this.removeLightFromLayers()}onRemove(){this.onDisable(),this.light.destroy(),this.cookieAsset=null}}class AO extends ht{constructor(t){super(t),this.id="light",this.ComponentType=bO,this.DataType=bv,this.on("beforeremove",this._onRemoveComponent,this)}initializeComponentData(t,e){const s={...e};s.type||(s.type=t.data.type),t.data.type=s.type,s.layers&&Array.isArray(s.layers)&&(s.layers=s.layers.slice(0)),s.color&&Array.isArray(s.color)&&(s.color=new ae(s.color[0],s.color[1],s.color[2])),s.cookieOffset&&s.cookieOffset instanceof Array&&(s.cookieOffset=new J(s.cookieOffset[0],s.cookieOffset[1])),s.cookieScale&&s.cookieScale instanceof Array&&(s.cookieScale=new J(s.cookieScale[0],s.cookieScale[1])),s.enable&&(console.warn("WARNING: enable: Property is deprecated. Set enabled property instead."),s.enabled=s.enable),s.shape||(s.shape=qs);const i=new rl(this.app.graphicsDevice,this.app.scene.clusteredLightingEnabled);i.type=Bf[s.type],i._node=t.entity,t.data.light=i,super.initializeComponentData(t,s,Ro)}_onRemoveComponent(t,e){e.onRemove()}cloneComponent(t,e){const s=t.light,i=[];let r;for(let a=0;a<Ro.length;a++)r=Ro[a],r!=="light"&&(s[r]&&s[r].clone?i[r]=s[r].clone():i[r]=s[r]);return this.addComponent(e,i)}changeType(t,e,s){e!==s&&(t.light.type=Bf[s])}}const CO=["x","y","z","w"],PO=[void 0,void 0,J,A,oe];function Gn(l,t,e,s){switch(t.type){case"boolean":return!!e;case"number":if(typeof e=="number")return e;if(typeof e=="string"){const i=parseInt(e,10);return isNaN(i)?null:i}else if(typeof e=="boolean")return 0+e;return null;case"json":{const i={};if(Array.isArray(t.schema)){(!e||typeof e!="object")&&(e={});for(let r=0;r<t.schema.length;r++){const a=t.schema[r];if(a.name)if(a.array){i[a.name]=[];const n=Array.isArray(e[a.name])?e[a.name]:[];for(let o=0;o<n.length;o++)i[a.name].push(Gn(l,a,n[o]))}else{const n=e.hasOwnProperty(a.name)?e[a.name]:a.default;i[a.name]=Gn(l,a,n)}}}return i}case"asset":return e instanceof _e?e:typeof e=="number"?l.assets.get(e)||null:typeof e=="string"&&l.assets.get(parseInt(e,10))||null;case"entity":return e instanceof De?e:typeof e=="string"?l.getEntityFromIndex(e):null;case"rgb":case"rgba":if(e instanceof ae)return s instanceof ae?(s.copy(e),s):e.clone();if(e instanceof Array&&e.length>=3&&e.length<=4){for(let i=0;i<e.length;i++)if(typeof e[i]!="number")return null;return s||(s=new ae),s.r=e[0],s.g=e[1],s.b=e[2],s.a=e.length===3?1:e[3],s}else if(typeof e=="string"&&/#(?:[0-9a-f]{2}){3,4}/i.test(e))return s||(s=new ae),s.fromString(e),s;return null;case"vec2":case"vec3":case"vec4":{const i=parseInt(t.type.slice(3),10),r=PO[i];if(e instanceof r)return s instanceof r?(s.copy(e),s):e.clone();if(e instanceof Array&&e.length===i){for(let a=0;a<e.length;a++)if(typeof e[a]!="number")return null;s||(s=new r);for(let a=0;a<i;a++)s[CO[a]]=e[a];return s}return null}case"curve":if(e){let i;if(e instanceof $s||e instanceof ra)i=e.clone();else{const r=e.keys[0]instanceof Array?ra:$s;i=new r(e.keys),i.type=e.type}return i}break}return e}function Av(l,t,e,s){return t.array?e.map((i,r)=>Gn(l,t,i,s?s[r]:null)):Gn(l,t,e,s)}function Cv(l,t,e,s){if(e)for(const i in t){const r=t[i],a=e[i];a!==void 0&&(s[i]=Av(l,r,a,s[i]))}}const pn=class pn{constructor(t){this.scriptType=t,this.index={}}add(t,e){if(this.index[t]){y.warn(`attribute '${t}' is already defined for script type '${this.scriptType.name}'`);return}else if(pn.reservedNames.has(t)){y.warn(`attribute '${t}' is a reserved attribute name`);return}this.index[t]=e,Object.defineProperty(this.scriptType.prototype,t,{get:function(){return this.__attributes[t]},set:function(s){const i="attr",r=`attr:${t}`,a=this.__attributes[t];let n=a;if(a&&e.type!=="json"&&e.type!=="entity"&&a.clone&&(this.hasEvent(i)||this.hasEvent(r))&&(n=a.clone()),e.array){if(this.__attributes[t]=[],s)for(let o=0,c=s.length;o<c;o++)this.__attributes[t].push(Gn(this.app,e,s[o],a?a[o]:null))}else this.__attributes[t]=Gn(this.app,e,s,a);this.fire(i,t,this.__attributes[t],n),this.fire(r,this.__attributes[t],n)}})}remove(t){return this.index[t]?(delete this.index[t],delete this.scriptType.prototype[t],!0):!1}has(t){return!!this.index[t]}get(t){return this.index[t]||null}};h(pn,"assignAttributesToScript",Cv),h(pn,"attributeToValue",Av),h(pn,"reservedNames",new Set(["app","entity","enabled","_enabled","_enabledOld","_destroyed","__attributes","__attributesRaw","__scriptType","__executionOrder","_callbacks","_callbackActive","has","get","on","off","fire","once","hasEvent"]));let ll=pn;const fu="initialize",uu="postInitialize",DO="update",IO="postUpdate",MO="swap";class Jt extends Se{constructor(e){super();h(this,"app");h(this,"entity");h(this,"_enabled");h(this,"_enabledOld");h(this,"_initialized");h(this,"_postInitialized");h(this,"__destroyed");h(this,"__scriptType");h(this,"__executionOrder");this.initScript(e)}set enabled(e){this._enabled=!!e,this.enabled!==this._enabledOld&&(this._enabledOld=this.enabled,this.fire(this.enabled?"enable":"disable"),this.fire("state",this.enabled),!this._initialized&&this.enabled&&(this._initialized=!0,this.fire("preInitialize"),this.initialize&&this.entity.script._scriptMethod(this,fu)),this._initialized&&!this._postInitialized&&this.enabled&&!this.entity.script._beingEnabled&&(this._postInitialized=!0,this.postInitialize&&this.entity.script._scriptMethod(this,uu)))}get enabled(){return this._enabled&&!this._destroyed&&this.entity.script.enabled&&this.entity.enabled}initScript(e){const s=this.constructor;y.assert(e&&e.app&&e.entity,`script [${s.__name}] has missing arguments in constructor`),this.app=e.app,this.entity=e.entity,this._enabled=typeof e.enabled=="boolean"?e.enabled:!0,this._enabledOld=this.enabled,this.__destroyed=!1,this.__scriptType=s,this.__executionOrder=-1}static get scriptName(){return this.__name}}h(Jt,"EVENT_ENABLE","enable"),h(Jt,"EVENT_DISABLE","disable"),h(Jt,"EVENT_STATE","state"),h(Jt,"EVENT_DESTROY","destroy"),h(Jt,"EVENT_ATTR","attr"),h(Jt,"EVENT_ERROR","error"),h(Jt,"__name",null),h(Jt,"__getScriptName",Pv);const LO=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s\/]*)\s*/;function Pv(l){if(typeof l!="function")return;if(l.scriptName)return l.scriptName;if("name"in Function.prototype)return l.name;if(l===Function||l===Function.prototype.constructor)return"Function";const t=`${l}`.match(LO);return t?t[1]:void 0}class Oo extends Jt{constructor(e){super(e);h(this,"__attributes");h(this,"__attributesRaw");this.initScriptType(e)}static get attributes(){return this.hasOwnProperty("__attributes")||(this.__attributes=new ll(this)),this.__attributes}initScript(e){Jt.prototype.initScript.call(this,e),this.__attributes={},this.__attributesRaw=e.attributes||{}}initScriptType(e){this.initScript(e)}__initializeAttributes(e){if(!(!e&&!this.__attributesRaw)){for(const s in this.__scriptType.attributes.index)this.__attributesRaw&&this.__attributesRaw.hasOwnProperty(s)?this[s]=this.__attributesRaw[s]:this.__attributes.hasOwnProperty(s)||(this.__scriptType.attributes.index[s].hasOwnProperty("default")?this[s]=this.__scriptType.attributes.index[s].default:this[s]=null);this.__attributesRaw=null}}static extend(e){for(const s in e)e.hasOwnProperty(s)&&(this.prototype[s]=e[s])}}const RO=l=>l[0].toLowerCase()+l.substring(1);class Ri extends we{constructor(e,s){super(e,s);h(this,"_attributeDataMap",new Map);this._scripts=[],this._updateList=new zh({sortBy:"__executionOrder"}),this._postUpdateList=new zh({sortBy:"__executionOrder"}),this._scriptsIndex={},this._destroyedScripts=[],this._destroyed=!1,this._scriptsData=null,this._oldState=!0,this._enabled=!0,this._beingEnabled=!1,this._isLoopingThroughScripts=!1,this._executionOrder=-1,this.on("set_enabled",this._onSetEnabled,this)}set scripts(e){this._scriptsData=e;for(const s in e){if(!e.hasOwnProperty(s))continue;const i=this._scriptsIndex[s];if(i){if(typeof e[s].enabled=="boolean"&&(i.once("preInitialize",()=>{this.initializeAttributes(i)}),i.enabled=!!e[s].enabled),typeof e[s].attributes=="object"){for(const r in e[s].attributes)if(!ll.reservedNames.has(r)){if(!i.__attributes.hasOwnProperty(r)){const a=this.system.app.scripts.get(s);a&&a.attributes.add(r,{})}i[r]=e[s].attributes[r]}}}else console.log(this.order)}}get scripts(){return this._scripts}set enabled(e){const s=this._enabled;this._enabled=e,this.fire("set","enabled",s,e)}get enabled(){return this._enabled}onEnable(){this._beingEnabled=!0,this._checkState(),this.entity._beingEnabled||this.onPostStateChange(),this._beingEnabled=!1}onDisable(){this._checkState()}onPostStateChange(){const e=this._beginLooping();for(let s=0,i=this.scripts.length;s<i;s++){const r=this.scripts[s];r._initialized&&!r._postInitialized&&r.enabled&&(r._postInitialized=!0,r.postInitialize&&this._scriptMethod(r,uu))}this._endLooping(e)}_beginLooping(){const e=this._isLoopingThroughScripts;return this._isLoopingThroughScripts=!0,e}_endLooping(e){this._isLoopingThroughScripts=e,this._isLoopingThroughScripts||this._removeDestroyedScripts()}_onSetEnabled(e,s,i){this._beingEnabled=!0,this._checkState(),this._beingEnabled=!1}_checkState(){const e=this.enabled&&this.entity.enabled;if(e===this._oldState)return;this._oldState=e,this.fire(e?"enable":"disable"),this.fire("state",e),e?this.system._addComponentToEnabled(this):this.system._removeComponentFromEnabled(this);const s=this._beginLooping();for(let i=0,r=this.scripts.length;i<r;i++){const a=this.scripts[i];a.once("preInitialize",()=>{this.initializeAttributes(a)}),a.enabled=a._enabled}this._endLooping(s)}_onBeforeRemove(){this.fire("remove");const e=this._beginLooping();for(let s=0;s<this.scripts.length;s++){const i=this.scripts[s];i&&this.destroy(i.__scriptType.__name)}this._endLooping(e)}_removeDestroyedScripts(){const e=this._destroyedScripts.length;if(e){for(let s=0;s<e;s++){const i=this._destroyedScripts[s];this._removeScriptInstance(i)}this._destroyedScripts.length=0,this._resetExecutionOrder(0,this._scripts.length)}}_onInitializeAttributes(){for(let e=0,s=this.scripts.length;e<s;e++){const i=this.scripts[e];this.initializeAttributes(i)}}initializeAttributes(e){var s;if(e instanceof Oo)e.__initializeAttributes();else{const i=e.__scriptType.__name,r=this._attributeDataMap.get(i);if(!r)return;const a=(s=this.system.app.scripts)==null?void 0:s.getSchema(i);a||y.warnOnce(`No schema exists for the script '${i}'. A schema must exist for data to be instantiated on the script.`),Cv(this.system.app,a.attributes,r,e)}}_scriptMethod(e,s,i){try{e[s](i)}catch(r){e.enabled=!1,e.hasEvent("error")||(console.warn(`unhandled exception while calling "${s}" for "${e.__scriptType.__name}" script: `,r),console.error(r)),e.fire("error",r,s),this.fire("error",e,r,s)}}_onInitialize(){const e=this._scripts,s=this._beginLooping();for(let i=0,r=e.length;i<r;i++){const a=e[i];!a._initialized&&a.enabled&&(a._initialized=!0,a.initialize&&this._scriptMethod(a,fu))}this._endLooping(s)}_onPostInitialize(){this.onPostStateChange()}_onUpdate(e){const s=this._updateList;if(!s.length)return;const i=this._beginLooping();for(s.loopIndex=0;s.loopIndex<s.length;s.loopIndex++){const r=s.items[s.loopIndex];r.enabled&&this._scriptMethod(r,DO,e)}this._endLooping(i)}_onPostUpdate(e){const s=this._postUpdateList;if(!s.length)return;const i=this._beginLooping();for(s.loopIndex=0;s.loopIndex<s.length;s.loopIndex++){const r=s.items[s.loopIndex];r.enabled&&this._scriptMethod(r,IO,e)}this._endLooping(i)}_insertScriptInstance(e,s,i){s===-1?(this._scripts.push(e),e.__executionOrder=i,e.update&&this._updateList.append(e),e.postUpdate&&this._postUpdateList.append(e)):(this._scripts.splice(s,0,e),e.__executionOrder=s,this._resetExecutionOrder(s+1,i+1),e.update&&this._updateList.insert(e),e.postUpdate&&this._postUpdateList.insert(e))}_removeScriptInstance(e){const s=this._scripts.indexOf(e);return s===-1||(this._scripts.splice(s,1),e.update&&this._updateList.remove(e),e.postUpdate&&this._postUpdateList.remove(e)),s}_resetExecutionOrder(e,s){for(let i=e;i<s;i++)this._scripts[i].__executionOrder=i}_resolveEntityScriptAttribute(e,s,i,r,a,n){if(e.array){const o=i.length;if(!o)return;const c=i.slice();for(let d=0;d<o;d++){const f=c[d]instanceof lt?c[d].getGuid():c[d];n[f]&&(c[d]=r?n[f].getGuid():n[f])}a[s]=c}else{if(i instanceof lt)i=i.getGuid();else if(typeof i!="string")return;n[i]&&(a[s]=n[i])}}has(e){if(typeof e=="string")return!!this._scriptsIndex[e];if(!e)return!1;const s=e,i=s.__name,r=this._scriptsIndex[i];return(r&&r.instance)instanceof s}get(e){if(typeof e=="string"){const n=this._scriptsIndex[e];return n?n.instance:null}if(!e)return null;const s=e,i=s.__name,r=this._scriptsIndex[i],a=r&&r.instance;return a instanceof s?a:null}create(e,s={}){const i=this;let r=e,a=e;if(typeof r=="string")r=this.system.app.scripts.get(r);else if(r){const n=Pv(r),o=RO(n);!(r.prototype instanceof Oo)&&!r.scriptName&&y.warnOnce(`The Script class "${n}" must have a static "scriptName" property: \`${n}.scriptName = "${o}";\`. This will be an error in future versions of PlayCanvas.`),r.__name??(r.__name=r.scriptName??o),a=r.__name}if(r){if(!this._scriptsIndex[a]||!this._scriptsIndex[a].instance){const n=new r({app:this.system.app,entity:this.entity,enabled:s.hasOwnProperty("enabled")?s.enabled:!0,attributes:s.attributes||{}});s.properties&&typeof s.properties=="object"&&Object.assign(n,s.properties),n instanceof Oo||this._attributeDataMap.set(a,s.attributes);const o=this._scripts.length;let c=-1;return typeof s.ind=="number"&&s.ind!==-1&&o>s.ind&&(c=s.ind),this._insertScriptInstance(n,c,o),this._scriptsIndex[a]={instance:n,onSwap:function(){i.swap(a)}},this[a]=n,s.preloading||this.initializeAttributes(n),this.fire("create",a,n),this.fire(`create:${a}`,n),this.system.app.scripts.on(`swap:${a}`,this._scriptsIndex[a].onSwap),s.preloading||(n.enabled&&!n._initialized&&(n._initialized=!0,n.initialize&&this._scriptMethod(n,fu)),n.enabled&&!n._postInitialized&&(n._postInitialized=!0,n.postInitialize&&this._scriptMethod(n,uu))),n}y.warn(`script '${a}' is already added to entity '${this.entity.name}'`)}else this._scriptsIndex[a]={awaiting:!0,ind:this._scripts.length},y.warn(`script '${a}' is not found, awaiting it to be added to registry`);return null}destroy(e){let s=e,i=e;typeof i=="string"?i=this.system.app.scripts.get(i):i&&(s=i.__name);const r=this._scriptsIndex[s];if(delete this._scriptsIndex[s],!r)return!1;this._attributeDataMap.delete(s);const a=r.instance;if(a&&!a._destroyed)if(a.enabled=!1,a._destroyed=!0,this._isLoopingThroughScripts)this._destroyedScripts.push(a);else{const n=this._removeScriptInstance(a);n>=0&&this._resetExecutionOrder(n,this._scripts.length)}return this.system.app.scripts.off(`swap:${s}`,r.onSwap),delete this[s],this.fire("destroy",s,a||null),this.fire(`destroy:${s}`,a||null),a&&a.fire("destroy"),!0}swap(e){let s=e,i=e;typeof i=="string"?i=this.system.app.scripts.get(i):i&&(s=i.__name);const r=this._scriptsIndex[s];if(!r||!r.instance)return!1;const a=r.instance,n=this._scripts.indexOf(a),o=new i({app:this.system.app,entity:this.entity,enabled:a.enabled,attributes:a.__attributes});return o.swap?(this.initializeAttributes(o),this._scripts[n]=o,this._scriptsIndex[s].instance=o,this[s]=o,o.__executionOrder=n,a.update&&this._updateList.remove(a),a.postUpdate&&this._postUpdateList.remove(a),o.update&&this._updateList.insert(o),o.postUpdate&&this._postUpdateList.insert(o),this._scriptMethod(o,MO,a),this.fire("swap",s,o),this.fire(`swap:${s}`,o),!0):!1}resolveDuplicatedEntityReferenceProperties(e,s){var r,a,n;const i=this.entity.script;for(const o in e._scriptsIndex){const c=this.system.app.scripts.get(o);if(!c)continue;const d=e._scriptsIndex[o];if(!d||!d.instance)continue;const f=i[o].__attributesRaw??i._attributeDataMap.get(o),u=i[o].__attributes;if(!f&&!u)continue;const p=!!f,m=d.instance.__attributes??i._attributeDataMap.get(o);for(const _ in m){if(!m[_])continue;const S=((r=c.attributes)==null?void 0:r.get(_))??((n=(a=this.system.app.scripts.getSchema(o))==null?void 0:a.attributes)==null?void 0:n[_]);if(S){if(S.type==="entity")this._resolveEntityScriptAttribute(S,_,m[_],p,f||u,s);else if(S.type==="json"&&Array.isArray(S.schema)){const g=m[_],v=f?f[_]:u[_];for(let w=0;w<S.schema.length;w++){const x=S.schema[w];if(x.type==="entity")if(S.array)for(let b=0;b<g.length;b++)this._resolveEntityScriptAttribute(x,x.name,g[b][x.name],p,v[b],s);else this._resolveEntityScriptAttribute(x,x.name,g[x.name],p,v,s)}}}}}}move(e,s){const i=this._scripts.length;if(s>=i||s<0)return!1;let r=e,a=e;typeof a!="string"?a=e.__name:r=null;const n=this._scriptsIndex[a];if(!n||!n.instance)return!1;const o=n.instance;if(r&&!(o instanceof r))return!1;const c=this._scripts.indexOf(o);return c===-1||c===s?!1:(this._scripts.splice(s,0,this._scripts.splice(c,1)[0]),this._resetExecutionOrder(0,i),this._updateList.sort(),this._postUpdateList.sort(),this.fire("move",a,o,s,c),this.fire(`move:${a}`,o,s,c),!0)}}h(Ri,"EVENT_CREATE","create"),h(Ri,"EVENT_DESTROY","destroy"),h(Ri,"EVENT_ENABLE","enable"),h(Ri,"EVENT_DISABLE","disable"),h(Ri,"EVENT_REMOVE","remove"),h(Ri,"EVENT_STATE","state"),h(Ri,"EVENT_MOVE","move"),h(Ri,"EVENT_ERROR","error");class OO{constructor(){this.enabled=!0}}const FO="_onInitializeAttributes",NO="_onInitialize",kO="_onPostInitialize",UO="_onUpdate",BO="_onPostUpdate";let _h=0;class zO extends ht{constructor(t){super(t),this.id="script",this.ComponentType=Ri,this.DataType=OO,this._components=new zh({sortBy:"_executionOrder"}),this._enabledComponents=new zh({sortBy:"_executionOrder"}),this.preloading=!0,this.on("beforeremove",this._onBeforeRemove,this),this.app.systems.on("initialize",this._onInitialize,this),this.app.systems.on("postInitialize",this._onPostInitialize,this),this.app.systems.on("update",this._onUpdate,this),this.app.systems.on("postUpdate",this._onPostUpdate,this)}initializeComponentData(t,e){if(t._executionOrder=_h++,this._components.append(t),_h>Number.MAX_SAFE_INTEGER&&this._resetExecutionOrder(),t.enabled=e.hasOwnProperty("enabled")?!!e.enabled:!0,t.enabled&&t.entity.enabled&&this._enabledComponents.append(t),e.hasOwnProperty("order")&&e.hasOwnProperty("scripts")){t._scriptsData=e.scripts;for(let s=0;s<e.order.length;s++)t.create(e.order[s],{enabled:e.scripts[e.order[s]].enabled,attributes:e.scripts[e.order[s]].attributes,preloading:this.preloading})}}cloneComponent(t,e){var a;const s=[],i={};for(let n=0;n<t.script._scripts.length;n++){const o=t.script._scripts[n],c=o.__scriptType.__name;s.push(c);const d=((a=t.script._attributeDataMap)==null?void 0:a.get(c))||{};for(const f in o.__attributes)d[f]=o.__attributes[f];i[c]={enabled:o._enabled,attributes:d}}for(const n in t.script._scriptsIndex)n.awaiting&&s.splice(n.ind,0,n);const r={enabled:t.script.enabled,order:s,scripts:i};return this.addComponent(e,r)}_resetExecutionOrder(){_h=0;for(let t=0,e=this._components.length;t<e;t++)this._components.items[t]._executionOrder=_h++}_callComponentMethod(t,e,s){for(t.loopIndex=0;t.loopIndex<t.length;t.loopIndex++)t.items[t.loopIndex][e](s)}_onInitialize(){this.preloading=!1,this._callComponentMethod(this._components,FO),this._callComponentMethod(this._enabledComponents,NO)}_onPostInitialize(){this._callComponentMethod(this._enabledComponents,kO)}_onUpdate(t){this._callComponentMethod(this._enabledComponents,UO,t)}_onPostUpdate(t){this._callComponentMethod(this._enabledComponents,BO,t)}_addComponentToEnabled(t){this._enabledComponents.insert(t)}_removeComponentFromEnabled(t){this._enabledComponents.remove(t)}_onBeforeRemove(t,e){this._components.items.indexOf(e)>=0&&e._onBeforeRemove(),this._removeComponentFromEnabled(e),this._components.remove(e)}destroy(){super.destroy(),this.app.systems.off("initialize",this._onInitialize,this),this.app.systems.off("postInitialize",this._onPostInitialize,this),this.app.systems.off("update",this._onUpdate,this),this.app.systems.off("postUpdate",this._onPostUpdate,this)}}class Dv extends we{constructor(e,s){super(e,s);h(this,"_layers",[tr]);h(this,"_instance",null);h(this,"_materialTmp",null);h(this,"_highQualitySH",!0);h(this,"_customAabb",null);h(this,"_assetReference");h(this,"_evtLayersChanged",null);h(this,"_evtLayerAdded",null);h(this,"_evtLayerRemoved",null);h(this,"_castShadows",!1);this._assetReference=new ol("asset",this,e.app.assets,{add:this._onGSplatAssetAdded,load:this._onGSplatAssetLoad,remove:this._onGSplatAssetRemove,unload:this._onGSplatAssetUnload},this),s.on("remove",this.onRemoveChild,this),s.on("removehierarchy",this.onRemoveChild,this),s.on("insert",this.onInsertChild,this),s.on("inserthierarchy",this.onInsertChild,this)}set customAabb(e){var s,i;this._customAabb=e,(i=(s=this._instance)==null?void 0:s.meshInstance)==null||i.setCustomAabb(this._customAabb)}get customAabb(){return this._customAabb}set instance(e){if(this.destroyInstance(),this._instance=e,this._instance){const s=this._instance.meshInstance;s.node||(s.node=this.entity),s.castShadow=this._castShadows,s.setCustomAabb(this._customAabb),this.enabled&&this.entity.enabled&&this.addToLayers()}}get instance(){return this._instance}set material(e){this._instance?this._instance.material=e:this._materialTmp=e}get material(){var e;return((e=this._instance)==null?void 0:e.material)??this._materialTmp??null}set highQualitySH(e){e!==this._highQualitySH&&(this._highQualitySH=e,this._instance&&this._instance.setHighQualitySH(e))}get highQualitySH(){return this._highQualitySH}set castShadows(e){var s;if(this._castShadows!==e){const i=(s=this.instance)==null?void 0:s.meshInstance;if(i){const r=this.layers,a=this.system.app.scene;if(this._castShadows&&!e)for(let n=0;n<r.length;n++){const o=a.layers.getLayerById(this.layers[n]);o&&o.removeShadowCasters([i])}if(i.castShadow=e,!this._castShadows&&e)for(let n=0;n<r.length;n++){const o=a.layers.getLayerById(r[n]);o&&o.addShadowCasters([i])}}this._castShadows=e}}get castShadows(){return this._castShadows}set layers(e){this.removeFromLayers(),this._layers.length=0;for(let s=0;s<e.length;s++)this._layers[s]=e[s];!this.enabled||!this.entity.enabled||this.addToLayers()}get layers(){return this._layers}set asset(e){const s=e instanceof _e?e.id:e;this._assetReference.id!==s&&(this._assetReference.asset&&this._assetReference.asset.resource&&this._onGSplatAssetRemove(),this._assetReference.id=s,this._assetReference.asset&&this._onGSplatAssetAdded())}get asset(){return this._assetReference.id}destroyInstance(){var e;this._instance&&(this.removeFromLayers(),(e=this._instance)==null||e.destroy(),this._instance=null)}addToLayers(){var s,i;const e=(s=this.instance)==null?void 0:s.meshInstance;if(e){const r=this.system.app.scene.layers;for(let a=0;a<this._layers.length;a++)(i=r.getLayerById(this._layers[a]))==null||i.addMeshInstances([e])}}removeFromLayers(){var s,i;const e=(s=this.instance)==null?void 0:s.meshInstance;if(e){const r=this.system.app.scene.layers;for(let a=0;a<this._layers.length;a++)(i=r.getLayerById(this._layers[a]))==null||i.removeMeshInstances([e])}}onRemoveChild(){this.removeFromLayers()}onInsertChild(){this._instance&&this.enabled&&this.entity.enabled&&this.addToLayers()}onRemove(){this.destroyInstance(),this.asset=null,this._assetReference.id=null,this.entity.off("remove",this.onRemoveChild,this),this.entity.off("insert",this.onInsertChild,this)}onLayersChanged(e,s){this.addToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),s.on("add",this.onLayerAdded,this),s.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||this._instance&&e.addMeshInstances(this._instance.meshInstance)}onLayerRemoved(e){this.layers.indexOf(e.id)<0||this._instance&&e.removeMeshInstances(this._instance.meshInstance)}onEnable(){const e=this.system.app.scene,s=e.layers;this._evtLayersChanged=e.on("set:layers",this.onLayersChanged,this),s&&(this._evtLayerAdded=s.on("add",this.onLayerAdded,this),this._evtLayerRemoved=s.on("remove",this.onLayerRemoved,this)),this._instance?this.addToLayers():this.asset&&this._onGSplatAssetAdded()}onDisable(){var i,r,a;const s=this.system.app.scene.layers;(i=this._evtLayersChanged)==null||i.off(),this._evtLayersChanged=null,s&&((r=this._evtLayerAdded)==null||r.off(),this._evtLayerAdded=null,(a=this._evtLayerRemoved)==null||a.off(),this._evtLayerRemoved=null),this.removeFromLayers()}hide(){this._instance&&(this._instance.meshInstance.visible=!1)}show(){this._instance&&(this._instance.meshInstance.visible=!0)}_onGSplatAssetAdded(){this._assetReference.asset&&(this._assetReference.asset.resource?this._onGSplatAssetLoad():this.enabled&&this.entity.enabled&&this.system.app.assets.load(this._assetReference.asset))}_onGSplatAssetLoad(){this.destroyInstance();const e=this._assetReference.asset;e&&(this.instance=e.resource.createInstance(e.resource,{material:this._materialTmp,highQualitySH:this._highQualitySH}),this._materialTmp=null,this.customAabb=this.instance.resource.aabb.clone())}_onGSplatAssetUnload(){this.destroyInstance()}_onGSplatAssetRemove(){this._onGSplatAssetUnload()}}class VO{constructor(){this.enabled=!0}}const pu=["enabled"],go=["castShadows","material","highQualitySH","asset","layers"];class GO extends ht{constructor(t){super(t),this.id="gsplat",this.ComponentType=Dv,this.DataType=VO,this.schema=pu,this.on("beforeremove",this.onRemove,this)}initializeComponentData(t,e,s){e.layers&&e.layers.length&&(e.layers=e.layers.slice(0));for(let i=0;i<go.length;i++)e.hasOwnProperty(go[i])&&(t[go[i]]=e[go[i]]);e.aabbCenter&&e.aabbHalfExtents&&(t.customAabb=new Me(new A(e.aabbCenter),new A(e.aabbHalfExtents))),super.initializeComponentData(t,e,pu)}cloneComponent(t,e){const s=t.gsplat,i={};go.forEach(a=>{a==="material"?i[a]=s[a].clone():i[a]=s[a]}),i.enabled=s.enabled;const r=this.addComponent(e,i);return s.customAabb&&(r.customAabb=s.customAabb.clone()),r}onRemove(t,e){e.onRemove()}}we._buildAccessors(Dv.prototype,pu);class Kp extends Se{constructor(){super(...arguments);h(this,"_meshes",null)}set meshes(e){this.decRefMeshes(),this._meshes=e,this.incRefMeshes(),this.fire("set:meshes",e)}get meshes(){return this._meshes}destroy(){this.meshes=null}decRefMeshes(){var e;(e=this._meshes)==null||e.forEach((s,i)=>{s&&(s.decRefCount(),s.refCount<1&&(s.destroy(),this._meshes[i]=null))})}incRefMeshes(){var e;(e=this._meshes)==null||e.forEach(s=>{s==null||s.incRefCount()})}}h(Kp,"EVENT_SETMESHES","set:meshes");function Fh(l){const t=this;if(!t.resource)return;const e=l.resource,s=e.renders&&e.renders[t.data.renderIndex];s&&(t.resource.meshes=s.resource.meshes)}function Ig(l){const t=this;t.registry.off(`load:${l.id}`,Fh,t),t.registry.on(`load:${l.id}`,Fh,t),t.registry.off(`remove:${l.id}`,Mg,t),t.registry.once(`remove:${l.id}`,Mg,t),l.resource?Fh.call(t,l):t.registry.load(l)}function Mg(l){const t=this;t.registry.off(`load:${l.id}`,Fh,t),t.resource&&t.resource.destroy()}class HO extends Qe{constructor(t){super(t,"render"),this._registry=t.assets}open(t,e){return new Kp}patch(t,e){if(!t.data.containerAsset)return;const s=e.get(t.data.containerAsset);if(!s){e.once(`add:${t.data.containerAsset}`,Ig,t);return}Ig.call(t,s)}}class Iv{constructor(t,e,s,i){this._paths=t,this._input=e,this._output=s,this._interpolation=i}get paths(){return this._paths}get input(){return this._input}get output(){return this._output}get interpolation(){return this._interpolation}}class pc{constructor(t,e){this._components=t,this._data=e}get components(){return this._components}get data(){return this._data}}function WO(l,t){let e;const r=(p,m)=>{switch(m){case e.DT_INT8:return new Int8Array(p.buffer,p.byteOffset,p.byteLength);case e.DT_INT16:return new Int16Array(p.buffer,p.byteOffset,p.byteLength/2);case e.DT_INT32:return new Int32Array(p.buffer,p.byteOffset,p.byteLength/4);case e.DT_UINT8:return new Uint8Array(p.buffer,p.byteOffset,p.byteLength);case e.DT_UINT16:return new Uint16Array(p.buffer,p.byteOffset,p.byteLength/2);case e.DT_UINT32:return new Uint32Array(p.buffer,p.byteOffset,p.byteLength/4);case e.DT_FLOAT32:return new Float32Array(p.buffer,p.byteOffset,p.byteLength/4)}return null},a=p=>{switch(p){case e.DT_INT8:return 1;case e.DT_INT16:return 2;case e.DT_INT32:return 4;case e.DT_UINT8:return 1;case e.DT_UINT16:return 2;case e.DT_UINT32:return 4;case e.DT_FLOAT32:return 4}return 1},n=p=>p.num_components()*a(p.data_type()),o={0:0,1:1,5:2,2:3,7:4,8:5,4:6,3:7},c=(p,m)=>{const _=(F,k,H)=>{F[0]=k[0]-H[0],F[1]=k[1]-H[1],F[2]=k[2]-H[2]},S=(F,k,H)=>{F[0]=k[1]*H[2]-H[1]*k[2],F[1]=k[2]*H[0]-H[2]*k[0],F[2]=k[0]*H[1]-H[0]*k[1]},g=(F,k)=>{const H=F[k+0],G=F[k+1],W=F[k+2],R=1/Math.sqrt(H*H+G*G+W*W);F[k+0]*=R,F[k+1]*=R,F[k+2]*=R},v=(F,k,H)=>{for(let G=0;G<3;++G)F[G]=k[H+G]},w=m.length/3,x=p.length/3,b=new Float32Array(p.length),C=[0,0,0],D=[0,0,0],T=[0,0,0],I=[0,0,0],L=[0,0,0],E=[0,0,0];for(let F=0;F<w;++F){const k=m[F*3+0]*3,H=m[F*3+1]*3,G=m[F*3+2]*3;v(C,p,k),v(D,p,H),v(T,p,G),_(I,D,C),_(L,T,C),S(E,I,L),g(E,0);for(let W=0;W<3;++W)b[k+W]+=E[W],b[H+W]+=E[W],b[G+W]+=E[W]}for(let F=0;F<x;++F)g(b,F*3);return new Uint8Array(b.buffer)},d=p=>{const m={},_=new e.DecoderBuffer;_.Init(p,p.length);const S=new e.Decoder;if(S.GetEncodedGeometryType(_)!==e.TRIANGULAR_MESH)return m.error="Failed to decode draco mesh: not a mesh",m;const g=new e.Mesh,v=S.DecodeBufferToMesh(_,g);if(!v||!v.ok()||e.getPointer(g)===0)return m.error="Failed to decode draco asset",m;const w=g.num_faces()*3,x=g.num_points()<=65535,b=w*(x?2:4),C=e._malloc(b);x?(S.GetTrianglesUInt16Array(g,b,C),m.indices=new Uint16Array(e.HEAPU16.buffer,C,w).slice().buffer):(S.GetTrianglesUInt32Array(g,b,C),m.indices=new Uint32Array(e.HEAPU32.buffer,C,w).slice().buffer),e._free(C);const D=[];for(let k=0;k<g.num_attributes();++k)D.push(S.GetAttribute(g,k));D.sort((k,H)=>(o[k.attribute_type()]??o.length)-(o[H.attribute_type()]??o.length)),m.attributes=D.map(k=>k.unique_id());let T=0;const I=D.map(k=>{const H=T;return T+=Math.ceil(n(k)/4)*4,H}),L=D.some(k=>k.attribute_type()===1),E=I[1];if(!L){for(let k=1;k<I.length;++k)I[k]+=12;T+=12}m.vertices=new ArrayBuffer(g.num_points()*T);const F=new Uint8Array(m.vertices);for(let k=0;k<g.num_attributes();++k){const H=D[k],G=n(H),W=g.num_points()*G,R=e._malloc(W);S.GetAttributeDataArrayForAllPoints(g,H,H.data_type(),W,R);const B=new Uint8Array(e.HEAPU8.buffer,R,W);for(let V=0;V<g.num_points();++V)for(let O=0;O<G;++O)F[V*T+I[k]+O]=B[V*G+O];if(!L&&H.attribute_type()===0){const V=c(r(B,H.data_type()),x?new Uint16Array(m.indices):new Uint32Array(m.indices));for(let O=0;O<g.num_points();++O)for(let M=0;M<12;++M)F[O*T+E+M]=V[O*12+M]}e._free(R)}return e.destroy(g),e.destroy(S),e.destroy(_),m},f=p=>{const m=d(new Uint8Array(p.buffer));self.postMessage({jobId:p.jobId,error:m.error,indices:m.indices,vertices:m.vertices,attributes:m.attributes},[m.indices,m.vertices].filter(_=>_!=null))},u=[];self.onmessage=p=>{const m=p.data;switch(m.type){case"init":self.DracoDecoderModule({instantiateWasm:(_,S)=>(WebAssembly.instantiate(m.module,_).then(g=>S(g)).catch(g=>console.error(`instantiate failed + ${g}`)),{})}).then(_=>{e=_,u.forEach(S=>f(S))});break;case"decodeMesh":e?f(m):u.push(m);break}}}const Lg=3;class $O{constructor(){this.workers=[[],[],[]],this.jobId=0,this.jobQueue=[],this.jobCallbacks=new Map,this.run=(t,e)=>{t.postMessage({type:"decodeMesh",jobId:e.jobId,buffer:e.buffer},[e.buffer])}}init(t){for(t.forEach(e=>{e.addEventListener("message",s=>{const i=s.data,r=this.jobCallbacks.get(i.jobId);if(r&&r(i.error,{indices:i.indices,vertices:i.vertices,attributes:i.attributes}),this.jobCallbacks.delete(i.jobId),this.jobQueue.length>0){const a=this.jobQueue.shift();this.run(e,a)}else{const a=this.workers[2].indexOf(e);if(a!==-1)this.workers[2].splice(a,1),this.workers[1].push(e);else{const n=this.workers[1].indexOf(e);n!==-1?(this.workers[1].splice(n,1),this.workers[0].push(e)):y.error("logical error")}}})}),this.workers[0]=t;this.jobQueue.length&&(this.workers[0].length||this.workers[1].length);){const e=this.jobQueue.shift();if(this.workers[0].length>0){const s=this.workers[0].shift();this.workers[1].push(s),this.run(s,e)}else{const s=this.workers[1].shift();this.workers[2].push(s),this.run(s,e)}}}enqueueJob(t,e){const s={jobId:this.jobId++,buffer:t};if(this.jobCallbacks.set(s.jobId,e),this.workers[0].length>0){const i=this.workers[0].shift();this.workers[1].push(i),this.run(i,s)}else if(this.workers[1].length>0){const i=this.workers[1].shift();this.workers[2].push(i),this.run(i,s)}else this.jobQueue.push(s)}}const XO=l=>new Promise((t,e)=>{const s={cache:!0,responseType:"text",retry:Lg>0,maxRetries:Lg};ot.get(l,s,(i,r)=>{i?e(i):t(r)})}),qO=l=>{const t=()=>fetch(l).then(s=>s.arrayBuffer()).then(s=>WebAssembly.compile(s)),e=()=>WebAssembly.compileStreaming(fetch(l)).catch(s=>(y.warn(`compileStreaming() failed for ${l} (${s}), falling back to arraybuffer download.`),t()));return WebAssembly.compileStreaming?e():t()},Rg=1;let Nh;const jO=l=>{if(Nh)return!0;if(!l){const t=rS.getConfig("DracoDecoderModule");t?l={jsUrl:t.glueUrl,wasmUrl:t.wasmUrl,numWorkers:t.numWorkers}:l={jsUrl:"draco.wasm.js",wasmUrl:"draco.wasm.wasm",numWorkers:Rg}}return!l.jsUrl||!l.wasmUrl?!1:(Nh=new $O,Promise.all([XO(l.jsUrl),qO(l.wasmUrl)]).then(([t,e])=>{const s=["/* draco */",t,"/* worker */",`(
${WO.toString()}
)()

`].join(`
`),i=new Blob([s],{type:"application/javascript"}),r=URL.createObjectURL(i),a=Math.max(1,Math.min(16,l.numWorkers||Rg)),n=[];for(let o=0;o<a;++o){const c=new Worker(r);c.postMessage({type:"init",module:e}),n.push(c)}Nh.init(n)}),!0)},YO=(l,t)=>jO()?(Nh.enqueueJob(l,t),!0):!1;class KO{constructor(){h(this,"gltf");h(this,"nodes");h(this,"scenes");h(this,"animations");h(this,"textures");h(this,"materials");h(this,"variants");h(this,"meshVariants");h(this,"meshDefaultMaterials");h(this,"renders");h(this,"skins");h(this,"lights");h(this,"cameras");h(this,"nodeInstancingMap")}destroy(){this.renders&&this.renders.forEach(t=>{t.meshes=null})}}const Mv=l=>/^data:[^\n\r,\u2028\u2029]*,.*$/i.test(l),ZO=l=>l.substring(l.indexOf(":")+1,l.indexOf(";")),hl=l=>{switch(l){case"SCALAR":return 1;case"VEC2":return 2;case"VEC3":return 3;case"VEC4":return 4;case"MAT2":return 4;case"MAT3":return 9;case"MAT4":return 16;default:return 3}},hd=l=>{switch(l){case 5120:return Wc;case 5121:return na;case 5122:return $c;case 5123:return yl;case 5124:return MS;case 5125:return Wo;case 5126:return ze;default:return 0}},QO=l=>{switch(l){case 5120:return 1;case 5121:return 1;case 5122:return 2;case 5123:return 2;case 5124:return 4;case 5125:return 4;case 5126:return 4;default:return 0}},JO=l=>{switch(l){case 5120:return Int8Array;case 5121:return Uint8Array;case 5122:return Int16Array;case 5123:return Uint16Array;case 5124:return Int32Array;case 5125:return Uint32Array;case 5126:return Float32Array;default:return null}},mc={POSITION:Ae,NORMAL:_s,TANGENT:yi,COLOR_0:Ht,JOINTS_0:fs,WEIGHTS_0:gi,TEXCOORD_0:ts,TEXCOORD_1:wa,TEXCOORD_2:ul,TEXCOORD_3:pl,TEXCOORD_4:ml,TEXCOORD_5:_l,TEXCOORD_6:gl,TEXCOORD_7:Sl},Og={[Ae]:0,[_s]:1,[yi]:2,[Ht]:3,[fs]:4,[gi]:5,[ts]:6,[wa]:7,[ul]:8,[pl]:9,[ml]:10,[_l]:11,[gl]:12,[Sl]:13},eF=l=>{switch(l){case Wc:return t=>Math.max(t/127,-1);case na:return t=>t/255;case $c:return t=>Math.max(t/32767,-1);case yl:return t=>t/65535;default:return t=>t}},mu=(l,t,e)=>{const s=eF(e),i=t.length;for(let r=0;r<i;++r)l[r]=s(t[r]);return l},da=(l,t,e=!1)=>{const s=hl(l.type),i=JO(l.componentType);if(!i)return null;let r;if(l.sparse){const a=l.sparse,n={count:a.count,type:"SCALAR"},o=da(Object.assign(n,a.indices),t,!0),c={count:a.count,type:l.type,componentType:l.componentType},d=da(Object.assign(c,a.values),t,!0);if(l.hasOwnProperty("bufferView")){const f={bufferView:l.bufferView,byteOffset:l.byteOffset,componentType:l.componentType,count:l.count,type:l.type};r=da(f,t,!0).slice()}else r=new i(l.count*s);for(let f=0;f<a.count;++f){const u=o[f];for(let p=0;p<s;++p)r[u*s+p]=d[f*s+p]}}else if(l.hasOwnProperty("bufferView")){const a=t[l.bufferView];if(e&&a.hasOwnProperty("byteStride")){const n=s*i.BYTES_PER_ELEMENT,o=new ArrayBuffer(l.count*n),c=new Uint8Array(o);let d=0;for(let f=0;f<l.count;++f){let u=(l.byteOffset||0)+f*a.byteStride;for(let p=0;p<n;++p)c[d++]=a[u++]}r=new i(o)}else r=new i(a.buffer,a.byteOffset+(l.byteOffset||0),l.count*s)}else r=new i(l.count*s);return r},wn=(l,t)=>{const e=da(l,t,!0);if(e instanceof Float32Array||!l.normalized)return e;const s=new Float32Array(e.length);return mu(s,e,hd(l.componentType)),s},_u=l=>{let t=l.min,e=l.max;if(!t||!e)return null;if(l.normalized){const s=hd(l.componentType);t=mu([],t,s),e=mu([],e,s)}return new Me(new A((e[0]+t[0])*.5,(e[1]+t[1])*.5,(e[2]+t[2])*.5),new A((e[0]-t[0])*.5,(e[1]-t[1])*.5,(e[2]-t[2])*.5))},Lv=l=>{if(!l.hasOwnProperty("mode"))return Xs;switch(l.mode){case 0:return Gc;case 1:return Hc;case 2:return bS;case 3:return AS;case 4:return Xs;case 5:return wr;case 6:return aa;default:return Xs}},tF=l=>{const t=new Uint16Array(l);for(let e=0;e<l;e++)t[e]=e;return t},sF=(l,t)=>{const e=l[Ae];if(!e||e.components!==3)return;let s;if(e.size!==e.stride){const n=e.stride/Ao[e.type],o=new Sn[e.type](e.buffer,e.offset,e.count*n);s=new Sn[e.type](e.count*3);for(let c=0;c<e.count;++c)s[c*3+0]=o[c*n+0],s[c*3+1]=o[c*n+1],s[c*3+2]=o[c*n+2]}else s=new Sn[e.type](e.buffer,e.offset,e.count*3);const i=e.count;t||(t=tF(i));const r=zy(s,t),a=new Float32Array(r.length);a.set(r),l[_s]={buffer:a.buffer,size:12,offset:0,stride:12,count:i,components:3,type:ze}},iF=l=>{const t=s=>{const i=[];for(let r=0;r<s._levels.length;++r){let a=[];if(s.cubemap)for(let n=0;n<6;++n)a.push(s._levels[r][n]);else a=s._levels[r];i.push(a)}return i},e=new ge(l.device,l);return e._levels=t(l),e},rF=l=>{const t=new _e(`${l.name}_clone`,l.type,l.file,l.data,l.options);return t.loaded=!0,t.resource=iF(l.resource),l.registry.add(t),t},aF=(l,t)=>{const e=t[Ae];if(!e)return null;const s=e.count,i=[];for(const g in t)if(t.hasOwnProperty(g)){const v={semantic:g,components:t[g].components,type:t[g].type,normalize:!!t[g].normalize};Nt.isElementValid(l,v)||v.components++,i.push(v)}i.sort((g,v)=>Og[g.semantic]-Og[v.semantic]);let r,a,n,o,c,d;const f=new Nt(l,i);let u=!0;for(r=0;r<f.elements.length;++r)if(c=f.elements[r],o=t[c.name],d=o.offset-e.offset,o.buffer!==e.buffer||o.stride!==c.stride||o.size!==c.size||d!==c.offset){u=!1;break}const p=new Is(l,f,s),m=p.lock(),_=new Uint32Array(m);let S;if(u)S=new Uint32Array(e.buffer,e.offset,s*p.format.size/4),_.set(S);else{let g,v;for(r=0;r<p.format.elements.length;++r){c=p.format.elements[r],g=c.stride/4,o=t[c.name],v=o.stride/4,S=new Uint32Array(o.buffer,o.offset,(o.count-1)*v+(o.size+3)/4);let w=0,x=c.offset/4;const b=Math.floor((o.size+3)/4);for(a=0;a<s;++a){for(n=0;n<b;++n)_[x+n]=S[w+n];w+=v,x+=g}}}return p.unlock(),p},nF=(l,t,e,s,i,r)=>{const a={},n=[];for(const d in t)t.hasOwnProperty(d)&&mc.hasOwnProperty(d)&&(a[d]=t[d],n.push(`${d}:${t[d]}`));n.sort();const o=n.join();let c=r[o];if(!c){const d={};for(const f in a){const u=s[t[f]],p=da(u,i),m=i[u.bufferView],_=mc[f],S=hl(u.type)*QO(u.componentType),g=m&&m.hasOwnProperty("byteStride")?m.byteStride:S;d[_]={buffer:p.buffer,size:S,offset:p.byteOffset,stride:g,count:u.count,components:hl(u.type),type:hd(u.componentType),normalize:u.normalized}}d.hasOwnProperty(_s)||sF(d,e),c=aF(l,d),r[o]=c}return c},oF=(l,t,e,s,i,r)=>{let a,n,o;const c=t.joints,d=c.length,f=[];if(t.hasOwnProperty("inverseBindMatrices")){const _=t.inverseBindMatrices,S=da(e[_],s,!0),g=[];for(a=0;a<d;a++){for(n=0;n<16;n++)g[n]=S[a*16+n];o=new ie,o.set(g),f.push(o)}}else for(a=0;a<d;a++)o=new ie,f.push(o);const u=[];for(a=0;a<d;a++)u[a]=i[c[a]].name;const p=u.join("#");let m=r.get(p);return m||(m=new Vy(l,f,u),r.set(p,m)),m},lF=(l,t,e,s,i,r,a)=>{var c;const n=new Ve(l);n.aabb=_u(e[t.attributes.POSITION]);const o=[];for(const[d,f]of Object.entries(t.attributes)){const u=e[f],p=mc[d],m=hd(u.componentType);o.push({semantic:p,components:hl(u.type),type:m,normalize:u.normalized??(p===Ht&&(m===na||m===yl))})}if(a.push(new Promise((d,f)=>{const u=t.extensions.KHR_draco_mesh_compression;YO(s[u.bufferView].slice().buffer,(p,m)=>{var _;if(p)console.log(p),f(p);else{const S={};for(const[D,T]of Object.entries(u.attributes))S[mc[D]]=m.attributes.indexOf(T);o.sort((D,T)=>S[D.semantic]-S[T.semantic]),(_=t.attributes)!=null&&_.NORMAL||o.splice(1,0,{semantic:"NORMAL",components:3,type:ze});const g=new Nt(l,o),v=m.vertices.byteLength/g.size,w=v<=65535?Ki:Tr,x=m.indices.byteLength/(v<=65535?2:4);y.call(()=>{v!==e[t.attributes.POSITION].count&&y.warn("mesh has invalid vertex count"),x!==e[t.indices].count&&y.warn("mesh has invalid index count")});const b=new Is(l,g,v,{data:m.vertices}),C=new Er(l,w,x,ps,m.indices);n.vertexBuffer=b,n.indexBuffer[0]=C,n.primitive[0].type=Lv(t),n.primitive[0].base=0,n.primitive[0].count=C?x:v,n.primitive[0].indexed=!!C,d()}})})),(c=t==null?void 0:t.extensions)!=null&&c.KHR_materials_variants){const d=t.extensions.KHR_materials_variants,f={};d.mappings.forEach(u=>{u.variants.forEach(p=>{f[p]=u.material})}),i[n.id]=f}return r[n.id]=t.material,n},hF=(l,t,e,s,i,r,a,n,o)=>{const c=[];return t.primitives.forEach(d=>{var f;if((f=d.extensions)!=null&&f.KHR_draco_mesh_compression)c.push(lF(l,d,e,s,r,a,o));else{let u=d.hasOwnProperty("indices")?da(e[d.indices],s,!0):null;const p=nF(l,d.attributes,u,e,s,i),m=Lv(d),_=new Ve(l);if(_.vertexBuffer=p,_.primitive[0].type=m,_.primitive[0].base=0,_.primitive[0].indexed=u!==null,u!==null){let g;u instanceof Uint8Array?g=Sf:u instanceof Uint16Array?g=Ki:g=Tr,g===Sf&&l.isWebGPU&&(g=Ki,u=new Uint16Array(u));const v=new Er(l,g,u.length,ps,u);_.indexBuffer[0]=v,_.primitive[0].count=u.length}else _.primitive[0].count=p.numVertices;if(d.hasOwnProperty("extensions")&&d.extensions.hasOwnProperty("KHR_materials_variants")){const g=d.extensions.KHR_materials_variants,v={};g.mappings.forEach(w=>{w.variants.forEach(x=>{v[x]=w.material})}),r[_.id]=v}a[_.id]=d.material;let S=e[d.attributes.POSITION];if(_.aabb=_u(S),d.hasOwnProperty("targets")){const g=[];d.targets.forEach((v,w)=>{const x={};v.hasOwnProperty("POSITION")&&(S=e[v.POSITION],x.deltaPositions=wn(S,s),x.aabb=_u(S)),v.hasOwnProperty("NORMAL")&&(S=e[v.NORMAL],x.deltaNormals=wn(S,s)),t.hasOwnProperty("extras")&&t.extras.hasOwnProperty("targetNames")?x.name=t.extras.targetNames[w]:x.name=w.toString(10),t.hasOwnProperty("weights")&&(x.defaultWeight=t.weights[w]),x.preserveData=n.morphPreserveData,g.push(new ld(x))}),_.morph=new Vp(g,l,{preferHighPrecision:n.morphPreferHighPrecision})}c.push(_)}}),c},Pt=(l,t,e)=>{var o;let s;const i=l.texCoord;if(i)for(s=0;s<e.length;++s)t[`${e[s]}MapUv`]=i;const r=[0,0],a=[1,1],n=(o=l.extensions)==null?void 0:o.KHR_texture_transform;if(n){const c=n.offset||r,d=n.scale||a,f=n.rotation?-n.rotation*Y.RAD_TO_DEG:0,u=new J(d[0],d[1]),p=new J(c[0],1-d[1]-c[1]);for(s=0;s<e.length;++s)t[`${e[s]}MapTiling`]=u,t[`${e[s]}MapOffset`]=p,t[`${e[s]}MapRotation`]=f}},cF=(l,t,e)=>{let s,i;if(l.hasOwnProperty("diffuseFactor")?(s=l.diffuseFactor,t.diffuse.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2)),t.opacity=s[3]):(t.diffuse.set(1,1,1),t.opacity=1),l.hasOwnProperty("diffuseTexture")){const r=l.diffuseTexture;i=e[r.index],t.diffuseMap=i,t.diffuseMapChannel="rgb",t.opacityMap=i,t.opacityMapChannel="a",Pt(r,t,["diffuse","opacity"])}if(t.useMetalness=!1,l.hasOwnProperty("specularFactor")?(s=l.specularFactor,t.specular.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2))):t.specular.set(1,1,1),l.hasOwnProperty("glossinessFactor")?t.gloss=l.glossinessFactor:t.gloss=1,l.hasOwnProperty("specularGlossinessTexture")){const r=l.specularGlossinessTexture;t.specularMap=t.glossMap=e[r.index],t.specularMapChannel="rgb",t.glossMapChannel="a",Pt(r,t,["gloss","metalness"])}},dF=(l,t,e)=>{if(l.hasOwnProperty("clearcoatFactor")?t.clearCoat=l.clearcoatFactor*.25:t.clearCoat=0,l.hasOwnProperty("clearcoatTexture")){const s=l.clearcoatTexture;t.clearCoatMap=e[s.index],t.clearCoatMapChannel="r",Pt(s,t,["clearCoat"])}if(l.hasOwnProperty("clearcoatRoughnessFactor")?t.clearCoatGloss=l.clearcoatRoughnessFactor:t.clearCoatGloss=0,l.hasOwnProperty("clearcoatRoughnessTexture")){const s=l.clearcoatRoughnessTexture;t.clearCoatGlossMap=e[s.index],t.clearCoatGlossMapChannel="g",Pt(s,t,["clearCoatGloss"])}if(l.hasOwnProperty("clearcoatNormalTexture")){const s=l.clearcoatNormalTexture;t.clearCoatNormalMap=e[s.index],Pt(s,t,["clearCoatNormal"]),s.hasOwnProperty("scale")?t.clearCoatBumpiness=s.scale:t.clearCoatBumpiness=1}t.clearCoatGlossInvert=!0},fF=(l,t,e)=>{t.useLighting=!1,t.emissive.copy(t.diffuse),t.emissiveMap=t.diffuseMap,t.emissiveMapUv=t.diffuseMapUv,t.emissiveMapTiling.copy(t.diffuseMapTiling),t.emissiveMapOffset.copy(t.diffuseMapOffset),t.emissiveMapRotation=t.diffuseMapRotation,t.emissiveMapChannel=t.diffuseMapChannel,t.emissiveVertexColor=t.diffuseVertexColor,t.emissiveVertexColorChannel=t.diffuseVertexColorChannel,t.useLighting=!1,t.useSkybox=!1,t.diffuse.set(1,1,1),t.diffuseMap=null,t.diffuseVertexColor=!1},uF=(l,t,e)=>{if(t.useMetalnessSpecularColor=!0,l.hasOwnProperty("specularColorTexture")&&(t.specularMap=e[l.specularColorTexture.index],t.specularMapChannel="rgb",Pt(l.specularColorTexture,t,["specular"])),l.hasOwnProperty("specularColorFactor")){const s=l.specularColorFactor;t.specular.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2))}else t.specular.set(1,1,1);l.hasOwnProperty("specularFactor")?t.specularityFactor=l.specularFactor:t.specularityFactor=1,l.hasOwnProperty("specularTexture")&&(t.specularityFactorMapChannel="a",t.specularityFactorMap=e[l.specularTexture.index],Pt(l.specularTexture,t,["specularityFactor"]))},pF=(l,t,e)=>{l.hasOwnProperty("ior")&&(t.refractionIndex=1/l.ior)},mF=(l,t,e)=>{l.hasOwnProperty("dispersion")&&(t.dispersion=l.dispersion)},_F=(l,t,e)=>{t.blendType=Ks,t.useDynamicRefraction=!0,l.hasOwnProperty("transmissionFactor")&&(t.refraction=l.transmissionFactor),l.hasOwnProperty("transmissionTexture")&&(t.refractionMapChannel="r",t.refractionMap=e[l.transmissionTexture.index],Pt(l.transmissionTexture,t,["refraction"]))},gF=(l,t,e)=>{if(t.useSheen=!0,l.hasOwnProperty("sheenColorFactor")){const s=l.sheenColorFactor;t.sheen.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2))}else t.sheen.set(1,1,1);l.hasOwnProperty("sheenColorTexture")&&(t.sheenMap=e[l.sheenColorTexture.index],Pt(l.sheenColorTexture,t,["sheen"])),t.sheenGloss=l.hasOwnProperty("sheenRoughnessFactor")?l.sheenRoughnessFactor:0,l.hasOwnProperty("sheenRoughnessTexture")&&(t.sheenGlossMap=e[l.sheenRoughnessTexture.index],t.sheenGlossMapChannel="a",Pt(l.sheenRoughnessTexture,t,["sheenGloss"])),t.sheenGlossInvert=!0},SF=(l,t,e)=>{if(t.blendType=Ks,t.useDynamicRefraction=!0,l.hasOwnProperty("thicknessFactor")&&(t.thickness=l.thicknessFactor),l.hasOwnProperty("thicknessTexture")&&(t.thicknessMap=e[l.thicknessTexture.index],t.thicknessMapChannel="g",Pt(l.thicknessTexture,t,["thickness"])),l.hasOwnProperty("attenuationDistance")&&(t.attenuationDistance=l.attenuationDistance),l.hasOwnProperty("attenuationColor")){const s=l.attenuationColor;t.attenuation.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2))}},yF=(l,t,e)=>{l.hasOwnProperty("emissiveStrength")&&(t.emissiveIntensity=l.emissiveStrength)},vF=(l,t,e)=>{t.useIridescence=!0,l.hasOwnProperty("iridescenceFactor")&&(t.iridescence=l.iridescenceFactor),l.hasOwnProperty("iridescenceTexture")&&(t.iridescenceMapChannel="r",t.iridescenceMap=e[l.iridescenceTexture.index],Pt(l.iridescenceTexture,t,["iridescence"])),l.hasOwnProperty("iridescenceIor")&&(t.iridescenceRefractionIndex=l.iridescenceIor),l.hasOwnProperty("iridescenceThicknessMinimum")&&(t.iridescenceThicknessMin=l.iridescenceThicknessMinimum),l.hasOwnProperty("iridescenceThicknessMaximum")&&(t.iridescenceThicknessMax=l.iridescenceThicknessMaximum),l.hasOwnProperty("iridescenceThicknessTexture")&&(t.iridescenceThicknessMapChannel="g",t.iridescenceThicknessMap=e[l.iridescenceThicknessTexture.index],Pt(l.iridescenceThicknessTexture,t,["iridescenceThickness"]))},xF=(l,t,e)=>{if(t.enableGGXSpecular=!0,l.hasOwnProperty("anisotropyStrength")?t.anisotropyIntensity=l.anisotropyStrength:t.anisotropyIntensity=0,l.hasOwnProperty("anisotropyTexture")){const s=l.anisotropyTexture;t.anisotropyMap=e[s.index],Pt(s,t,["anisotropy"])}l.hasOwnProperty("anisotropyRotation")?t.anisotropyRotation=l.anisotropyRotation*Y.RAD_TO_DEG:t.anisotropyRotation=0},Rv=(l,t)=>{const e=new kt;l.hasOwnProperty("name")&&(e.name=l.name),e.occludeSpecular=rd,e.diffuseVertexColor=!0,e.specularTint=!0,e.specularVertexColor=!0,e.specular.set(1,1,1),e.gloss=1,e.glossInvert=!0,e.useMetalness=!0;let s,i;if(l.hasOwnProperty("pbrMetallicRoughness")){const a=l.pbrMetallicRoughness;if(a.hasOwnProperty("baseColorFactor")&&(s=a.baseColorFactor,e.diffuse.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2)),e.opacity=s[3]),a.hasOwnProperty("baseColorTexture")){const n=a.baseColorTexture;i=t[n.index],e.diffuseMap=i,e.diffuseMapChannel="rgb",e.opacityMap=i,e.opacityMapChannel="a",Pt(n,e,["diffuse","opacity"])}if(a.hasOwnProperty("metallicFactor")&&(e.metalness=a.metallicFactor),a.hasOwnProperty("roughnessFactor")&&(e.gloss=a.roughnessFactor),a.hasOwnProperty("metallicRoughnessTexture")){const n=a.metallicRoughnessTexture;e.metalnessMap=e.glossMap=t[n.index],e.metalnessMapChannel="b",e.glossMapChannel="g",Pt(n,e,["gloss","metalness"])}}if(l.hasOwnProperty("normalTexture")){const a=l.normalTexture;e.normalMap=t[a.index],Pt(a,e,["normal"]),a.hasOwnProperty("scale")&&(e.bumpiness=a.scale)}if(l.hasOwnProperty("occlusionTexture")){const a=l.occlusionTexture;e.aoMap=t[a.index],e.aoMapChannel="r",Pt(a,e,["ao"])}if(l.hasOwnProperty("emissiveFactor")&&(s=l.emissiveFactor,e.emissive.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2))),l.hasOwnProperty("emissiveTexture")){const a=l.emissiveTexture;e.emissiveMap=t[a.index],Pt(a,e,["emissive"])}if(l.hasOwnProperty("alphaMode"))switch(l.alphaMode){case"MASK":e.blendType=Cs,l.hasOwnProperty("alphaCutoff")?e.alphaTest=l.alphaCutoff:e.alphaTest=.5;break;case"BLEND":e.blendType=Ks,e.depthWrite=!1;break;default:case"OPAQUE":e.blendType=Cs;break}else e.blendType=Cs;l.hasOwnProperty("doubleSided")?(e.twoSidedLighting=l.doubleSided,e.cull=l.doubleSided?wt:fa):(e.twoSidedLighting=!1,e.cull=fa);const r={KHR_materials_clearcoat:dF,KHR_materials_emissive_strength:yF,KHR_materials_ior:pF,KHR_materials_dispersion:mF,KHR_materials_iridescence:vF,KHR_materials_pbrSpecularGlossiness:cF,KHR_materials_sheen:gF,KHR_materials_specular:uF,KHR_materials_transmission:_F,KHR_materials_unlit:fF,KHR_materials_volume:SF,KHR_materials_anisotropy:xF};if(l.hasOwnProperty("extensions"))for(const a in l.extensions){const n=r[a];n!==void 0&&n(l.extensions[a],e,t)}return e.update(),e},TF=(l,t,e,s,i,r,a)=>{const n=T=>new pc(hl(T.type),wn(T,s)),o={STEP:Yy,LINEAR:$f,CUBICSPLINE:Xf},c={},d={},f={};let u=1,p;for(p=0;p<l.samplers.length;++p){const T=l.samplers[p];c.hasOwnProperty(T.input)||(c[T.input]=n(e[T.input])),d.hasOwnProperty(T.output)||(d[T.output]=n(e[T.output]));const I=T.hasOwnProperty("interpolation")&&o.hasOwnProperty(T.interpolation)?o[T.interpolation]:$f,L={paths:[],input:T.input,output:T.output,interpolation:I};f[p]=L}const m=[],_={translation:"localPosition",rotation:"localRotation",scale:"localScale"},S=T=>{const I=[];for(;T;)I.unshift(T.name),T=T.parent;return I},g=(T,I,L)=>{const E=d[T.output];if(!E){y.warn(`glb-parser: No output data is available for the morph target curve (${L}/graph/weights). Skipping.`);return}let F;if(r&&r[I.mesh]){const B=r[I.mesh];B.hasOwnProperty("extras")&&B.extras.hasOwnProperty("targetNames")&&(F=B.extras.targetNames)}const k=E.data,H=k.length/c[T.input].data.length,G=k.length/H,W=G*4,R=new ArrayBuffer(W*H);for(let B=0;B<H;B++){const V=new Float32Array(R,W*B,G);for(let N=0;N<G;N++)V[N]=k[N*H+B];const O=new pc(1,V),M=F!=null&&F[B]?`name.${F[B]}`:B;d[-u]=O;const P={paths:[{entityPath:L,component:"graph",propertyPath:[`weight.${M}`]}],input:T.input,output:-u,interpolation:T.interpolation};u++,f[`morphCurve-${p}-${B}`]=P}};for(p=0;p<l.channels.length;++p){const T=l.channels[p],I=T.target,L=f[T.sampler],E=i[I.node],F=a[I.node],k=S(E);I.path.startsWith("weights")?(g(L,F,k),f[T.sampler].morphCurve=!0):L.paths.push({entityPath:k,component:"graph",propertyPath:[_[I.path]]})}const v=[],w=[],x=[];for(const T in c)v.push(c[T]),c[T]=v.length-1;for(const T in d)w.push(d[T]),d[T]=w.length-1;for(const T in f){const I=f[T];I.morphCurve||(x.push(new Iv(I.paths,c[I.input],d[I.output],I.interpolation)),I.paths.length>0&&I.paths[0].propertyPath[0]==="localRotation"&&I.interpolation!==Xf&&m.push(x[x.length-1].output))}m.sort();let b=null,C;for(p=0;p<m.length;++p){const T=m[p];if(p===0||T!==b){if(C=w[T],C.components===4){const I=C.data,L=I.length-4;for(let E=0;E<L;E+=4)I[E+0]*I[E+4]+I[E+1]*I[E+5]+I[E+2]*I[E+6]+I[E+3]*I[E+7]<0&&(I[E+4]*=-1,I[E+5]*=-1,I[E+6]*=-1,I[E+7]*=-1)}b=T}}let D=0;for(p=0;p<v.length;p++)C=v[p]._data,D=Math.max(D,C.length===0?0:C[C.length-1]);return new Ji(l.hasOwnProperty("name")?l.name:`animation_${t}`,D,v,w,x)},gh=new ie,Ya=new A,wF=(l,t,e)=>{const s=new De;if(l.hasOwnProperty("name")&&l.name.length>0?s.name=l.name:s.name=`node_${t}`,l.hasOwnProperty("matrix")&&(gh.data.set(l.matrix),gh.getTranslation(Ya),s.setLocalPosition(Ya),gh.getEulerAngles(Ya),s.setLocalEulerAngles(Ya),gh.getScale(Ya),s.setLocalScale(Ya)),l.hasOwnProperty("rotation")){const i=l.rotation;s.setLocalRotation(i[0],i[1],i[2],i[3])}if(l.hasOwnProperty("translation")){const i=l.translation;s.setLocalPosition(i[0],i[1],i[2])}if(l.hasOwnProperty("scale")){const i=l.scale;s.setLocalScale(i[0],i[1],i[2])}return l.hasOwnProperty("extensions")&&l.extensions.EXT_mesh_gpu_instancing&&e.set(l,{ext:l.extensions.EXT_mesh_gpu_instancing}),s},EF=(l,t)=>{const e=l.type==="orthographic"?yn:ni,s=e===yn?l.orthographic:l.perspective,i={enabled:!1,projection:e,nearClip:s.znear,aspectRatioMode:Np};s.zfar&&(i.farClip=s.zfar),e===yn?(i.orthoHeight=.5*s.ymag,s.ymag&&(i.aspectRatioMode=Ff,i.aspectRatio=s.xmag/s.ymag)):(i.fov=s.yfov*Y.RAD_TO_DEG,s.aspectRatio&&(i.aspectRatioMode=Ff,i.aspectRatio=s.aspectRatio));const r=new lt(l.name);return r.addComponent("camera",i),r},bF=(l,t)=>{const e={enabled:!1,type:l.type==="point"?"omni":l.type,color:l.hasOwnProperty("color")?new ae(l.color):ae.WHITE,range:l.hasOwnProperty("range")?l.range:9999,falloffMode:hy,intensity:l.hasOwnProperty("intensity")?Y.clamp(l.intensity,0,2):1};l.hasOwnProperty("spot")&&(e.innerConeAngle=l.spot.hasOwnProperty("innerConeAngle")?l.spot.innerConeAngle*Y.RAD_TO_DEG:0,e.outerConeAngle=l.spot.hasOwnProperty("outerConeAngle")?l.spot.outerConeAngle*Y.RAD_TO_DEG:Math.PI/4),l.hasOwnProperty("intensity")&&(e.luminance=l.intensity*rl.getLightUnitConversion(Bf[e.type],e.outerConeAngle,e.innerConeAngle));const s=new lt(t.name);return s.rotateLocal(90,0,0),s.addComponent("light",e),s},AF=(l,t,e,s)=>{if(!t.hasOwnProperty("skins")||t.skins.length===0)return[];const i=new Map;return t.skins.map(r=>oF(l,r,t.accessors,s,e,i))},CF=(l,t,e,s)=>{var d,f,u;const i={},r={},a={},n=[];return{meshes:!s.skipMeshes&&((d=t==null?void 0:t.meshes)==null?void 0:d.length)&&((f=t==null?void 0:t.accessors)==null?void 0:f.length)&&((u=t==null?void 0:t.bufferViews)==null?void 0:u.length)?t.meshes.map(p=>hF(l,p,t.accessors,e,i,r,a,s,n)):[],meshVariants:r,meshDefaultMaterials:a,promises:n}},PF=(l,t,e)=>{var a,n,o;if(!l.hasOwnProperty("materials")||l.materials.length===0)return[];const s=(a=e==null?void 0:e.material)==null?void 0:a.preprocess,i=((n=e==null?void 0:e.material)==null?void 0:n.process)??Rv,r=(o=e==null?void 0:e.material)==null?void 0:o.postprocess;return l.materials.map(c=>{s&&s(c);const d=i(c,t);return r&&r(c,d),d})},DF=l=>{if(!l.hasOwnProperty("extensions")||!l.extensions.hasOwnProperty("KHR_materials_variants"))return null;const t=l.extensions.KHR_materials_variants.variants,e={};for(let s=0;s<t.length;s++)e[t[s].name]=s;return e},IF=(l,t,e,s)=>{var a,n;if(!l.hasOwnProperty("animations")||l.animations.length===0)return[];const i=(a=s==null?void 0:s.animation)==null?void 0:a.preprocess,r=(n=s==null?void 0:s.animation)==null?void 0:n.postprocess;return l.animations.map((o,c)=>{i&&i(o);const d=TF(o,c,l.accessors,e,t,l.meshes,l.nodes);return r&&r(o,d),d})},MF=(l,t,e,s)=>{const i=t.accessors;e.forEach((r,a)=>{const n=r.ext.attributes;let o;if(n.hasOwnProperty("TRANSLATION")){const u=i[n.TRANSLATION];o=wn(u,s)}let c;if(n.hasOwnProperty("ROTATION")){const u=i[n.ROTATION];c=wn(u,s)}let d;if(n.hasOwnProperty("SCALE")){const u=i[n.SCALE];d=wn(u,s)}const f=(o?o.length/3:0)||(c?c.length/4:0)||(d?d.length/3:0);if(f){const u=new Float32Array(f*16),p=new A,m=new ue,_=new A(1,1,1),S=new ie;let g=0;for(let v=0;v<f;v++){const w=v*3;if(o&&p.set(o[w],o[w+1],o[w+2]),c){const x=v*4;m.set(c[x],c[x+1],c[x+2],c[x+3])}d&&_.set(d[w],d[w+1],d[w+2]),S.setTRS(p,m,_);for(let x=0;x<16;x++)u[g++]=S.data[x]}r.matrices=u}})},LF=(l,t,e)=>{var n,o,c;if(!l.hasOwnProperty("nodes")||l.nodes.length===0)return[];const s=(n=t==null?void 0:t.node)==null?void 0:n.preprocess,i=((o=t==null?void 0:t.node)==null?void 0:o.process)??wF,r=(c=t==null?void 0:t.node)==null?void 0:c.postprocess,a=l.nodes.map((d,f)=>{s&&s(d);const u=i(d,f,e);return r&&r(d,u),u});for(let d=0;d<l.nodes.length;++d){const f=l.nodes[d];if(f.hasOwnProperty("children")){const u=a[d],p={};for(let m=0;m<f.children.length;++m){const _=a[f.children[m]];_.parent||(p.hasOwnProperty(_.name)?_.name+=p[_.name]++:p[_.name]=1,u.addChild(_))}}}return a},RF=(l,t)=>{var i;const e=[],s=l.scenes.length;if(s===1&&((i=l.scenes[0].nodes)==null?void 0:i.length)===1){const r=l.scenes[0].nodes[0];e.push(t[r])}else for(let r=0;r<s;r++){const a=l.scenes[r];if(a.nodes){const n=new De(a.name);for(let o=0;o<a.nodes.length;o++){const c=t[a.nodes[o]];n.addChild(c)}e.push(n)}}return e},OF=(l,t,e)=>{var i,r,a;let s=null;if(l.hasOwnProperty("nodes")&&l.hasOwnProperty("cameras")&&l.cameras.length>0){const n=(i=e==null?void 0:e.camera)==null?void 0:i.preprocess,o=((r=e==null?void 0:e.camera)==null?void 0:r.process)??EF,c=(a=e==null?void 0:e.camera)==null?void 0:a.postprocess;l.nodes.forEach((d,f)=>{if(d.hasOwnProperty("camera")){const u=l.cameras[d.camera];if(u){n&&n(u);const p=o(u,t[f]);c&&c(u,p),p&&(s||(s=new Map),s.set(d,p))}}})}return s},FF=(l,t,e)=>{var i,r,a;let s=null;if(l.hasOwnProperty("nodes")&&l.hasOwnProperty("extensions")&&l.extensions.hasOwnProperty("KHR_lights_punctual")&&l.extensions.KHR_lights_punctual.hasOwnProperty("lights")){const n=l.extensions.KHR_lights_punctual.lights;if(n.length){const o=(i=e==null?void 0:e.light)==null?void 0:i.preprocess,c=((r=e==null?void 0:e.light)==null?void 0:r.process)??bF,d=(a=e==null?void 0:e.light)==null?void 0:a.postprocess;l.nodes.forEach((f,u)=>{if(f.hasOwnProperty("extensions")&&f.extensions.hasOwnProperty("KHR_lights_punctual")&&f.extensions.KHR_lights_punctual.hasOwnProperty("light")){const p=f.extensions.KHR_lights_punctual.light,m=n[p];if(m){o&&o(m);const _=c(m,t[u]);d&&d(m,_),_&&(s||(s=new Map),s.set(f,_))}}})}}return s},NF=(l,t,e)=>{l.nodes.forEach(s=>{s.hasOwnProperty("mesh")&&s.hasOwnProperty("skin")&&t[s.mesh].meshes.forEach(r=>{r.skin=e[s.skin]})})},kF=async(l,t,e,s,i)=>{var I,L;const r=(I=i==null?void 0:i.global)==null?void 0:I.preprocess,a=(L=i==null?void 0:i.global)==null?void 0:L.postprocess;r&&r(t),t.asset&&t.asset.generator==="PlayCanvas"&&y.warn("glTF model may have been generated with flipped UVs. Please reconvert.");const n=new Map,o=LF(t,i,n),c=RF(t,o),d=FF(t,o,i),f=OF(t,o,i),u=DF(t),p=await Promise.all(e),{meshes:m,meshVariants:_,meshDefaultMaterials:S,promises:g}=CF(l,t,p,i),v=IF(t,o,p,i);MF(l,t,n,p);const w=await Promise.all(s),x=w.map(E=>E.resource),b=PF(t,x,i),C=AF(l,t,o,p),D=[];for(let E=0;E<m.length;E++)D[E]=new Kp,D[E].meshes=m[E];NF(t,D,C);const T=new KO;return T.gltf=t,T.nodes=o,T.scenes=c,T.animations=v,T.textures=w,T.materials=b,T.variants=u,T.meshVariants=_,T.meshDefaultMaterials=S,T.renders=D,T.skins=C,T.lights=d,T.cameras=f,T.nodeInstancingMap=n,a&&a(t,T),await Promise.all(g),T},UF=(l,t)=>{const e=(i,r)=>{switch(i){case 9728:return Te;case 9729:return yt;case 9984:return Dc;case 9985:return Mc;case 9986:return Ic;case 9987:return ua;default:return r}},s=(i,r)=>{switch(i){case 33071:return me;case 33648:return Du;case 10497:return St;default:return r}};l&&(t=t??{},l.minFilter=e(t.minFilter,ua),l.magFilter=e(t.magFilter,yt),l.addressU=s(t.wrapS,St),l.addressV=s(t.wrapT,St))};let BF=0;const en=l=>{var t,e,s,i;return((e=(t=l.extensions)==null?void 0:t.KHR_texture_basisu)==null?void 0:e.source)??((i=(s=l.extensions)==null?void 0:s.EXT_texture_webp)==null?void 0:i.source)??l.source},zF=(l,t,e,s,i)=>{var u,p,m;if(!l.images||l.images.length===0)return[];const r=(u=i==null?void 0:i.image)==null?void 0:u.preprocess,a=(p=i==null?void 0:i.image)==null?void 0:p.processAsync,n=(m=i==null?void 0:i.image)==null?void 0:m.postprocess,o={"image/png":"png","image/jpeg":"jpg","image/basis":"basis","image/ktx":"ktx","image/ktx2":"ktx2","image/vnd-ms.dds":"dds"},c=_=>{const S=new Set;return _.hasOwnProperty("materials")&&_.materials.forEach(g=>{if(g.hasOwnProperty("pbrMetallicRoughness")){const v=g.pbrMetallicRoughness;if(v.hasOwnProperty("baseColorTexture")){const w=_.textures[v.baseColorTexture.index];S.add(en(w))}}if(g.hasOwnProperty("emissiveTexture")){const v=_.textures[g.emissiveTexture.index];S.add(en(v))}if(g.hasOwnProperty("extensions")){const v=g.extensions.KHR_materials_sheen;if(v&&v.hasOwnProperty("sheenColorTexture")){const b=_.textures[v.sheenColorTexture.index];S.add(en(b))}const w=g.extensions.KHR_materials_pbrSpecularGlossiness;if(w&&w.hasOwnProperty("specularGlossinessTexture")){const b=_.textures[w.specularGlossinessTexture.index];S.add(en(b))}const x=g.extensions.KHR_materials_specular;if(x&&x.hasOwnProperty("specularColorTexture")){const b=_.textures[x.specularColorTexture.index];S.add(en(b))}}}),S},d=(_,S,g,v,w,x)=>new Promise((b,C)=>{const D=T=>{const I=`${_.name||"gltf-texture"}-${BF++}`,L={url:S||I};if(T&&(L.contents=T.slice(0).buffer),v){const k=o[v];k&&(L.filename=`${L.url}.${k}`)}const E={srgb:x},F=new _e(I,"texture",L,E,w);F.on("load",k=>b(k)),F.on("error",k=>C(k)),s.add(F),s.load(F)};g?g.then(T=>D(T)):D(null)}),f=c(l);return l.images.map((_,S)=>{r&&r(_);let g;return a?g=new Promise((v,w)=>{a(_,(x,b)=>{x?w(x):v(b)})}):g=new Promise(v=>{v(null)}),g=g.then(v=>{const w=f.has(S);return v||(_.hasOwnProperty("uri")?Mv(_.uri)?d(_,_.uri,null,ZO(_.uri),null,w):d(_,Vn.test(_.uri)?_.uri:xe.join(e,_.uri),null,null,{crossOrigin:"anonymous"},w):_.hasOwnProperty("bufferView")&&_.hasOwnProperty("mimeType")?d(_,null,t[_.bufferView],_.mimeType,null,w):Promise.reject(new Error(`Invalid image found in gltf (neither uri or bufferView found). index=${S}`)))}),n&&(g=g.then(v=>(n(_,v),v))),g})},VF=(l,t,e)=>{var n,o,c,d,f;if(!((n=l==null?void 0:l.images)!=null&&n.length)||!((o=l==null?void 0:l.textures)!=null&&o.length))return[];const s=(c=e==null?void 0:e.texture)==null?void 0:c.preprocess,i=(d=e==null?void 0:e.texture)==null?void 0:d.processAsync,r=(f=e==null?void 0:e.texture)==null?void 0:f.postprocess,a=new Set;return l.textures.map(u=>{s&&s(u);let p;return i?p=new Promise((m,_)=>{i(u,l.images,(S,g)=>{S?_(S):m(g)})}):p=new Promise(m=>{m(null)}),p=p.then(m=>{m=m??en(u);const _=a.has(m);return a.add(m),t[m].then(S=>{const g=_?rF(S):S;return UF(g.resource,(l.samplers??[])[u.sampler]),g})}),r&&(p=p.then(m=>(r(u,m),m))),p})},GF=(l,t,e,s)=>{var n,o,c;if(!l.buffers||l.buffers.length===0)return[];const i=(n=s==null?void 0:s.buffer)==null?void 0:n.preprocess,r=(o=s==null?void 0:s.buffer)==null?void 0:o.processAsync,a=(c=s==null?void 0:s.buffer)==null?void 0:c.postprocess;return l.buffers.map((d,f)=>{i&&i(d);let u;return r?u=new Promise((p,m)=>{r(d,(_,S)=>{_?m(_):p(S)})}):u=new Promise(p=>{p(null)}),u=u.then(p=>{if(p)return p;if(d.hasOwnProperty("uri")){if(Mv(d.uri)){const m=atob(d.uri.split(",")[1]),_=new Uint8Array(m.length);for(let S=0;S<m.length;S++)_[S]=m.charCodeAt(S);return _}return new Promise((m,_)=>{ot.get(Vn.test(d.uri)?d.uri:xe.join(e,d.uri),{cache:!0,responseType:"arraybuffer",retry:!1},(S,g)=>{S?_(S):m(new Uint8Array(g))})})}return t}),a&&(u=u.then(p=>(a(l.buffers[f],p),p))),u})},HF=(l,t)=>{const s=JSON.parse((i=>{if(typeof TextDecoder<"u")return new TextDecoder().decode(i);let r="";for(let a=0;a<i.length;a++)r+=String.fromCharCode(i[a]);return decodeURIComponent(escape(r))})(l));if(s.asset&&s.asset.version&&parseFloat(s.asset.version)<2){t(`Invalid gltf version. Expected version 2.0 or above but found version '${s.asset.version}'.`);return}t(null,s)},WF=(l,t)=>{const e=l instanceof ArrayBuffer?new DataView(l):new DataView(l.buffer,l.byteOffset,l.byteLength),s=e.getUint32(0,!0),i=e.getUint32(4,!0),r=e.getUint32(8,!0);if(s!==1179937895){t(`Invalid magic number found in glb header. Expected 0x46546C67, found 0x${s.toString(16)}`);return}if(i!==2){t(`Invalid version number found in glb header. Expected 2, found ${i}`);return}if(r<=0||r>e.byteLength){t(`Invalid length found in glb header. Found ${r}`);return}const a=[];let n=12;for(;n<r;){const o=e.getUint32(n,!0);n+o+8>e.byteLength&&t(`Invalid chunk length found in glb. Found ${o}`);const c=e.getUint32(n+4,!0),d=new Uint8Array(e.buffer,e.byteOffset+n+8,o);a.push({length:o,type:c,data:d}),n+=o+8}if(a.length!==1&&a.length!==2){t("Invalid number of chunks found in glb file.");return}if(a[0].type!==1313821514){t(`Invalid chunk type found in glb file. Expected 0x4E4F534A, found 0x${a[0].type.toString(16)}`);return}if(a.length>1&&a[1].type!==5130562){t(`Invalid chunk type found in glb file. Expected 0x004E4942, found 0x${a[1].type.toString(16)}`);return}t(null,{gltfChunk:a[0].data,binaryChunk:a.length===2?a[1].data:null})},$F=(l,t,e)=>{const s=()=>{const i=new Uint8Array(t);return i[0]===103&&i[1]===108&&i[2]===84&&i[3]===70};l&&l.toLowerCase().endsWith(".glb")||s()?WF(t,e):e(null,{gltfChunk:t,binaryChunk:null})},XF=(l,t,e)=>{var n,o,c,d;const s=[],i=(n=e==null?void 0:e.bufferView)==null?void 0:n.preprocess,r=(o=e==null?void 0:e.bufferView)==null?void 0:o.processAsync,a=(c=e==null?void 0:e.bufferView)==null?void 0:c.postprocess;if(!((d=l.bufferViews)!=null&&d.length))return s;for(let f=0;f<l.bufferViews.length;++f){const u=l.bufferViews[f];i&&i(u);let p;r?p=new Promise((m,_)=>{r(u,t,(S,g)=>{S?_(S):m(g)})}):p=new Promise(m=>{m(null)}),p=p.then(m=>m||t[u.buffer].then(_=>new Uint8Array(_.buffer,_.byteOffset+(u.byteOffset||0),u.byteLength))),u.hasOwnProperty("byteStride")&&(p=p.then(m=>(m.byteStride=u.byteStride,m))),a&&(p=p.then(m=>(a(u,m),m))),s.push(p)}return s};class _c{static parse(t,e,s,i,r,a,n){$F(t,s,(o,c)=>{if(o){n(o);return}HF(c.gltfChunk,(d,f)=>{if(d){n(d);return}const u=GF(f,c.binaryChunk,e,a),p=XF(f,u,a),m=zF(f,p,e,r,a),_=VF(f,m,a);kF(i,f,p,_,a).then(S=>n(null,S)).catch(S=>n(S))})})}static createDefaultMaterial(){return Rv({name:"defaultGlbMaterial"},[])}}class qF extends Qe{constructor(t){super(t,"animation"),this.device=t.graphicsDevice,this.assets=t.assets}load(t,e,s){typeof t=="string"&&(t={load:t,original:t});const i={retry:this.maxRetries>0,maxRetries:this.maxRetries};(t.load.startsWith("blob:")||t.load.startsWith("data:"))&&(xe.getExtension(t.original).toLowerCase()===".glb"?i.responseType=Ms.ResponseType.ARRAY_BUFFER:i.responseType=Ms.ResponseType.JSON),ot.get(t.load,i,(r,a)=>{r?e(`Error loading animation resource: ${t.original} [${r}]`):xe.getExtension(t.original).toLowerCase()===".glb"?_c.parse("filename.glb","",a,this.device,this.assets,(s==null?void 0:s.options)??{},(n,o)=>{var c;if(n)e(n);else{const d=o.animations;if((c=s==null?void 0:s.data)!=null&&c.events)for(let f=0;f<d.length;f++)d[f].events=new Jy(Object.values(s.data.events));o.destroy(),e(null,d)}}):e(null,this[`_parseAnimationV${a.animation.version}`](a))})}open(t,e,s){return e}_parseAnimationV3(t){const e=t.animation,s=new N_;s.name=e.name,s.duration=e.duration;for(let i=0;i<e.nodes.length;i++){const r=new F_,a=e.nodes[i];r._name=a.name;for(let n=0;n<a.keys.length;n++){const o=a.keys[n],c=o.time,d=o.pos,f=o.rot,u=o.scale,p=new A(d[0],d[1],d[2]),m=new ue().setFromEulerAngles(f[0],f[1],f[2]),_=new A(u[0],u[1],u[2]),S=new O_(c,p,m,_);r._keys.push(S)}s.addNode(r)}return s}_parseAnimationV4(t){const e=t.animation,s=new N_;s.name=e.name,s.duration=e.duration;for(let i=0;i<e.nodes.length;i++){const r=new F_,a=e.nodes[i];r._name=a.name;const n=a.defaults.p,o=a.defaults.r,c=a.defaults.s;for(let d=0;d<a.keys.length;d++){const f=a.keys[d],u=f.t,p=n||f.p,m=o||f.r,_=c||f.s,S=new A(p[0],p[1],p[2]),g=new ue().setFromEulerAngles(m[0],m[1],m[2]),v=new A(_[0],_[1],_[2]),w=new O_(u,S,g,v);r._keys.push(w)}s.addNode(r)}return s}}class jF extends Qe{constructor(t){super(t,"animclip")}load(t,e){typeof t=="string"&&(t={load:t,original:t});const s={retry:this.maxRetries>0,maxRetries:this.maxRetries};t.load.startsWith("blob:")&&(s.responseType=Ms.ResponseType.JSON),ot.get(t.load,s,(i,r)=>{i?e(`Error loading animation clip resource: ${t.original} [${i}]`):e(null,r)})}open(t,e){const s=e.name,i=e.duration,r=e.inputs.map(o=>new pc(1,o)),a=e.outputs.map(o=>new pc(o.components,o.data)),n=e.curves.map(o=>new Iv([o.path],o.inputIndex,o.outputIndex,o.interpolation));return new Ji(s,i,r,a,n)}}class YF extends Qe{constructor(t){super(t,"animstategraph")}load(t,e){typeof t=="string"&&(t={load:t,original:t});const s={retry:this.maxRetries>0,maxRetries:this.maxRetries};t.load.startsWith("blob:")&&(s.responseType=Ms.ResponseType.JSON),ot.get(t.load,s,(i,r)=>{i?e(`Error loading animation state graph resource: ${t.original} [${i}]`):e(null,r)})}open(t,e){return new Lh(e)}}const sf=(function(){if(typeof window>"u")return!1;const l=window.navigator.userAgent,t=l.indexOf("MSIE ");if(t>0)return parseInt(l.substring(t+5,l.indexOf(".",t)),10);if(l.indexOf("Trident/")>0){const s=l.indexOf("rv:");return parseInt(l.substring(s+3,l.indexOf(".",s)),10)}return!1})(),KF=[".ogg",".mp3",".wav",".mp4a",".m4a",".mp4",".aac",".opus"];class ZF extends Qe{constructor(t){super(t,"audio"),this.manager=t.soundManager,y.assert(this.manager,"AudioHandler cannot be created without sound manager")}_isSupported(t){const e=xe.getExtension(t);return KF.indexOf(e)>-1||t.startsWith("blob:")}load(t,e){typeof t=="string"&&(t={load:t,original:t});const s=function(r){e(null,new VT(r))},i=function(r){let a=`Error loading audio url: ${t.original}`;r&&(a+=`: ${r.message||r}`),console.warn(a),e(a)};if(this._createSound){if(!this._isSupported(t.original)){i(`Audio format for ${t.original} not supported`);return}this._createSound(t.load,s,i)}else i(null)}_createSound(t,e,s){if(vl()){const i=this.manager;if(!i.context){s("Audio manager has no audio context");return}const r={retry:this.maxRetries>0,maxRetries:this.maxRetries};(t.startsWith("blob:")||t.startsWith("data:"))&&(r.responseType=Ms.ResponseType.ARRAY_BUFFER),ot.get(t,r,(a,n)=>{if(a){s(a);return}i.context.decodeAudioData(n,e,s)})}else{let i=null;try{i=new Audio}catch{s("No support for Audio element");return}sf&&document.body.appendChild(i);const r=function(){i.removeEventListener("canplaythrough",r),sf&&document.body.removeChild(i),e(i)};i.onerror=function(){i.onerror=null,sf&&document.body.removeChild(i),s()},i.addEventListener("canplaythrough",r),i.src=t}}}class QF extends Qe{constructor(t){super(t,"binary")}load(t,e){typeof t=="string"&&(t={load:t,original:t}),ot.get(t.load,{responseType:Ms.ResponseType.ARRAY_BUFFER,retry:this.maxRetries>0,maxRetries:this.maxRetries},(s,i)=>{s?e(`Error loading binary resource: ${t.original} [${s}]`):e(null,i)})}openBinary(t){return t.buffer}}class Sr{constructor(t,e,s,i){const r=function(c,d,f){const u=Sr.createAsset(e.name,c,d,f);return s.add(u),u},a=[];for(let c=0;c<t.renders.length;++c)a.push(r("render",t.renders[c],c));const n=[];for(let c=0;c<t.materials.length;++c)n.push(r("material",t.materials[c],c));const o=[];for(let c=0;c<t.animations.length;++c)o.push(r("animation",t.animations[c],c));this.data=t,this._model=null,this._assetName=e.name,this._assets=s,this._defaultMaterial=i,this.renders=a,this.materials=n,this.textures=t.textures,this.animations=o}get model(){if(!this._model){const t=Sr.createModel(this.data,this._defaultMaterial),e=Sr.createAsset(this._assetName,"model",t,0);this._assets.add(e),this._model=e}return this._model}static createAsset(t,e,s,i){const r=new _e(`${t}/${e}/${i}`,e,{url:""});return r.resource=s,r.loaded=!0,r}instantiateModelEntity(t){const e=new lt(void 0,this._assets._loader._app);return e.addComponent("model",Object.assign({type:"asset",asset:this.model},t)),e}instantiateRenderEntity(t){const e=this._defaultMaterial,s=[],i=function(n,o,c,d,f,u,p,m){const _=f[c.id],S=_===void 0?e:d[_],g=new Ge(c,S);c.morph&&(g.morphInstance=new ya(c.morph)),p.hasOwnProperty("skin")&&s.push({meshInstance:g,rootBone:n,entity:o});const v=m.get(p);if(v){const w=v.matrices,x=Nt.getDefaultInstancingFormat(c.device),b=new Is(c.device,x,w.length/16,{data:w});g.setInstancing(b),g.instancingData._destroyVertexBuffer=!0}return g},r=(n,o,c)=>{const d=new lt(void 0,this._assets._loader._app);o._cloneInternal(d),n||(n=d);let f=null,u=null;for(let m=0;m<c.nodes.length;m++)if(c.nodes[m]===o){const S=c.gltf.nodes[m];if(S.hasOwnProperty("mesh")){const g=c.renders[S.mesh].meshes;u=this.renders[S.mesh];for(let v=0;v<g.length;v++){const w=g[v];if(w){const x=i(n,d,w,c.materials,c.meshDefaultMaterials,c.skins,S,c.nodeInstancingMap);f||(f=[]),f.push(x)}}}if(c.lights){const g=c.lights.get(S);g&&d.addChild(g.clone())}if(c.cameras){const g=c.cameras.get(S);g&&g.camera.system.cloneComponent(g,d)}}f&&(d.addComponent("render",Object.assign({type:"asset",meshInstances:f},t)),d.render.assignAsset(u));const p=o.children;for(let m=0;m<p.length;m++){const _=r(n,p[m],c);d.addChild(_)}return d},a=[];for(const n of this.data.scenes)a.push(r(null,n,this.data));return s.forEach(n=>{n.meshInstance.skinInstance=nl.createCachedSkinInstance(n.meshInstance.mesh.skin,n.rootBone,n.entity),n.meshInstance.node.render.rootBone=n.rootBone}),Sr.createSceneHierarchy(a,lt)}getMaterialVariants(){return this.data.variants?Object.keys(this.data.variants):[]}applyMaterialVariant(t,e){const s=e?this.data.variants[e]:null;if(s===void 0){y.warn(`No variant named ${e} exists in resource`);return}const i=t.findComponents("render");for(let r=0;r<i.length;r++){const a=i[r];this._applyMaterialVariant(s,a.meshInstances)}}applyMaterialVariantInstances(t,e){const s=e?this.data.variants[e]:null;if(s===void 0){y.warn(`No variant named ${e} exists in resource`);return}this._applyMaterialVariant(s,t)}_applyMaterialVariant(t,e){e.forEach(s=>{if(t===null)s.material=this._defaultMaterial;else{const i=this.data.meshVariants[s.mesh.id];i&&(s.material=this.data.materials[i[t]])}y.assert(s.material)})}static createSceneHierarchy(t,e){let s=null;if(t.length===1)s=t[0];else{s=new e("SceneGroup");for(const i of t)s.addChild(i)}return s}static createModel(t,e){const s=function(a,n,o,c,d,f,u){const p=t.meshDefaultMaterials[n.id],m=p===void 0?e:d[p],_=new Ge(n,m,f);if(n.morph){const S=new ya(n.morph);_.morphInstance=S,a.morphInstances.push(S)}if(u.hasOwnProperty("skin")){const S=u.skin,g=o[S];n.skin=g;const v=c[S];_.skinInstance=v,a.skinInstances.push(v)}a.meshInstances.push(_)},i=new ir,r=[];for(const a of t.skins){const n=new El(a);n.bones=a.bones,r.push(n)}i.graph=Sr.createSceneHierarchy(t.scenes,De);for(let a=0;a<t.nodes.length;a++){const n=t.nodes[a];if(n.root===i.graph){const o=t.gltf.nodes[a];if(o.hasOwnProperty("mesh")){const c=t.renders[o.mesh].meshes;for(let d=0;d<c.length;d++){const f=c[d];f&&s(i,f,t.skins,r,t.materials,n,o)}}}}return i}destroy(){const t=this._assets,e=function(i){t.remove(i),i.unload()},s=function(i){i.forEach(r=>{e(r)})};this.animations&&(s(this.animations),this.animations=null),this.textures&&(s(this.textures),this.textures=null),this.materials&&(s(this.materials),this.materials=null),this.renders&&(s(this.renders),this.renders=null),this._model&&(e(this._model),this._model=null),this.data=null,this.assets=null}}class JF{constructor(t,e,s){this._device=t,this._assets=e,this._defaultMaterial=_c.createDefaultMaterial(),this.maxRetries=s}_getUrlWithoutParams(t){return t.indexOf("?")>=0?t.split("?")[0]:t}load(t,e,s){_e.fetchArrayBuffer(t.load,(i,r)=>{i?e(i):_c.parse(this._getUrlWithoutParams(t.original),xe.extractPath(t.load),r,this._device,s.registry,s.options,(a,n)=>{a?e(a):e(null,new Sr(n,s,this._assets,this._defaultMaterial))})},s,this.maxRetries)}open(t,e,s){return e}patch(t,e){}}class eN extends Qe{constructor(t){super(t,"container"),this.glbContainerParser=new JF(t.graphicsDevice,t.assets,0),this.parsers={}}set maxRetries(t){this.glbContainerParser.maxRetries=t;for(const e in this.parsers)this.parsers.hasOwnProperty(e)&&(this.parsers[e].maxRetries=t)}get maxRetries(){return this.glbContainerParser.maxRetries}_getUrlWithoutParams(t){return t.indexOf("?")>=0?t.split("?")[0]:t}_getParser(t){const e=t?xe.getExtension(this._getUrlWithoutParams(t)).toLowerCase().replace(".",""):null;return this.parsers[e]||this.glbContainerParser}load(t,e,s){typeof t=="string"&&(t={load:t,original:t}),this._getParser(t.original).load(t,e,s)}open(t,e,s){return this._getParser(t).open(t,e,s)}}class tN extends Qe{constructor(e){super(e,"css");h(this,"decoder",null)}load(e,s){typeof e=="string"&&(e={load:e,original:e}),ot.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(i,r)=>{i?s(`Error loading css resource: ${e.original} [${i}]`):s(null,r)})}openBinary(e){return this.decoder??(this.decoder=new TextDecoder("utf-8")),this.decoder.decode(e)}}class sN extends Qe{constructor(t){super(t,"cubemap"),this._device=t.graphicsDevice,this._registry=t.assets,this._loader=t.loader}load(t,e,s){this.loadAssets(s,e)}open(t,e,s){return s?s.resource:null}patch(t,e){this.loadAssets(t,(s,i)=>{s&&(e.fire("error",t),e.fire(`error:${t.id}`,s,t),t.fire("error",t))})}getAssetIds(t){const e=[];if(e[0]=t.file,(t.loadFaces||!t.file)&&t.data&&t.data.textures)for(let s=0;s<6;++s)e[s+1]=t.data.textures[s];else e[1]=e[2]=e[3]=e[4]=e[5]=e[6]=null;return e}compareAssetIds(t,e){return t&&e?parseInt(t,10)===t||typeof t=="string"?t===e:t.url===e.url:t!==null==(e!==null)}update(t,e,s){const i=t.data||{},r=t._handlerState.assets,a=t._resources;let n,o,c;const d=[null,null,null,null,null,null,null],f=function(){return i.hasOwnProperty("type")?i.type:i.hasOwnProperty("rgbm")?i.rgbm?Qi:Ds:null};if(!t.loaded||s[0]!==r[0]){if(s[0])if(n=s[0].resource,n.cubemap)for(c=0;c<6;++c)d[c+1]=new ge(this._device,{name:`${t.name}_prelitCubemap${n.width>>c}`,cubemap:!0,type:f()||n.type,width:n.width>>c,height:n.height>>c,format:n.format,levels:[n._levels[c]],addressU:me,addressV:me,mipmaps:c===0});else d[1]=n}else d[1]=a[1]||null,d[2]=a[2]||null,d[3]=a[3]||null,d[4]=a[4]||null,d[5]=a[5]||null,d[6]=a[6]||null;const u=s.slice(1);if(!t.loaded||!this.cmpArrays(u,r.slice(1))){if(u.indexOf(null)===-1){const p=u.map(g=>g.resource),m=[];for(o=0;o<p[0]._levels.length;++o)m.push(p.map(g=>g._levels[o]));const _=p[0].format,S=new ge(this._device,{name:`${t.name}_faces`,cubemap:!0,type:f()||p[0].type,width:p[0].width,height:p[0].height,format:_===Ar?Fe:_,mipmaps:i.mipmaps??!0,levels:m,minFilter:i.hasOwnProperty("minFilter")?i.minFilter:p[0].minFilter,magFilter:i.hasOwnProperty("magFilter")?i.magFilter:p[0].magFilter,anisotropy:i.hasOwnProperty("anisotropy")?i.anisotropy:1,addressU:me,addressV:me});d[0]=S}}else d[0]=a[0]||null;if(!this.cmpArrays(d,a))for(t.resources=d,t._handlerState.assetIds=e,t._handlerState.assets=s,c=0;c<a.length;++c)a[c]!==null&&d.indexOf(a[c])===-1&&a[c].destroy();for(c=0;c<r.length;++c)r[c]!==null&&s.indexOf(r[c])===-1&&r[c].unload()}cmpArrays(t,e){if(t.length!==e.length)return!1;for(let s=0;s<t.length;++s)if(t[s]!==e[s])return!1;return!0}resolveId(t){const e=parseInt(t,10);return e===t||e.toString()===t?e:t}loadAssets(t,e){t.hasOwnProperty("_handlerState")||(t._handlerState={assetIds:[null,null,null,null,null,null,null],assets:[null,null,null,null,null,null,null]});const s=this,i=s.getAssetIds(t),r=[null,null,null,null,null,null,null],a=t._handlerState.assetIds,n=t._handlerState.assets,o=s._registry;let c=7;const d=function(m,_){r[m]=_,c--,c===0&&(s.update(t,i,r),e(null,t.resources))},f=function(m,_,S){e(_)},u=function(m,_){_.loaded?d(m,_):(o.once(`load:${_.id}`,d.bind(s,m)),o.once(`error:${_.id}`,f.bind(s,m)),_.loading||o.load(_))};let p;for(let m=0;m<7;++m){const _=this.resolveId(i[m]);if(!_)d(m,null);else if(s.compareAssetIds(_,a[m]))u(m,n[m]);else if(parseInt(_,10)===_)p=o.get(_),p?u(m,p):setTimeout(((S,g)=>{const v=o.get(g);v?u(S,v):f(S,`failed to find dependent cubemap asset=${g}`)}).bind(null,m,_));else{const S=typeof _=="string"?{url:_,filename:_}:_,g=S.url.search(".dds")===-1?{type:"rgbp",addressu:"clamp",addressv:"clamp",mipmaps:!1}:null;p=new _e(`${t.name}_part_${m}`,"texture",S,g),o.add(p),u(m,p)}}}}class iN extends Qe{constructor(t){super(t,"folder")}load(t,e){e(null,null)}}class Fg{constructor(t,e){this.type=e&&e.type||fc,this.em=1,this.textures=t,this.intensity=0,this._data=null,this.data=e}set data(t){if(this._data=t,!!t&&(this._data.intensity!==void 0&&(this.intensity=this._data.intensity),this._data.info||(this._data.info={}),(!this._data.version||this._data.version<2)&&(this._data.info.maps=[{width:this._data.info.width,height:this._data.info.height}],this._data.chars)))for(const e in this._data.chars)this._data.chars[e].map=0}get data(){return this._data}}function rf(l){return l.version<3&&(l.version<2&&(l.info.maps=l.info.maps||[{width:l.info.width,height:l.info.height}]),l.chars=Object.keys(l.chars||{}).reduce((t,e)=>{const s=l.chars[e],i=s.letter!==void 0?s.letter:wh.fromCodePoint(e);return l.version<2&&(s.map=s.map||0),t[i]=s,t},{}),l.version=3),l}class rN extends Qe{constructor(t){super(t,"font"),this._loader=t.loader,this.maxRetries=0}load(t,e,s){typeof t=="string"&&(t={load:t,original:t});const i=this;xe.getExtension(t.original)===".json"?ot.get(t.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(r,a)=>{if(r)e(`Error loading font resource: ${t.original} [${r}]`);else{const n=rf(a);i._loadTextures(t.load.replace(".json",".png"),n,(o,c)=>{o?e(o):e(null,{data:n,textures:c})})}}):(s&&s.data&&(s.data=rf(s.data)),this._loadTextures(t.load,s&&s.data,e))}_loadTextures(t,e,s){const i=e.info.maps.length;let r=0,a=null;const n=new Array(i),o=this._loader,c=function(d){const f=function(u,p){if(!a){if(u){a=u,s(u);return}p.upload(),n[d]=p,r++,r===i&&s(null,n)}};d===0?o.load(t,"texture",f):o.load(t.replace(".png",`${d}.png`),"texture",f)};for(let d=0;d<i;d++)c(d)}open(t,e,s){let i;return e.textures?i=new Fg(e.textures,e.data):i=new Fg(e,null),i}patch(t,e){const s=t.resource;!s.data&&t.data?s.data=t.data:!t.data&&s.data&&(t.data=s.data),t.data&&(t.data=rf(t.data))}}async function aN(){const l="super4d-cache-v1",t={maxAge:2592e6,maxSize:10737418240},e=new Uint8Array([112,108,121,10]),s=new Uint8Array([10,101,110,100,95,104,101,97,100,101,114,10]),i=.28209479177387814,r=new Map([["char",Int8Array],["uchar",Uint8Array],["short",Int16Array],["ushort",Uint16Array],["int",Int32Array],["uint",Uint32Array],["float",Float32Array],["double",Float64Array]]);class a{constructor(E={}){this.options={...t,...E},this.cache=null,this.lruList=[],this.cacheSizes=new Map,this.currentSize=0,this.initialized=!1}async init(){if(!this.initialized){try{this.cache=await caches.open(l);const E=await this.cache.keys(),F=[];for(const k of E){const H=k.url,G=await this.cache.match(H);if(G){const R=(await G.blob()).size,B=G.headers.get("x-cache-time");B&&F.push({url:H,size:R,cacheTime:parseInt(B)})}}F.sort((k,H)=>k.cacheTime-H.cacheTime);for(const k of F)this.cacheSizes.set(k.url,k.size),this.currentSize+=k.size,this.lruList.push(k.url)}catch(E){console.error("Failed to initialize cache:",E)}this.initialized=!0}}async get(E){if(await this.init(),!this.cache)return null;try{const F=await this.cache.match(E);if(!F)return null;const k=F.headers.get("x-cache-time");return k&&Date.now()-parseInt(k)>this.options.maxAge?(await this.delete(E),null):(this.updateLRU(E),F)}catch{return null}}async set(E,F){if(!(!this.cache||E.startsWith("blob:")))try{const k=F.clone(),H=await k.blob(),G=H.size;this.currentSize+G>this.options.maxSize&&await this.cleanupSpace(G);const W=new Headers(k.headers);W.set("x-cache-time",Date.now().toString());const R=new Response(H,{status:k.status,statusText:k.statusText,headers:W});await this.cache.put(E,R),this.cacheSizes.set(E,G),this.currentSize+=G,this.updateLRU(E)}catch(k){console.error("Cache set error:",k)}}updateLRU(E){const F=this.lruList.indexOf(E);F>-1&&this.lruList.splice(F,1),this.lruList.push(E)}async cleanupSpace(E){const F=this.options.maxSize*.9;if(!(this.currentSize<=F))for(;this.lruList.length>0&&this.currentSize>F;){const k=this.lruList.shift();k&&await this.delete(k)}}async delete(E){if(this.cache)try{await this.cache.delete(E);const F=this.cacheSizes.get(E)||0;this.currentSize-=F,this.cacheSizes.delete(E);const k=this.lruList.indexOf(E);k>-1&&this.lruList.splice(k,1)}catch(F){console.error("Cache delete error:",F)}}async clear(){if(this.cache)try{await this.cache.keys().then(E=>Promise.all(E.map(F=>{var k;return(k=this.cache)==null?void 0:k.delete(F)}))),this.lruList=[],this.cacheSizes.clear(),this.currentSize=0}catch(E){console.error("Cache clear error:",E)}}destroy(){this.cache=null,this.lruList=[],this.cacheSizes.clear(),this.currentSize=0}}class n{constructor(E=[],F={}){this.cacheManager=new a(F.cache),this.retryCount=F.retryCount||3,this.retryDelay=F.retryDelay||500,this.maxConcurrency=F.maxConcurrency||2,this.downloadQueue=E,this.isProcessingDownloadQueue=!1,this.pendingResponses=new Map,this.processDownloadQueue()}async processDownloadQueue(){if(!this.isProcessingDownloadQueue)for(this.isProcessingDownloadQueue=!0;this.downloadQueue.length>0;)try{const F=this.downloadQueue.splice(0,this.maxConcurrency).map(k=>{const H=k.trim();if(!this.pendingResponses.has(H)){const G=this.download(H);return this.pendingResponses.set(H,G),G.then(()=>{this.pendingResponses.delete(H)})}return Promise.resolve()});await Promise.all(F)}catch(E){console.error("Download error:",E)}finally{this.isProcessingDownloadQueue=!1}}async fetch(E,F={}){if(this.pendingResponses.has(E))return this.pendingResponses.get(E);const{forceRefresh:k=!1,...H}=F;this.pendingResponses.set(E,this.download(E,H));const G=await this.pendingResponses.get(E);return this.pendingResponses.delete(E),G}async download(E,F={}){var R;await((R=this.cacheManager)==null?void 0:R.init());const{forceRefresh:k=!1,...H}=F;k&&await this.cacheManager.delete(E);const G=await this.cacheManager.get(E);if(G)return G;let W;for(let B=0;B<this.retryCount;B++)try{const V=await fetch(E,H);if(!V.ok)throw new Error(`HTTP error! status: ${V.status}`);return await this.cacheManager.set(E,V),V}catch(V){console.error("Download error:",V),W=V,B<this.retryCount-1&&await new Promise(O=>setTimeout(O,this.retryDelay*(B+1)))}throw W}async clearCache(){await this.cacheManager.clear()}destroy(){this.cacheManager.destroy(),this.cacheManager=null,this.downloadQueue=[],this.isProcessingDownloadQueue=!1,this.pendingResponses=new Map,this.pendingResponses.clear()}}class o{constructor(){this.numSplats=0,this.comments=[],this.chunkData=new Float32Array(0),this.vertexData=new Uint32Array(0),this.is4D=!0,this.shBands=0,this.shData0=new Uint8Array(0),this.shData1=new Uint8Array(0),this.shData2=new Uint8Array(0),this.elements=[],this.isCompressed=!0}get numChunks(){return Math.ceil(this.numSplats/256)}get chunkSize(){return this.chunkData.length/this.numChunks}}class c{constructor(E,F=[]){this.elements=E,this.comments=F,this.isCompressed=!1,this.is4D=!!this.elements[0].properties.find(k=>k.name==="t"),this.shBands=this.getShBands()}getShBands(){return{9:1,24:2,45:3}[(()=>{for(let k=0;k<45;++k)if(!this.elements[0].properties.find(H=>H.name===`f_rest_${k}`))return k;return 45})()]??0}}class d{constructor(){this.head=0,this.tail=0,this.reader=null,this.progressFunc=null,this.data=null,this.view=null}loadReader(E,F){return this.reader=E,this.progressFunc=F,this.head=0,this.tail=0,this}async read(){var k;if(!this.reader)throw new Error("Reader not loaded");const{value:E,done:F}=await this.reader.read();if(F)throw new Error("Stream finished before end of header");this.push(E),(k=this.progressFunc)==null||k.call(this,E.byteLength)}push(E){if(!this.data)this.data=E,this.view=new DataView(this.data.buffer),this.tail=E.length;else{const F=this.tail-this.head,k=F+E.length;if(this.data.length>=k)this.head>0?(this.data.copyWithin(0,this.head,this.tail),this.data.set(E,F),this.head=0,this.tail=k):(this.data.set(E,this.tail),this.tail+=E.length);else{const H=new Uint8Array(k);this.head>0||this.tail<this.data.length?H.set(this.data.subarray(this.head,this.tail),0):H.set(this.data,0),H.set(E,F),this.data=H,this.view=new DataView(this.data.buffer),this.head=0,this.tail=k}}}compact(){this.head>0&&(this.data.copyWithin(0,this.head,this.tail),this.tail-=this.head,this.head=0)}get remaining(){return this.tail-this.head}getInt8(){const E=this.view.getInt8(this.head);return this.head++,E}getUint8(){const E=this.view.getUint8(this.head);return this.head++,E}getInt16(){const E=this.view.getInt16(this.head,!0);return this.head+=2,E}getUint16(){const E=this.view.getUint16(this.head,!0);return this.head+=2,E}getInt32(){const E=this.view.getInt32(this.head,!0);return this.head+=4,E}getUint32(){const E=this.view.getUint32(this.head,!0);return this.head+=4,E}getFloat32(){const E=this.view.getFloat32(this.head,!0);return this.head+=4,E}getFloat64(){const E=this.view.getFloat64(this.head,!0);return this.head+=8,E}}class f{constructor(E,F,k){this.x=E,this.y=F,this.z=k}}class u{constructor(E,F,k,H){this.x=E,this.y=F,this.z=k,this.w=H}}class p{constructor(E=0,F=0,k=0,H=1){this.x=E,this.y=F,this.z=k,this.w=H}set(E,F,k,H){return this.x=E,this.y=F,this.z=k,this.w=H,this}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}normalize(E=this){let F=E.length();return F===0?(this.x=this.y=this.z=0,this.w=1):(F=1/F,this.x=E.x*F,this.y=E.y*F,this.z=E.z*F,this.w=E.w*F),this}mulScalar(E,F=this){return this.x=F.x*E,this.y=F.y*E,this.z=F.z*E,this.w=F.w*E,this}}class m{constructor(E,F,k,H,G,W,R,B,V,O,M,P,N,U){const z=(se,ne)=>{const Q=(1<<ne)-1;return(se&Q)/Q},$=(se,ne)=>{se.x=z(ne>>>21,11),se.y=z(ne>>>11,10),se.z=z(ne,11)},X=(se,ne)=>{se.x=z(ne>>>24,8),se.y=z(ne>>>16,8),se.z=z(ne>>>8,8),se.w=z(ne,8)},K=(se,ne)=>{const Q=1/(Math.sqrt(2)*.5),ce=(z(ne>>>20,10)-.5)*Q,le=(z(ne>>>10,10)-.5)*Q,he=(z(ne,10)-.5)*Q,te=Math.sqrt(1-(ce*ce+le*le+he*he));switch(ne>>>30){case 0:se.set(ce,le,he,te);break;case 1:se.set(te,le,he,ce);break;case 2:se.set(le,te,he,ce);break;case 3:se.set(le,he,te,ce);break}},q=(se,ne,Q)=>se*(1-Q)+ne*Q,re=[3,8,15][R-1],ee=6;this.read=se=>{const ne=Math.floor(se/256)*F;if(B&&($(B,k[se*ee+0]),B.x=q(E[ne+0],E[ne+3],B.x),B.y=q(E[ne+1],E[ne+4],B.y),B.z=q(E[ne+2],E[ne+5],B.z)),V&&K(V,k[se*ee+1]),O&&($(O,k[se*ee+2]),O.x=q(E[ne+6],E[ne+9],O.x),O.y=q(E[ne+7],E[ne+10],O.y),O.z=q(E[ne+8],E[ne+11],O.z)),M&&(X(M,k[se*ee+3]),F>12&&(M.x=q(E[ne+12],E[ne+15],M.x),M.y=q(E[ne+13],E[ne+16],M.y),M.z=q(E[ne+14],E[ne+17],M.z))),P&&($(P,k[se*ee+4]),P.x=q(E[ne+18],E[ne+21],P.x),P.y=q(E[ne+19],E[ne+22],P.y),P.z=q(E[ne+20],E[ne+23],P.z)),N&&($(N,k[se*ee+5]),N.x=q(E[ne+24],E[ne+25],N.x),N.y=q(E[ne+26],E[ne+27],N.y)),U&&R>0){const Q=[H,G,W];for(let ce=0;ce<3;++ce)for(let le=0;le<15;++le)U[ce*15+le]=le<re?Q[ce][se*16+le]*(8/255)-4:0}}}}const _=new Float32Array(1),S=new Int32Array(_.buffer),g=L=>{_[0]=L;const E=S[0];let F=E>>16&32768,k=E>>12&2047;const H=E>>23&255;return H<103?F:H>142?(F|=31744,F|=(H===255?0:1)&&E&8388607,F):H<113?(k|=2048,F|=(k>>114-H)+(k>>113-H&1),F):(F|=H-112<<10|k>>1,F+=k&1,F)};self.onmessage=async L=>{var F,k,H,G;const{data:E}=L;switch(E.type){case"initWorker":globalThis.loadUrlList=E.loadUrlList,globalThis.fetchWorker=new n(globalThis.loadUrlList),globalThis.streamBuf=new d,globalThis.returnedProperties={};break;case"destroyWorker":(F=globalThis.fetchWorker)==null||F.destroy(),globalThis.fetchWorker=null,globalThis.loadUrlList=[];break;case"loadPly":const{url:W,decompress:R,timeIndex:B,timeOption:V,returnedProperties:O}=E;O&&((k=O.position)==null?void 0:k.length)>(((H=globalThis.returnedProperties.position)==null?void 0:H.length)??0)&&(globalThis.returnedProperties=O);try{globalThis.fetchWorker||(globalThis.fetchWorker=new n(globalThis.loadUrlList));const M=await globalThis.fetchWorker.fetch(W);if(!M||!M.body)self.postMessage({type:"error",data:"Error loading resource",url:W});else{const P=parseInt(M.headers.get("content-length")??"0",10);self.postMessage({type:"totalLength",totalLength:P,bytes:0,url:W}),globalThis.streamBuf.loadReader(M.body.getReader(),z=>{self.postMessage({type:"progress",bytes:z,totalLength:P,url:W})});let N=await T(globalThis.streamBuf,B,V);const U=(G=N==null?void 0:N.elements[0])==null?void 0:G.properties.map(z=>z.storage.buffer);self.postMessage({type:"splatData",data:N,url:W},U)}}catch(M){self.postMessage({type:"error",data:M.message,url:W})}break}};const v=L=>{const E=[],F=[];let k;for(let H=1;H<L.length;++H){const G=L[H].split(" ");switch(G[0]){case"comment":F.push(G.slice(1).join(" "));break;case"format":k=G[1];break;case"element":E.push({name:G[1],count:parseInt(G[2],10),properties:[]});break;case"property":{if(!r.has(G[1]))throw new Error(`Unrecognized property data type '${G[1]}' in ply header`);E[E.length-1].properties.push({type:G[1],name:G[2],storage:null,byteSize:r.get(G[1]).BYTES_PER_ELEMENT});break}default:throw new Error(`Unrecognized header value '${G[0]}' in ply header`)}}return{elements:E,format:k,comments:F}},w=L=>{const E=["min_x","min_y","min_z","max_x","max_y","max_z","min_scale_x","min_scale_y","min_scale_z","max_scale_x","max_scale_y","max_scale_z","min_r","min_g","min_b","max_r","max_g","max_b","min_motion_x","min_motion_y","min_motion_z","max_motion_x","max_motion_y","max_motion_z","min_time_scale","max_time_scale","min_time","max_time"],F=["packed_position","packed_rotation","packed_scale","packed_color","packed_motion","packed_time"],k=new Array(45).fill("").map((W,R)=>`f_rest_${R}`),H=()=>L[0].name==="chunk"&&L[0].properties.every((W,R)=>W.name===E[R]&&W.type==="float")&&L[1].name==="vertex"&&L[1].properties.every((W,R)=>W.name===F[R]&&W.type==="uint"),G=()=>L[2].name==="sh"&&[9,24,45].indexOf(L[2].properties.length)!==-1&&L[2].properties.every((W,R)=>W.name===k[R]&&W.type==="uchar");return L.length===2&&H()||L.length===3&&H()&&G()},x=L=>L.length===1&&L[0].name==="vertex"&&L[0].properties.every(E=>E.type==="float"),b=async(L,E,F)=>{const k=new o;k.comments=F;const H=E[0].count,G=E[0].properties.length,W=E[1].count,R=E[1].properties.some(M=>M.name==="packed_time"),V=(M=>{const P=Math.ceil(Math.sqrt(M)),N=Math.ceil(M/P);return P*N})(W);k.numSplats=W,k.is4D=R,k.chunkData=new Float32Array(H*G),k.vertexData=new Uint32Array(V*6);const O=async(M,P)=>{const N=new Uint8Array(M);let U=0;for(;U<P;){for(;L.remaining===0;)await L.read();const z=Math.min(P-U,L.remaining),$=L.data;for(let X=0;X<z;++X)N[U++]=$[L.head++]}};if(await O(k.chunkData.buffer,H*G*4),await O(k.vertexData.buffer,W*6*4),E.length===3){const M=V*16,P=new Uint8Array(M),N=new Uint8Array(M),U=new Uint8Array(M),z=1024,$=E[2].properties.length/3,X=new Uint8Array(z*$*3);for(let K=0;K<k.numSplats;K+=z){const q=Math.min(z,k.numSplats-K);await O(X.buffer,q*$*3);for(let re=0;re<q;++re)for(let ee=0;ee<15;++ee){const se=(K+re)*16+ee;ee<$?(P[se]=X[(re*3+0)*$+ee],N[se]=X[(re*3+1)*$+ee],U[se]=X[(re*3+2)*$+ee]):(P[se]=127,N[se]=127,U[se]=127)}}k.shData0=P,k.shData1=N,k.shData2=U,k.shBands={3:1,8:2,15:3}[$]}else k.shBands=0;return k},C=async(L,E,F,k,H,G)=>{const W=E[0],R=W.properties,B=R.length,V=R.map(U=>U.name),O=R.reduce((U,z)=>U+z.byteSize,0);let M=0,P;const N=()=>{const U=L.data.buffer;(P==null?void 0:P.buffer)!==U&&(P=new Float32Array(U,0,U.byteLength/4))};for(N();M<W.count;){for(;L.remaining<O;)await L.read(),N();const U=Math.min(W.count-M,Math.floor(L.remaining/O));for(let Q=0;Q<B;++Q)if(V[Q].startsWith("f_rest_")){const ce=E[0].decodedProperties.find(le=>le.name===V[Q]);for(let le=0;le<U;++le)ce.storage[le+M]=P[le*B+Q]}const z=E[0].decodedProperties.find(Q=>Q.name==="position"),$=E[0].decodedProperties.find(Q=>Q.name==="color_opacity"),X=E[0].decodedProperties.find(Q=>Q.name==="t"),K=E[0].decodedProperties.find(Q=>Q.name==="t_scale"),q=E[0].decodedProperties.find(Q=>Q.name==="motion"),re=E[0].decodedProperties.find(Q=>Q.name==="rotation"),ee=E[0].decodedProperties.find(Q=>Q.name==="scale"),se=E[0].decodedProperties.find(Q=>Q.name==="time_index"),ne=E[0].decodedProperties.find(Q=>Q.name==="cutoff");se.storage.fill(k),ne.storage.fill(0);for(let Q=0;Q<U&&P;++Q){z.rawProperties.forEach((le,he)=>{z.storage[(Q+M)*3+he]=P[Q*B+V.indexOf(le)]}),$.rawProperties.forEach((le,he)=>{if(le==="opacity"){const te=1/(1+Math.exp(-P[Q*B+V.indexOf(le)]));$.storage[(Q+M)*4+he]=g(te)}else{const te=P[Q*B+V.indexOf(le)]*i+.5;$.storage[(Q+M)*4+he]=g(te)}}),ee.rawProperties.forEach((le,he)=>{ee.storage[(Q+M)*3+he]=g(Math.exp(P[Q*B+V.indexOf(le)]))}),this.rQuat||(this.rQuat=new p(0,0,0,0));const ce=re.rawProperties.map(le=>P[Q*B+V.indexOf(le)]);this.rQuat.set(ce[0],ce[1],ce[2],ce[3]),this.rQuat.normalize(),this.rQuat.w<0&&this.rQuat.mulScalar(-1),re.storage[(Q+M)*3+0]=this.rQuat.x,re.storage[(Q+M)*3+1]=this.rQuat.y,re.storage[(Q+M)*3+2]=this.rQuat.z,G&&(q.rawProperties.forEach((le,he)=>{q.storage[(Q+M)*3+he]=P[Q*B+V.indexOf(le)]}),X.storage[Q+M]=P[Q*B+V.indexOf(X.rawProperties[0])]+H[2*k],K.storage[Q+M]=Math.exp(P[Q*B+V.indexOf(K.rawProperties[0])]))}M+=U,L.head+=U*O}return E[0].properties=E[0].decodedProperties,new c(E,F)},D=async(L,E,F)=>{for(let k=0;k<E.length;++k){const H=E[k],G=H.properties.reduce((B,V)=>B+V.byteSize,0),W=H.properties.map(B=>{if(B.storage)switch(B.type){case"char":return(V,O)=>{B.storage[O]=V.getInt8()};case"uchar":return(V,O)=>{B.storage[O]=V.getUint8()};case"short":return(V,O)=>{B.storage[O]=V.getInt16()};case"ushort":return(V,O)=>{B.storage[O]=V.getUint16()};case"int":return(V,O)=>{B.storage[O]=V.getInt32()};case"uint":return(V,O)=>{B.storage[O]=V.getUint32()};case"float":return(V,O)=>{B.storage[O]=V.getFloat32()};case"double":return(V,O)=>{B.storage[O]=V.getFloat64()};default:throw new Error(`Unsupported property data type '${B.type}' in ply header`)}else return V=>{V.head+=B.byteSize}});let R=0;for(;R<H.count;){for(;L.remaining<G;)await L.read();const B=Math.min(H.count-R,Math.floor(L.remaining/G));for(let V=0;V<B;++V){for(let O=0;O<H.properties.length;++O)W[O](L,R);R++}}}return new c(E,F)},T=async(L,E,F)=>{const k=(P,N)=>{const U=P.length-N.length;let z,$;for(z=0;z<=U;++z){for($=0;$<N.length&&P[z+$]===N[$];++$);if($===N.length)return z}return-1},H=(P,N)=>{if(P.length<N.length)return!1;for(let U=0;U<N.length;++U)if(P[U]!==N[U])return!1;return!0};let G;for(;;){if(await L.read(),L.tail>=e.length&&!H(L.data,e))throw new Error("Invalid ply header");if(G=k(L.data,s),G!==-1)break}const W=new TextDecoder("ascii").decode(L.data.subarray(0,G)).split(`
`),{elements:R,format:B,comments:V}=v(W);if(B!=="binary_little_endian")throw new Error("Unsupported ply format");L.head=G+s.length,L.compact();const O=(P,N,U)=>{var $,X;if(((X=($=globalThis.returnedProperties)==null?void 0:$.position)==null?void 0:X.length)>=P*3){console.log("____ ENGINE IVAN","复用内存 readPlyWorker",P);const K=[{name:"position",type:"float",storage:globalThis.returnedProperties.position||new Float32Array(P*3),byteSize:4,rawProperties:["x","y","z"]},{name:"color_opacity",type:"uint16",storage:globalThis.returnedProperties.color_opacity||new Uint16Array(P*4),byteSize:2,rawProperties:["f_dc_0","f_dc_1","f_dc_2","opacity"]},{name:"rotation",type:"float",storage:globalThis.returnedProperties.rotation||new Float32Array(P*3),byteSize:4,rawProperties:["rot_1","rot_2","rot_3","rot_0"]},{name:"scale",type:"uint16",storage:globalThis.returnedProperties.scale||new Uint16Array(P*3),byteSize:2,rawProperties:["scale_0","scale_1","scale_2"]},{name:"cutoff",type:"float",storage:globalThis.returnedProperties.cutoff||new Float32Array(P),byteSize:4,rawProperties:["cutoff"]},{name:"time_index",type:"float",storage:globalThis.returnedProperties.time_index||new Float32Array(P),byteSize:4,rawProperties:["time_index"]}];U&&K.push({name:"motion",type:"float",storage:globalThis.returnedProperties.motion||new Float32Array(P*3),byteSize:4,rawProperties:["motion_0","motion_1","motion_2"]},{name:"t",type:"float",storage:globalThis.returnedProperties.t||new Float32Array(P),byteSize:4,rawProperties:["t"]},{name:"t_scale",type:"float",storage:globalThis.returnedProperties.t_scale||new Float32Array(P),byteSize:4,rawProperties:["t_scale"]});for(let q=0;q<N;++q){const re=`f_rest_${q}`;K.push({name:re,type:"float",storage:globalThis.returnedProperties[re]||new Float32Array(P),byteSize:4,rawProperties:[re]})}return globalThis.returnedProperties={},K}else{console.log("____ ENGINE IVAN","不复用内存 readPlyWorker",P),P=Math.ceil(P*1.1);const K=[{name:"position",type:"float",storage:new Float32Array(P*3),byteSize:4,rawProperties:["x","y","z"]},{name:"color_opacity",type:"uint16",storage:new Uint16Array(P*4),byteSize:2,rawProperties:["f_dc_0","f_dc_1","f_dc_2","opacity"]},{name:"rotation",type:"float",storage:new Float32Array(P*3),byteSize:4,rawProperties:["rot_1","rot_2","rot_3","rot_0"]},{name:"scale",type:"uint16",storage:new Uint16Array(P*3),byteSize:2,rawProperties:["scale_0","scale_1","scale_2"]},{name:"cutoff",type:"float",storage:new Float32Array(P),byteSize:4,rawProperties:["cutoff"]},{name:"time_index",type:"float",storage:new Float32Array(P),byteSize:4,rawProperties:["time_index"]}];U&&K.push({name:"motion",type:"float",storage:new Float32Array(P*3),byteSize:4,rawProperties:["motion_0","motion_1","motion_2"]},{name:"t",type:"float",storage:new Float32Array(P),byteSize:4,rawProperties:["t"]},{name:"t_scale",type:"float",storage:new Float32Array(P),byteSize:4,rawProperties:["t_scale"]});for(let q=0;q<N;++q){const re=`f_rest_${q}`;K.push({name:re,type:"float",storage:new Float32Array(P),byteSize:4,rawProperties:[re]})}return K}};return await(async()=>{if(w(R)){const P=R[1].count,N=R[1].properties.find($=>$.name==="packed_time")!==void 0,U=R.find($=>$.name==="sh")||{properties:[]};R[0].decodedProperties=O(P,U.properties.length,N);const z=await b(L,R,V);return await I(z,R,E,F,N)}if(x(R)){const P=R[0].count,N=R[0].properties.find(z=>z.name==="t")!==void 0,U=R[0].properties.filter(z=>z.name.startsWith("f_rest_"));return R[0].decodedProperties=O(P,U.length,N),await C(L,R,V,E,F,N)}return R.forEach(P=>{P.properties.forEach(N=>{const U=r.get(N.type);if(U){const z=new U(P.count);N.storage=z}})}),await D(L,R,V)})()},I=(L,E,F,k,H)=>{const{numSplats:G,chunkData:W,chunkSize:R,vertexData:B,shData0:V,shData1:O,shData2:M,shBands:P,comments:N}=L,U=E[0].decodedProperties,z=U.find(j=>j.name==="position"),$=U.find(j=>j.name==="color_opacity"),X=U.find(j=>j.name==="motion"),K=U.find(j=>j.name==="rotation"),q=U.find(j=>j.name==="scale"),re=U.find(j=>j.name==="t"),ee=U.find(j=>j.name==="t_scale"),se=U.find(j=>j.name==="cutoff"),ne=U.find(j=>j.name==="time_index");se.storage.fill(0),ne.storage.fill(F);const Q=new f,ce=new p,le=new f,he=new u,te=new f,He=new f,ss=P>0?new Float32Array(45):null,Xt=new p(0,0,0,0),vi=new m(W,R,B,V,O,M,P,Q,ce,le,he,te,He,ss),xi=performance.now();console.log("decompressData start",G);for(let j=0;j<G;++j){vi.read(j),z.storage[j*3+0]=Q.x,z.storage[j*3+1]=Q.y,z.storage[j*3+2]=Q.z,Xt.set(ce.x,ce.y,ce.z,ce.w),Xt.normalize(),Xt.w<0&&Xt.mulScalar(-1),K.storage[j*3+0]=Xt.x,K.storage[j*3+1]=Xt.y,K.storage[j*3+2]=Xt.z,q.storage[j*3+0]=g(Math.exp(le.x)),q.storage[j*3+1]=g(Math.exp(le.y)),q.storage[j*3+2]=g(Math.exp(le.z)),H&&(X.storage[j*3+0]=te.x,X.storage[j*3+1]=te.y,X.storage[j*3+2]=te.z,ee.storage[j]=Math.exp(He.x),re.storage[j]=He.y+k[2*F]),$.storage[j*4+0]=g(he.x),$.storage[j*4+1]=g(he.y),$.storage[j*4+2]=g(he.z);const pt=he.w<=0?-40:he.w>=1?40:-Math.log(1/he.w-1);if($.storage[j*4+3]=g(1/(1+Math.exp(-pt))),ss)for(let Ce=0;Ce<ss.length;++Ce){const Je=U.find(bt=>bt.name===`f_rest_${Ce}`);Je&&(Je.storage[j]=ss[Ce])}}const ys=performance.now();console.log("decompressData time",ys-xi,G);const ye=[{count:G,name:"vertex",properties:U}];return new c(ye,N)}}class nN extends Se{constructor(e){super();h(this,"worker");h(this,"loadUrlList");this.loadUrlList=e,this._initWorker()}async _initWorker(){this.worker=new Worker(URL.createObjectURL(new Blob([`(${aN.toString()})()`],{type:"application/javascript"}))),this.worker.postMessage({type:"initWorker",loadUrlList:this.loadUrlList})}loadPly(e,s,i,r,a,n=(d,f)=>{},o=(d,f,u)=>{},c=(d,f)=>{}){var d;return(d=this.worker)==null||d.postMessage({type:"loadPly",url:e,decompress:s,timeIndex:i,timeOption:r,returnedProperties:a},Object.keys(a).map(f=>a[f].buffer)),new Promise((f,u)=>{if(!this.worker){u(new Error("no worker"));return}this.worker.onmessage=p=>{if(!this.worker)return;const{data:m}=p;if(e===m.url)switch(m.type){case"totalLength":n==null||n(m.totalLength,m.url);break;case"progress":o==null||o(m.bytes,m.totalLength,m.url);break;case"splatData":f(m.data);break;case"error":c==null||c(m.data,m.url);break}}})}destroy(){this.loadUrl="",this.worker&&(this.worker.postMessage({type:"destroyWorker"}),this.worker.terminate(),this.worker=void 0)}}class oN{constructor(t,e){h(this,"urlList");h(this,"app");h(this,"maxRetries");h(this,"gsplatResource");h(this,"onlyOneAsset");h(this,"readWorker");console.log("____ PLYJS ENGINE IVAN","Register PlyParser.constructor"),this.app=t,this.maxRetries=e,this.urlList=[],this.gsplatResource=null,this.readWorker=null,this.totalReceived=0}async load(t,e,s){var c,d,f;console.log("____ PLYJS ENGINE IVAN","PlyParser.load"),this.urlList=[],t.load.includes(",")?this.urlList=t.load.split(","):this.urlList.push(t.load);const i=s.data.createTime!==((d=(c=this.onlyOneAsset)==null?void 0:c.data)==null?void 0:d.createTime);(!this.readWorker||i)&&((f=this.readWorker)==null||f.destroy(),this.readWorker=new nN(this.urlList));const r=s.data.loadIndex>=0?s.data.loadIndex:0,a=s.data.loadMode==="all"?this.urlList.length-r:r+1,n=s.data.timeOption,o=s.data.events;for(let u=r;u<a;u++)await this.loadGsplatData(this.urlList,e,s,u,n,o,a);o.fire("loadAllAssetsDone")}async loadGsplatData(t,e,s,i,r,a,n){var d,f,u,p,m;console.log("____ PLYJS ENGINE IVAN","loadGsplatData",t[i].trim(),i);const o=r[2*i]+r[2*i+1],c=t[i].trim();globalThis.loadGsplatDataStartTime=performance.now();try{const _=((f=(d=this.gsplatResource)==null?void 0:d.gsplatData)==null?void 0:f.returnedProperties)??{},S=await((u=this.readWorker)==null?void 0:u.loadPly(c,s.data.decompress,i,r,_,()=>{this.totalReceived=0},(x,b)=>{this.totalReceived+=x,s&&a.fire("progress",b*i/n+this.totalReceived/n,b)},(x,b)=>{debugger;console.warn("ERROE Load Ply",b,x)}));if(S.isCompressed){debugger;throw new Error("Compressed PLY is not supported")}const g={};S.elements[0].properties.forEach(x=>{g[x.name]=x.storage}),s.fire("load:data",S);const v=S.elements[0].count,w=s.data.createTime!==((m=(p=this.onlyOneAsset)==null?void 0:p.data)==null?void 0:m.createTime);if(this.gsplatResource&&!w)this.gsplatResource.appendGSplatResource(g,v,r,o,s,a);else{console.log("____ ENGINE IVAN","new GSplatResource");const x=new Gy([{name:"vertex",count:0,properties:[]}],S.comments);x.is4D=S.is4D,x.shBands=S.shBands,this.gsplatResource=new DA(this.app.graphicsDevice,x),await this.gsplatResource.updateData(),this.onlyOneAsset=s,this.gsplatResource.appendGSplatResource(g,v,r,o,s,a)}e(null,this.gsplatResource)}catch(_){e(_,null)}}open(t,e){return e}}async function lN(){const l="super4d-cache-v1",t={maxAge:864e7,maxSize:10737418240},e=.28209479177387814;class s{constructor(M={}){this.options={...t,...M},this.cache=null,this.lruList=[],this.cacheSizes=new Map,this.currentSize=0,this.initialized=!1}async init(){if(!this.initialized){try{this.cache=await caches.open(l);const M=await this.cache.keys(),P=[];for(const N of M){const U=N.url,z=await this.cache.match(U);if(z){const X=(await z.blob()).size,K=z.headers.get("x-cache-time");K&&P.push({url:U,size:X,cacheTime:parseInt(K)})}}P.sort((N,U)=>N.cacheTime-U.cacheTime);for(const N of P)this.cacheSizes.set(N.url,N.size),this.currentSize+=N.size,this.lruList.push(N.url)}catch(M){console.error("Failed to initialize cache:",M)}this.initialized=!0}}async get(M){if(await this.init(),!this.cache)return null;try{const P=await this.cache.match(M);if(!P)return null;const N=P.headers.get("x-cache-time");return N&&Date.now()-parseInt(N)>this.options.maxAge?(await this.delete(M),null):(this.updateLRU(M),P)}catch{return null}}async set(M,P){if(!(!this.cache||M.startsWith("blob:")))try{const N=P.clone(),U=await N.blob(),z=U.size;this.currentSize+z>this.options.maxSize&&await this.cleanupSpace(z);const $=new Headers(N.headers);$.set("x-cache-time",Date.now().toString());const X=new Response(U,{status:N.status,statusText:N.statusText,headers:$});await this.cache.put(M,X),this.cacheSizes.set(M,z),this.currentSize+=z,this.updateLRU(M)}catch(N){console.error("Cache set error:",N)}}updateLRU(M){const P=this.lruList.indexOf(M);P>-1&&this.lruList.splice(P,1),this.lruList.push(M)}async cleanupSpace(M){const P=this.options.maxSize*.9;if(!(this.currentSize<=P))for(;this.lruList.length>0&&this.currentSize>P;){const N=this.lruList.shift();N&&await this.delete(N)}}async delete(M){if(this.cache)try{await this.cache.delete(M);const P=this.cacheSizes.get(M)||0;this.currentSize-=P,this.cacheSizes.delete(M);const N=this.lruList.indexOf(M);N>-1&&this.lruList.splice(N,1)}catch(P){console.error("Cache delete error:",P)}}async clear(){if(this.cache)try{await this.cache.keys().then(M=>Promise.all(M.map(P=>{var N;return(N=this.cache)==null?void 0:N.delete(P)}))),this.lruList=[],this.cacheSizes.clear(),this.currentSize=0}catch(M){console.error("Cache clear error:",M)}}destroy(){this.cache=null,this.lruList=[],this.cacheSizes.clear(),this.currentSize=0}}class i{constructor(M=[],P={}){this.cacheManager=new s(P.cache),this.retryCount=P.retryCount||3,this.retryDelay=P.retryDelay||500,this.maxConcurrency=P.maxConcurrency||6,this.downloadQueue=M,this.isProcessingDownloadQueue=!1,this.pendingResponses=new Map,this.processDownloadQueue()}async processDownloadQueue(){if(!this.isProcessingDownloadQueue)for(this.isProcessingDownloadQueue=!0;this.downloadQueue.length>0;)try{const P=this.downloadQueue.splice(0,this.maxConcurrency).map(N=>{if(!this.pendingResponses.has(N)){const U=this.download(N);return this.pendingResponses.set(N,U),U.then(()=>{this.pendingResponses.delete(N)})}return Promise.resolve()});await Promise.all(P)}catch(M){console.error("Download error:",M)}finally{this.isProcessingDownloadQueue=!1}}async fetch(M,P={}){if(this.pendingResponses.has(M))return this.pendingResponses.get(M);const{forceRefresh:N=!1,...U}=P;this.pendingResponses.set(M,this.download(M,U));const z=await this.pendingResponses.get(M);return this.pendingResponses.delete(M),z}async download(M,P={}){var X;await((X=this.cacheManager)==null?void 0:X.init());const{forceRefresh:N=!1,...U}=P;N&&await this.cacheManager.delete(M);const z=await this.cacheManager.get(M);if(z)return z;let $;for(let K=0;K<this.retryCount;K++)try{const q=await fetch(M,U);if(!q.ok)throw new Error(`HTTP error! status: ${q.status}`);return await this.cacheManager.set(M,q),q}catch(q){console.error("Download error:",q),$=q,K<this.retryCount-1&&await new Promise(re=>setTimeout(re,this.retryDelay*(K+1)))}throw $}async clearCache(){await this.cacheManager.clear()}destroy(){var M;(M=this.cacheManager)==null||M.destroy(),this.cacheManager=null,this.downloadQueue=[],this.isProcessingDownloadQueue=!1,this.pendingResponses=new Map,this.pendingResponses.clear()}}class r{constructor(M,P=[]){this.elements=M,this.comments=P,this.isCompressed=!1,this.is4D=!!(this.elements[0].properties.find(N=>N.name==="t")||this.elements[0].properties.find(N=>N.name==="lifecycle")),this.shBands=this.getShBands()}getShBands(){return{3:1,8:2,15:3}[(()=>{for(let N=0;N<15;++N)if(!this.elements[0].properties.find(U=>U.name===`f_rest_${N}`))return N;return 15})()]??0}}class a{constructor(M){this.url=M}async readFragment(){globalThis.fetchWorker||(globalThis.fetchWorker=new i(globalThis.downloadQueueUrlList));const M=await globalThis.fetchWorker.fetch(this.url);if(!M.ok)throw new Error(`Failed to fetch ${this.url}: ${M.statusText}`);const P=await M.arrayBuffer(),N=new Uint8Array(P);let U=0,{size:z,type:$}=this._readBoxHeader(N,U);if($!=="moof")throw new Error("Not a moof");U+=8;const X=U+z-8;let K=null;for(;U<X;){const{size:se,type:ne}=this._readBoxHeader(N,U);U+=8;const Q=N.slice(U,U+se-8);U+=se-8,ne==="emsg"&&(K=this._parseEmsg(Q))}if(!K)throw new Error("Incomplete moof");const{size:q,type:re}=this._readBoxHeader(N,U);if(re!=="mdat")throw new Error("Expected mdat box after moof");U+=8;const ee=N.slice(U,U+(q-8));return{metadata:K,segmentData:ee}}_readBoxHeader(M,P){if(P+8>M.length)throw new Error("EOF");const N=M[P]<<24|M[P+1]<<16|M[P+2]<<8|M[P+3],U=String.fromCharCode(M[P+4],M[P+5],M[P+6],M[P+7]);return{size:N,type:U}}_parseEmsg(M){let P=0;P=M.indexOf(0,P)+1,P=M.indexOf(0,P)+1,P+=16;const N=M.slice(P);return globalThis.CBOR.decode(N)}}class n{constructor(M=0,P=0,N=0,U=1){this.x=M,this.y=P,this.z=N,this.w=U}set(M,P,N,U){return this.x=M,this.y=P,this.z=N,this.w=U,this}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}normalize(M=this){let P=M.length();return P===0?(this.x=this.y=this.z=0,this.w=1):(P=1/P,this.x=M.x*P,this.y=M.y*P,this.z=M.z*P,this.w=M.w*P),this}mulScalar(M,P=this){return this.x=P.x*M,this.y=P.y*M,this.z=P.z*M,this.w=P.w*M,this}}self.onmessage=async O=>{var P,N;const{data:M}=O;switch(M.type){case"initWorker":importScripts(M.cborXUrl);break;case"destroyWorker":o();break;case"loadGsdManifest":const{manifestUrl:U,loadRepresentation:z}=M,$=await d(U,z);globalThis.manifestUrl=U,globalThis.manifest=$,globalThis.resentation=$.representation,globalThis.downloadQueueUrlList=c(),globalThis.fetchWorker=new i(globalThis.downloadQueueUrlList),self.postMessage({type:"onloadManifest",data:$,url:U,representation:z});break;case"loadGsdSegments":try{const K=u(globalThis.manifest,globalThis.resentation),q=await p(globalThis.manifest,K),re=(P=q==null?void 0:q.elements[0])==null?void 0:P.properties.map(ee=>ee.storage.buffer);self.postMessage({type:"loadGsdSegmentsDone",data:q,url:globalThis.manifestUrl,representation:globalThis.resentation},re)}catch(K){console.error("Error loading GSD:",K),self.postMessage({type:"error",data:K.message,url:globalThis.manifestUrl})}break;case"loadTimelineIndexSegments":const{timelineIndexs:X}=M;try{const K=u(globalThis.manifest,globalThis.resentation),q=await m(globalThis.manifest,K,X),re=(N=q==null?void 0:q.elements[0])==null?void 0:N.properties.map(ee=>ee.storage.buffer);self.postMessage({type:"loadTimelineIndexSegmentsDone",data:q,timelineIndexs:X,url:globalThis.manifestUrl,representation:globalThis.resentation},re)}catch(K){console.error("Error loading GSD:",K),self.postMessage({type:"error",data:K.message,url:globalThis.manifestUrl})}break}};const o=()=>{var O;globalThis.manifestUrl=null,globalThis.manifest=null,globalThis.resentation=null,(O=globalThis.fetchWorker)==null||O.destroy(),globalThis.fetchWorker=null,globalThis.downloadQueueUrlList=[],globalThis.loadedSegments=[],globalThis.currentLoadSg=null},c=()=>{const O=new Set,M=u(globalThis.manifest,globalThis.resentation),P=globalThis.manifest.baseUrl,N=M.segmentTemplate[0];for(const z of N.segmentTimeline)for(const $ of z.nl){const X=`${P}${N.media.replace("$SegGroupIndex$",String(z.sg)).replace("$NodeIndex$",String($))}`;O.add(X)}return Array.from(O)},d=async(O,M)=>{const N=await(await fetch(O)).text(),U=JSON.parse(N);U.baseUrl=O.replace(/\/[^\/]*$/,"/");const{schemas:z,gsiUrl:$,repId:X}=await f(U,M);return U.schemas=z,U.gsiUrl=$,U.representation=X,U},f=async(O,M)=>{let P=null,N=null;for(const re of O.adaptationSets)if(re.contentType==="4dgs"){N=re;for(const ee of re.representations)if(ee.id===M){P=ee;break}break}P||(P=N.representations[0],console.warn(`Representation '${M}' not found, use the first representation instead`));const U=P.id,z=O.baseUrl+U+"/init.gsi.json",X=await(await fetch(z)).text(),K=JSON.parse(X),q={};return q[U]=K,{schemas:q,gsiUrl:z,repId:U}},u=(O,M="high-quantized")=>{let P=null;for(const N of O.adaptationSets)if(N.contentType==="4dgs"){for(const U of N.representations)if(U.id===M){P=U;break}break}if(!P)throw new Error(`Representation '${M}' not found`);return P},p=async(O,M)=>{const P=M.id,N=O.schemas[P].attributes,U=M.segmentTemplate[0];globalThis.loadedSegments=[];const z=[],$=[];for(const K of U.segmentTimeline)for(const q of K.nl){if(globalThis.loadedSegments.includes(`${K.sg}_${q}`))continue;globalThis.loadedSegments.push(`${K.sg}_${q}`);const re=await _(O,M,N,K.sg,q);$.push(re.decoded),z.push(re.metadata)}return S($,N,O.comments)},m=async(O,M,P)=>{if(!P||P.length===0)return{decoded:[],metadata:[]};const N=M.id,U=O.schemas[N].attributes,z=M.segmentTemplate[0];globalThis.loadedSegments||(globalThis.loadedSegments=[]);const $=z.segmentTimeline[P[0]];globalThis.currentLoadSg!==$.sg&&(globalThis.loadedSegments=globalThis.loadedSegments.filter(se=>!se.startsWith(globalThis.currentLoadSg)),globalThis.currentLoadSg=$.sg);let X;const K=[];for(const se of P){X=z.segmentTimeline[se];for(const ne of X.nl)globalThis.loadedSegments.includes(`${X.sg}_${ne}`)||(globalThis.loadedSegments.push(`${X.sg}_${ne}`),K.push(ne))}const q=await _(O,M,U,X.sg,K);q.metadata;const re=q.decoded;return S(re,U,O.comments)},_=async(O,M,P,N,U)=>{const z=O.baseUrl,X=M.segmentTemplate[0].media,K=U.map(se=>`${z}${X.replace("$SegGroupIndex$",String(N)).replace("$NodeIndex$",String(se))}`),q=await Promise.all(K.map(async se=>{const ne=await v(se),Q=ne.metadata,ce=ne.segmentData,le=Q.gaussianCount;console.log(`loadSegment ${se}`),console.log("loadSegment timeStart:",Q.timeStart,"segment timeEnd:",Q.timeEnd,"segment gaussianCount:",le);let he;if(M.id.includes("quantized")){const te=Q.chunk_bounds;he=G(ce,le,P,N,te)}else he=B(ce,le,P,N);return{decoded:he,metadata:Q}})),re=q.map(se=>se.decoded),ee=q.map(se=>se.metadata);return{decoded:re,metadata:ee}},S=(O,M,P)=>{if(O.length===0)return new r([{name:"vertex",count:0,properties:[{name:"position",type:"float",storage:new Float32Array(0),byteSize:4},{name:"color_opacity",type:"uint16",storage:new Uint16Array(0),byteSize:2},{name:"t",type:"float",storage:new Float32Array(0),byteSize:4},{name:"t_scale",type:"float",storage:new Float32Array(0),byteSize:4},{name:"cutoff",type:"float",storage:new Float32Array(0),byteSize:4},{name:"motion",type:"float",storage:new Float32Array(0),byteSize:4},{name:"rotation",type:"float",storage:new Float32Array(0),byteSize:4},{name:"scale",type:"uint16",storage:new Uint16Array(0),byteSize:2},{name:"time_index",type:"float",storage:new Float32Array(0),byteSize:4}]}],P);const N=V(O),[U,z,$]=g(N.lifecycle,3,Float32Array),X=N.time_index,K=M.find(ee=>ee.name==="feature_rest"),q=[];if(K&&N.feature_rest){const ee=K.dataType.split(",")[1].trim().replace(">",""),se=g(N.feature_rest,3,Float32Array);for(const ne of se){const Q=g(ne,ee/3,Float32Array);for(let ce=0;ce<Q.length;ce++)q.push({name:`f_rest_${ce}`,type:"float",storage:Q[ce],byteSize:4})}}return new r([{name:"vertex",count:N.position.length/3,properties:[{name:"position",type:"float",storage:N.position,byteSize:4},{name:"color_opacity",type:"uint16",storage:N.color_opacity,byteSize:2},{name:"t",type:"float",storage:z,byteSize:4},{name:"t_scale",type:"float",storage:U,byteSize:4},{name:"cutoff",type:"float",storage:$,byteSize:4},{name:"motion",type:"float",storage:N.motion,byteSize:4},{name:"rotation",type:"float",storage:N.rotation,byteSize:4},{name:"scale",type:"uint16",storage:N.scale,byteSize:2},{name:"time_index",type:"float",storage:X,byteSize:4},...q]}],P)},g=(O,M,P)=>{const N=new Array(M),U=Math.floor(O.length/M),z=O.length%M;for(let $=0;$<M;$++){const X=$<z?U+1:U;N[$]=new P(X)}for(let $=0;$<O.length;$++){const X=$%M,K=Math.floor($/M);N[X][K]=O[$]}return N},v=async O=>{const M=new a(O),{metadata:P,segmentData:N}=await M.readFragment();return{metadata:P,segmentData:N}},w=(O,M)=>{let P,N,U=-1;if(O.encoding){const z=O.encoding.storageType;if(z==="uint32")N=Uint32Array,P=Uint32Array.BYTES_PER_ELEMENT;else if(z.startsWith("array<uchar")){N=Uint8Array;const $=z.split(",")[1].trim().replace(">","");U=parseInt($),P=U*Uint8Array.BYTES_PER_ELEMENT}else throw new Error(`Unsupported storage type: ${z}`)}else if(N=Float32Array,O.dataType==="vec3f")P=3*Float32Array.BYTES_PER_ELEMENT;else if(O.dataType==="vec4f")P=4*Float32Array.BYTES_PER_ELEMENT;else if(O.dataType==="vec2f")P=2*Float32Array.BYTES_PER_ELEMENT;else if(O.dataType.startsWith("array<float")){const z=O.dataType.split(",")[1].trim().replace(">","");U=parseInt(z),P=U*Float32Array.BYTES_PER_ELEMENT}else throw new Error(`Unsupported data type: ${O.dataType}`);return{dataSize:M*P,datatype:N,arraySize:U}},x=(O,M)=>{const P=(1<<M)-1;return(O&P)/P},b=O=>{const M=new Float32Array(O.length*3);for(let P=0;P<O.length;P++)M[P*3]=x(O[P]>>>21,11),M[P*3+1]=x(O[P]>>>11,10),M[P*3+2]=x(O[P],11);return M},C=O=>{const M=new Float32Array(O.length*4);for(let P=0;P<O.length;P++)M[P*4]=x(O[P]>>>24,8),M[P*4+1]=x(O[P]>>>16,8),M[P*4+2]=x(O[P]>>>8,8),M[P*4+3]=x(O[P],8);return M},D=O=>{const M=new Float32Array(O.length*3),P=1/(Math.sqrt(2)*.5);for(let N=0;N<O.length;N++){const U=(x(O[N]>>>20,10)-.5)*P,z=(x(O[N]>>>10,10)-.5)*P,$=(x(O[N],10)-.5)*P,X=Math.sqrt(1-(U*U+z*z+$*$));let K=0,q=0,re=0,ee=0;switch(O[N]>>>30){case 0:K=X,q=U,re=z,ee=$;break;case 1:K=X,q=z,re=$,ee=U;break;case 2:K=z,q=X,re=$,ee=U;break;case 3:K=z,q=$,re=X,ee=U;break}const se=H(K,q,re,ee);M[N*3]=se.x,M[N*3+1]=se.y,M[N*3+2]=se.z}return M},T=(O,M,P)=>{const N=P-M,U=new Float32Array(O.length);for(let z=0;z<O.length;z++)U[z]=O[z]/255*N+M;return U},I=new Float32Array(1),L=new Int32Array(I.buffer),E=O=>{I[0]=O;const M=L[0];let P=M>>16&32768,N=M>>12&2047;const U=M>>23&255;return U<103?P:U>142?(P|=31744,P|=(U===255?0:1)&&M&8388607,P):U<113?(N|=2048,P|=(N>>114-U)+(N>>113-U&1),P):(P|=U-112<<10|N>>1,P+=N&1,P)},F=O=>{const M=new Uint16Array(O.length);for(let P=0;P<O.length/4;++P)M[P*4]=E(O[P*4]*e+.5),M[P*4+1]=E(O[P*4+1]*e+.5),M[P*4+2]=E(O[P*4+2]*e+.5),M[P*4+3]=E(O[P*4+3]);return M},k=new n(0,0,0,0),H=(O,M,P,N)=>(k.set(M,P,N,O),k.normalize(),k.w<0&&k.mulScalar(-1),k);function G(O,M,P,N,U){const z=U[Object.keys(U)[0]].length,$=256;let X=[],K=M;for(let Q=0;Q<z;Q++){const ce=Math.min($,K);X.push(ce),K-=ce}let q=0,re={};for(let Q of P){const ce=Q.name,{dataSize:le,datatype:he}=w(Q,M);let te=O.buffer.slice(q,q+le),He=new he(te);re[ce]=He,q+=le}let ee=[],se=0;for(let Q=0;Q<z;Q++){const ce=W(re,U,Q,X,se,P),le=ce.chunkDecompressed;ee.push(le),se=ce.chunkStartIdx}let ne={};for(let Q of Object.keys(ee[0])){let ce=0;for(let he=0;he<ee.length;he++)ce+=ee[he][Q].length;Q==="color_opacity"||Q==="scale"?ne[Q]=new Uint16Array(ce):ne[Q]=new Float32Array(ce);let le=0;for(let he=0;he<ee.length;he++)ne[Q].set(ee[he][Q],le),le+=ee[he][Q].length}return P.some(Q=>Q.name==="feature_rest")&&(ne.feature_rest=R(re,P)),ne.time_index=new Float32Array(M),ne.time_index.fill(N-1),ne}const W=(O,M,P,N,U,z)=>{const $=N[P],X=U+$,K=(re,ee,se)=>re*(1-se)+ee*se;let q={};for(let re of z){const ee=re.name,se=re.encoding.codec,ne=O[ee].slice(U,X);if(se==="pack_11_10_11")if(ee==="scale"){const Q=M.min_scales[P],ce=M.max_scales[P],le=b(ne),he=le.length,te=new Uint16Array(he);for(let He=0;He<he;He++)te[He]=E(Math.exp(K(Q[He%3],ce[He%3],le[He])));q[ee]=te}else{const Q=b(ne);let ce,le;if(ee==="position")ce=M.min_means[P],le=M.max_means[P];else if(ee==="motion")ce=M.min_motion[P],le=M.max_motion[P];else if(ee==="lifecycle"){const he=M.min_t_scale[P],te=M.max_t_scale[P],He=M.min_time[P],ss=M.max_time[P],Xt=M.min_cutoff[P],vi=M.max_cutoff[P];ce=[he[0],He[0],Xt[0]],le=[te[0],ss[0],vi[0]]}else throw new Error(`Unknown attribute for pack_11_10_11: ${ee}`);for(let he=0;he<Q.length;he++)Q[he]=K(ce[he%3],le[he%3],Q[he]);q[ee]=Q}else if(se==="pack_8888"){let Q=C(ne);const ce=M.min_colors[P],le=M.max_colors[P],he=new Uint16Array(Q.length);for(let te=0;te<Q.length;te++){const He=te*4;he[He]=E(K(ce[0],le[0],Q[He])),he[He+1]=E(K(ce[1],le[1],Q[He+1])),he[He+2]=E(K(ce[2],le[2],Q[He+2])),he[He+3]=E(Q[He+3])}q[ee]=he}else if(se==="pack_rotation_32"){const Q=D(ne);q[ee]=Q}else if(se==="range_quant_u8"){if(ee==="feature_rest")continue;throw new Error(`Unknown codec: ${se}`)}}return{chunkDecompressed:q,chunkStartIdx:X}},R=(O,M)=>{const P="feature_rest",N=M.find(X=>X.name===P);let U;const z=N.encoding.codec,$=O[P];if(z==="range_quant_u8"){const[X,K]=N.encoding.range;U=T($,X,K)}else throw new Error(`Unknown codec: ${z}`);return U},B=(O,M,P,N)=>{let U=0;const z={};for(const q of P){const{dataSize:re}=w(q,M);if(["vec3f","vec4f","vec2f"].includes(q.dataType))z[q.name]=new Float32Array(O.buffer.slice(U,U+re));else if(q.dataType.startsWith("array<float"))z[q.name]=new Float32Array(O.buffer.slice(U,U+re));else throw new Error(`Unsupported data type: ${q.dataType}`);U+=re}const $=new Uint16Array(z.scale.length);for(let q=0;q<z.scale.length;q++)$[q]=E(Math.exp(z.scale[q]));z.scale=$;const X=z.rotation.length/4,K=new Float32Array(X*3);for(let q=0;q<X;q++){const re=H(z.rotation[q*4],z.rotation[q*4+1],z.rotation[q*4+2],z.rotation[q*4+3]);K[q*3]=re.x,K[q*3+1]=re.y,K[q*3+2]=re.z}return z.rotation=K,z.color_opacity=F(z.color_opacity),z.time_index=new Float32Array(M),z.time_index.fill(N-1),z},V=(O,M)=>{const P={};if(O.length===1)return O[0];for(const N of Object.keys(O[0]))if(O[0][N]instanceof Float32Array||O[0][N]instanceof Uint16Array){const U=O.reduce((X,K)=>X+K[N].length,0);let z;O[0][N]instanceof Uint16Array?z=new Uint16Array(U):z=new Float32Array(U);let $=0;for(const X of O)z.set(X[N],$),$+=X[N].length;P[N]=z}else Array.isArray(O[0][N])?P[N]=O.flatMap(U=>Array.from(U[N])):P[N]=O.map(U=>U[N]).flat();return P}}class hN extends Se{constructor(e){super();h(this,"manifestUrl");h(this,"worker");this.manifestUrl=e,this._initWorker()}async _initWorker(){this.worker=new Worker(URL.createObjectURL(new Blob([`(${lN.toString()})()`],{type:"application/javascript"}))),this.worker.postMessage({type:"initWorker",cborXUrl:"https://frontend.4dv-intelligence.com/viewer-static/cbor-x@1.6.0.min.js"})}loadGsdManifest(e){var s;return(s=this.worker)==null||s.postMessage({type:"loadGsdManifest",manifestUrl:this.manifestUrl,loadRepresentation:e}),new Promise((i,r)=>{if(!this.worker){r(new Error("no worker"));return}this.worker.onmessage=a=>{if(!this.worker)return;const{data:n}=a;if(this.manifestUrl===n.url)switch(n.type){case"onloadManifest":i({manifest:n.data,url:n.url,representation:n.representation});break;case"error":r(n.data);break}}})}loadGsdSegments(e,s){var i;return(i=this.worker)==null||i.postMessage({type:"loadGsdSegments"}),new Promise((r,a)=>{if(!this.worker){a(new Error("no worker"));return}this.worker.onmessage=n=>{if(!this.worker)return;const{data:o}=n;if(this.manifestUrl===o.url)switch(o.type){case"progress":e==null||e(o.bytes,o.totalLength,o.url);break;case"loadGsdSegmentsDone":r(o.data);break;case"error":s==null||s(o.data,o.url);break}}})}loadGsdSegmentsByTimelineIndex(e,s,i){var r;return(r=this.worker)==null||r.postMessage({type:"loadTimelineIndexSegments",timelineIndexs:e}),new Promise((a,n)=>{if(!this.worker){n(new Error("no worker"));return}this.worker.onmessage=o=>{if(!this.worker)return;const{data:c}=o;if(this.manifestUrl===c.url)switch(c.type){case"progress":s==null||s(c.bytes,c.totalLength,c.url);break;case"loadTimelineIndexSegmentsDone":a(c);break;case"error":i==null||i(c.data,c.url);break}}})}destroy(){this.worker&&(this.worker.postMessage({type:"destroyWorker"}),this.worker.terminate(),this.worker=void 0)}}const bc=class bc{constructor(t,e,s){h(this,"lastLoadIndex",0);h(this,"gsdAssetParser");this.manifest=t,this.representation=e,this.gsdAssetParser=s,this.segmentTimelines=this.getSegmentTimeline(t,e)}getSegmentTimeline(t,e){let s=null;for(const i of t.adaptationSets)if(i.contentType==="4dgs"){for(const r of i.representations)if(r.id===e){s=r;break}break}if(!s)throw new Error(`Representation '${e}' not found`);return s.segmentTemplate[0].segmentTimeline}onTimeChanged(t){const e=this.findSegmentTimeline(t);if(!e)return;const s=e.timelineIndex<this.segmentTimelines.length-1?e.timelineIndex+1:0;this.lastLoadIndex!==s&&(this.lastLoadIndex=s,this.loadNextSegment(s))}async loadNextSegment(t){const e=[];for(let r=0;r<bc.CACHE_COUNT;r++)e.push((t+r)%this.segmentTimelines.length);const s=e[e.length-1],i=this.segmentTimelines[s].t+this.segmentTimelines[s].d;this.gsdAssetParser.appendloadDataTask(e,i)}findSegmentTimeline(t){let e=0,s=this.segmentTimelines.length-1;for(;e<=s;){const i=e+s>>1,{t:r,d:a}=this.segmentTimelines[i];if(t<r)s=i-1;else if(t>=r+a)e=i+1;else return{timeline:this.segmentTimelines[i],timelineIndex:i}}return null}};h(bc,"CACHE_COUNT",6);let gu=bc;class cN{constructor(t,e){h(this,"urlList");h(this,"app");h(this,"maxRetries");h(this,"gsplatResource");h(this,"onlyOneAsset");h(this,"manifest");h(this,"schedule");h(this,"readWorker");h(this,"loadDataTaskQueue",[]);h(this,"isProcessingLoadTaskQueue",!1);console.log("____ GSDJS ENGINE IVAN","Register GsdParser.constructor"),this.app=t,this.maxRetries=e,this.urlList=[],this.gsplatResource=null,this.totalReceived=0,this.manifest={}}async load(t,e,s){console.log("____ GSDJS ENGINE IVAN","GsdParser.load",t.load);const i=s.data.events;this.events=i,this.asset=s,this.callback=e,this.timeOption=s.data.timeOption;let r=s.data.representation||"high-raw";this.readWorker=new hN(t.load);const a=await this.readWorker.loadGsdManifest(r);this.manifest=a.manifest,r=a.manifest.representation||r,this.schedule=new gu(this.manifest,r,this),this.totalReceivedCount=0;const n=this.getSegmentTimeline(this.manifest,r),o=n[0].t+n[0].d;this.appendloadDataTask([0,1],o),i.on("timeChanged",c=>{var d;(d=this.schedule)==null||d.onTimeChanged(c)})}getSegmentTimeline(t,e){let s=null;for(const i of t.adaptationSets)if(i.contentType==="4dgs"){for(const r of i.representations)if(r.id===e){s=r;break}break}if(!s)throw new Error(`Representation '${e}' not found`);return s.segmentTemplate[0].segmentTimeline}appendloadDataTask(t,e){this.loadDataTaskQueue.push({segmentIndexs:t,loadedTime:e}),this.isProcessingLoadTaskQueue||Promise.resolve().then(()=>this.processLoadQueue())}async processLoadQueue(){if(!this.isProcessingLoadTaskQueue){this.isProcessingLoadTaskQueue=!0;try{for(;this.loadDataTaskQueue.length>0;){const t=this.loadDataTaskQueue.shift();await this.loadGsplatData(t)}}finally{this.isProcessingLoadTaskQueue=!1}}}async loadGsplatData(t){var o,c;const{segmentIndexs:e,loadedTime:s}=t,i=this.events,r=this.asset,a=this.callback,n=this.timeOption;try{const f=(await this.readWorker.loadGsdSegmentsByTimelineIndex(e,(m,_)=>{this.totalReceived+=m,r&&i.fire("progress",this.totalReceived,_)},(m,_)=>{debugger;console.warn("ERROE Load GSD",_,m)})).data;if(r.fire("load:data",f),f.elements[0].count===0)return;this.totalReceivedCount+=f.elements[0].count;const u={};f.elements[0].properties.forEach(m=>{u[m.name]=m.storage});const p=r.data.createTime!==((c=(o=this.onlyOneAsset)==null?void 0:o.data)==null?void 0:c.createTime);if(this.gsplatResource&&!p)console.log("____ ENGINE IVAN","appendGSplatDecodedResource"),this.gsplatResource.appendGSplatResource(u,n,s,r,i);else{console.log("____ ENGINE IVAN","new GSplatDecodedResource");const m=new cA([{name:"vertex",count:0,properties:[]}],f.comments);m.is4D=f.is4D,m.shBands=f.shBands,this.gsplatResource=new IA(this.app.graphicsDevice,m),this.gsplatResource.setSceneInfo(this.manifest.sceneInfo),await this.gsplatResource.updateData(),this.gsplatResource.appendGSplatResource(u,n,s,r,i),this.onlyOneAsset=r,a&&a(null,this.gsplatResource),i.fire("loadAllAssetsDone")}}catch(d){console.error("loadGsplatData","error",d),a&&a(d,null)}}open(t,e){return e}}class dN extends Qe{constructor(t){console.log("____ ENGINE IVAN","Register GSplatHandler.constructor by application addResourceHandles"),super(t,"gsplat"),this.parsers={ply:new oN(t,3),json:new cN(t,3)}}_getUrlWithoutParams(t){return t.indexOf("?")>=0?t.split("?")[0]:t}_getParser(t){const e=xe.getExtension(this._getUrlWithoutParams(t)).toLowerCase().replace(".","");return this.parsers[e]||this.parsers.ply}load(t,e,s){console.log("____ ENGINE IVAN","GSplatHandler.load"),typeof t=="string"&&(t={load:t,original:t}),this._getParser(t.original).load(t,e,s)}open(t,e,s){return console.log("____ ENGINE IVAN","GSplatHandler.open"),e}}class Su{static setCompressedPRS(t,e,s){const i=s.singleVecs;let r,a;const n=e.___1;n||(r=s.tripleVecs,a=e.___2);let o=n?n[0]:r[a];t.setLocalPosition(i[o],i[o+1],i[o+2]),o=n?n[1]:r[a+1],t.setLocalEulerAngles(i[o],i[o+1],i[o+2]),o=n?n[2]:r[a+2],t.setLocalScale(i[o],i[o+1],i[o+2])}static oneCharToKey(t,e){const s=t.charCodeAt(0)-e.fieldFirstCode;return e.fieldArray[s]}static multCharToKey(t,e){let s=0;for(let i=0;i<t.length;i++)s=s*e.fieldCodeBase+t.charCodeAt(i)-e.fieldFirstCode;return e.fieldArray[s]}}class gc{constructor(t,e){this._node=t,this._data=e}run(){const t=Object.prototype.toString.call(this._node);return t==="[object Object]"?this._handleMap():t==="[object Array]"?this._handleArray():this._result=this._node,this._result}_handleMap(){this._result={},Object.keys(this._node).forEach(this._handleKey,this)}_handleKey(t){let e=t;const s=t.length;s===1?e=Su.oneCharToKey(t,this._data):s===2&&(e=Su.multCharToKey(t,this._data)),this._result[e]=new gc(this._node[t],this._data).run()}_handleArray(){this._result=[],this._node.forEach(this._handleArElt,this)}_handleArElt(t){const e=new gc(t,this._data).run();this._result.push(e)}}class Zp{constructor(t,e){this._app=t,this._isTemplate=e}parse(t){const e={};let s=null;const i=t.compressedFormat;i&&!t.entDecompressed&&(t.entDecompressed=!0,t.entities=new gc(t.entities,i).run());for(const r in t.entities){const a=t.entities[r],n=this._createEntity(a,i);e[r]=n,a.parent===null&&(s=n)}for(const r in t.entities){const a=e[r],n=t.entities[r].children,o=n.length;for(let c=0;c<o;c++){const d=e[n[c]];d&&a.addChild(d)}}return this._openComponentData(s,t.entities),s}_createEntity(t,e){const s=new lt(t.name,this._app);if(s.setGuid(t.resource_id),this._setPosRotScale(s,t,e),s._enabled=t.enabled??!0,this._isTemplate?s._template=!0:s._enabledInHierarchy=s._enabled,s.template=t.template,t.tags)for(let i=0;i<t.tags.length;i++)s.tags.add(t.tags[i]);return s}_setPosRotScale(t,e,s){if(s)Su.setCompressedPRS(t,e,s);else{const i=e.position,r=e.rotation,a=e.scale;t.setLocalPosition(i[0],i[1],i[2]),t.setLocalEulerAngles(r[0],r[1],r[2]),t.setLocalScale(a[0],a[1],a[2])}}_openComponentData(t,e){const s=this._app.systems.list;let i=s.length;const r=e[t.getGuid()];for(let n=0;n<i;n++){const o=s[n],c=r.components[o.id];c&&o.addComponent(t,c)}i=r.children.length;const a=t._children;for(let n=0;n<i;n++)a[n]?a[n]=this._openComponentData(a[n],e):y.warn(`Scene data is invalid where a child under "${t.name}" Entity doesn't exist. Please check the scene data.`);return t}}class Ov{static load(t,e,s){typeof t=="string"&&(t={load:t,original:t}),ot.get(t.load,{retry:e>0,maxRetries:e},(i,r)=>{if(!i)s(i,r);else{let a=`Error while loading scene JSON ${t.original}`;i.message?(a+=`: ${i.message}`,i.stack&&(a+=`
${i.stack}`)):a+=`: ${i}`,s(a)}})}}class fN extends Qe{constructor(t){super(t,"hierarchy")}load(t,e){Ov.load(t,this.maxRetries,e)}open(t,e){this._app.systems.script.preloading=!0;const i=new Zp(this._app,!1).parse(e);return this._app.systems.script.preloading=!1,i}}class uN extends Qe{constructor(e){super(e,"html");h(this,"decoder",null)}load(e,s){typeof e=="string"&&(e={load:e,original:e}),ot.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(i,r)=>{i?s(`Error loading html resource: ${e.original} [${i}]`):s(null,r)})}openBinary(e){return this.decoder??(this.decoder=new TextDecoder("utf-8")),this.decoder.decode(e)}}class pN extends Qe{constructor(e){super(e,"json");h(this,"decoder",null)}load(e,s){typeof e=="string"&&(e={load:e,original:e});const i={retry:this.maxRetries>0,maxRetries:this.maxRetries};e.load.startsWith("blob:")&&(i.responseType=Ms.ResponseType.JSON),ot.get(e.load,i,(r,a)=>{r?s(`Error loading JSON resource: ${e.original} [${r}]`):s(null,a)})}openBinary(e){return this.decoder??(this.decoder=new TextDecoder("utf-8")),JSON.parse(this.decoder.decode(e))}}class mN{constructor(){this.removeInvalid=!0,this.valid=!0,this.enumValidators={occludeSpecular:this._createEnumValidator([gy,rd,Sy]),cull:this._createEnumValidator([wt,fa,bo,Ux]),blendType:this._createEnumValidator([pp,mp,Ks,Cs,Nn,_p,id,gp,Sp,yp,vp]),depthFunc:this._createEnumValidator([Bx,Hh,Wh,gf,zx,Vx,Gx,$i])}}setInvalid(t,e){this.valid=!1,y.warn(`Ignoring invalid StandardMaterial property: ${t}`,e[t]),this.removeInvalid&&delete e[t]}validate(t){const e=Bn,s=DE,i=t.mappingFormat==="path";for(const r in t){const a=e[r];if(!a){s[r]?delete t[r]:(y.warnOnce(`Ignoring unsupported input property to standard material: ${r}`),this.valid=!1);continue}if(a.startsWith("enum")){const n=a.split(":")[1];this.enumValidators[n]&&(this.enumValidators[n](t[r])||this.setInvalid(r,t))}else if(a==="number")typeof t[r]!="number"&&this.setInvalid(r,t);else if(a==="boolean")typeof t[r]!="boolean"&&this.setInvalid(r,t);else if(a==="string")typeof t[r]!="string"&&this.setInvalid(r,t);else if(a==="vec2")t[r]instanceof Array&&t[r].length===2||this.setInvalid(r,t);else if(a==="rgb")t[r]instanceof Array&&t[r].length===3||this.setInvalid(r,t);else if(a==="texture")i?typeof t[r]=="string"||t[r]===null||t[r]instanceof ge||this.setInvalid(r,t):typeof t[r]=="number"||t[r]===null||t[r]instanceof ge||this.setInvalid(r,t);else if(a==="boundingbox")t[r].center&&t[r].center instanceof Array&&t[r].center.length===3||this.setInvalid(r,t),t[r].halfExtents&&t[r].halfExtents instanceof Array&&t[r].halfExtents.length===3||this.setInvalid(r,t);else if(a==="cubemap")typeof t[r]=="number"||t[r]===null||t[r]===void 0||t[r]instanceof ge&&t[r].cubemap||this.setInvalid(r,t);else if(a==="chunks"){const n=Object.keys(t[r]);for(let o=0;o<n.length;o++)typeof t[r][n[o]]!="string"&&this.setInvalid(n[o],t[r])}else console.error(`Unknown material type: ${a}`)}return t.validated=!0,this.valid}_createEnumValidator(t){return function(e){return t.indexOf(e)>=0}}}class _N{constructor(){this._validator=null}parse(t){const e=this.migrate(t),s=this._validate(e),i=new kt;return this.initialize(i,s),i}initialize(t,e){if(e.validated||(e=this._validate(e)),e.chunks&&e.chunks&&Object.keys(e.chunks).length>0){const s=t.shaderChunks.glsl;Object.entries(e.chunks).forEach(([i,r])=>s.set(i,r))}for(const s in e){const i=Bn[s],r=e[s];if(i==="vec2")t[s]=new J(r[0],r[1]);else if(i==="rgb")t[s]=new ae(r[0],r[1],r[2]);else if(i==="texture")r instanceof ge?t[s]=r:t[s]instanceof ge&&typeof r=="number"&&r>0||(t[s]=null);else if(i==="cubemap")r instanceof ge?t[s]=r:t[s]instanceof ge&&typeof r=="number"&&r>0||(t[s]=null),s==="cubeMap"&&!r&&(t.prefilteredCubemaps=null);else if(i==="boundingbox"){const a=new A(r.center[0],r.center[1],r.center[2]),n=new A(r.halfExtents[0],r.halfExtents[1],r.halfExtents[2]);t[s]=new Me(a,n)}else t[s]=e[s]}t.update()}migrate(t){t.shader&&delete t.shader,t.mapping_format&&(t.mappingFormat=t.mapping_format,delete t.mapping_format);let e;const s=[["bumpMapFactor","bumpiness"],["aoUvSet","aoMapUv"],["aoMapVertexColor","aoVertexColor"],["diffuseMapVertexColor","diffuseVertexColor"],["emissiveMapVertexColor","emissiveVertexColor"],["specularMapVertexColor","specularVertexColor"],["metalnessMapVertexColor","metalnessVertexColor"],["opacityMapVertexColor","opacityVertexColor"],["glossMapVertexColor","glossVertexColor"],["lightMapVertexColor","lightVertexColor"],["specularMapTint","specularTint"],["metalnessMapTint","metalnessTint"],["clearCoatGlossiness","clearCoatGloss"]];for(e=0;e<s.length;e++){const r=s[e][0],a=s[e][1];t[r]!==void 0&&(t[a]===void 0&&(t[a]=t[r]),delete t[r])}const i=["fresnelFactor","shadowSampleType"];for(e=0;e<i.length;e++){const r=i[e];t.hasOwnProperty(r)&&delete t[r]}return t}_validate(t){return t.validated||(this._validator||(this._validator=new mN),this._validator.validate(t)),t}}const gN={aoMap:"white",aoDetailMap:"white",diffuseMap:"gray",diffuseDetailMap:"gray",specularMap:"gray",specularityFactorMap:"white",metalnessMap:"black",glossMap:"gray",sheenMap:"black",sheenGlossMap:"gray",clearCoatMap:"black",clearCoatGlossMap:"gray",clearCoatNormalMap:"normal",refractionMap:"white",emissiveMap:"gray",normalMap:"normal",normalDetailMap:"normal",heightMap:"gray",opacityMap:"gray",sphereMap:"gray",lightMap:"white",thicknessMap:"black",iridescenceMap:"black",iridescenceThicknessMap:"black",envAtlas:"black",anisotropyMap:"black"};class SN extends Qe{constructor(t){super(t,"material"),this._assets=t.assets,this._device=t.graphicsDevice,this._parser=new _N}load(t,e){typeof t=="string"&&(t={load:t,original:t}),ot.get(t.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(s,i)=>{s?e&&e(`Error loading material: ${t.original} [${s}]`):e&&(i._engine=!0,e(null,i))})}open(t,e){const s=this._parser.parse(e);return e._engine&&(s._data=e,delete e._engine),s}patch(t,e){t.resource._data&&(t._data=t.resource._data,delete t.resource._data),t.data.name=t.name,t.resource.name=t.name,this._bindAndAssignAssets(t,e),t.off("unload",this._onAssetUnload,this),t.on("unload",this._onAssetUnload,this)}_onAssetUnload(t){delete t.data.parameters,delete t.data.chunks,delete t.data.name}_assignTexture(t,e,s){e.resource[t]=s}_getPlaceholderTexture(t){const e=gN[t];return y.assert(e,`No placeholder texture found for parameter: ${t}`),ca(this._device,e)}_assignPlaceholderTexture(t,e){e.resource[t]=this._getPlaceholderTexture(t)}_onTextureLoad(t,e,s){this._assignTexture(t,e,s.resource),e.resource.update()}_onTextureAdd(t,e,s){this._assets.load(s)}_onTextureRemoveOrUnload(t,e,s){const i=e.resource;i&&e.resource[t]===s.resource&&(this._assignPlaceholderTexture(t,e),i.update())}_assignCubemap(t,e,s){if(e.resource[t]=s[0],t==="cubeMap"){const i=s.slice(1);i.every(r=>r)?e.resource.prefilteredCubemaps=i:i[0]&&(e.resource.envAtlas=i[0])}}_onCubemapLoad(t,e,s){this._assignCubemap(t,e,s.resources),this._parser.initialize(e.resource,e.data)}_onCubemapAdd(t,e,s){this._assets.load(s)}_onCubemapRemoveOrUnload(t,e,s){const i=e.resource;e.data.prefilteredCubeMap128===s.resources[1]&&(this._assignCubemap(t,e,[null,null,null,null,null,null,null]),i.update())}_bindAndAssignAssets(t,e){const s=this._parser.migrate(t.data),i=t.resource,r=s.mappingFormat==="path",a=nd;let n,o,c;for(n=0;n<a.length;n++){o=a[n],c=i._assetReferences[o];const f=s[o],u=i[o],p=u===this._getPlaceholderTexture(o),m=s.validated;f&&(!u||!m||p)?(c||(c=new ol(o,t,e,{load:this._onTextureLoad,add:this._onTextureAdd,remove:this._onTextureRemoveOrUnload,unload:this._onTextureRemoveOrUnload},this),i._assetReferences[o]=c),r?c.url=t.getAbsoluteUrl(f):c.id=f,c.asset&&(c.asset.resource?this._assignTexture(o,t,c.asset.resource):this._assignPlaceholderTexture(o,t),e.load(c.asset))):c&&(r?c.url=null:c.id=null)}const d=Up;for(n=0;n<d.length;n++)o=d[n],c=i._assetReferences[o],s[o]&&!t.data.prefilteredCubeMap128&&(c||(c=new ol(o,t,e,{load:this._onCubemapLoad,add:this._onCubemapAdd,remove:this._onCubemapRemoveOrUnload,unload:this._onCubemapRemoveOrUnload},this),i._assetReferences[o]=c),r?c.url=s[o]:c.id=s[o],c.asset&&(c.asset.loaded&&this._assignCubemap(o,t,c.asset.resources),e.load(c.asset)));this._parser.initialize(i,s)}}class yN{constructor(t){this._device=t.device,this._defaultMaterial=t.defaultMaterial,this._assets=t.assets}parse(t,e,s){_c.parse("filename.glb","",t,this._device,this._assets,(s==null?void 0:s.options)??{},(i,r)=>{if(i)e(i);else{const a=Sr.createModel(r,this._defaultMaterial);r.destroy(),e(null,a)}})}}const vN={points:Gc,lines:Hc,lineloop:bS,linestrip:AS,triangles:Xs,trianglestrip:wr,trianglefan:aa},xN={int8:Wc,uint8:na,int16:$c,uint16:yl,int32:MS,uint32:Wo,float32:ze};class TN{constructor(t){this._device=t.device,this._defaultMaterial=t.defaultMaterial}parse(t,e){const s=t.model;if(!s){e(null,null);return}if(s.version<=1){e("JsonModelParser#parse: Trying to parse unsupported model format.");return}const i=this._parseNodes(t),r=this._parseSkins(t,i),a=this._parseVertexBuffers(t),n=this._parseIndexBuffers(t,a),o=this._parseMorphs(t,i,a),c=this._parseMeshes(t,r.skins,o.morphs,a,n.buffer,n.data),d=this._parseMeshInstances(t,i,c,r.skins,r.instances,o.morphs,o.instances),f=new ir;f.graph=i[0],f.meshInstances=d,f.skinInstances=r.instances,f.morphInstances=o.instances,f.getGraph().syncHierarchy(),e(null,f)}_parseNodes(t){const e=t.model,s=[];let i;for(i=0;i<e.nodes.length;i++){const r=e.nodes[i],a=new De(r.name);a.setLocalPosition(r.position[0],r.position[1],r.position[2]),a.setLocalEulerAngles(r.rotation[0],r.rotation[1],r.rotation[2]),a.setLocalScale(r.scale[0],r.scale[1],r.scale[2]),a.scaleCompensation=!!r.scaleCompensation,s.push(a)}for(i=1;i<e.parents.length;i++)s[e.parents[i]].addChild(s[i]);return s}_parseSkins(t,e){const s=t.model,i=[],r=[];let a,n;for(a=0;a<s.skins.length;a++){const o=s.skins[a],c=[];for(n=0;n<o.inverseBindMatrices.length;n++){const p=o.inverseBindMatrices[n];c[n]=new ie().set(p)}const d=new Vy(this._device,c,o.boneNames);i.push(d);const f=new El(d),u=[];for(n=0;n<d.boneNames.length;n++){const p=d.boneNames[n],m=e[0].findByName(p);u.push(m)}f.bones=u,r.push(f)}return{skins:i,instances:r}}_getMorphVertexCount(t,e,s){for(let i=0;i<t.meshes.length;i++){const r=t.meshes[i];if(r.morph===e)return s[r.vertices].numVertices}}_parseMorphs(t,e,s){const i=t.model,r=[],a=[];let n,o,c,d,f,u;if(i.morphs){const p=function(m,_,S){const g=new Float32Array(S*3);for(let v=0;v<_.length;v++){const w=_[v]*3;g[w]=m[v*3],g[w+1]=m[v*3+1],g[w+2]=m[v*3+2]}return g};for(n=0;n<i.morphs.length;n++){for(d=i.morphs[n].targets,u=[],c=this._getMorphVertexCount(i,n,s),o=0;o<d.length;o++){const S=d[o].aabb,g=S.min,v=S.max,w=new Me(new A((v[0]+g[0])*.5,(v[1]+g[1])*.5,(v[2]+g[2])*.5),new A((v[0]-g[0])*.5,(v[1]-g[1])*.5,(v[2]-g[2])*.5)),x=d[o].indices;let b=d[o].deltaPositions,C=d[o].deltaNormals;x&&(b=p(b,x,c),C=p(C,x,c)),f=new ld({deltaPositions:b,deltaNormals:C,name:d[o].name,aabb:w}),u.push(f)}const m=new Vp(u,this._device);r.push(m);const _=new ya(m);a.push(_)}}return{morphs:r,instances:a}}_parseVertexBuffers(t){const e=t.model,s=[],i={position:Ae,normal:_s,tangent:yi,blendWeight:gi,blendIndices:fs,color:Ht,texCoord0:ts,texCoord1:wa,texCoord2:ul,texCoord3:pl,texCoord4:ml,texCoord5:_l,texCoord6:gl,texCoord7:Sl};for(let r=0;r<e.vertices.length;r++){const a=e.vertices[r],n=[];for(const u in a){const p=a[u];n.push({semantic:i[u],components:p.components,type:xN[p.type],normalize:i[u]===Ht})}const o=new Nt(this._device,n),c=a.position.data.length/a.position.components,d=new Is(this._device,o,c),f=new Po(d);for(let u=0;u<c;u++){for(const p in a){const m=a[p];switch(m.components){case 1:f.element[i[p]].set(m.data[u]);break;case 2:f.element[i[p]].set(m.data[u*2],1-m.data[u*2+1]);break;case 3:f.element[i[p]].set(m.data[u*3],m.data[u*3+1],m.data[u*3+2]);break;case 4:f.element[i[p]].set(m.data[u*4],m.data[u*4+1],m.data[u*4+2],m.data[u*4+3]);break}}f.next()}f.end(),s.push(d)}return s}_parseIndexBuffers(t,e){const s=t.model;let i=null,r=null,a,n=0;for(a=0;a<s.meshes.length;a++){const c=s.meshes[a];c.indices!==void 0&&(n+=c.indices.length)}let o=0;for(a=0;a<e.length;a++)o=Math.max(o,e[a].numVertices);return n>0&&(o>65535?(i=new Er(this._device,Tr,n),r=new Uint32Array(i.lock())):(i=new Er(this._device,Ki,n),r=new Uint16Array(i.lock()))),{buffer:i,data:r}}_parseMeshes(t,e,s,i,r,a){const n=t.model,o=[];let c=0;for(let d=0;d<n.meshes.length;d++){const f=n.meshes[d],u=f.aabb,p=u.min,m=u.max,_=new Me(new A((m[0]+p[0])*.5,(m[1]+p[1])*.5,(m[2]+p[2])*.5),new A((m[0]-p[0])*.5,(m[1]-p[1])*.5,(m[2]-p[2])*.5)),S=f.indices!==void 0,g=new Ve(this._device);g.vertexBuffer=i[f.vertices],g.indexBuffer[0]=S?r:null,g.primitive[0].type=vN[f.type],g.primitive[0].base=S?f.base+c:f.base,g.primitive[0].count=f.count,g.primitive[0].indexed=S,g.skin=f.skin!==void 0?e[f.skin]:null,g.morph=f.morph!==void 0?s[f.morph]:null,g.aabb=_,S&&(a.set(f.indices,c),c+=f.indices.length),o.push(g)}return r!==null&&r.unlock(),o}_parseMeshInstances(t,e,s,i,r,a,n){const o=t.model,c=[];let d;for(d=0;d<o.meshInstances.length;d++){const f=o.meshInstances[d],u=e[f.node],p=s[f.mesh],m=new Ge(p,this._defaultMaterial,u);if(p.skin){const _=i.indexOf(p.skin);if(_===-1)throw new Error("Mesh's skin does not appear in skin array.");m.skinInstance=r[_]}if(p.morph){const _=a.indexOf(p.morph);if(_===-1)throw new Error("Mesh's morph does not appear in morph array.");m.morphInstance=n[_]}c.push(m)}return c}}class wN extends Qe{constructor(t){super(t,"model"),this._parsers=[],this.device=t.graphicsDevice,this.assets=t.assets,this.defaultMaterial=$n(this.device),this.addParser(new TN(this),(e,s)=>xe.getExtension(e)===".json"),this.addParser(new yN(this),(e,s)=>xe.getExtension(e)===".glb")}load(t,e,s){typeof t=="string"&&(t={load:t,original:t});const i={retry:this.maxRetries>0,maxRetries:this.maxRetries};(t.load.startsWith("blob:")||t.load.startsWith("data:"))&&(xe.getExtension(t.original).toLowerCase()===".glb"?i.responseType=Ms.ResponseType.ARRAY_BUFFER:i.responseType=Ms.ResponseType.JSON),ot.get(t.load,i,(r,a)=>{if(e)if(r)e(`Error loading model: ${t.original} [${r}]`);else{for(let n=0;n<this._parsers.length;n++){const o=this._parsers[n];if(o.decider(t.original,a)){o.parser.parse(a,(c,d)=>{c?e(c):e(null,d)},s);return}}e("No parsers found")}})}open(t,e){return e}patch(t,e){if(!t.resource)return;const s=t.data,i=this;t.resource.meshInstances.forEach((r,a)=>{if(s.mapping){const n=function(f){f.resource?r.material=f.resource:(f.once("load",n),e.load(f)),f.once("remove",u=>{r.material===u.resource&&(r.material=i.defaultMaterial)})};if(!s.mapping[a]){r.material=i.defaultMaterial;return}const o=s.mapping[a].material,c=s.mapping[a].path;let d;if(o!==void 0)o?(d=e.get(o),d?n(d):e.once(`add:${o}`,n)):r.material=i.defaultMaterial;else if(c){const f=t.getAbsoluteUrl(s.mapping[a].path);d=e.getByUrl(f),d?n(d):e.once(`add:url:${f}`,n)}}})}addParser(t,e){this._parsers.push({parser:t,decider:e})}}class EN extends Qe{constructor(t){super(t,"scene")}load(t,e){Ov.load(t,this.maxRetries,e)}open(t,e){this._app.systems.script.preloading=!0;const i=new Zp(this._app,!1).parse(e),r=this._app.scene;return r.root=i,this._app.applySceneSettings(e.settings),this._app.systems.script.preloading=!1,r}}const Ac=class Ac{static push(t){Ac._types.push(t)}};h(Ac,"_types",[]);let ia=Ac;const bN=new Set(["system","entity","create","destroy","swap","move","data","scripts","_scripts","_scriptsIndex","_scriptsData","enabled","_oldState","onEnable","onDisable","onPostStateChange","_onSetEnabled","_checkState","_onBeforeRemove","_onInitializeAttributes","_onInitialize","_onPostInitialize","_onUpdate","_onPostUpdate","_callbacks","_callbackActive","has","get","on","off","fire","once","hasEvent"]),AN={};ll.reservedNames.forEach((l,t,e)=>{AN[l]=1});function CN(l,t,e){if(typeof l!="function")throw new Error(`script class: '${l}' must be a constructor function (i.e. class).`);if(!(l.prototype instanceof Jt))throw new Error(`script class: '${Oo.__getScriptName(l)}' does not extend pc.Script.`);if(t=t||l.__name||Oo.__getScriptName(l),bN.has(t))throw new Error(`script name: '${t}' is reserved, please change script name`);l.__name=t,Ys.getApplication().scripts.add(l),ia.push(l)}const PN=l=>l[0].toLowerCase()+l.substring(1);class DN extends Qe{constructor(t){super(t,"script"),this._scripts={},this._cache={}}clearCache(){for(const t in this._cache){const e=this._cache[t],s=e.parentNode;s&&s.removeChild(e)}this._cache={}}load(t,e){typeof t=="string"&&(t={load:t,original:t});const s=this;this._app;const i=(t.load,(n,o,c)=>{if(n)e(n);else{const d={};for(let u=0;u<ia._types.length;u++)d[ia._types[u].name]=ia._types[u];ia._types.length=0,e(null,d,c);const f=o.split("&hash=")[0];delete s._loader._cache[Tn.makeKey(f,"script")]}}),[r]=t.load.split("?");r.endsWith(".mjs")?this._loadModule(r,i):this._loadScript(t.load,i)}open(t,e){return e}patch(t,e){}_loadScript(t,e){const s=document.head,i=document.createElement("script");this._cache[t]=i,i.async=!1,i.addEventListener("error",a=>{e(`Script: ${a.target.src} failed to load`)},!1);let r=!1;i.onload=i.onreadystatechange=function(){!r&&(!this.readyState||this.readyState==="loaded"||this.readyState==="complete")&&(r=!0,e(null,t,i))},i.src=t,s.appendChild(i)}_loadModule(t,e){const i=Pe.browser&&window.location.origin!=="null"?window.location.origin+window.location.pathname:import.meta.url,r=new URL(t,i);import(r.toString()).then(a=>{var c,d;const n=r.pathname.split("/").pop(),o=(d=(c=this._app.assets.find(n,"script"))==null?void 0:c.data)==null?void 0:d.scripts;for(const f in a){const u=a[f];if(u.prototype instanceof Jt){const m=PN(u.name);u.scriptName||y.warnOnce(`The Script class "${u.name}" must have a static "scriptName" property: \`${u.name}.scriptName = "${m}";\`. This will be an error in future versions of PlayCanvas.`);const _=u.scriptName??m;CN(u,_),o&&this._app.scripts.addSchema(_,o[_])}}e(null,t,null)}).catch(a=>{e(a)})}}class IN extends Qe{constructor(e){super(e,"shader");h(this,"decoder",null)}load(e,s){typeof e=="string"&&(e={load:e,original:e}),ot.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(i,r)=>{i?s(`Error loading shader resource: ${e.original} [${i}]`):s(null,r)})}openBinary(e){return this.decoder??(this.decoder=new TextDecoder("utf-8")),this.decoder.decode(e)}}function af(l){const t=this;t.resource&&(t.resource.atlas=l.resource)}function nf(l){this.registry.load(l)}class MN extends Qe{constructor(t){super(t,"sprite"),this._assets=t.assets,this._device=t.graphicsDevice}load(t,e){typeof t=="string"&&(t={load:t,original:t}),xe.getExtension(t.original)===".json"&&ot.get(t.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(s,i)=>{s?e(s):e(null,i)})}open(t,e){const s=new Zb(this._device);return t&&(s.__data=e),s}patch(t,e){const s=t.resource;if(s.__data&&(t.data.pixelsPerUnit=s.__data.pixelsPerUnit,t.data.renderMode=s.__data.renderMode,t.data.frameKeys=s.__data.frameKeys,s.__data.textureAtlasAsset)){const i=e.getByUrl(s.__data.textureAtlasAsset);i?t.data.textureAtlasAsset=i.id:console.warn(`Could not find textureatlas with url: ${s.__data.textureAtlasAsset}`)}s.startUpdate(),s.renderMode=t.data.renderMode,s.pixelsPerUnit=t.data.pixelsPerUnit,s.frameKeys=t.data.frameKeys,this._updateAtlas(t),s.endUpdate(),t.off("change",this._onAssetChange,this),t.on("change",this._onAssetChange,this)}_updateAtlas(t){const e=t.resource;if(!t.data.textureAtlasAsset){e.atlas=null;return}this._assets.off(`load:${t.data.textureAtlasAsset}`,af,t),this._assets.on(`load:${t.data.textureAtlasAsset}`,af,t);const s=this._assets.get(t.data.textureAtlasAsset);s&&s.resource?e.atlas=s.resource:s?this._assets.load(s):(this._assets.off(`add:${t.data.textureAtlasAsset}`,nf,t),this._assets.on(`add:${t.data.textureAtlasAsset}`,nf,t))}_onAssetChange(t,e,s,i){e==="data"&&s&&s.textureAtlasAsset&&i&&s.textureAtlasAsset!==i.textureAtlasAsset&&(this._assets.off(`load:${i.textureAtlasAsset}`,af,t),this._assets.off(`add:${i.textureAtlasAsset}`,nf,t))}}class Ng{constructor(t,e){h(this,"_app");h(this,"_data");h(this,"_templateRoot",null);this._app=t,this._data=e}instantiate(){return this._templateRoot||this._parseTemplate(),this._templateRoot.clone()}_parseTemplate(){const t=new Zp(this._app,!0);this._templateRoot=t.parse(this._data)}}class LN extends Qe{constructor(e){super(e,"template");h(this,"decoder",null)}load(e,s){typeof e=="string"&&(e={load:e,original:e});const i={retry:this.maxRetries>0,maxRetries:this.maxRetries};ot.get(e.load,i,(r,a)=>{r?s(`Error requesting template: ${e.original}`):s(r,a)})}open(e,s){return new Ng(this._app,s)}openBinary(e){return this.decoder??(this.decoder=new TextDecoder("utf-8")),new Ng(this._app,JSON.parse(this.decoder.decode(e)))}}class RN extends Qe{constructor(e){super(e,"text");h(this,"decoder",null)}load(e,s){typeof e=="string"&&(e={load:e,original:e}),ot.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(i,r)=>{i?s(`Error loading text resource: ${e.original} [${i}]`):s(null,r)})}openBinary(e){return this.decoder??(this.decoder=new TextDecoder("utf-8")),this.decoder.decode(e)}}const Sh={repeat:St,clamp:me,mirror:Du},yh={nearest:Te,linear:yt,nearest_mip_nearest:Dc,linear_mip_nearest:Mc,nearest_mip_linear:Ic,linear_mip_linear:ua},ON=/^data\.frames\.(\d+)$/;class FN extends Qe{constructor(t){super(t,"textureatlas"),this._loader=t.loader}load(t,e){typeof t=="string"&&(t={load:t,original:t});const s=this,i=this._loader.getHandler("texture");xe.getExtension(t.original)===".json"?ot.get(t.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(r,a)=>{if(r)e(r);else{const n=t.original.replace(".json",".png");s._loader.load(n,"texture",(o,c)=>{o?e(o):e(null,{data:a,texture:c})})}}):i.load(t,e)}open(t,e,s){const i=new Qb;if(e.texture&&e.data)i.texture=e.texture,i.__data=e.data;else{const a=this._loader.getHandler("texture").open(t,e,s);if(!a)return null;i.texture=a}return i}patch(t,e){if(!t.resource)return;t.resource.__data&&(t.resource.__data.minfilter!==void 0&&(t.data.minfilter=t.resource.__data.minfilter),t.resource.__data.magfilter!==void 0&&(t.data.magfilter=t.resource.__data.magfilter),t.resource.__data.addressu!==void 0&&(t.data.addressu=t.resource.__data.addressu),t.resource.__data.addressv!==void 0&&(t.data.addressv=t.resource.__data.addressv),t.resource.__data.mipmaps!==void 0&&(t.data.mipmaps=t.resource.__data.mipmaps),t.resource.__data.anisotropy!==void 0&&(t.data.anisotropy=t.resource.__data.anisotropy),t.resource.__data.rgbm!==void 0&&(t.data.rgbm=!!t.resource.__data.rgbm),t.data.frames=t.resource.__data.frames,delete t.resource.__data);const s=t.resource.texture;if(s&&(s.name=t.name,t.data.hasOwnProperty("minfilter")&&s.minFilter!==yh[t.data.minfilter]&&(s.minFilter=yh[t.data.minfilter]),t.data.hasOwnProperty("magfilter")&&s.magFilter!==yh[t.data.magfilter]&&(s.magFilter=yh[t.data.magfilter]),t.data.hasOwnProperty("addressu")&&s.addressU!==Sh[t.data.addressu]&&(s.addressU=Sh[t.data.addressu]),t.data.hasOwnProperty("addressv")&&s.addressV!==Sh[t.data.addressv]&&(s.addressV=Sh[t.data.addressv]),t.data.hasOwnProperty("mipmaps")&&s.mipmaps!==t.data.mipmaps&&(s.mipmaps=t.data.mipmaps),t.data.hasOwnProperty("anisotropy")&&s.anisotropy!==t.data.anisotropy&&(s.anisotropy=t.data.anisotropy),t.data.hasOwnProperty("rgbm"))){const r=t.data.rgbm?Qi:Ds;s.type!==r&&(s.type=r)}t.resource.texture=s;const i={};for(const r in t.data.frames){const a=t.data.frames[r];i[r]={rect:new oe(a.rect),pivot:new J(a.pivot),border:new oe(a.border)}}t.resource.frames=i,t.off("change",this._onAssetChange,this),t.on("change",this._onAssetChange,this)}_onAssetChange(t,e,s){let i;if(e==="data"||e==="data.frames"){const r={};for(const a in s.frames)i=s.frames[a],r[a]={rect:new oe(i.rect),pivot:new J(i.pivot),border:new oe(i.border)};t.resource.frames=r}else{const r=e.match(ON);if(r){const a=r[1];s?(t.resource.frames[a]?(i=t.resource.frames[a],i.rect.set(s.rect[0],s.rect[1],s.rect[2],s.rect[3]),i.pivot.set(s.pivot[0],s.pivot[1]),i.border.set(s.border[0],s.border[1],s.border[2],s.border[3])):t.resource.frames[a]={rect:new oe(s.rect),pivot:new J(s.pivot),border:new oe(s.border)},t.resource.fire("set:frame",a,t.resource.frames[a])):t.resource.frames[a]&&(delete t.resource.frames[a],t.resource.fire("remove:frame",a))}}}}function NN(){const l={cTFETC1:0,cTFETC2:1,cTFBC1:2,cTFBC3:3,cTFPVRTC1_4_RGB:8,cTFPVRTC1_4_RGBA:9,cTFASTC_4x4:10,cTFATC_RGB:11,cTFATC_RGBA_INTERPOLATED_ALPHA:12,cTFRGBA32:13,cTFRGB565:14,cTFRGBA4444:16},t={astc:l.cTFASTC_4x4,dxt:l.cTFBC1,etc1:l.cTFETC1,etc2:l.cTFETC1,pvr:l.cTFPVRTC1_4_RGB,atc:l.cTFATC_RGB,none:l.cTFRGB565},e={astc:l.cTFASTC_4x4,dxt:l.cTFBC3,etc1:l.cTFRGBA4444,etc2:l.cTFETC2,pvr:l.cTFPVRTC1_4_RGBA,atc:l.cTFATC_RGBA_INTERPOLATED_ALPHA,none:l.cTFRGBA4444},s={ETC1:21,ETC2_RGB:22,ETC2_RGBA:23,DXT1:8,DXT5:10,PVRTC_4BPP_RGB_1:26,PVRTC_4BPP_RGBA_1:27,ASTC_4x4:28,ATC_RGB:29,ATC_RGBA:30,R8_G8_B8_A8:7,R5_G6_B5:3,R4_G4_B4_A4:5},i=(x,b)=>{switch(x){case l.cTFETC1:return b.formats.etc2?s.ETC2_RGB:s.ETC1;case l.cTFETC2:return s.ETC2_RGBA;case l.cTFBC1:return s.DXT1;case l.cTFBC3:return s.DXT5;case l.cTFPVRTC1_4_RGB:return s.PVRTC_4BPP_RGB_1;case l.cTFPVRTC1_4_RGBA:return s.PVRTC_4BPP_RGBA_1;case l.cTFASTC_4x4:return s.ASTC_4x4;case l.cTFATC_RGB:return s.ATC_RGB;case l.cTFATC_RGBA_INTERPOLATED_ALPHA:return s.ATC_RGBA;case l.cTFRGBA32:return s.R8_G8_B8_A8;case l.cTFRGB565:return s.R5_G6_B5;case l.cTFRGBA4444:return s.R4_G4_B4_A4}},r=x=>{const b=function(C,D){const T=C*.00784313725490196-1,I=D*(2/255)-1,L=Math.sqrt(1-Math.min(1,T*T+I*I));return Math.max(0,Math.min(255,Math.floor((L+1)*.5*255)))};for(let C=0;C<x.length;C+=4){const D=x[C+3],T=x[C+1];x[C+0]=D,x[C+2]=b(D,T),x[C+3]=255}return x},a=x=>{const b=new Uint16Array(x.length/4);for(let C=0;C<x.length;C+=4){const D=x[C+0],T=x[C+1],I=x[C+2];b[C/4]=(D&248)<<8|(T&252)<<3|I>>3}return b},n=(x,b)=>(x&x-1)===0&&(b&b-1)===0,o=()=>typeof performance<"u"?performance.now():0;let c,d,f;const u=(x,b,C)=>{if(C){if(x.formats.astc)return"astc"}else if(b){if(x.formats.etc2)return"etc2"}else{if(x.formats.etc2)return"etc2";if(x.formats.etc1)return"etc1"}return(T=>{for(let I=0;I<T.length;++I){const L=T[I];if(x.formats[L])return L}return"none"})(b?f:d)},p=(x,b,C)=>{switch(C){case l.cTFETC1:case l.cTFETC2:return!0;case l.cTFBC1:case l.cTFBC3:return(x&3)===0&&(b&3)===0;case l.cTFPVRTC1_4_RGB:case l.cTFPVRTC1_4_RGBA:return n(x,b);case l.cTFASTC_4x4:return!0;case l.cTFATC_RGB:case l.cTFATC_RGBA_INTERPOLATED_ALPHA:return!0}return!1},m=(x,b,C)=>{if(!c.KTX2File)throw new Error("Basis transcoder module does not include support for KTX2.");const D=o(),T=new c.KTX2File(new Uint8Array(b)),I=T.getWidth(),L=T.getHeight(),E=T.getLevels(),F=!!T.getHasAlpha(),k=T.isUASTC&&T.isUASTC();if(!I||!L||!E)throw T.close(),T.delete(),new Error(`Invalid image dimensions url=${x} width=${I} height=${L} levels=${E}`);const H=u(C.deviceDetails,F,k),G=!!C.isGGGR&&H==="pvr";let W;if(G?W=l.cTFRGBA32:(W=F?e[H]:t[H],p(I,L,W)||(W=F?l.cTFRGBA32:l.cTFRGB565)),!T.startTranscoding())throw T.close(),T.delete(),new Error(`Failed to start transcoding url=${x}`);let R;const B=[];for(let V=0;V<E;++V){const O=T.getImageTranscodedSizeInBytes(V,0,0,W),M=new Uint8Array(O);if(!T.transcodeImage(M,V,0,0,W,0,-1,-1))throw T.close(),T.delete(),new Error(`Failed to transcode image url=${x}`);const P=W===l.cTFRGB565||W===l.cTFRGBA4444;B.push(P?new Uint16Array(M.buffer):M)}if(T.close(),T.delete(),G)for(W=l.cTFRGB565,R=0;R<B.length;++R)B[R]=a(r(B[R]));return{format:i(W,C.deviceDetails),width:I,height:L,levels:B,cubemap:!1,transcodeTime:o()-D,url:x,unswizzledGGGR:G}},_=(x,b,C)=>{const D=o(),T=new c.BasisFile(new Uint8Array(b)),I=T.getImageWidth(0,0),L=T.getImageHeight(0,0),E=T.getNumImages(),F=T.getNumLevels(0),k=!!T.getHasAlpha(),H=T.isUASTC&&T.isUASTC();if(!I||!L||!E||!F)throw T.close(),T.delete(),new Error(`Invalid image dimensions url=${x} width=${I} height=${L} images=${E} levels=${F}`);const G=u(C.deviceDetails,k,H),W=!!C.isGGGR&&G==="pvr";let R;if(W?R=l.cTFRGBA32:(R=k?e[G]:t[G],p(I,L,R)||(R=k?l.cTFRGBA32:l.cTFRGB565)),!T.startTranscoding())throw T.close(),T.delete(),new Error(`Failed to start transcoding url=${x}`);let B;const V=[];for(let O=0;O<F;++O){const M=T.getImageTranscodedSizeInBytes(0,O,R),P=new Uint8Array(M);if(!T.transcodeImage(P,0,O,R,0,0))if(O===F-1&&M===V[O-1].buffer.byteLength)P.set(new Uint8Array(V[O-1].buffer)),console.warn(`Failed to transcode last mipmap level, using previous level instead url=${x}`);else throw T.close(),T.delete(),new Error(`Failed to transcode image url=${x}`);const N=R===l.cTFRGB565||R===l.cTFRGBA4444;V.push(N?new Uint16Array(P.buffer):P)}if(T.close(),T.delete(),W)for(R=l.cTFRGB565,B=0;B<V.length;++B)V[B]=a(r(V[B]));return{format:i(R,C.deviceDetails),width:I,height:L,levels:V,cubemap:!1,transcodeTime:o()-D,url:x,unswizzledGGGR:W}},S=(x,b,C)=>C.isKTX2?m(x,b,C):_(x,b,C),g=(x,b,C)=>{try{const D=S(x,b,C);D.levels=D.levels.map(T=>T.buffer),self.postMessage({url:x,data:D},D.levels)}catch(D){self.postMessage({url:x,err:D},null)}},v=(x,b)=>{const C=(D,T)=>(WebAssembly.instantiate(x.module,D).then(I=>{T(I)}).catch(I=>{console.error(`instantiate failed + ${I}`)}),{});self.BASIS(x.module?{instantiateWasm:C}:null).then(D=>{D.initializeBasis(),c=D,d=x.rgbPriority,f=x.rgbaPriority,b(null)})},w=[];self.onmessage=x=>{const b=x.data;switch(b.type){case"init":v(b.config,()=>{for(let C=0;C<w.length;++C)g(w[C].url,w[C].data,w[C].options);w.length=0});break;case"transcode":c?g(b.url,b.data,b.options):w.push(b);break}}}const kN=l=>({astc:!!l.extCompressedTextureASTC,atc:!!l.extCompressedTextureATC,dxt:!!l.extCompressedTextureS3TC,etc1:!!l.extCompressedTextureETC1,etc2:!!l.extCompressedTextureETC,pvr:!!l.extCompressedTexturePVRTC}),UN=(l,t)=>{const e=a=>{const n=["/* basis */",a,"",`(${NN.toString()})()

`].join(`
`);return new Blob([n],{type:"application/javascript"})},s=()=>{try{if(typeof WebAssembly=="object"&&typeof WebAssembly.instantiate=="function"){const a=new WebAssembly.Module(Uint8Array.of(0,97,115,109,1,0,0,0));if(a instanceof WebAssembly.Module)return new WebAssembly.Instance(a)instanceof WebAssembly.Instance}}catch{}return!1},i=(a,n)=>{t(null,{workerUrl:URL.createObjectURL(e(a)),module:n,rgbPriority:l.rgbPriority,rgbaPriority:l.rgbaPriority})},r={cache:!0,responseType:"text",retry:l.maxRetries>0,maxRetries:l.maxRetries};if(l.glueUrl&&l.wasmUrl&&s()){let a=null,n=null;ot.get(l.glueUrl,r,(d,f)=>{d?t(d):n?i(f,n):a=f});const o=fetch(l.wasmUrl),c=()=>{o.then(d=>d.arrayBuffer()).then(d=>WebAssembly.compile(d)).then(d=>{a?i(a,d):n=d}).catch(d=>{t(d,null)})};WebAssembly.compileStreaming?WebAssembly.compileStreaming(o).then(d=>{a?i(a,d):n=d}).catch(d=>{y.warn(`compileStreaming() failed for ${l.wasmUrl} (${d}), falling back to arraybuffer download.`),c()}):c()}else ot.get(l.fallbackUrl,r,(a,n)=>{a?t(a,null):i(n,null)})};class BN{constructor(){this.callbacks={},this.queue=[],this.clients=[]}enqueueJob(t,e,s,i){if(this.callbacks.hasOwnProperty(t))this.callbacks[t].push(s);else{this.callbacks[t]=[s];const r={url:t,data:e,options:i};this.clients.length>0?this.clients.shift().run(r):this.queue.push(r)}}enqueueClient(t){this.queue.length>0?t.run(this.queue.shift()):this.clients.push(t)}handleResponse(t,e,s){const i=this.callbacks[t];if(e)for(let r=0;r<i.length;++r)i[r](e);else{s.format===Lc||s.format===Rc?s.levels=s.levels.map(r=>new Uint16Array(r)):s.levels=s.levels.map(r=>new Uint8Array(r));for(let r=0;r<i.length;++r)i[r](null,s)}delete this.callbacks[t]}}class zN{constructor(t,e,s){this.queue=t,this.worker=new Worker(e.workerUrl),this.worker.addEventListener("message",i=>{const r=i.data;this.queue.handleResponse(r.url,r.err,r.data),this.eager||this.queue.enqueueClient(this)}),this.worker.postMessage({type:"init",config:e}),this.eager=s}run(t){const e=[];t.data instanceof ArrayBuffer&&e.push(t.data),this.worker.postMessage({type:"transcode",url:t.url,format:t.format,data:t.data,options:t.options},e),this.eager&&this.queue.enqueueClient(this)}}const VN=1,GN=["etc2","etc1","astc","dxt","pvr","atc"],HN=["astc","dxt","etc2","pvr","atc"],WN=5,yu=new BN;let kg=null,vu=!1;function $N(l){if(!vu){if(!l)l=kg||{};else if(l.lazyInit){kg=l;return}if(!l.glueUrl||!l.wasmUrl||!l.fallbackUrl){const t=rS.getConfig("BASIS");t&&(l={glueUrl:t.glueUrl,wasmUrl:t.wasmUrl,fallbackUrl:t.fallbackUrl,numWorkers:t.numWorkers})}if(l.glueUrl||l.wasmUrl||l.fallbackUrl){vu=!0;const t=Math.max(1,Math.min(16,l.numWorkers||VN)),e=l.numWorkers===1||(l.hasOwnProperty("eagerWorkers")?l.eagerWorkers:!0);l.rgbPriority=l.rgbPriority||GN,l.rgbaPriority=l.rgbaPriority||HN,l.maxRetries=l.hasOwnProperty("maxRetries")?l.maxRetries:WN,UN(l,(s,i)=>{if(s)console.error(`failed to initialize basis worker: ${s}`);else for(let r=0;r<t;++r)yu.enqueueClient(new zN(yu,i,e))})}}}let of=null;function Fv(l,t,e,s,i){return $N(),of||(of={formats:kN(l)}),yu.enqueueJob(t,e,s,{deviceDetails:of,isGGGR:!!(i!=null&&i.isGGGR),isKTX2:!!(i!=null&&i.isKTX2)}),vu}class qn{load(t,e,s){throw new Error("not implemented")}open(t,e,s){throw new Error("not implemented")}}class XN extends qn{constructor(t,e){super(),this.device=e,this.maxRetries=0}load(t,e,s){const i=this.device,r=a=>{var o,c,d;Fv(i,t.load,a,e,{isGGGR:(((d=(c=(o=s==null?void 0:s.file)==null?void 0:o.variants)==null?void 0:c.basis)==null?void 0:d.opt)&8)!==0})||e(`Basis module not found. Asset [${s.name}](${s.getFileUrl()}) basis texture variant will not be loaded.`)};_e.fetchArrayBuffer(t.load,(a,n)=>{a?e(a):r(n)},s,this.maxRetries)}open(t,e,s,i={}){const r=i.srgb?Vc(e.format):e.format,a=new ge(s,{name:t,profilerHint:Cr,addressU:e.cubemap?me:St,addressV:e.cubemap?me:St,width:e.width,height:e.height,format:r,cubemap:e.cubemap,levels:e.levels,...i});return a.upload(),a}}const Nv=new Uint8Array([137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,1,0,0,0,1,8,6,0,0,0,31,21,196,137,0,0,0,13,73,68,65,84,120,218,99,100,100,98,182,7,0,0,89,0,71,67,133,148,237,0,0,0,0,73,69,78,68,174,66,96,130]),kv=(l,t)=>{const e=new ge(l,{width:1,height:1,format:Fe,mipmaps:!1,levels:[t]}),s=new _t({colorBuffer:e,depth:!1});l.setFramebuffer(s.impl._glFrameBuffer),l.initRenderTarget(s);const i=new Uint8ClampedArray(4);return l.gl.readPixels(0,0,1,1,l.gl.RGBA,l.gl.UNSIGNED_BYTE,i),s.destroy(),e.destroy(),i[0]===1&&i[1]===2&&i[2]===3&&i[3]===63},qN=l=>createImageBitmap(new Blob([Nv],{type:"image/png"}),{premultiplyAlpha:"none",colorSpaceConversion:"none"}).then(t=>kv(l,t)).catch(t=>!1),jN=l=>new Promise((t,e)=>{const s=new Image;s.src=URL.createObjectURL(new Blob([Nv])),s.onload=()=>{t(kv(l,s))}});class YN{static run(t){qN(t).then(e=>{console.log(`imageBitmapIsCorrect=${e}`)}),jN(t).then(e=>{console.log(`imgElementIsCorrect=${e}`)})}}class KN extends qn{constructor(t,e){super(),this.crossOrigin=t.prefix?"anonymous":null,this.maxRetries=0,this.device=e,mi.get("IMG_ALPHA_TEST")&&YN.run(this.device)}load(t,e,s){var n;const i=!!((n=s==null?void 0:s.file)!=null&&n.contents);if(i){if(this.device.supportsImageBitmap){this._loadImageBitmapFromBlob(new Blob([s.file.contents]),e);return}t={load:URL.createObjectURL(new Blob([s.file.contents])),original:t.original}}const r=(o,c)=>{i&&URL.revokeObjectURL(t.load),e(o,c)};let a;s&&s.options&&s.options.hasOwnProperty("crossOrigin")?a=s.options.crossOrigin:Vn.test(t.load)&&(a=this.crossOrigin),this.device.supportsImageBitmap?this._loadImageBitmap(t.load,t.original,a,r,s):this._loadImage(t.load,t.original,a,r)}open(t,e,s,i={}){const r=new ge(s,{name:t,profilerHint:Cr,width:e.width,height:e.height,format:i.srgb?ms:Fe,...i});return r.setSource(e),r}_loadImage(t,e,s,i){const r=new Image;s&&(r.crossOrigin=s);let a=0;const n=this.maxRetries;let o;r.onload=function(){i(null,r)},r.onerror=function(){if(!o)if(n>0&&++a<=n){const c=Math.pow(2,a)*100;console.log(`Error loading Texture from: '${e}' - Retrying in ${c}ms...`);const f=t.indexOf("?")>=0?"&":"?";o=setTimeout(()=>{r.src=`${t+f}retry=${Date.now()}`,o=null},c)}else i(`Error loading Texture from: '${e}'`)},r.src=t}_loadImageBitmap(t,e,s,i,r){const a={cache:!0,responseType:"blob",retry:this.maxRetries>0,maxRetries:this.maxRetries,progress:r};ot.get(t,a,(n,o)=>{n?i(n):this._loadImageBitmapFromBlob(o,i)})}_loadImageBitmapFromBlob(t,e){createImageBitmap(t,{premultiplyAlpha:"none",colorSpaceConversion:"none"}).then(s=>e(null,s)).catch(s=>e(s))}}const lf=[1481919403,3140563232,169478669],ZN={33776:Oc,33778:Ru,33779:cl,36196:Nc,37492:Fu,37496:Nu,35840:kc,35841:dl,35842:Uc,35843:fl,32849:Ar,32856:Fe,35905:Ou,35907:ms,35898:bn,34843:ui,34842:nt};function QN(l,t,e,s){return l===bn?new Uint32Array(t,e,s/4):new Uint8Array(t,e,s)}class JN extends qn{constructor(t){super(),this.maxRetries=0}load(t,e,s){_e.fetchArrayBuffer(t.load,e,s,this.maxRetries)}open(t,e,s,i={}){const r=this.parse(e);if(!r)return null;const a=i.srgb?Vc(r.format):r.format,n=new ge(s,{name:t,profilerHint:Cr,addressU:r.cubemap?me:St,addressV:r.cubemap?me:St,width:r.width,height:r.height,format:a,cubemap:r.cubemap,levels:r.levels,...i});return n.upload(),n}parse(t){const e=new Uint32Array(t);if(lf[0]!==e[0]||lf[1]!==e[1]||lf[2]!==e[2])return y.warn("Invalid definition header found in KTX file. Expected 0xAB4B5458, 0x203131BB, 0x0D0A1A0A"),null;const s={endianness:e[3],glType:e[4],glTypeSize:e[5],glFormat:e[6],glInternalFormat:e[7],glBaseInternalFormat:e[8],pixelWidth:e[9],pixelHeight:e[10],pixelDepth:e[11],numberOfArrayElements:e[12],numberOfFaces:e[13],numberOfMipmapLevels:e[14],bytesOfKeyValueData:e[15]};if(s.pixelDepth>1)return y.warn("More than 1 pixel depth not supported!"),null;if(s.numberOfArrayElements!==0)return y.warn("Array texture not supported!"),null;const i=ZN[s.glInternalFormat];if(i===void 0)return y.warn(`Unknown glInternalFormat: ${s.glInternalFormat}`),null;let r=16+s.bytesOfKeyValueData/4;const a=s.numberOfFaces>1,n=[];for(let o=0;o<(s.numberOfMipmapLevels||1);o++){const c=e[r++];a&&n.push([]);const d=a?n[o]:n;for(let f=0;f<(a?6:1);++f)d.push(QN(i,t,r*4,c)),r+=c+3>>2}return{format:i,width:s.pixelWidth,height:s.pixelHeight,levels:n,cubemap:a}}}const ek={KHR_DF_MODEL_UASTC:166};class tk extends qn{constructor(t,e){super(),this.maxRetries=0,this.device=e}load(t,e,s){_e.fetchArrayBuffer(t.load,(i,r)=>{i?e(i,r):this.parse(r,t,e,s)},s,this.maxRetries)}open(t,e,s,i={}){const r=i.srgb?Vc(e.format):e.format,a=new ge(s,{name:t,profilerHint:Cr,addressU:e.cubemap?me:St,addressV:e.cubemap?me:St,width:e.width,height:e.height,format:r,cubemap:e.cubemap,levels:e.levels,...i});return a.upload(),a}parse(t,e,s,i){var u,p,m;const r=new aS(t),a=[r.readU32be(),r.readU32be(),r.readU32be()];if(a[0]!==2873840728||a[1]!==540160187||a[2]!==218765834)return y.warn("Invalid definition header found in KTX2 file. Expected 0xAB4B5458, 0x203131BB, 0x0D0A1A0A"),null;const n={vkFormat:r.readU32(),typeSize:r.readU32(),pixelWidth:r.readU32(),pixelHeight:r.readU32(),pixelDepth:r.readU32(),layerCount:r.readU32(),faceCount:r.readU32(),levelCount:r.readU32(),supercompressionScheme:r.readU32()},o={dfdByteOffset:r.readU32(),dfdByteLength:r.readU32(),kvdByteOffset:r.readU32(),kvdByteLength:r.readU32(),sgdByteOffset:r.readU64(),sgdByteLength:r.readU64()},c=[];for(let _=0;_<Math.max(1,n.levelCount);++_)c.push({byteOffset:r.readU64(),byteLength:r.readU64(),uncompressedByteLength:r.readU64()});if(r.readU32()!==o.kvdByteOffset-o.dfdByteOffset)return y.warn("Invalid file data encountered."),null;r.skip(8);const f=r.readU8();r.skip(o.dfdByteLength-9),r.skip(o.kvdByteLength),n.supercompressionScheme===1||f===ek.KHR_DF_MODEL_UASTC?Fv(this.device,e.load,t,s,{isGGGR:(((m=(p=(u=i==null?void 0:i.file)==null?void 0:u.variants)==null?void 0:p.basis)==null?void 0:m.opt)&8)!==0,isKTX2:!0})||s(`Basis module not found. Asset [${i.name}](${i.getFileUrl()}) basis texture variant will not be loaded.`):s("unsupported KTX2 pixel format")}}class sk extends qn{constructor(t){super(),this.maxRetries=0}load(t,e,s){_e.fetchArrayBuffer(t.load,e,s,this.maxRetries)}open(t,e,s,i={}){const r=new Uint32Array(e,0,32),a=r[4],n=r[3],o=Math.max(r[7],1),c=r[20]===4,d=r[21],f=r[22],u=r[28]===65024,p=827611204,m=894720068,_=113,S=116,g=826496069,v=825438800,w=825504336,x=825439312,b=825504848;let C=!1,D=!1,T=!1,I=!1,L=null,E=1,F;if(c?d===p?(L=Oc,C=!0):d===m?(L=cl,C=!0):d===_?(L=nt,E=2):d===S?(L=$t,E=4):d===g?(L=Nc,C=!0,D=!0):d===v||d===w?(L=d===v?dl:fl,C=!0,T=!0):(d===x||d===b)&&(L=d===x?kc:Uc,C=!0,I=!0):f===32&&(L=Fe),!L)return y.error(`This DDS pixel format is currently unsupported. Empty texture will be created instead of ${t}.`),F=new ge(s,{width:4,height:4,format:Ar,name:"dds-legacy-empty"}),F;F=new ge(s,{name:t,profilerHint:Cr,addressU:u?me:St,addressV:u?me:St,width:a,height:n,format:L,cubemap:u,mipmaps:o>1,...i});let k=128;const H=u?6:1;let G;const W=4,R=4,B=d===p?8:16;let V,O,M;for(let P=0;P<H;P++){let N=a,U=n;for(let z=0;z<o;z++){C?D?G=Math.floor((N+3)/4)*Math.floor((U+3)/4)*8:T?G=Math.max(N,16)*Math.max(U,8)/4:I?G=Math.max(N,8)*Math.max(U,8)/2:(V=Math.floor((N+W-1)/W),O=Math.floor((U+R-1)/R),M=V*O,G=M*B):G=N*U*4;const $=L===$t?new Float32Array(e,k,G):L===nt?new Uint16Array(e,k,G):new Uint8Array(e,k,G);u?(F._levels[z]||(F._levels[z]=[]),F._levels[z][P]=$):F._levels[z]=$,k+=G*E,N=Math.max(N*.5,1),U=Math.max(U*.5,1)}}return F.upload(),F}}class ik extends qn{constructor(t){super(),this.maxRetries=0}load(t,e,s){_e.fetchArrayBuffer(t.load,e,s,this.maxRetries),s.data&&!s.data.type&&(s.data.type=jh)}open(t,e,s,i={}){const r=this.parse(e);if(!r)return null;const a=new ge(s,{name:t,profilerHint:Cr,addressU:St,addressV:me,minFilter:Te,magFilter:Te,width:r.width,height:r.height,levels:r.levels,format:Fe,type:jh,mipmaps:!1,...i});return a.upload(),a}parse(t){const e=new aS(t);if(!e.readLine().startsWith("#?RADIANCE"))return y.error("radiance header has invalid magic"),null;const i={};for(;;){const c=e.readLine();if(c.length===0)break;{const d=c.split("=");d.length===2&&(i[d[0]]=d[1])}}if(!i.hasOwnProperty("FORMAT"))return y.error("radiance header missing FORMAT variable"),null;const r=e.readLine().split(" ");if(r.length!==4)return y.error("radiance header has invalid resolution"),null;const a=parseInt(r[1],10),n=parseInt(r[3],10),o=this._readPixels(e,n,a,r[0]==="-Y");return o?{width:n,height:a,levels:[o]}:null}_readPixels(t,e,s,i){if(e<8||e>32767)return this._readPixelsFlat(t,e,s);const r=[0,0,0,0];if(t.readArray(r),r[0]!==2||r[1]!==2||(r[2]&128)!==0)return t.skip(-4),this._readPixelsFlat(t,e,s);const a=new ArrayBuffer(e*s*4),n=new Uint8Array(a);let o=i?0:e*4*(s-1),c,d,f,u,p,m;for(d=0;d<s;++d){if(d&&t.readArray(r),(r[2]<<8)+r[3]!==e)return y.error("radiance has invalid scanline width"),null;for(u=0;u<4;++u)for(c=0;c<e;)if(p=t.readU8(),p>128){if(p-=128,c+p>e)return y.error("radiance has invalid scanline data"),null;for(m=t.readU8(),f=0;f<p;++f)n[o+u+4*c++]=m}else{if(p===0||c+p>e)return y.error("radiance has invalid scanline data"),null;for(f=0;f<p;++f)n[o+u+4*c++]=t.readU8()}o+=e*4*(i?1:-1)}return n}_readPixelsFlat(t,e,s){return t.remainingBytes===e*s*4?new Uint8Array(t.arraybuffer,t.offset):null}}const Ug={repeat:St,clamp:me,mirror:Du},Bg={nearest:Te,linear:yt,nearest_mip_nearest:Dc,linear_mip_nearest:Mc,nearest_mip_linear:Ic,linear_mip_linear:ua},rk={default:Ds,rgbm:Qi,rgbe:jh,rgbp:Go,swizzleGGGR:Ho},ak=function(l){const t=qi.calcMipLevelsCount(l._width,l._height),e=function(i){return i instanceof HTMLCanvasElement||i instanceof HTMLImageElement||i instanceof HTMLVideoElement};if(!(l._format===Fe||l._format===$t)||l._volume||l._compressed||l._levels.length===1||l._levels.length===t||e(l._cubemap?l._levels[0][0]:l._levels[0]))return;const s=function(i,r,a){const n=Math.max(1,i>>1),o=Math.max(1,r>>1),c=new a.constructor(n*o*4),d=Math.floor(i/n),f=Math.floor(r/o),u=d*f;for(let p=0;p<o;++p)for(let m=0;m<n;++m)for(let _=0;_<4;++_){let S=0;for(let g=0;g<f;++g)for(let v=0;v<d;++v)S+=a[(m*d+v+(p*f+g)*i)*4+_];c[(m+p*n)*4+_]=S/u}return c};for(let i=l._levels.length;i<t;++i){const r=Math.max(1,l._width>>i-1),a=Math.max(1,l._height>>i-1);if(l._cubemap){const n=[];for(let o=0;o<6;++o)n.push(s(r,a,l._levels[i-1][o]));l._levels.push(n)}else l._levels.push(s(r,a,l._levels[i-1]))}l._levelsUpdated=l._cubemap?[[!0,!0,!0,!0,!0,!0]]:[!0]};class nk extends Qe{constructor(t){super(t,"texture");const e=t.assets,s=t.graphicsDevice;this._device=s,this._assets=e,this.imgParser=new KN(e,s),this.parsers={dds:new sk(e),ktx:new JN(e),ktx2:new tk(e,s),basis:new XN(e,s),hdr:new ik(e)}}set crossOrigin(t){this.imgParser.crossOrigin=t}get crossOrigin(){return this.imgParser.crossOrigin}set maxRetries(t){this.imgParser.maxRetries=t;for(const e in this.parsers)this.parsers.hasOwnProperty(e)&&(this.parsers[e].maxRetries=t)}get maxRetries(){return this.imgParser.maxRetries}_getUrlWithoutParams(t){return t.indexOf("?")>=0?t.split("?")[0]:t}_getParser(t){const e=xe.getExtension(this._getUrlWithoutParams(t)).toLowerCase().replace(".","");return this.parsers[e]||this.imgParser}_getTextureOptions(t){var s;const e={profilerHint:Cr};if(t){((s=t.name)==null?void 0:s.length)>0&&(e.name=t.name);const i=t.data;i.hasOwnProperty("minfilter")&&(e.minFilter=Bg[i.minfilter]),i.hasOwnProperty("magfilter")&&(e.magFilter=Bg[i.magfilter]),i.hasOwnProperty("addressu")&&(e.addressU=Ug[i.addressu]),i.hasOwnProperty("addressv")&&(e.addressV=Ug[i.addressv]),i.hasOwnProperty("mipmaps")&&(e.mipmaps=i.mipmaps),i.hasOwnProperty("anisotropy")&&(e.anisotropy=i.anisotropy),i.hasOwnProperty("flipY")&&(e.flipY=!!i.flipY),i.hasOwnProperty("srgb")&&(e.srgb=!!i.srgb),e.type=Ds,i.hasOwnProperty("type")?e.type=rk[i.type]:i.hasOwnProperty("rgbm")&&i.rgbm?e.type=Qi:t.file&&(t.file.opt&8)!==0&&(e.type=Ho)}return e}load(t,e,s){typeof t=="string"&&(t={load:t,original:t}),this._getParser(t.original).load(t,e,s)}open(t,e,s){if(!t)return;const i=this._getTextureOptions(s);let r=this._getParser(t).open(t,e,this._device,i);return r===null?r=new ge(this._device,{width:4,height:4,format:Ar}):(ak(r),e.unswizzledGGGR&&(s.file.variants.basis.opt&=-9)),r}patch(t,e){const s=t.resource;if(!s)return;const i=this._getTextureOptions(t);for(const r of Object.keys(i))s[r]=i[r]}}const ok="inline",lk="immersive-vr",Fo="immersive-ar",zg="viewer",hk="left",ck="cpu-optimized",Uv="gpu-optimized",Bv="luminance-alpha",zv="unsigned-short",Vv="float32";class dk{constructor(t){h(this,"_manager");h(this,"_supported",Pe.browser&&!!window.XRDOMOverlayState);h(this,"_root",null);this._manager=t}get supported(){return this._supported}get available(){return this._supported&&this._manager.active&&this._manager._session.domOverlayState!==null}get state(){return!this._supported||!this._manager.active||!this._manager._session.domOverlayState?null:this._manager._session.domOverlayState.type}set root(t){!this._supported||this._manager.active||(this._root=t)}get root(){return this._root}}const vh=[],Vg=[];class xu extends Se{constructor(e,s,i,r=null){super();h(this,"manager");h(this,"_xrHitTestSource");h(this,"_transient");h(this,"_inputSource");this.manager=e,this._xrHitTestSource=s,this._transient=i,this._inputSource=r}remove(){if(!this._xrHitTestSource)return;const e=this.manager.hitTest.sources,s=e.indexOf(this);s!==-1&&e.splice(s,1),this.onStop()}onStop(){this._xrHitTestSource.cancel(),this._xrHitTestSource=null,this.fire("remove"),this.manager.hitTest.fire("remove",this)}update(e){if(this._transient){const s=e.getHitTestResultsForTransientInput(this._xrHitTestSource);for(let i=0;i<s.length;i++){const r=s[i];if(!r.results.length)continue;let a;r.inputSource&&(a=this.manager.input._getByInputSource(r.inputSource)),this.updateHitResults(r.results,a)}}else{const s=e.getHitTestResults(this._xrHitTestSource);if(!s.length)return;this.updateHitResults(s)}}updateHitResults(e,s){if(this._inputSource&&this._inputSource!==s)return;const i=vh.pop()??new A;s?i.copy(s.getOrigin()):i.copy(this.manager.camera.getPosition());let r=1/0,a=null;const n=vh.pop()??new A,o=Vg.pop()??new ue;for(let c=0;c<e.length;c++){const d=e[c].getPose(this.manager._referenceSpace),f=i.distance(d.transform.position);f>=r||(r=f,a=e[c],n.copy(d.transform.position),o.copy(d.transform.orientation))}this.fire("result",n,o,s||this._inputSource,a),this.manager.hitTest.fire("result",this,n,o,s||this._inputSource,a),vh.push(i),vh.push(n),Vg.push(o)}}h(xu,"EVENT_REMOVE","remove"),h(xu,"EVENT_RESULT","result");class qr extends Se{constructor(e){super();h(this,"manager");h(this,"_supported",Pe.browser&&!!(window.XRSession&&window.XRSession.prototype.requestHitTestSource));h(this,"_available",!1);h(this,"_checkingAvailability",!1);h(this,"sources",[]);this.manager=e,this._supported&&(this.manager.on("start",this._onSessionStart,this),this.manager.on("end",this._onSessionEnd,this))}_onSessionStart(){if(this.manager.session.enabledFeatures){const e=this.manager.session.enabledFeatures.indexOf("hit-test")!==-1;if(!e)return;this._available=e,this.fire("available")}else this._checkingAvailability||(this._checkingAvailability=!0,this.manager.session.requestReferenceSpace(zg).then(e=>{this.manager.session.requestHitTestSource({space:e}).then(s=>{s.cancel(),this.manager.active&&(this._available=!0,this.fire("available"))}).catch(()=>{})}).catch(()=>{}))}_onSessionEnd(){if(this._available){this._available=!1;for(let e=0;e<this.sources.length;e++)this.sources[e].onStop();this.sources=[],this.fire("unavailable")}}start(e={}){var a,n;if(!this._supported){(a=e.callback)==null||a.call(e,new Error("XR HitTest is not supported"),null);return}if(!this._available){(n=e.callback)==null||n.call(e,new Error("XR HitTest is not available"),null);return}!e.profile&&!e.spaceType&&(e.spaceType=zg);let s;const i=e.offsetRay;if(i){const o=new DOMPoint(i.origin.x,i.origin.y,i.origin.z,1),c=new DOMPoint(i.direction.x,i.direction.y,i.direction.z,0);s=new XRRay(o,c)}const r=e.callback;e.spaceType?this.manager.session.requestReferenceSpace(e.spaceType).then(o=>{if(!this.manager.session){const c=new Error("XR Session is not started (2)");r&&r(c),this.fire("error",c);return}this.manager.session.requestHitTestSource({space:o,entityTypes:e.entityTypes||void 0,offsetRay:s}).then(c=>{this._onHitTestSource(c,!1,e.inputSource,r)}).catch(c=>{r&&r(c),this.fire("error",c)})}).catch(o=>{r&&r(o),this.fire("error",o)}):this.manager.session.requestHitTestSourceForTransientInput({profile:e.profile,entityTypes:e.entityTypes||void 0,offsetRay:s}).then(o=>{this._onHitTestSource(o,!0,e.inputSource,r)}).catch(o=>{r&&r(o),this.fire("error",o)})}_onHitTestSource(e,s,i,r){if(!this.manager.session){e.cancel();const n=new Error("XR Session is not started (3)");r&&r(n),this.fire("error",n);return}const a=new xu(this.manager,e,s,i??null);this.sources.push(a),r&&r(null,a),this.fire("add",a)}update(e){if(this._available)for(let s=0;s<this.sources.length;s++)this.sources[s].update(e)}get supported(){return this._supported}get available(){return this._available}}h(qr,"EVENT_AVAILABLE","available"),h(qr,"EVENT_UNAVAILABLE","unavailable"),h(qr,"EVENT_ADD","add"),h(qr,"EVENT_REMOVE","remove"),h(qr,"EVENT_RESULT","result"),h(qr,"EVENT_ERROR","error");class Tu extends Se{constructor(e,s){super();h(this,"_image");h(this,"_width");h(this,"_bitmap",null);h(this,"_measuredWidth",0);h(this,"_trackable",!1);h(this,"_tracking",!1);h(this,"_emulated",!1);h(this,"_pose",null);h(this,"_position",new A);h(this,"_rotation",new ue);this._image=e,this._width=s}get image(){return this._image}set width(e){this._width=e}get width(){return this._width}get trackable(){return this._trackable}get tracking(){return this._tracking}get emulated(){return this._emulated}prepare(){return this._bitmap?{image:this._bitmap,widthInMeters:this._width}:createImageBitmap(this._image).then(e=>(this._bitmap=e,{image:this._bitmap,widthInMeters:this._width}))}destroy(){this._image=null,this._pose=null,this._bitmap&&(this._bitmap.close(),this._bitmap=null)}getPosition(){return this._pose&&this._position.copy(this._pose.transform.position),this._position}getRotation(){return this._pose&&this._rotation.copy(this._pose.transform.orientation),this._rotation}}h(Tu,"EVENT_TRACKED","tracked"),h(Tu,"EVENT_UNTRACKED","untracked");class Gv extends Se{constructor(e){super();h(this,"_manager");h(this,"_supported",Pe.browser&&!!window.XRImageTrackingResult);h(this,"_available",!1);h(this,"_images",[]);this._manager=e,this._supported&&(this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this))}add(e,s){if(!this._supported||this._manager.active)return null;const i=new Tu(e,s);return this._images.push(i),i}remove(e){if(this._manager.active)return;const s=this._images.indexOf(e);s!==-1&&(e.destroy(),this._images.splice(s,1))}_onSessionStart(){this._manager.session.getTrackedImageScores().then(e=>{this._available=!0;for(let s=0;s<e.length;s++)this._images[s]._trackable=e[s]==="trackable"}).catch(e=>{this._available=!1,this.fire("error",e)})}_onSessionEnd(){this._available=!1;for(let e=0;e<this._images.length;e++){const s=this._images[e];s._pose=null,s._measuredWidth=0,s._tracking&&(s._tracking=!1,s.fire("untracked"))}}prepareImages(e){this._images.length?Promise.all(this._images.map(s=>s.prepare())).then(s=>{e(null,s)}).catch(s=>{e(s,null)}):e(null,null)}update(e){if(!this._available)return;const s=e.getImageTrackingResults(),i={};for(let r=0;r<s.length;r++){i[s[r].index]=s[r];const a=this._images[s[r].index];a._emulated=s[r].trackingState==="emulated",a._measuredWidth=s[r].measuredWidthInMeters,a._pose=e.getPose(s[r].imageSpace,this._manager._referenceSpace)}for(let r=0;r<this._images.length;r++)this._images[r]._tracking&&!i[r]?(this._images[r]._tracking=!1,this._images[r].fire("untracked")):!this._images[r]._tracking&&i[r]&&(this._images[r]._tracking=!0,this._images[r].fire("tracked"))}get supported(){return this._supported}get available(){return this._available}get images(){return this._images}}h(Gv,"EVENT_ERROR","error");class fk{constructor(t,e){h(this,"_index");h(this,"_hand");h(this,"_joints",[]);h(this,"_tip",null);this._index=t,this._hand=e,this._hand._fingers.push(this)}get index(){return this._index}get hand(){return this._hand}get joints(){return this._joints}get tip(){return this._tip}}const Gg=Pe.browser&&window.XRHand?["thumb-tip","index-finger-tip","middle-finger-tip","ring-finger-tip","pinky-finger-tip"]:[],Hv={};for(let l=0;l<Gg.length;l++)Hv[Gg[l]]=!0;class Hg{constructor(t,e,s,i=null){h(this,"_index");h(this,"_id");h(this,"_hand");h(this,"_finger");h(this,"_wrist");h(this,"_tip");h(this,"_radius",null);h(this,"_localTransform",new ie);h(this,"_worldTransform",new ie);h(this,"_localPosition",new A);h(this,"_localRotation",new ue);h(this,"_position",new A);h(this,"_rotation",new ue);h(this,"_dirtyLocal",!0);this._index=t,this._id=e,this._hand=s,this._finger=i,this._wrist=e==="wrist",this._tip=this._finger&&!!Hv[e]}update(t){this._dirtyLocal=!0,this._radius=t.radius,this._localPosition.copy(t.transform.position),this._localRotation.copy(t.transform.orientation)}_updateTransforms(){this._dirtyLocal&&(this._dirtyLocal=!1,this._localTransform.setTRS(this._localPosition,this._localRotation,A.ONE));const e=this._hand._manager.camera.parent;e?this._worldTransform.mul2(e.getWorldTransform(),this._localTransform):this._worldTransform.copy(this._localTransform)}getPosition(){return this._updateTransforms(),this._worldTransform.getTranslation(this._position),this._position}getRotation(){return this._updateTransforms(),this._rotation.setFromMat4(this._worldTransform),this._rotation}get id(){return this._id}get index(){return this._index}get hand(){return this._hand}get finger(){return this._finger}get wrist(){return this._wrist}get tip(){return this._tip}get radius(){return this._radius||.005}}let kh=[];const Hr=new A,xh=new A,Wg=new A;Pe.browser&&window.XRHand&&(kh=[["thumb-metacarpal","thumb-phalanx-proximal","thumb-phalanx-distal","thumb-tip"],["index-finger-metacarpal","index-finger-phalanx-proximal","index-finger-phalanx-intermediate","index-finger-phalanx-distal","index-finger-tip"],["middle-finger-metacarpal","middle-finger-phalanx-proximal","middle-finger-phalanx-intermediate","middle-finger-phalanx-distal","middle-finger-tip"],["ring-finger-metacarpal","ring-finger-phalanx-proximal","ring-finger-phalanx-intermediate","ring-finger-phalanx-distal","ring-finger-tip"],["pinky-finger-metacarpal","pinky-finger-phalanx-proximal","pinky-finger-phalanx-intermediate","pinky-finger-phalanx-distal","pinky-finger-tip"]]);class wu extends Se{constructor(e){super();h(this,"_manager");h(this,"_inputSource");h(this,"_tracking",!1);h(this,"_fingers",[]);h(this,"_joints",[]);h(this,"_jointsById",{});h(this,"_tips",[]);h(this,"_wrist",null);const s=e._xrInputSource.hand;if(this._manager=e._manager,this._inputSource=e,s.get("wrist")){const i=new Hg(0,"wrist",this,null);this._wrist=i,this._joints.push(i),this._jointsById.wrist=i}for(let i=0;i<kh.length;i++){const r=new fk(i,this);for(let a=0;a<kh[i].length;a++){const n=kh[i][a];if(!s.get(n))continue;const o=new Hg(a,n,this,r);this._joints.push(o),this._jointsById[n]=o,o.tip&&(this._tips.push(o),r._tip=o),r._joints.push(o)}}}update(e){const s=this._inputSource._xrInputSource;for(let f=0;f<this._joints.length;f++){const u=this._joints[f],p=s.hand.get(u._id);if(p){let m;if(e.session.visibilityState!=="hidden"&&(m=e.getJointPose(p,this._manager._referenceSpace)),m)u.update(m),u.wrist&&!this._tracking&&(this._tracking=!0,this.fire("tracking"));else if(u.wrist){this._tracking&&(this._tracking=!1,this.fire("trackinglost"));break}}}const i=this._jointsById["thumb-metacarpal"],r=this._jointsById["thumb-tip"],a=this._jointsById["index-finger-phalanx-proximal"],n=this._jointsById["index-finger-tip"],o=this._jointsById["ring-finger-phalanx-proximal"],c=this._jointsById["pinky-finger-phalanx-proximal"];if(i&&r&&a&&n&&o&&c){this._inputSource._dirtyRay=!0,this._inputSource._rayLocal.origin.lerp(r._localPosition,n._localPosition,.5);let f=i,u=c;if(this._inputSource.handedness===hk){const p=f;f=u,u=p}Hr.sub2(f._localPosition,this._wrist._localPosition),xh.sub2(u._localPosition,this._wrist._localPosition),Wg.cross(Hr,xh).normalize(),Hr.lerp(a._localPosition,o._localPosition,.5),Hr.sub(this._wrist._localPosition).normalize(),this._inputSource._rayLocal.direction.lerp(Wg,Hr,.5).normalize()}this._fingerIsClosed(1)&&this._fingerIsClosed(2)&&this._fingerIsClosed(3)&&this._fingerIsClosed(4)?this._inputSource._squeezing||(this._inputSource._squeezing=!0,this._inputSource.fire("squeezestart"),this._manager.input.fire("squeezestart",this._inputSource)):this._inputSource._squeezing&&(this._inputSource._squeezing=!1,this._inputSource.fire("squeeze"),this._manager.input.fire("squeeze",this._inputSource),this._inputSource.fire("squeezeend"),this._manager.input.fire("squeezeend",this._inputSource))}_fingerIsClosed(e){const s=this._fingers[e];return Hr.sub2(s.joints[0]._localPosition,s.joints[1]._localPosition).normalize(),xh.sub2(s.joints[2]._localPosition,s.joints[3]._localPosition).normalize(),Hr.dot(xh)<-.8}getJointById(e){return this._jointsById[e]||null}get fingers(){return this._fingers}get joints(){return this._joints}get tips(){return this._tips}get wrist(){return this._wrist}get tracking(){return this._tracking}}h(wu,"EVENT_TRACKING","tracking"),h(wu,"EVENT_TRACKINGLOST","trackinglost");const $g=new A,Xg=new ue;let uk=0;class Kt extends Se{constructor(e,s){super();h(this,"_id");h(this,"_manager");h(this,"_xrInputSource");h(this,"_ray",new En);h(this,"_rayLocal",new En);h(this,"_grip",!1);h(this,"_hand",null);h(this,"_velocitiesAvailable",!1);h(this,"_velocitiesTimestamp",pe());h(this,"_localTransform",null);h(this,"_worldTransform",null);h(this,"_position",new A);h(this,"_rotation",new ue);h(this,"_localPosition",null);h(this,"_localPositionLast",null);h(this,"_localRotation",null);h(this,"_linearVelocity",null);h(this,"_dirtyLocal",!0);h(this,"_dirtyRay",!1);h(this,"_selecting",!1);h(this,"_squeezing",!1);h(this,"_elementInput",!0);h(this,"_elementEntity",null);h(this,"_hitTestSources",[]);this._id=++uk,this._manager=e,this._xrInputSource=s,s.hand&&(this._hand=new wu(this))}get id(){return this._id}get inputSource(){return this._xrInputSource}get targetRayMode(){return this._xrInputSource.targetRayMode}get handedness(){return this._xrInputSource.handedness}get profiles(){return this._xrInputSource.profiles}get grip(){return this._grip}get hand(){return this._hand}get gamepad(){return this._xrInputSource.gamepad||null}get selecting(){return this._selecting}get squeezing(){return this._squeezing}set elementInput(e){this._elementInput!==e&&(this._elementInput=e,this._elementInput||(this._elementEntity=null))}get elementInput(){return this._elementInput}get elementEntity(){return this._elementEntity}get hitTestSources(){return this._hitTestSources}update(e){if(this._hand)this._hand.update(e);else{const s=this._xrInputSource.gripSpace;if(s){const r=e.getPose(s,this._manager._referenceSpace);if(r){this._grip||(this._grip=!0,this._localTransform=new ie,this._worldTransform=new ie,this._localPositionLast=new A,this._localPosition=new A,this._localRotation=new ue,this._linearVelocity=new A);const a=pe(),n=(a-this._velocitiesTimestamp)/1e3;this._velocitiesTimestamp=a,this._dirtyLocal=!0,this._localPositionLast.copy(this._localPosition),this._localPosition.copy(r.transform.position),this._localRotation.copy(r.transform.orientation),this._velocitiesAvailable=!0,this._manager.input.velocitiesSupported&&r.linearVelocity?this._linearVelocity.copy(r.linearVelocity):n>0&&($g.sub2(this._localPosition,this._localPositionLast).divScalar(n),this._linearVelocity.lerp(this._linearVelocity,$g,.15))}else this._velocitiesAvailable=!1}const i=e.getPose(this._xrInputSource.targetRaySpace,this._manager._referenceSpace);i&&(this._dirtyRay=!0,this._rayLocal.origin.copy(i.transform.position),this._rayLocal.direction.set(0,0,-1),Xg.copy(i.transform.orientation),Xg.transformVector(this._rayLocal.direction,this._rayLocal.direction))}}_updateTransforms(){this._dirtyLocal&&(this._dirtyLocal=!1,this._localTransform.setTRS(this._localPosition,this._localRotation,A.ONE));const e=this._manager.camera.parent;e?this._worldTransform.mul2(e.getWorldTransform(),this._localTransform):this._worldTransform.copy(this._localTransform)}_updateRayTransforms(){const e=this._dirtyRay;if(this._dirtyRay=!1,this._manager.camera.parent){const i=this._manager.camera.parent.getWorldTransform();i.getTranslation(this._position),this._rotation.setFromMat4(i),this._rotation.transformVector(this._rayLocal.origin,this._ray.origin),this._ray.origin.add(this._position),this._rotation.transformVector(this._rayLocal.direction,this._ray.direction)}else e&&(this._ray.origin.copy(this._rayLocal.origin),this._ray.direction.copy(this._rayLocal.direction))}getPosition(){return this._position?(this._updateTransforms(),this._worldTransform.getTranslation(this._position),this._position):null}getLocalPosition(){return this._localPosition}getRotation(){return this._rotation?(this._updateTransforms(),this._rotation.setFromMat4(this._worldTransform),this._rotation):null}getLocalRotation(){return this._localRotation}getLinearVelocity(){return this._velocitiesAvailable?this._linearVelocity:null}getOrigin(){return this._updateRayTransforms(),this._ray.origin}getDirection(){return this._updateRayTransforms(),this._ray.direction}hitTestStart(e={}){e.inputSource=this,e.profile=this._xrInputSource.profiles[0];const s=e.callback;e.callback=(i,r)=>{r&&this.onHitTestSourceAdd(r),s&&s(i,r)},this._manager.hitTest.start(e)}onHitTestSourceAdd(e){this._hitTestSources.push(e),this.fire("hittest:add",e),e.on("result",(s,i,r,a)=>{r===this&&this.fire("hittest:result",e,s,i,a)}),e.once("remove",()=>{this.onHitTestSourceRemove(e),this.fire("hittest:remove",e)})}onHitTestSourceRemove(e){const s=this._hitTestSources.indexOf(e);s!==-1&&this._hitTestSources.splice(s,1)}}h(Kt,"EVENT_REMOVE","remove"),h(Kt,"EVENT_SELECT","select"),h(Kt,"EVENT_SELECTSTART","selectstart"),h(Kt,"EVENT_SELECTEND","selectend"),h(Kt,"EVENT_SQUEEZE","squeeze"),h(Kt,"EVENT_SQUEEZESTART","squeezestart"),h(Kt,"EVENT_SQUEEZEEND","squeezeend"),h(Kt,"EVENT_HITTESTADD","hittest:add"),h(Kt,"EVENT_HITTESTREMOVE","hittest:remove"),h(Kt,"EVENT_HITTESTRESULT","hittest:result");class Oi extends Se{constructor(e){var s,i;super();h(this,"manager");h(this,"_inputSources",[]);h(this,"_onInputSourcesChangeEvt");h(this,"velocitiesSupported",!1);this.manager=e,this.velocitiesSupported=!!(Pe.browser&&((i=(s=window.XRPose)==null?void 0:s.prototype)!=null&&i.hasOwnProperty("linearVelocity"))),this._onInputSourcesChangeEvt=r=>{this._onInputSourcesChange(r)},this.manager.on("start",this._onSessionStart,this),this.manager.on("end",this._onSessionEnd,this)}_onSessionStart(){const e=this.manager.session;e.addEventListener("inputsourceschange",this._onInputSourcesChangeEvt),e.addEventListener("select",i=>{const r=this._getByInputSource(i.inputSource);r.update(i.frame),r.fire("select",i),this.fire("select",r,i)}),e.addEventListener("selectstart",i=>{const r=this._getByInputSource(i.inputSource);r._selecting||(r.update(i.frame),r._selecting=!0,r.fire("selectstart",i),this.fire("selectstart",r,i))}),e.addEventListener("selectend",i=>{const r=this._getByInputSource(i.inputSource);r.update(i.frame),r._selecting=!1,r.fire("selectend",i),this.fire("selectend",r,i)}),e.addEventListener("squeeze",i=>{const r=this._getByInputSource(i.inputSource);r.update(i.frame),r.fire("squeeze",i),this.fire("squeeze",r,i)}),e.addEventListener("squeezestart",i=>{const r=this._getByInputSource(i.inputSource);r.update(i.frame),r._squeezing=!0,r.fire("squeezestart",i),this.fire("squeezestart",r,i)}),e.addEventListener("squeezeend",i=>{const r=this._getByInputSource(i.inputSource);r.update(i.frame),r._squeezing=!1,r.fire("squeezeend",i),this.fire("squeezeend",r,i)});const s=e.inputSources;for(let i=0;i<s.length;i++)this._addInputSource(s[i])}_onSessionEnd(){let e=this._inputSources.length;for(;e--;){const i=this._inputSources[e];this._inputSources.splice(e,1),i.fire("remove"),this.fire("remove",i)}this.fire("removeall"),this.manager.session.removeEventListener("inputsourceschange",this._onInputSourcesChangeEvt)}_onInputSourcesChange(e){for(let s=0;s<e.removed.length;s++)this._removeInputSource(e.removed[s]);for(let s=0;s<e.added.length;s++)this._addInputSource(e.added[s])}_getByInputSource(e){for(let s=0;s<this._inputSources.length;s++)if(this._inputSources[s].inputSource===e)return this._inputSources[s];return null}_removeAppEntity(e){const s=this.manager.app.root.findByName(`Armature_${e}`);s&&this.manager.app.root.removeChild(s)}_addInputSource(e){if(this._removeAppEntity(e.handedness),this._getByInputSource(e))return;const s=new Kt(this.manager,e);this._inputSources.push(s),this.fire("add",s)}_removeInputSource(e){for(let s=0;s<this._inputSources.length;s++){if(this._inputSources[s].inputSource!==e)continue;const i=this._inputSources[s];this._inputSources.splice(s,1);let r=i.hitTestSources.length;for(;r--;)i.hitTestSources[r].remove();this._removeAppEntity(i.handedness),i.fire("remove"),this.fire("remove",i);return}}update(e){for(let s=0;s<this._inputSources.length;s++)this._inputSources[s].update(e)}get inputSources(){return this._inputSources}}h(Oi,"EVENT_ADD","add"),h(Oi,"EVENT_REMOVE","remove"),h(Oi,"EVENT_SELECT","select"),h(Oi,"EVENT_SELECTSTART","selectstart"),h(Oi,"EVENT_SELECTEND","selectend"),h(Oi,"EVENT_SQUEEZE","squeeze"),h(Oi,"EVENT_SQUEEZESTART","squeezestart"),h(Oi,"EVENT_SQUEEZEEND","squeezeend");const Ka=new A,qg=new A,hf=new ie,jg=new ie;class Eu extends Se{constructor(e){super();h(this,"_manager");h(this,"_supported",!1);h(this,"_available",!1);h(this,"_lightProbeRequested",!1);h(this,"_lightProbe",null);h(this,"_intensity",0);h(this,"_rotation",new ue);h(this,"_color",new ae);h(this,"_sphericalHarmonics",new Float32Array(27));this._manager=e,this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this)}_onSessionStart(){this._manager.session.requestLightProbe&&(this._supported=!0)}_onSessionEnd(){this._supported=!1,this._available=!1,this._lightProbeRequested=!1,this._lightProbe=null}start(){let e;if(this._manager.session||(e=new Error("XR session is not running")),!e&&this._manager.type!==Fo&&(e=new Error("XR session type is not AR")),!e&&!this._supported&&(e=new Error("light-estimation is not supported")),(!e&&this._lightProbe||this._lightProbeRequested)&&(e=new Error("light estimation is already requested")),e){this.fire("error",e);return}this._lightProbeRequested=!0,this._manager.session.requestLightProbe().then(s=>{const i=this._lightProbeRequested;this._lightProbeRequested=!1,this._manager.active?i&&(this._lightProbe=s):this.fire("error",new Error("XR session is not active"))}).catch(s=>{this._lightProbeRequested=!1,this.fire("error",s)})}end(){this._lightProbeRequested=!1,this._lightProbe=null,this._available=!1}update(e){if(!this._lightProbe)return;const s=e.getLightEstimate(this._lightProbe);if(!s)return;this._available||(this._available=!0,this.fire("available"));const i=s.primaryLightIntensity;this._intensity=Math.max(1,Math.max(i.x,Math.max(i.y,i.z))),Ka.copy(i).mulScalar(1/this._intensity),this._color.set(Ka.x,Ka.y,Ka.z),Ka.set(0,0,0),qg.copy(s.primaryLightDirection),hf.setLookAt(qg,Ka,A.UP),jg.setFromAxisAngle(A.RIGHT,90),hf.mul(jg),this._rotation.setFromMat4(hf),this._sphericalHarmonics.set(s.sphericalHarmonicsCoefficients)}get supported(){return this._supported}get available(){return this._available}get intensity(){return this._available?this._intensity:null}get color(){return this._available?this._color:null}get rotation(){return this._available?this._rotation:null}get sphericalHarmonics(){return this._available?this._sphericalHarmonics:null}}h(Eu,"EVENT_AVAILABLE","available"),h(Eu,"EVENT_ERROR","error");let pk=0;class bu extends Se{constructor(e,s){super();h(this,"_id");h(this,"_planeDetection");h(this,"_xrPlane");h(this,"_lastChangedTime");h(this,"_orientation");h(this,"_position",new A);h(this,"_rotation",new ue);this._id=++pk,this._planeDetection=e,this._xrPlane=s,this._lastChangedTime=s.lastChangedTime,this._orientation=s.orientation}destroy(){this._xrPlane&&(this._xrPlane=null,this.fire("remove"))}update(e){const s=this._planeDetection._manager,i=e.getPose(this._xrPlane.planeSpace,s._referenceSpace);i&&(this._position.copy(i.transform.position),this._rotation.copy(i.transform.orientation)),this._lastChangedTime!==this._xrPlane.lastChangedTime&&(this._lastChangedTime=this._xrPlane.lastChangedTime,this.fire("change"))}getPosition(){return this._position}getRotation(){return this._rotation}get id(){return this._id}get orientation(){return this._orientation}get points(){return this._xrPlane.polygon}get label(){return this._xrPlane.semanticLabel||""}}h(bu,"EVENT_REMOVE","remove"),h(bu,"EVENT_CHANGE","change");class xo extends Se{constructor(e){super();h(this,"_manager");h(this,"_supported",Pe.browser&&!!window.XRPlane);h(this,"_available",!1);h(this,"_planesIndex",new Map);h(this,"_planes",[]);this._manager=e,this._supported&&(this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this))}_onSessionStart(){this._manager.session.enabledFeatures&&this._manager.session.enabledFeatures.indexOf("plane-detection")!==-1&&(this._available=!0,this.fire("available"))}_onSessionEnd(){for(let e=0;e<this._planes.length;e++)this._planes[e].destroy(),this.fire("remove",this._planes[e]);this._planesIndex.clear(),this._planes.length=0,this._available&&(this._available=!1,this.fire("unavailable"))}update(e){if(!this._available)if(!this._manager.session.enabledFeatures&&e.detectedPlanes.size)this._available=!0,this.fire("available");else return;const s=e.detectedPlanes;for(const[i,r]of this._planesIndex)s.has(i)||(this._planesIndex.delete(i),this._planes.splice(this._planes.indexOf(r),1),r.destroy(),this.fire("remove",r));for(const i of s){let r=this._planesIndex.get(i);r?r.update(e):(r=new bu(this,i),this._planesIndex.set(i,r),this._planes.push(r),r.update(e),this.fire("add",r))}}get supported(){return this._supported}get available(){return this._available}get planes(){return this._planes}}h(xo,"EVENT_AVAILABLE","available"),h(xo,"EVENT_UNAVAILABLE","unavailable"),h(xo,"EVENT_ADD","add"),h(xo,"EVENT_REMOVE","remove");class To extends Se{constructor(e,s,i=null){super();h(this,"_position",new A);h(this,"_rotation",new ue);h(this,"_uuid",null);h(this,"_uuidRequests",null);this._anchors=e,this._xrAnchor=s,this._uuid=i}destroy(){if(!this._xrAnchor)return;const e=this._xrAnchor;this._xrAnchor.delete(),this._xrAnchor=null,this.fire("destroy",e,this)}update(e){if(!this._xrAnchor)return;const s=e.getPose(this._xrAnchor.anchorSpace,this._anchors.manager._referenceSpace);if(s){if(this._position.equals(s.transform.position)&&this._rotation.equals(s.transform.orientation))return;this._position.copy(s.transform.position),this._rotation.copy(s.transform.orientation),this.fire("change")}}getPosition(){return this._position}getRotation(){return this._rotation}persist(e){if(!this._anchors.persistence){e==null||e(new Error("Persistent Anchors are not supported"),null);return}if(this._uuid){e==null||e(null,this._uuid);return}if(this._uuidRequests){e&&this._uuidRequests.push(e);return}this._uuidRequests=[],this._xrAnchor.requestPersistentHandle().then(s=>{this._uuid=s,this._anchors._indexByUuid.set(this._uuid,this),e==null||e(null,s);for(const i of this._uuidRequests)i(null,s);this._uuidRequests=null,this.fire("persist",s)}).catch(s=>{e==null||e(s,null);for(const i of this._uuidRequests)i(s,null);this._uuidRequests=null})}forget(e){if(!this._uuid){e==null||e(new Error("Anchor is not persistent"));return}this._anchors.forget(this._uuid,s=>{this._uuid=null,e==null||e(s),this.fire("forget")})}get uuid(){return this._uuid}get persistent(){return!!this._uuid}}h(To,"EVENT_DESTROY","destroy"),h(To,"EVENT_CHANGE","change"),h(To,"EVENT_PERSIST","persist"),h(To,"EVENT_FORGET","forget");var Kg;class tn extends Se{constructor(e){super();h(this,"manager");h(this,"_supported",Pe.browser&&!!window.XRAnchor);h(this,"_available",!1);h(this,"_checkingAvailability",!1);h(this,"_persistence",Pe.browser&&!!((Kg=window==null?void 0:window.XRSession)!=null&&Kg.prototype.restorePersistentAnchor));h(this,"_creationQueue",[]);h(this,"_index",new Map);h(this,"_indexByUuid",new Map);h(this,"_list",[]);h(this,"_callbacksAnchors",new Map);this.manager=e,this._supported&&(this.manager.on("start",this._onSessionStart,this),this.manager.on("end",this._onSessionEnd,this))}_onSessionStart(){var s;const e=((s=this.manager.session.enabledFeatures)==null?void 0:s.indexOf("anchors"))>=0;e&&(this._available=e,this.fire("available"))}_onSessionEnd(){if(!this._available)return;this._available=!1;for(let s=0;s<this._creationQueue.length;s++)this._creationQueue[s].callback&&this._creationQueue[s].callback(new Error("session ended"),null);this._creationQueue.length=0,this._index.clear(),this._indexByUuid.clear();let e=this._list.length;for(;e--;)this._list[e].destroy();this._list.length=0,this.fire("unavailable")}_createAnchor(e,s=null){const i=new To(this,e,s);return this._index.set(e,i),s&&this._indexByUuid.set(s,i),this._list.push(i),i.once("destroy",this._onAnchorDestroy,this),i}_onAnchorDestroy(e,s){this._index.delete(e),s.uuid&&this._indexByUuid.delete(s.uuid);const i=this._list.indexOf(s);i!==-1&&this._list.splice(i,1),this.fire("destroy",s)}create(e,s,i){if(!this._available){i==null||i(new Error("Anchors API is not available"),null);return}if(window.XRHitTestResult&&e instanceof XRHitTestResult){const r=e;if(i=s,!this._supported){i==null||i(new Error("Anchors API is not supported"),null);return}if(!r.createAnchor){i==null||i(new Error("Creating Anchor from Hit Test is not supported"),null);return}r.createAnchor().then(a=>{const n=this._createAnchor(a);i==null||i(null,n),this.fire("add",n)}).catch(a=>{i==null||i(a,null),this.fire("error",a)})}else this._creationQueue.push({transform:new XRRigidTransform(e,s),callback:i})}restore(e,s){if(!this._available){s==null||s(new Error("Anchors API is not available"),null);return}if(!this._persistence){s==null||s(new Error("Anchor Persistence is not supported"),null);return}if(!this.manager.active){s==null||s(new Error("WebXR session is not active"),null);return}this.manager.session.restorePersistentAnchor(e).then(i=>{const r=this._createAnchor(i,e);s==null||s(null,r),this.fire("add",r)}).catch(i=>{s==null||s(i,null),this.fire("error",i)})}forget(e,s){if(!this._available){s==null||s(new Error("Anchors API is not available"));return}if(!this._persistence){s==null||s(new Error("Anchor Persistence is not supported"));return}if(!this.manager.active){s==null||s(new Error("WebXR session is not active"));return}this.manager.session.deletePersistentAnchor(e).then(()=>{s==null||s(null)}).catch(i=>{s==null||s(i),this.fire("error",i)})}update(e){if(!this._available){!this.manager.session.enabledFeatures&&!this._checkingAvailability&&(this._checkingAvailability=!0,e.createAnchor(new XRRigidTransform,this.manager._referenceSpace).then(s=>{s.delete(),this.manager.active&&(this._available=!0,this.fire("available"))}).catch(()=>{}));return}if(this._creationQueue.length){for(let s=0;s<this._creationQueue.length;s++){const i=this._creationQueue[s];e.createAnchor(i.transform,this.manager._referenceSpace).then(r=>{i.callback&&this._callbacksAnchors.set(r,i.callback)}).catch(r=>{i.callback&&i.callback(r,null),this.fire("error",r)})}this._creationQueue.length=0}for(const[s,i]of this._index)e.trackedAnchors.has(s)||(this._index.delete(s),i.destroy());for(let s=0;s<this._list.length;s++)this._list[s].update(e);for(const s of e.trackedAnchors){if(this._index.has(s))continue;try{const a=s.anchorSpace}catch{continue}const i=this._createAnchor(s);i.update(e);const r=this._callbacksAnchors.get(s);r&&(this._callbacksAnchors.delete(s),r(null,i)),this.fire("add",i)}}get supported(){return this._supported}get available(){return this._available}get persistence(){return this._persistence}get uuids(){return!this._available||!this._persistence||!this.manager.active?null:this.manager.session.persistentAnchors}get list(){return this._list}}h(tn,"EVENT_AVAILABLE","available"),h(tn,"EVENT_UNAVAILABLE","unavailable"),h(tn,"EVENT_ERROR","error"),h(tn,"EVENT_ADD","add"),h(tn,"EVENT_DESTROY","destroy");class Au extends Se{constructor(e,s){super();h(this,"_meshDetection");h(this,"_xrMesh");h(this,"_lastChanged",0);h(this,"_position",new A);h(this,"_rotation",new ue);this._meshDetection=e,this._xrMesh=s,this._lastChanged=this._xrMesh.lastChangedTime}get xrMesh(){return this._xrMesh}get label(){return this._xrMesh.semanticLabel||""}get vertices(){return this._xrMesh.vertices}get indices(){return this._xrMesh.indices}destroy(){this._xrMesh&&(this._xrMesh=null,this.fire("remove"))}update(e){const s=this._meshDetection._manager,i=e.getPose(this._xrMesh.meshSpace,s._referenceSpace);i&&(this._position.copy(i.transform.position),this._rotation.copy(i.transform.orientation)),this._lastChanged!==this._xrMesh.lastChangedTime&&(this._lastChanged=this._xrMesh.lastChangedTime,this.fire("change"))}getPosition(){return this._position}getRotation(){return this._rotation}}h(Au,"EVENT_REMOVE","remove"),h(Au,"EVENT_CHANGE","change");class wo extends Se{constructor(e){super();h(this,"_manager");h(this,"_supported",Pe.browser&&!!window.XRMesh);h(this,"_available",!1);h(this,"_index",new Map);h(this,"_list",[]);this._manager=e,this._supported&&(this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this))}update(e){if(!this._available)if(!this._manager.session.enabledFeatures&&e.detectedMeshes.size)this._available=!0,this.fire("available");else return;for(const s of e.detectedMeshes){let i=this._index.get(s);i?i.update(e):(i=new Au(this,s),this._index.set(s,i),this._list.push(i),i.update(e),this.fire("add",i))}for(const s of this._index.values())e.detectedMeshes.has(s.xrMesh)||this._removeMesh(s)}_removeMesh(e){this._index.delete(e.xrMesh),this._list.splice(this._list.indexOf(e),1),e.destroy(),this.fire("remove",e)}_onSessionStart(){if(this._manager.session.enabledFeatures){const e=this._manager.session.enabledFeatures.indexOf("mesh-detection")!==-1;if(!e)return;this._available=e,this.fire("available")}}_onSessionEnd(){if(this._available){this._available=!1;for(const e of this._index.values())this._removeMesh(e);this.fire("unavailable")}}get supported(){return this._supported}get available(){return this._available}get meshes(){return this._list}}h(wo,"EVENT_AVAILABLE","available"),h(wo,"EVENT_UNAVAILABLE","unavailable"),h(wo,"EVENT_ADD","add"),h(wo,"EVENT_REMOVE","remove");class Wv extends Se{constructor(e,s,i){super();h(this,"_manager");h(this,"_xrView");h(this,"_positionData",new Float32Array(3));h(this,"_viewport",new oe);h(this,"_projMat",new ie);h(this,"_projViewOffMat",new ie);h(this,"_viewMat",new ie);h(this,"_viewOffMat",new ie);h(this,"_viewMat3",new _i);h(this,"_viewInvMat",new ie);h(this,"_viewInvOffMat",new ie);h(this,"_xrCamera",null);h(this,"_textureColor",null);h(this,"_textureDepth",null);h(this,"_depthInfo",null);h(this,"_emptyDepthBuffer",new Uint8Array(32));h(this,"_depthMatrix",new ie);this._manager=e,this._xrView=s;const r=this._manager.app.graphicsDevice;if(this._manager.views.supportedColor&&(this._xrCamera=this._xrView.camera,this._manager.views.availableColor&&this._xrCamera&&(this._textureColor=new ge(r,{format:Ar,mipmaps:!1,addressU:me,addressV:me,minFilter:yt,magFilter:yt,width:this._xrCamera.width,height:this._xrCamera.height,name:`XrView-${this._xrView.eye}-Color`}))),this._manager.views.supportedDepth&&this._manager.views.availableDepth){const a=this._manager.views.depthGpuOptimized?Te:yt;this._textureDepth=new ge(r,{format:this._manager.views.depthPixelFormat,arrayLength:i===1?0:i,mipmaps:!1,addressU:me,addressV:me,minFilter:a,magFilter:a,width:4,height:4,name:`XrView-${this._xrView.eye}-Depth`});for(let n=0;n<this._textureDepth._levels.length;n++)this._textureDepth._levels[n]=this._emptyDepthBuffer;this._textureDepth.upload()}(this._textureColor||this._textureDepth)&&r.on("devicelost",this._onDeviceLost,this)}get textureColor(){return this._textureColor}get textureDepth(){return this._textureDepth}get depthUvMatrix(){return this._depthMatrix}get depthValueToMeters(){var e;return((e=this._depthInfo)==null?void 0:e.rawValueToMeters)||0}get eye(){return this._xrView.eye}get viewport(){return this._viewport}get projMat(){return this._projMat}get projViewOffMat(){return this._projViewOffMat}get viewOffMat(){return this._viewOffMat}get viewInvOffMat(){return this._viewInvOffMat}get viewMat3(){return this._viewMat3}get positionData(){return this._positionData}update(e,s){this._xrView=s,this._manager.views.availableColor&&(this._xrCamera=this._xrView.camera);const r=e.session.renderState.baseLayer.getViewport(this._xrView);this._viewport.x=r.x,this._viewport.y=r.y,this._viewport.z=r.width,this._viewport.w=r.height,this._projMat.set(this._xrView.projectionMatrix),this._viewMat.set(this._xrView.transform.inverse.matrix),this._viewInvMat.set(this._xrView.transform.matrix),this._updateTextureColor(),this._updateDepth(e)}_updateTextureColor(){if(!this._manager.views.availableColor||!this._xrCamera||!this._textureColor)return;const e=this._manager.webglBinding;if(!e)return;const s=e.getCameraImage(this._xrCamera);if(!s)return;const i=this._manager.app.graphicsDevice,r=i.gl;if(!this._frameBufferSource)this._frameBufferSource=r.createFramebuffer(),this._frameBuffer=r.createFramebuffer();else{const a=r.COLOR_ATTACHMENT0,n=this._xrCamera.width,o=this._xrCamera.height;i.setFramebuffer(this._frameBufferSource),r.framebufferTexture2D(r.FRAMEBUFFER,a,r.TEXTURE_2D,s,0),i.setFramebuffer(this._frameBuffer),r.framebufferTexture2D(r.FRAMEBUFFER,a,r.TEXTURE_2D,this._textureColor.impl._glTexture,0),r.bindFramebuffer(r.READ_FRAMEBUFFER,this._frameBufferSource),r.bindFramebuffer(r.DRAW_FRAMEBUFFER,this._frameBuffer),r.blitFramebuffer(0,o,n,0,0,0,n,o,r.COLOR_BUFFER_BIT,r.NEAREST)}}_updateDepth(e){var d,f;if(!this._manager.views.availableDepth||!this._textureDepth)return;const s=this._manager.views.depthGpuOptimized,i=s?this._manager.webglBinding:e;if(!i){this._depthInfo=null;return}const r=i.getDepthInformation(this._xrView);if(!r){this._depthInfo=null;return}let a=!this._depthInfo!=!r;this._depthInfo=r;const n=((d=this._depthInfo)==null?void 0:d.width)||4,o=((f=this._depthInfo)==null?void 0:f.height)||4;let c=!1;if((this._textureDepth.width!==n||this._textureDepth.height!==o)&&(this._textureDepth._width=n,this._textureDepth._height=o,a=!0,c=!0),a&&(this._depthInfo?this._depthMatrix.data.set(this._depthInfo.normDepthBufferFromNormView.matrix):this._depthMatrix.setIdentity()),this._depthInfo)if(s){if(this._depthInfo.texture){const u=this._manager.app.graphicsDevice.gl;switch(this._textureDepth.impl._glTexture=this._depthInfo.texture,this._depthInfo.textureType==="texture-array"?this._textureDepth.impl._glTarget=u.TEXTURE_2D_ARRAY:this._textureDepth.impl._glTarget=u.TEXTURE_2D,this._manager.views.depthPixelFormat){case er:this._textureDepth.impl._glInternalFormat=u.R32F,this._textureDepth.impl._glPixelType=u.FLOAT,this._textureDepth.impl._glFormat=u.RED;break;case Xi:this._textureDepth.impl._glInternalFormat=u.DEPTH_COMPONENT16,this._textureDepth.impl._glPixelType=u.UNSIGNED_SHORT,this._textureDepth.impl._glFormat=u.DEPTH_COMPONENT;break}this._textureDepth.impl._glCreated=!0}}else this._textureDepth._levels[0]=new Uint8Array(this._depthInfo.data),this._textureDepth.upload();else this._textureDepth._levels[0]=this._emptyDepthBuffer,this._textureDepth.upload();c&&this.fire("depth:resize",n,o)}updateTransforms(e){e?(this._viewInvOffMat.mul2(e,this._viewInvMat),this.viewOffMat.copy(this._viewInvOffMat).invert()):(this._viewInvOffMat.copy(this._viewInvMat),this.viewOffMat.copy(this._viewMat)),this._viewMat3.setFromMat4(this._viewOffMat),this._projViewOffMat.mul2(this._projMat,this._viewOffMat),this._positionData[0]=this._viewInvOffMat.data[12],this._positionData[1]=this._viewInvOffMat.data[13],this._positionData[2]=this._viewInvOffMat.data[14]}_onDeviceLost(){this._frameBufferSource=null,this._frameBuffer=null,this._depthInfo=null}getDepth(e,s){var i;return this._manager.views.depthGpuOptimized?null:((i=this._depthInfo)==null?void 0:i.getDepthInMeters(e,s))??null}destroy(){if(this._depthInfo=null,this._textureColor&&(this._textureColor.destroy(),this._textureColor=null),this._textureDepth&&(this._textureDepth.destroy(),this._textureDepth=null),this._frameBufferSource){const e=this._manager.app.graphicsDevice.gl;e.deleteFramebuffer(this._frameBufferSource),this._frameBufferSource=null,e.deleteFramebuffer(this._frameBuffer),this._frameBuffer=null}}}h(Wv,"EVENT_DEPTHRESIZE","depth:resize");class Sc extends Se{constructor(e){super();h(this,"_manager");h(this,"_index",new Map);h(this,"_indexTmp",new Map);h(this,"_list",[]);h(this,"_supportedColor",Pe.browser&&!!window.XRCamera&&!!window.XRWebGLBinding);h(this,"_supportedDepth",Pe.browser&&!!window.XRDepthInformation);h(this,"_availableColor",!1);h(this,"_availableDepth",!1);h(this,"_depthUsage","");h(this,"_depthFormat","");h(this,"_depthFormats",{[Bv]:Mu,[zv]:Xi,[Vv]:er});this._manager=e,this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this)}get list(){return this._list}get supportedColor(){return this._supportedColor}get supportedDepth(){return this._supportedDepth}get availableColor(){return this._availableColor}get availableDepth(){return this._availableDepth}get depthUsage(){return this._depthUsage}get depthGpuOptimized(){return this._depthUsage===Uv}get depthFormat(){return this._depthFormat}get depthPixelFormat(){return this._depthFormats[this._depthFormat]??null}update(e,s){for(let i=0;i<s.length;i++)this._indexTmp.set(s[i].eye,s[i]);for(const[i,r]of this._indexTmp){let a=this._index.get(i);a?a.update(e,r):(a=new Wv(this._manager,r,s.length),this._index.set(i,a),this._list.push(a),a.update(e,r),this.fire("add",a))}for(const[i,r]of this._index){if(this._indexTmp.has(i))continue;r.destroy(),this._index.delete(i);const a=this._list.indexOf(r);a!==-1&&this._list.splice(a,1),this.fire("remove",r)}this._indexTmp.clear()}get(e){return this._index.get(e)||null}_onSessionStart(){if(this._manager.type===Fo&&this._manager.session.enabledFeatures&&(this._availableColor=this._manager.session.enabledFeatures.indexOf("camera-access")!==-1,this._availableDepth=this._manager.session.enabledFeatures.indexOf("depth-sensing")!==-1,this._availableDepth)){const e=this._manager.session;this._depthUsage=e.depthUsage,this._depthFormat=e.depthDataFormat}}_onSessionEnd(){for(const e of this._index.values())e.destroy();this._index.clear(),this._availableColor=!1,this._availableDepth=!1,this._depthUsage="",this._depthFormat="",this._list.length=0}}h(Sc,"EVENT_ADD","add"),h(Sc,"EVENT_REMOVE","remove");class sn extends Se{constructor(e){super();h(this,"app");h(this,"_supported",Pe.browser&&!!navigator.xr);h(this,"_available",{});h(this,"_type",null);h(this,"_spaceType",null);h(this,"_session",null);h(this,"_baseLayer",null);h(this,"webglBinding",null);h(this,"_referenceSpace",null);h(this,"domOverlay");h(this,"hitTest");h(this,"imageTracking");h(this,"planeDetection");h(this,"meshDetection");h(this,"input");h(this,"lightEstimation");h(this,"views");h(this,"anchors");h(this,"_camera",null);h(this,"_localPosition",new A);h(this,"_localRotation",new ue);h(this,"_depthNear",.1);h(this,"_depthFar",1e3);h(this,"_supportedFrameRates",null);h(this,"_width",0);h(this,"_height",0);h(this,"_framebufferScaleFactor",1);this.app=e,this._available[ok]=!1,this._available[lk]=!1,this._available[Fo]=!1,this.views=new Sc(this),this.domOverlay=new dk(this),this.hitTest=new qr(this),this.imageTracking=new Gv(this),this.planeDetection=new xo(this),this.meshDetection=new wo(this),this.input=new Oi(this),this.lightEstimation=new Eu(this),this.anchors=new tn(this),this.views=new Sc(this),this._supported&&(navigator.xr.addEventListener("devicechange",()=>{this._deviceAvailabilityCheck()}),this._deviceAvailabilityCheck(),this.app.graphicsDevice.on("devicelost",this._onDeviceLost,this),this.app.graphicsDevice.on("devicerestored",this._onDeviceRestored,this)),this.isPC=Qv()}destroy(){}start(e,s,i,r){let a=r;if(typeof r=="object"&&(a=r.callback),!this._available[s]){a&&a(new Error("XR is not available"));return}if(this._session){a&&a(new Error("XR session is already started"));return}this._camera=e,this._camera.camera.xr=this,this._type=s,this._spaceType=i,this._framebufferScaleFactor=(r==null?void 0:r.framebufferScaleFactor)??1,this._setClipPlanes(e.nearClip,e.farClip);const n={requiredFeatures:[i],optionalFeatures:[]},o=this.app.graphicsDevice;o!=null&&o.isWebGPU&&n.requiredFeatures.push("webgpu");const c=o==null?void 0:o.isWebGL2;if(s===Fo){if(n.optionalFeatures.push("light-estimation"),n.optionalFeatures.push("hit-test"),r&&(r.imageTracking&&this.imageTracking.supported&&n.optionalFeatures.push("image-tracking"),r.planeDetection&&n.optionalFeatures.push("plane-detection"),r.meshDetection&&n.optionalFeatures.push("mesh-detection")),this.domOverlay.supported&&this.domOverlay.root&&(n.optionalFeatures.push("dom-overlay"),n.domOverlay={root:this.domOverlay.root}),r&&r.anchors&&this.anchors.supported&&n.optionalFeatures.push("anchors"),r&&r.depthSensing&&this.views.supportedDepth){n.optionalFeatures.push("depth-sensing");const d=[],f=[];if(d.push(Uv,ck),f.push(Vv,Bv,zv),r.depthSensing.usagePreference){const u=d.indexOf(r.depthSensing.usagePreference);u!==-1&&d.splice(u,1),d.unshift(r.depthSensing.usagePreference)}if(r.depthSensing.dataFormatPreference){const u=f.indexOf(r.depthSensing.dataFormatPreference);u!==-1&&f.splice(u,1),f.unshift(r.depthSensing.dataFormatPreference)}n.depthSensing={usagePreference:d,dataFormatPreference:f}}c&&r&&r.cameraColor&&this.views.supportedColor&&n.optionalFeatures.push("camera-access")}n.optionalFeatures.push("hand-tracking"),r&&r.optionalFeatures&&(n.optionalFeatures=n.optionalFeatures.concat(r.optionalFeatures)),this.imageTracking.supported&&this.imageTracking.images.length?this.imageTracking.prepareImages((d,f)=>{if(d){a&&a(d),this.fire("error",d);return}f!==null&&(n.trackedImages=f),this._onStartOptionsReady(s,i,n,a)}):this._onStartOptionsReady(s,i,n,a)}_onStartOptionsReady(e,s,i,r){const a=this.isPC?{requiredFeatures:["local-floor"]}:i;navigator.xr.requestSession(e,a).then(n=>{this._onSessionStart(n,s,r)}).catch(n=>{this._camera.camera.xr=null,this._camera=null,this._type=null,this._spaceType=null,r&&r(n),this.fire("error",n)})}end(e){if(!this._session){e&&e(new Error("XR Session is not initialized"));return}this.webglBinding=null,e&&this.once("end",e),this._session.end()}isAvailable(e){return this._available[e]}_deviceAvailabilityCheck(){for(const e in this._available)this._sessionSupportCheck(e)}initiateRoomCapture(e){if(!this._session){e(new Error("Session is not active"));return}if(!this._session.initiateRoomCapture){e(new Error("Session does not support manual room capture"));return}this._session.initiateRoomCapture().then(()=>{e&&e(null)}).catch(s=>{e&&e(s)})}updateTargetFrameRate(e,s){var i;if(!((i=this._session)!=null&&i.updateTargetFrameRate)){s==null||s(new Error("unable to update frameRate"));return}this._session.updateTargetFrameRate(e).then(()=>{s==null||s()}).catch(r=>{s==null||s(r)})}_sessionSupportCheck(e){navigator.xr.isSessionSupported(e).then(s=>{this._available[e]!==s&&(this._available[e]=s,this.fire("available",e,s),this.fire(`available:${e}`,s))}).catch(s=>{this.fire("error",s)})}_onSessionStart(e,s,i){let r=!1;this._session=e;const a=()=>{this.fire("visibility:change",e.visibilityState)},n=()=>{this._setClipPlanes(this._camera.nearClip,this._camera.farClip)},o=()=>{this._camera&&(this._camera.off("set_nearClip",n),this._camera.off("set_farClip",n),this._camera.camera.xr=null,this._camera=null),e.removeEventListener("end",o),e.removeEventListener("visibilitychange",a),r||this.fire("end"),this._session=null,this._referenceSpace=null,this._width=0,this._height=0,this._type=null,this._spaceType=null,this.app.systems&&this.app.tick()};e.addEventListener("end",o),e.addEventListener("visibilitychange",a),this._camera.on("set_nearClip",n),this._camera.on("set_farClip",n),y.assert(window,"window is needed to scale the XR framebuffer. Are you running XR headless?"),this._createBaseLayer(),this.session.supportedFrameRates?this._supportedFrameRates=Array.from(this.session.supportedFrameRates):this._supportedFrameRates=null,this._session.addEventListener("frameratechange",()=>{var c;this.fire("frameratechange",(c=this._session)==null?void 0:c.frameRate)}),e.requestReferenceSpace(s).then(c=>{this._referenceSpace=c,this.app.tick(),i&&i(null),this.fire("start")}).catch(c=>{r=!0,e.end(),i&&i(c),this.fire("error",c)})}_setClipPlanes(e,s){this._depthNear===e&&this._depthFar===s||(this._depthNear=e,this._depthFar=s,this._session&&this._session.updateRenderState({depthNear:this._depthNear,depthFar:this._depthFar}))}_createBaseLayer(){const e=this.app.graphicsDevice,s=e.maxPixelRatio/window.devicePixelRatio*this._framebufferScaleFactor;if(this._baseLayer=new XRWebGLLayer(this._session,e.gl,{alpha:!0,depth:!0,stencil:!0,framebufferScaleFactor:s,antialias:!1}),e!=null&&e.isWebGL2&&window.XRWebGLBinding)try{this.webglBinding=new XRWebGLBinding(this._session,e.gl)}catch(i){this.fire("error",i)}this._session.updateRenderState({baseLayer:this._baseLayer,depthNear:this._depthNear,depthFar:this._depthFar})}_onDeviceLost(){this._session&&(this.webglBinding&&(this.webglBinding=null),this._baseLayer=null,this._session.updateRenderState({baseLayer:this._baseLayer,depthNear:this._depthNear,depthFar:this._depthFar}))}_onDeviceRestored(){this._session&&setTimeout(()=>{this.app.graphicsDevice.gl.makeXRCompatible().then(()=>{this._createBaseLayer()}).catch(e=>{this.fire("error",e)})},0)}update(e){if(!this._session)return!1;const s=e.session.renderState.baseLayer.framebufferWidth,i=e.session.renderState.baseLayer.framebufferHeight;(this._width!==s||this._height!==i)&&(this._width=s,this._height=i,this.app.graphicsDevice.setResolution(s,i));const r=e.getViewerPose(this._referenceSpace);if(!r)return!1;const a=this.views.list.length;this.views.update(e,r.views);const n=r.transform.position,o=r.transform.orientation;if(this._localPosition.set(n.x,n.y,n.z),this._localRotation.set(o.x,o.y,o.z,o.w),a===0&&this.views.list.length>0){const c=new ie,d=this.views.list[0];c.copy(d.projMat);const f=c.data,u=2*Math.atan(1/f[5])*180/Math.PI,p=f[5]/f[0],m=f[14]/(f[10]+1),_=f[14]/(f[10]-1);this._camera.camera.setXrProperties({aspectRatio:p,farClip:m,fov:u,horizontalFov:!1,nearClip:_})}return this._camera.camera._node.setLocalPosition(this._localPosition),this._camera.camera._node.setLocalRotation(this._localRotation),this.input.update(e),this._type===Fo&&(this.hitTest.supported&&this.hitTest.update(e),this.lightEstimation.supported&&this.lightEstimation.update(e),this.imageTracking.supported&&this.imageTracking.update(e),this.anchors.supported&&this.anchors.update(e),this.planeDetection.supported&&this.planeDetection.update(e),this.meshDetection.supported&&this.meshDetection.update(e)),this.fire("update",e),!0}get supported(){return this._supported}get active(){return!!this._session}get type(){return this._type}get spaceType(){return this._spaceType}get session(){return this._session}get frameRate(){var e;return((e=this._session)==null?void 0:e.frameRate)??null}get supportedFrameRates(){return this._supportedFrameRates}get framebufferScaleFactor(){return this._framebufferScaleFactor}set fixedFoveation(e){var s;(((s=this._baseLayer)==null?void 0:s.fixedFoveation)??null)!==null&&(this.app.graphicsDevice.samples>1&&y.warn("Fixed Foveation is ignored. Disable anti-aliasing for it to be effective."),this._baseLayer.fixedFoveation=e)}get fixedFoveation(){var e;return((e=this._baseLayer)==null?void 0:e.fixedFoveation)??null}get camera(){return this._camera?this._camera.entity:null}get visibilityState(){return this._session?this._session.visibilityState:null}}h(sn,"EVENT_AVAILABLE","available"),h(sn,"EVENT_START","start"),h(sn,"EVENT_END","end"),h(sn,"EVENT_UPDATE","update"),h(sn,"EVENT_ERROR","error");class Gk extends Ys{constructor(t,e={}){super(t);const s=new r2;s.graphicsDevice=e.graphicsDevice??this.createDevice(t,e),this.addComponentSystems(s),this.addResourceHandles(s),s.elementInput=e.elementInput,s.keyboard=e.keyboard,s.mouse=e.mouse,s.touch=e.touch,s.gamepads=e.gamepads,s.scriptPrefix=e.scriptPrefix,s.assetPrefix=e.assetPrefix,s.scriptsOrder=e.scriptsOrder,s.soundManager=new zT,s.lightmapper=g2,s.batchManager=Hw,s.xr=sn,this.init(s)}createDevice(t,e){return e.graphicsDeviceOptions||(e.graphicsDeviceOptions={}),Pe.browser&&navigator.xr&&(e.graphicsDeviceOptions.xrCompatible=!0),e.graphicsDeviceOptions.alpha=e.graphicsDeviceOptions.alpha||!1,new gT(t,e.graphicsDeviceOptions)}addComponentSystems(t){t.componentSystems=[Yp,hL,BL,N2,G2,JL,H3,EO,AO,zO,uO,W2,z3,Q3,FL,j2,lO,cO,SO,YL,VL,vO,GO]}addResourceHandles(t){t.resourceHandlers=[HO,qF,jF,YF,wN,SN,nk,RN,pN,ZF,DN,EN,sN,uN,tN,IN,fN,iN,rN,QF,FN,MN,LN,eN,dN]}}class Hk extends Se{constructor(e,s){super();h(this,"_assets",new Set);h(this,"_loadingAssets",new Set);h(this,"_waitingAssets",new Set);h(this,"_loading",!1);h(this,"_loaded",!1);h(this,"_failed",[]);this._registry=s,e.forEach(i=>{if(i instanceof _e)i.registry||(i.registry=s),this._assets.add(i);else{const r=s.get(i);r?this._assets.add(r):this._waitForAsset(i)}})}destroy(){this._registry.off("load",this._onLoad),this._registry.off("error",this._onError),this._waitingAssets.forEach(e=>{this._registry.off(`add:${e}`,this._onAddAsset)}),this.off("progress"),this.off("load")}_assetHasDependencies(e){var s;return e.type==="model"&&((s=e.file)==null?void 0:s.url)&&e.file.url&&e.file.url.match(/.json$/g)}load(e,s){if(this._loading){console.debug("AssetListLoader: Load function called multiple times.");return}this._loading=!0,this._callback=e,this._scope=s,this._registry.on("load",this._onLoad,this),this._registry.on("error",this._onError,this);let i=!1;this._assets.forEach(r=>{r.loaded||(i=!0,this._assetHasDependencies(r)&&this._registry.loadFromUrl(r.file.url,r.type,(a,n)=>{if(a){this._onError(a,r);return}this._onLoad(r)}),this._loadingAssets.add(r),this._registry.add(r))}),this._loadingAssets.forEach(r=>{this._assetHasDependencies(r)||this._registry.load(r)}),!i&&this._waitingAssets.size===0&&this._loadingComplete()}ready(e,s=this){this._loaded?e.call(s,Array.from(this._assets)):this.once("load",i=>{e.call(s,i)})}_loadingComplete(){this._loaded||(this._loaded=!0,this._registry.off("load",this._onLoad,this),this._registry.off("error",this._onError,this),this._failed.length?(this._callback&&this._callback.call(this._scope,"Failed to load some assets",this._failed),this.fire("error",this._failed)):(this._callback&&this._callback.call(this._scope),this.fire("load",Array.from(this._assets))))}_onLoad(e){this._loadingAssets.has(e)&&(this.fire("progress",e),this._loadingAssets.delete(e)),this._loadingAssets.size===0&&setTimeout(()=>{this._loadingComplete()},0)}_onError(e,s){this._loadingAssets.has(s)&&(this._failed.push(s),this._loadingAssets.delete(s)),this._loadingAssets.size===0&&setTimeout(()=>{this._loadingComplete()},0)}_onAddAsset(e){this._waitingAssets.delete(e),this._assets.add(e),e.loaded||(this._loadingAssets.add(e),this._registry.load(e))}_waitForAsset(e){this._waitingAssets.add(e),this._registry.once(`add:${e}`,this._onAddAsset,this)}}const Th=[],mk=[[],[],[]];class _k extends Ss{constructor(e,s){super(e);h(this,"viewBindGroups",[]);this.renderer=s}destroy(){this.viewBindGroups.forEach(e=>{e.defaultUniformBuffer.destroy(),e.destroy()}),this.viewBindGroups.length=0}update(e,s,i,r){this.camera=e,this.scene=s,this.layers=i,this.mapping=r}execute(){const e=this.device,{renderer:s,camera:i,scene:r,layers:a,mapping:n,renderTarget:o}=this,c=r.layers.layerList,d=r.layers.subLayerEnabled,f=r.layers.subLayerList;for(let u=0;u<c.length;u++){const p=c[u];if(!(a&&a.indexOf(p)<0)&&p.enabled&&d[u]&&p.camerasSet.has(i.camera)){const m=f[u];Z.pushGpuMarker(e,`${p.name}(${m?"TRANSP":"OPAQUE"})`),p._clearDepthBuffer&&s.clear(i.camera,!1,!0,!1);const _=p.meshInstances;for(let S=0;S<_.length;S++){const g=_[S];g.pick&&g.transparent===m&&(Th.push(g),n.set(g.id,g))}Th.length>0&&(r.clusteredLightingEnabled&&s.worldClustersAllocator.empty.activate(),s.setCameraUniforms(i.camera,o),e.supportsUniformBuffers&&s.setupViewUniformBuffers(this.viewBindGroups,s.viewUniformFormat,s.viewBindGroupFormat,null),s.renderForward(i.camera,o,Th,mk,Wn,g=>{e.setBlendState(ut.NOBLEND)}),Th.length=0),Z.popGpuMarker(e)}}}}const cf=new Set,gk=new oe;let Wk=class{constructor(t,e,s){h(this,"renderTarget",null);h(this,"mapping",new Map);h(this,"deviceValid",!0);y.assert(t),this.renderer=t.renderer,this.device=t.graphicsDevice,this.renderPass=new _k(this.device,t.renderer),this.width=0,this.height=0,this.resize(e,s),this.device.on("destroy",()=>{this.deviceValid=!1})}getSelection(t,e,s=1,i=1){const r=this.device;if(r.isWebGPU)return y.errorOnce("pc.Picker#getSelection is not supported on WebGPU, use pc.Picker#getSelectionAsync instead."),[];y.assert(typeof t!="object","Picker.getSelection:param 'rect' is deprecated, use 'x, y, width, height' instead."),e=this.renderTarget.height-(e+i);const a=this.sanitizeRect(t,e,s,i);r.setRenderTarget(this.renderTarget),r.updateBegin();const n=new Uint8Array(4*a.z*a.w);return r.readPixels(a.x,a.y,a.z,a.w,n),r.updateEnd(),this.decodePixels(n,this.mapping)}getSelectionAsync(t,e,s=1,i=1){var a;(a=this.device)!=null&&a.isWebGL2&&(e=this.renderTarget.height-(e+i));const r=this.sanitizeRect(t,e,s,i);return this.renderTarget.colorBuffer.read(r.x,r.y,r.z,r.w,{renderTarget:this.renderTarget,immediate:!0}).then(n=>this.decodePixels(n,this.mapping))}sanitizeRect(t,e,s,i){const r=this.renderTarget.width,a=this.renderTarget.height;return t=Y.clamp(Math.floor(t),0,r-1),e=Y.clamp(Math.floor(e),0,a-1),s=Math.floor(Math.max(s,1)),s=Math.min(s,r-t),i=Math.floor(Math.max(i,1)),i=Math.min(i,a-e),gk.set(t,e,s,i)}decodePixels(t,e){const s=[];if(this.deviceValid){const i=t.length;for(let r=0;r<i;r+=4){const a=t[r+0],n=t[r+1],o=t[r+2],d=(t[r+3]<<24|a<<16|n<<8|o)>>>0;d!==4294967295&&cf.add(e.get(d))}cf.forEach(r=>{r&&s.push(r)}),cf.clear()}return s}allocateRenderTarget(){const t=new ge(this.device,{format:Fe,width:this.width,height:this.height,mipmaps:!1,minFilter:Te,magFilter:Te,addressU:me,addressV:me,name:"pick"});this.renderTarget=new _t({colorBuffer:t,depth:!0})}releaseRenderTarget(){this.renderTarget&&(this.renderTarget.destroyTextureBuffers(),this.renderTarget.destroy(),this.renderTarget=null)}prepare(t,e,s){s instanceof Lt&&(s=[s]),(!this.renderTarget||this.width!==this.renderTarget.width||this.height!==this.renderTarget.height)&&(this.releaseRenderTarget(),this.allocateRenderTarget()),this.mapping.clear();const i=this.renderPass;i.init(this.renderTarget),i.colorOps.clearValue=ae.WHITE,i.colorOps.clear=!0,i.depthStencilOps.clearDepth=!0,i.update(t,e,s,this.mapping),i.render()}resize(t,e){this.width=Math.floor(t),this.height=Math.floor(e)}};new A;new A;const Sk=new En,yk=new En,vk=new En;Sk.end=new A;yk.end=new A;vk.end=new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new A;new oe;J.prototype.scale=J.prototype.mulScalar;A.prototype.scale=A.prototype.mulScalar;oe.prototype.scale=oe.prototype.mulScalar;new oe;function Xk(l,t){return y.deprecated("pc.createSphere is deprecated. Use 'pc.Mesh.fromGeometry(device, new SphereGeometry(options);' format instead."),Ve.fromGeometry(l,new Gp(t))}Object.defineProperties(_t.prototype,{_glFrameBuffer:{get:function(){return y.deprecated("pc.RenderTarget#_glFrameBuffer is deprecated. Use pc.RenderTarget.impl#_glFrameBuffer instead."),this.impl._glFrameBuffer},set:function(l){y.deprecated("pc.RenderTarget#_glFrameBuffer is deprecated. Use pc.RenderTarget.impl#_glFrameBuffer instead.")}}});Object.defineProperty(Nt,"defaultInstancingFormat",{get:function(){return y.assert("pc.VertexFormat.defaultInstancingFormat is deprecated, use pc.VertexFormat.getDefaultInstancingFormat(graphicsDevice)."),null}});Object.defineProperties(ge.prototype,{rgbm:{get:function(){return y.deprecated("pc.Texture#rgbm is deprecated. Use pc.Texture#type instead."),this.type===Qi},set:function(l){y.deprecated("pc.Texture#rgbm is deprecated. Use pc.Texture#type instead."),this.type=l?Qi:Ds}},swizzleGGGR:{get:function(){return y.deprecated("pc.Texture#swizzleGGGR is deprecated. Use pc.Texture#type instead."),this.type===Ho},set:function(l){y.deprecated("pc.Texture#swizzleGGGR is deprecated. Use pc.Texture#type instead."),this.type=l?Ho:Ds}},_glTexture:{get:function(){return y.deprecated("pc.Texture#_glTexture is no longer available, use Use pc.Texture.impl._glTexture instead."),this.impl._glTexture}}});Object.defineProperty($e.prototype,"boneLimit",{get:function(){return y.deprecated("pc.GraphicsDevice#boneLimit is deprecated and the limit has been removed."),1024}});Object.defineProperty($e.prototype,"webgl2",{get:function(){return y.deprecated("pc.GraphicsDevice#webgl2 is deprecated, use pc.GraphicsDevice#isWebGL2 instead."),this.isWebGL2}});Object.defineProperty($e.prototype,"textureFloatHighPrecision",{get:function(){return y.deprecated("pc.GraphicsDevice#textureFloatHighPrecision is deprecated and always returns true."),!0}});Object.defineProperty($e.prototype,"extBlendMinmax",{get:function(){return y.deprecated("pc.GraphicsDevice#extBlendMinmax is deprecated as it is always true."),!0}});Object.defineProperty($e.prototype,"extTextureHalfFloat",{get:function(){return y.deprecated("pc.GraphicsDevice#extTextureHalfFloat is deprecated as it is always true."),!0}});Object.defineProperty($e.prototype,"extTextureLod",{get:function(){return y.deprecated("pc.GraphicsDevice#extTextureLod is deprecated as it is always true."),!0}});Object.defineProperty($e.prototype,"textureHalfFloatFilterable",{get:function(){return y.deprecated("pc.GraphicsDevice#textureHalfFloatFilterable is deprecated as it is always true."),!0}});Object.defineProperty($e.prototype,"supportsMrt",{get:function(){return y.deprecated("pc.GraphicsDevice#supportsMrt is deprecated as it is always true."),!0}});Object.defineProperty($e.prototype,"supportsVolumeTextures",{get:function(){return y.deprecated("pc.GraphicsDevice#supportsVolumeTextures is deprecated as it is always true."),!0}});Object.defineProperty($e.prototype,"supportsInstancing",{get:function(){return y.deprecated("pc.GraphicsDevice#supportsInstancing is deprecated as it is always true."),!0}});Object.defineProperty($e.prototype,"textureHalfFloatUpdatable",{get:function(){return y.deprecated("pc.GraphicsDevice#textureHalfFloatUpdatable is deprecated as it is always true."),!0}});Object.defineProperty($e.prototype,"extTextureFloat",{get:function(){return y.deprecated("pc.GraphicsDevice#extTextureFloat is deprecated as it is always true"),!0}});Object.defineProperty($e.prototype,"extStandardDerivatives",{get:function(){return y.deprecated("pc.GraphicsDevice#extStandardDerivatives is deprecated as it is always true."),!0}});ut.DEFAULT=Object.freeze(new ut);const ft=new ut,Yi=new qt;$e.prototype.setBlendFunction=function(l,t){y.deprecated("pc.GraphicsDevice#setBlendFunction is deprecated, use pc.GraphicsDevice.setBlendState instead.");const e=this.blendState;ft.copy(e),ft.setColorBlend(e.colorOp,l,t),ft.setAlphaBlend(e.alphaOp,l,t),this.setBlendState(ft)};$e.prototype.setBlendFunctionSeparate=function(l,t,e,s){y.deprecated("pc.GraphicsDevice#setBlendFunctionSeparate is deprecated, use pc.GraphicsDevice.setBlendState instead.");const i=this.blendState;ft.copy(i),ft.setColorBlend(i.colorOp,l,t),ft.setAlphaBlend(i.alphaOp,e,s),this.setBlendState(ft)};$e.prototype.setBlendEquation=function(l){y.deprecated("pc.GraphicsDevice#setBlendEquation is deprecated, use pc.GraphicsDevice.setBlendState instead.");const t=this.blendState;ft.copy(t),ft.setColorBlend(l,t.colorSrcFactor,t.colorDstFactor),ft.setAlphaBlend(l,t.alphaSrcFactor,t.alphaDstFactor),this.setBlendState(ft)};$e.prototype.setBlendEquationSeparate=function(l,t){y.deprecated("pc.GraphicsDevice#setBlendEquationSeparate is deprecated, use pc.GraphicsDevice.setBlendState instead.");const e=this.blendState;ft.copy(e),ft.setColorBlend(l,e.colorSrcFactor,e.colorDstFactor),ft.setAlphaBlend(t,e.alphaSrcFactor,e.alphaDstFactor),this.setBlendState(ft)};$e.prototype.setColorWrite=function(l,t,e,s){y.deprecated("pc.GraphicsDevice#setColorWrite is deprecated, use pc.GraphicsDevice.setBlendState instead.");const i=this.blendState;ft.copy(i),ft.setColorWrite(l,t,e,s),this.setBlendState(ft)};$e.prototype.getBlending=function(){return this.blendState.blend};$e.prototype.setBlending=function(l){y.deprecated("pc.GraphicsDevice#setBlending is deprecated, use pc.GraphicsDevice.setBlendState instead."),ft.copy(this.blendState),ft.blend=l,this.setBlendState(ft)};$e.prototype.setDepthWrite=function(l){y.deprecated("pc.GraphicsDevice#setDepthWrite is deprecated, use pc.GraphicsDevice.setDepthState instead."),Yi.copy(this.depthState),Yi.write=l,this.setDepthState(Yi)};$e.prototype.setDepthFunc=function(l){y.deprecated("pc.GraphicsDevice#setDepthFunc is deprecated, use pc.GraphicsDevice.setDepthState instead."),Yi.copy(this.depthState),Yi.func=l,this.setDepthState(Yi)};$e.prototype.setDepthTest=function(l){y.deprecated("pc.GraphicsDevice#setDepthTest is deprecated, use pc.GraphicsDevice.setDepthState instead."),Yi.copy(this.depthState),Yi.test=l,this.setDepthState(Yi)};$e.prototype.getCullMode=function(){return this.cullMode};new Proxy({},{get(l,t){return y.deprecated(`Using pc.shaderChunks to access global shader chunks is deprecated. Use pc.ShaderChunks.get instead, for example: pc.ShaderChunks.get(this.app.graphicsDevice, pc.SHADERLANGUAGE_GLSL).get('${t}');`),be.get(js().graphicsDevice,Oe).get(t)},set(l,t,e){return y.deprecated(`Using pc.shaderChunks to override global shader chunks is deprecated. Use pc.ShaderChunks.get instead, for example: pc.ShaderChunks.get(this.app.graphicsDevice, pc.SHADERLANGUAGE_GLSL).set('${t}');`),be.get(js().graphicsDevice,Oe).set(t,e),!0}});Object.defineProperty(Tt.prototype,"defaultMaterial",{get:function(){return y.deprecated("pc.Scene#defaultMaterial is deprecated."),$n(js().graphicsDevice)}});Object.defineProperty(Tt.prototype,"fogColor",{set:function(l){y.deprecated("Scene#fogColor is deprecated. Use Scene#fog.color instead."),this.fog.color=l},get:function(){return y.deprecated("Scene#fogColor is deprecated. Use Scene#fog.color instead."),this.fog.color}});Object.defineProperty(Tt.prototype,"fogEnd",{set:function(l){y.deprecated("Scene#fogEnd is deprecated. Use Scene#fog.end instead."),this.fog.end=l},get:function(){return y.deprecated("Scene#fogEnd is deprecated. Use Scene#fog.end instead."),this.fog.end}});Object.defineProperty(Tt.prototype,"fogStart",{set:function(l){y.deprecated("Scene#fogStart is deprecated. Use Scene#fog.start instead."),this.fog.start=l},get:function(){return y.deprecated("Scene#fogStart is deprecated. Use Scene#fog.start instead."),this.fog.start}});Object.defineProperty(Tt.prototype,"fogDensity",{set:function(l){y.deprecated("Scene#fogDensity is deprecated. Use Scene#fog.density instead."),this.fog.density=l},get:function(){return y.deprecated("Scene#fogDensity is deprecated. Use Scene#fog.density instead."),this.fog.density}});Object.defineProperty(Tt.prototype,"toneMapping",{set:function(l){y.removed("Scene#toneMapping is removed. Use CameraComponent#toneMapping instead.")},get:function(){y.removed("Scene#toneMapping is removed. Use CameraComponent#toneMapping instead.")}});Object.defineProperty(Tt.prototype,"gammaCorrection",{set:function(l){y.removed("Scene#gammaCorrection is removed. Use CameraComponent#gammaCorrection instead.")},get:function(){y.removed("Scene#gammaCorrection is removed. Use CameraComponent#gammaCorrection instead.")}});Object.defineProperty(Tt.prototype,"rendering",{set:function(l){y.removed("Scene#rendering is removed. Use Scene#fog or CameraComponent#gammaCorrection or CameraComponent#toneMapping instead.")},get:function(){y.removed("Scene#rendering is removed. Use Scene#fog or CameraComponent#gammaCorrection or CameraComponent#toneMapping instead.")}});Object.defineProperty(Uf.prototype,"_meshInstances",{get:function(){return y.deprecated("pc.LayerComposition#_meshInstances is deprecated."),null}});Object.defineProperty(Tt.prototype,"drawCalls",{get:function(){return y.deprecated("pc.Scene#drawCalls is deprecated and no longer provides mesh instances."),null}});["128","64","32","16","8","4"].forEach((l,t)=>{Object.defineProperty(Tt.prototype,`skyboxPrefiltered${l}`,{get:function(){return y.deprecated(`pc.Scene#skyboxPrefiltered${l} is deprecated. Use pc.Scene#prefilteredCubemaps instead.`),this._prefilteredCubemaps[t]},set:function(e){y.deprecated(`pc.Scene#skyboxPrefiltered${l} is deprecated. Use pc.Scene#prefilteredCubemaps instead.`),this._prefilteredCubemaps[t]=e,this.updateShaders=!0}})});Object.defineProperty(Tt.prototype,"models",{get:function(){return this._models||(this._models=[]),this._models}});function Ut(l,t,e=""){Object.defineProperty(l.prototype,t,{set:function(s){y.errorOnce(`${l.name}#${t} has been removed. ${e}`)},get:function(){y.errorOnce(`${l.name}#${t} has been removed. ${e}`)}})}Ut(Lt,"renderTarget");Ut(Lt,"onPreCull");Ut(Lt,"onPreRender");Ut(Lt,"onPreRenderOpaque");Ut(Lt,"onPreRenderTransparent");Ut(Lt,"onPostCull");Ut(Lt,"onPostRender");Ut(Lt,"onPostRenderOpaque");Ut(Lt,"onPostRenderTransparent");Ut(Lt,"onDrawCall");Ut(Lt,"layerReference");Ut(Ir,"onPreCull","Use Scene#EVENT_PRECULL event instead.");Ut(Ir,"onPostCull","Use Scene#EVENT_POSTCULL event instead.");Ut(Ir,"onPreRender","Use Scene#EVENT_PRERENDER event instead.");Ut(Ir,"onPostRender","Use Scene#EVENT_POSTRENDER event instead.");Ut(Ir,"onPreRenderLayer","Use Scene#EVENT_PRERENDER_LAYER event instead.");Ut(Ir,"onPostRenderLayer","Use Scene#EVENT_POSTRENDER_LAYER event instead.");sl.prototype.renderComposition=function(l){y.deprecated("pc.ForwardRenderer#renderComposition is deprecated. Use pc.AppBase.renderComposition instead."),js().renderComposition(l)};Ge.prototype.syncAabb=function(){y.deprecated("pc.MeshInstance#syncAabb is deprecated.")};Vp.prototype.getTarget=function(l){return y.deprecated("pc.Morph#getTarget is deprecated. Use pc.Morph#targets instead."),this.targets[l]};De.prototype.getChildren=function(){return y.deprecated("pc.GraphNode#getChildren is deprecated. Use pc.GraphNode#children instead."),this.children};De.prototype.getName=function(){return y.deprecated("pc.GraphNode#getName is deprecated. Use pc.GraphNode#name instead."),this.name};De.prototype.getPath=function(){return y.deprecated("pc.GraphNode#getPath is deprecated. Use pc.GraphNode#path instead."),this.path};De.prototype.getRoot=function(){return y.deprecated("pc.GraphNode#getRoot is deprecated. Use pc.GraphNode#root instead."),this.root};De.prototype.getParent=function(){return y.deprecated("pc.GraphNode#getParent is deprecated. Use pc.GraphNode#parent instead."),this.parent};De.prototype.setName=function(l){y.deprecated("pc.GraphNode#setName is deprecated. Use pc.GraphNode#name instead."),this.name=l};Object.defineProperty(sr.prototype,"shader",{set:function(l){y.deprecated("pc.Material#shader is deprecated, use pc.ShaderMaterial instead.")},get:function(){return y.deprecated("pc.Material#shader is deprecated, use pc.ShaderMaterial instead."),null}});Object.defineProperty(sr.prototype,"blend",{set:function(l){y.deprecated("pc.Material#blend is deprecated, use pc.Material.blendState."),this.blendState.blend=l},get:function(){return this.blendState.blend}});Object.defineProperty(kt.prototype,"shininess",{get:function(){return this.gloss*100},set:function(l){this.gloss=l*.01}});Object.defineProperty(kt.prototype,"useGammaTonemap",{get:function(){return this.useTonemap},set:function(l){this.useTonemap=l}});Object.defineProperty(kt.prototype,"anisotropy",{get:function(){y.deprecated("pc.StandardMaterial#anisotropy is deprecated. Use pc.StandardMaterial#anisotropyIntensity and pc.StandardMaterial#anisotropyRotation instead.");const l=Math.sign(Math.cos(this.anisotropyRotation*Y.DEG_TO_RAD*2));return this.anisotropyIntensity*l},set:function(l){y.deprecated("pc.StandardMaterial#anisotropy is deprecated. Use pc.StandardMaterial#anisotropyIntensity and pc.StandardMaterial#anisotropyRotation instead."),this.anisotropyIntensity=Math.abs(l),l>=0?this.anisotropyRotation=0:this.anisotropyRotation=90}});function Zs(l,t){Object.defineProperty(kt.prototype,t,{get:function(){return y.deprecated(`pc.StandardMaterial#${t} is deprecated. Use pc.StandardMaterial#${l} instead.`),this[l]},set:function(e){y.deprecated(`pc.StandardMaterial#${t} is deprecated. Use pc.StandardMaterial#${l} instead.`),this[l]=e}})}function cd(l){Object.defineProperty(kt.prototype,l,{get:function(){return y.deprecated(`pc.StandardMaterial#${l} is deprecated, and the behaviour is as if ${l} was always true`),!0},set:function(t){y.deprecated(`pc.StandardMaterial#${l} is deprecated, and the behaviour is as if ${l} was always true`)}})}cd("sheenTint");cd("diffuseTint");cd("emissiveTint");cd("ambientTint");Zs("specularTint","specularMapTint");Zs("aoVertexColor","aoMapVertexColor");Zs("diffuseVertexColor","diffuseMapVertexColor");Zs("specularVertexColor","specularMapVertexColor");Zs("emissiveVertexColor","emissiveMapVertexColor");Zs("metalnessVertexColor","metalnessMapVertexColor");Zs("glossVertexColor","glossMapVertexColor");Zs("opacityVertexColor","opacityMapVertexColor");Zs("lightVertexColor","lightMapVertexColor");Zs("sheenGloss","sheenGlossiess");Zs("clearCoatGloss","clearCostGlossiness");function $v(l,t){l!=="pass"&&Object.defineProperty(tl.prototype,l,{get:function(){return y.deprecated(`Getting pc.Options#${l} has been deprecated as the property has been moved to pc.Options.LitShaderOptions#${t||l}.`),this.litOptions[t||l]},set:function(e){y.deprecated(`Setting pc.Options#${l} has been deprecated as the property has been moved to pc.Options.LitShaderOptions#${t||l}.`),this.litOptions[t||l]=e}})}$v("refraction","useRefraction");const xk=new Ly,Yg=Object.getOwnPropertyNames(xk);for(const l in Yg)$v(Yg[l]);cn.prototype.getAssetById=function(l){return y.deprecated("pc.AssetRegistry#getAssetById is deprecated. Use pc.AssetRegistry#get instead."),this.get(l)};Object.defineProperty(Kt.prototype,"ray",{get:function(){return y.deprecated("pc.XrInputSource#ray is deprecated. Use pc.XrInputSource#getOrigin and pc.XrInputSource#getDirection instead."),this._rayLocal}});Object.defineProperty(Kt.prototype,"position",{get:function(){return y.deprecated("pc.XrInputSource#position is deprecated. Use pc.XrInputSource#getLocalPosition instead."),this._localPosition}});Object.defineProperty(Kt.prototype,"rotation",{get:function(){return y.deprecated("pc.XrInputSource#rotation is deprecated. Use pc.XrInputSource#getLocalRotation instead."),this._localRotation}});Object.defineProperty(ea.prototype,"wheel",{get:function(){return this.wheelDelta*-2}});Ys.prototype.isFullscreen=function(){return y.deprecated("pc.AppBase#isFullscreen is deprecated. Use the Fullscreen API directly."),!!document.fullscreenElement};Ys.prototype.enableFullscreen=function(l,t,e){y.deprecated("pc.AppBase#enableFullscreen is deprecated. Use the Fullscreen API directly."),l=l||this.graphicsDevice.canvas;const s=function(){t(),document.removeEventListener("fullscreenchange",s)},i=function(){e(),document.removeEventListener("fullscreenerror",i)};t&&document.addEventListener("fullscreenchange",s,!1),e&&document.addEventListener("fullscreenerror",i,!1),l.requestFullscreen?l.requestFullscreen(Element.ALLOW_KEYBOARD_INPUT):e()};Ys.prototype.disableFullscreen=function(l){y.deprecated("pc.AppBase#disableFullscreen is deprecated. Use the Fullscreen API directly.");const t=function(){l(),document.removeEventListener("fullscreenchange",t)};l&&document.addEventListener("fullscreenchange",t,!1),document.exitFullscreen()};Ys.prototype.getSceneUrl=function(l){y.deprecated("pc.AppBase#getSceneUrl is deprecated. Use pc.AppBase#scenes and pc.SceneRegistry#find instead.");const t=this.scenes.find(l);return t?t.url:null};Ys.prototype.loadScene=function(l,t){y.deprecated("pc.AppBase#loadScene is deprecated. Use pc.AppBase#scenes and pc.SceneRegistry#loadScene instead."),this.scenes.loadScene(l,t)};Ys.prototype.loadSceneHierarchy=function(l,t){y.deprecated("pc.AppBase#loadSceneHierarchy is deprecated. Use pc.AppBase#scenes and pc.SceneRegistry#loadSceneHierarchy instead."),this.scenes.loadSceneHierarchy(l,t)};Ys.prototype.loadSceneSettings=function(l,t){y.deprecated("pc.AppBase#loadSceneSettings is deprecated. Use pc.AppBase#scenes and pc.SceneRegistry#loadSceneSettings instead."),this.scenes.loadSceneSettings(l,t)};jp.prototype.setVisible=function(l){y.deprecated("pc.ModelComponent#setVisible is deprecated. Use pc.ModelComponent#enabled instead."),this.enabled=l};Object.defineProperty(bs.prototype,"bodyType",{get:function(){return y.deprecated("pc.RigidBodyComponent#bodyType is deprecated. Use pc.RigidBodyComponent#type instead."),this.type},set:function(l){y.deprecated("pc.RigidBodyComponent#bodyType is deprecated. Use pc.RigidBodyComponent#type instead."),this.type=l}});bs.prototype.syncBodyToEntity=function(){y.deprecated("pc.RigidBodyComponent#syncBodyToEntity is not public API and should not be used."),this._updateDynamic()};Yp.prototype.setGravity=function(){y.deprecated("pc.RigidBodyComponentSystem#setGravity is deprecated. Use pc.RigidBodyComponentSystem#gravity instead."),arguments.length===1?this.gravity.copy(arguments[0]):this.gravity.set(arguments[0],arguments[1],arguments[2])};class Tk{constructor(t){this._frameIndex=0,this._frameTimings=[],this._timings=[],this._prevTimings=[],this.unitsName="ms",this.decimalPlaces=1,this.enabled=!0,t.on("frameupdate",this.begin.bind(this,"update")),t.on("framerender",this.mark.bind(this,"render")),t.on("frameend",this.mark.bind(this,"other"))}begin(t){if(!this.enabled)return;this._frameIndex<this._frameTimings.length&&this._frameTimings.splice(this._frameIndex);const e=this._prevTimings;this._prevTimings=this._timings,this._timings=this._frameTimings,this._frameTimings=e,this._frameIndex=0,this.mark(t)}mark(t){if(!this.enabled)return;const e=pe();if(this._frameIndex>0){const s=this._frameTimings[this._frameIndex-1];s[1]=e-s[1]}else if(this._timings.length>0){const s=this._timings[this._timings.length-1];s[1]=e-s[1]}if(this._frameIndex>=this._frameTimings.length)this._frameTimings.push([t,e]);else{const s=this._frameTimings[this._frameIndex];s[0]=t,s[1]=e}this._frameIndex++}get timings(){return this._timings.slice(0,-1).map(t=>t[1])}}class wk{constructor(t){this.device=t,t.gpuProfiler.enabled=!0,this.enabled=!0,this.unitsName="ms",this.decimalPlaces=1,this._timings=[]}get timings(){return this._timings[0]=this.device.gpuProfiler._frameTime,this._timings}}class Ek{constructor(t,e,s,i,r){this.app=t,this.values=[],this.statNames=e,this.statNames.length>3&&(this.statNames.length=3),this.unitsName=i,this.decimalPlaces=s,this.multiplier=r||1;const a=(n,o)=>n.split(".").reduce((c,d)=>c?c[d]:null,o||this);t.on("frameupdate",n=>{for(let o=0;o<this.statNames.length;o++)this.values[o]=a(this.statNames[o],this.app.stats)*this.multiplier})}get timings(){return this.values}}class df{constructor(t,e,s,i,r){this.app=e,this.name=t,this.device=e.graphicsDevice,this.timer=r,this.watermark=s,this.enabled=!1,this.textRefreshRate=i,this.avgTotal=0,this.avgTimer=0,this.avgCount=0,this.timingText="",this.texture=null,this.yOffset=0,this.cursor=0,this.sample=new Uint8ClampedArray(4),this.sample.set([0,0,0,255]),this.counter=0,this.app.on("frameupdate",this.update,this)}destroy(){this.app.off("frameupdate",this.update,this)}loseContext(){this.timer&&typeof this.timer.loseContext=="function"&&this.timer.loseContext()}update(t){const e=this.timer.timings,s=e.reduce((i,r)=>i+r,0);if(this.avgTotal+=s,this.avgTimer+=t,this.avgCount++,this.avgTimer>this.textRefreshRate&&(this.timingText=(this.avgTotal/this.avgCount).toFixed(this.timer.decimalPlaces),this.avgTimer=0,this.avgTotal=0,this.avgCount=0),this.enabled){let i=0;const r=1.5*this.watermark;for(let n=0;n<e.length;++n)i+=Math.floor(e[n]/r*255),this.sample[n]=i;this.sample[3]=this.watermark/r*255,this.texture.lock().set(this.sample,(this.cursor+this.yOffset*this.texture.width)*4),this.texture.unlock(),this.cursor++,this.cursor===this.texture.width&&(this.cursor=0)}}render(t,e,s,i,r){t.quad(e+i,s,-i,r,this.enabled?this.cursor:0,this.enabled?.5+this.yOffset:this.texture.height-1,-i,0,this.texture,0)}}class bk{constructor(t,e){const s=p=>{p.font='10px "Lucida Console", Monaco, monospace',p.textAlign="left",p.textBaseline="alphabetic"},i=p=>p==="."||p.length===1&&p.charCodeAt(0)>=48&&p.charCodeAt(0)<=57,r=document.createElement("canvas"),a=r.getContext("2d",{alpha:!0});s(a);const n=new Map,o=5,c=512;let d=o,f=o;e.forEach(p=>{const m=a.measureText(p),_=Math.ceil(-m.actualBoundingBoxLeft),S=Math.ceil(m.actualBoundingBoxRight),g=Math.ceil(m.actualBoundingBoxAscent),v=Math.ceil(m.actualBoundingBoxDescent),w=_+S,x=g+v;d+w+o>=c&&(d=o,f+=16),n.set(p,{l:_,r:S,a:g,d:v,w,h:x,x:d,y:f}),d+=w+o}),r.width=512,r.height=Y.nextPowerOfTwo(f+16+o),s(a),a.fillStyle="rgb(0, 0, 0)",a.fillRect(0,0,r.width,r.height),n.forEach((p,m)=>{a.fillStyle=i(m)?"rgb(255, 255, 255)":"rgb(170, 170, 170)",a.fillText(m,p.x-p.l,p.y+p.a)}),this.placements=n;const u=a.getImageData(0,0,r.width,r.height).data;for(let p=0;p<u.length;p+=4)u[p+3]=u[p+0],u[p+0]=255,u[p+1]=255,u[p+2]=255;this.texture=new ge(t,{name:"mini-stats-word-atlas",width:r.width,height:r.height,mipmaps:!1,minFilter:Te,magFilter:Te,levels:[u]})}destroy(){this.texture.destroy(),this.texture=null}render(t,e,s,i){const r=this.placements.get(e);return r?(t.quad(s+r.l-1,i-r.d+1,r.w+2,r.h+2,r.x-1,this.texture.height-r.y-r.h-1,void 0,void 0,this.texture,1),r.w):0}}const Ak=`
    attribute vec3 vertex_position;         // unnormalized xy, word flag
    attribute vec4 vertex_texCoord0;        // unnormalized texture space uv, normalized uv

    varying vec4 uv0;
    varying float wordFlag;

    void main(void) {
        gl_Position = vec4(vertex_position.xy * 2.0 - 1.0, 0.5, 1.0);
        uv0 = vertex_texCoord0;
        wordFlag = vertex_position.z;
    }
`,Ck=`
    attribute vertex_position: vec3f;         // unnormalized xy, word flag
    attribute vertex_texCoord0: vec4f;        // unnormalized texture space uv, normalized uv

    varying uv0: vec4f;
    varying wordFlag: f32;

    @vertex fn vertexMain(input : VertexInput) -> VertexOutput {
        var output : VertexOutput;
        output.position = vec4(input.vertex_position.xy * 2.0 - 1.0, 0.5, 1.0);
        output.uv0 = input.vertex_texCoord0;
        output.wordFlag = input.vertex_position.z;
        return output;
    }
`,Pk=`
    varying vec4 uv0;
    varying float wordFlag;

    uniform vec4 clr;
    uniform sampler2D graphTex;
    uniform sampler2D wordsTex;

    void main (void) {
        vec4 graphSample = texture2D(graphTex, uv0.xy);

        vec4 graph;
        if (uv0.w < graphSample.r)
            graph = vec4(0.7, 0.2, 0.2, 1.0);
        else if (uv0.w < graphSample.g)
            graph = vec4(0.2, 0.7, 0.2, 1.0);
        else if (uv0.w < graphSample.b)
            graph = vec4(0.2, 0.2, 0.7, 1.0);
        else
            graph = vec4(0.0, 0.0, 0.0, 1.0 - 0.25 * sin(uv0.w * 3.14159));

        vec4 words = texture2D(wordsTex, vec2(uv0.x, 1.0 - uv0.y));

        gl_FragColor = mix(graph, words, wordFlag) * clr;
    }
`,Dk=`
    varying uv0: vec4f;
    varying wordFlag: f32;

    uniform clr: vec4f;

    var graphTex : texture_2d<f32>;
    var graphTex_sampler : sampler;

    var wordsTex : texture_2d<f32>;
    var wordsTex_sampler : sampler;

    @fragment fn fragmentMain(input : FragmentInput) -> FragmentOutput {
        var uv0: vec4f = input.uv0;
        var graphSample: vec4f = textureSample(graphTex, graphTex_sampler, uv0.xy);

        var graph: vec4f;
        if (uv0.w < graphSample.r) {
            graph = vec4f(0.7, 0.2, 0.2, 1.0);
        } else if (uv0.w < graphSample.g) {
            graph = vec4f(0.2, 0.7, 0.2, 1.0);
        } else if (uv0.w < graphSample.b) {
            graph = vec4f(0.2, 0.2, 0.7, 1.0);
        } else {
            graph = vec4f(0.0, 0.0, 0.0, 1.0 - 0.25 * sin(uv0.w * 3.14159));
        }

        var words: vec4f = textureSample(wordsTex, wordsTex_sampler, vec2f(uv0.x, 1.0 - uv0.y));

        var output: FragmentOutput;
        output.color = mix(graph, words, input.wordFlag) * uniform.clr;
        return output;
    }
`;class Ik{constructor(t,e=512){const s=new Nt(t,[{semantic:Ae,components:3,type:ze},{semantic:ts,components:4,type:ze}]),i=new Uint16Array(e*6);for(let a=0;a<e;++a)i[a*6+0]=a*4,i[a*6+1]=a*4+1,i[a*6+2]=a*4+2,i[a*6+3]=a*4,i[a*6+4]=a*4+2,i[a*6+5]=a*4+3;this.device=t,this.buffer=new Is(t,s,e*4,{usage:hS}),this.data=new Float32Array(this.buffer.numBytes/4),this.indexBuffer=new Er(t,Ki,e*6,ps,i),this.prim={type:Xs,indexed:!0,base:0,baseVertex:0,count:0},this.quads=0,this.mesh=new Ve(t),this.mesh.vertexBuffer=this.buffer,this.mesh.indexBuffer[0]=this.indexBuffer,this.mesh.primitive=[this.prim];const r=new zn({uniqueName:"MiniStats",vertexGLSL:Ak,fragmentGLSL:Pk,vertexWGSL:Ck,fragmentWGSL:Dk,attributes:{vertex_position:Ae,vertex_texCoord0:ts}});this.material=r,r.cull=wt,r.depthState=qt.NODEPTH,r.blendState=new ut(!0,ds,Cc,Pc,ds,Rt,Rt),r.update(),this.meshInstance=new Ge(this.mesh,r,new De("MiniStatsMesh")),this.uniforms={clr:new Float32Array(4)},this.targetSize={width:t.width,height:t.height}}quad(t,e,s,i,r,a,n,o,c,d=0){const f=this.targetSize.width,u=this.targetSize.height,p=t/f,m=e/u,_=(t+s)/f,S=(e+i)/u,g=c.width,v=c.height,w=r/g,x=a/v,b=(r+(n??s))/g,C=(a+(o??i))/v;this.data.set([p,m,d,w,x,0,0,_,m,d,b,x,1,0,_,S,d,b,C,1,1,p,S,d,w,C,0,1],28*this.quads),this.quads++,this.prim.count+=6}startFrame(){this.quads=0,this.prim.count=0,this.targetSize.width=this.device.canvas.scrollWidth,this.targetSize.height=this.device.canvas.scrollHeight}render(t,e,s,i,r,a){this.buffer.setData(this.data.buffer),this.uniforms.clr.set(r,0),this.material.setParameter("clr",this.uniforms.clr),this.material.setParameter("graphTex",s),this.material.setParameter("wordsTex",i),t.drawMeshInstance(this.meshInstance,e)}}class Xv{constructor(t,e){const s=t.graphicsDevice;this.deviceHeight=s.height/s.maxPixelRatio,e={...Xv.getDefaultOptions(),...e},this.options=e,this.initGraphs(t,s,e);const i=new Set(["","ms","0","1","2","3","4","5","6","7","8","9","."].concat(this.graphs.map(a=>a.name)).concat(e.stats?e.stats.map(a=>a.unitsName):[]).filter(a=>!!a));this.wordAtlas=new bk(s,i),this.sizes=e.sizes,this._activeSizeIndex=e.startSizeIndex;const r=document.createElement("div");r.setAttribute("id","mini-stats"),e.position==="top"?r.style.cssText="position:fixed;top:0;left:0;background:transparent;":r.style.cssText="position:fixed;bottom:0;left:0;background:transparent;",r.style.cssText="position:fixed;top:0;left:0;background:transparent;",document.body.appendChild(r),r.addEventListener("mouseenter",a=>{this.opacity=1}),r.addEventListener("mouseleave",a=>{this.opacity=.7}),r.addEventListener("click",a=>{a.preventDefault(),this._enabled&&(this.activeSizeIndex=(this.activeSizeIndex+1)%this.sizes.length,this.resize(this.sizes[this.activeSizeIndex].width,this.sizes[this.activeSizeIndex].height,this.sizes[this.activeSizeIndex].graphs))}),s.on("resizecanvas",this.updateDiv,this),s.on("losecontext",this.loseContext,this),t.on("postrender",this.postRender,this),this.app=t,this.drawLayer=t.scene.layers.getLayerById(xl),this.device=s,this.render2d=new Ik(s),this.div=r,this.width=0,this.height=0,this.gspacing=2,this.clr=[1,1,1,.5],this._enabled=!0,this.activeSizeIndex=this._activeSizeIndex}destroy(){this.device.off("resizecanvas",this.updateDiv,this),this.device.off("losecontext",this.loseContext,this),this.app.off("postrender",this.postRender,this),this.graphs.forEach(t=>t.destroy()),this.wordAtlas.destroy(),this.texture.destroy()}static getDefaultOptions(){return{position:"top",sizes:[{width:100,height:16,spacing:0,graphs:!1},{width:128,height:32,spacing:2,graphs:!0},{width:256,height:64,spacing:2,graphs:!0}],startSizeIndex:0,textRefreshRate:500,cpu:{enabled:!0,watermark:33},gpu:{enabled:!0,watermark:33},stats:[{name:"Frame",stats:["frame.ms"],decimalPlaces:1,unitsName:"ms",watermark:33},{name:"DrawCalls",stats:["drawCalls.total"],watermark:1e3}]}}set activeSizeIndex(t){this._activeSizeIndex=t,this.gspacing=this.sizes[t].spacing,this.resize(this.sizes[t].width,this.sizes[t].height,this.sizes[t].graphs)}get activeSizeIndex(){return this._activeSizeIndex}set opacity(t){this.clr[3]=t}get opacity(){return this.clr[3]}get overallHeight(){const t=this.graphs,e=this.gspacing;return this.height*t.length+e*(t.length-1)}set enabled(t){if(t!==this._enabled){this._enabled=t;for(let e=0;e<this.graphs.length;++e)this.graphs[e].enabled=t,this.graphs[e].timer.enabled=t}}get enabled(){return this._enabled}initGraphs(t,e,s){if(this.graphs=[],s.cpu.enabled){const r=new Tk(t),a=new df("CPU",t,s.cpu.watermark,s.textRefreshRate,r);this.graphs.push(a)}if(s.gpu.enabled){const r=new wk(e),a=new df("GPU",t,s.gpu.watermark,s.textRefreshRate,r);this.graphs.push(a)}s.stats&&s.stats.forEach(r=>{const a=new Ek(t,r.stats,r.decimalPlaces,r.unitsName,r.multiplier),n=new df(r.name,t,r.watermark,s.textRefreshRate,a);this.graphs.push(n)});const i=s.sizes.reduce((r,a)=>a.width>r?a.width:r,0);this.texture=new ge(e,{name:"mini-stats-graph-texture",width:Y.nextPowerOfTwo(i),height:Y.nextPowerOfTwo(this.graphs.length),mipmaps:!1,minFilter:Te,magFilter:Te,addressU:St,addressV:St}),this.graphs.forEach((r,a)=>{r.texture=this.texture,r.yOffset=a})}render(){const t=this.graphs,e=this.wordAtlas,s=this.render2d,i=this.width,r=this.height,a=this.gspacing;s.startFrame();for(let n=0;n<t.length;++n){const o=t[n];let c=this.options.position==="top"?this.deviceHeight-(n+1)*(r+a):n*(r+a);o.render(s,0,c,i,r);let d=1;c+=r-13,d+=e.render(s,o.name,d,c)+10;const f=o.timingText;for(let u=0;u<f.length;++u)d+=e.render(s,f[u],d,c);o.timer.unitsName&&(d+=3,e.render(s,o.timer.unitsName,d,c))}s.render(this.app,this.drawLayer,this.texture,this.wordAtlas.texture,this.clr,r)}resize(t,e,s){const i=this.graphs;for(let r=0;r<i.length;++r)i[r].enabled=s;this.width=t,this.height=e,this.updateDiv()}updateDiv(){const t=this.device.canvas.getBoundingClientRect();this.div.style.left=`${t.left}px`,this.div.style.bottom=`${window.innerHeight-t.bottom}px`,this.div.style.width=`${this.width}px`,this.div.style.height=`${this.overallHeight}px`,this.deviceHeight=this.device.height/this.device.maxPixelRatio}loseContext(){this.graphs.forEach(t=>t.loseContext())}postRender(){this._enabled&&this.render()}}tx();class Mk extends Jt{constructor(){super(...arguments);h(this,"basePath","https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets/dist/profiles");h(this,"controllers",new Map);h(this,"preEntities",new Map);h(this,"eventsList",[]);h(this,"addEvents",(e,s,i)=>{e.on(s,i),this.eventsList=this.eventsList.concat({e,ty:s,fn:i})});h(this,"removeEvents",()=>{this.eventsList.forEach(({e,ty:s,fn:i})=>{e.off(s,i)}),this.eventsList=[]});h(this,"initialize",()=>{if(!this.app.xr){console.error("XrControllers script requires XR to be enabled on the application");return}this.addEvents(this.app.xr.input,"add",async e=>{var a;if(console.log("add xr input",e.handedness),!((a=e.profiles)!=null&&a.length)){console.warn("No profiles available for input source");return}const s=e.profiles.map(async n=>{var c;const o=`${this.basePath}/${n}/profile.json`;try{const d=await fetch(o);if(!d.ok)return null;const f=await d.json(),u=((c=f.layouts[e.handedness])==null?void 0:c.assetPath)||"",p=`${this.basePath}/${f.profileId}/${e.handedness}${u.replace(/^\/?(left|right)/,"")}`,m=await new Promise((_,S)=>{this.app.assets.loadFromUrl(p,"container",(g,v)=>{g?S(g):_(v)})});return{profileId:n,asset:m}}catch{return console.warn(`Failed to process profile ${n}`),null}}),r=(await Promise.all(s)).find(n=>n!==null);if(r){const{asset:n}=r,c=n.resource.instantiateRenderEntity();c.name=`Armature_${e.handedness}`,this.app.root.addChild(c),this.preEntities.set(e,c);const d=new Map;if(e.hand)for(const f of e.hand.joints){const u=c.findByName(f.id);u&&d.set(f,u)}this.controllers.set(e,{entity:c,jointMap:d})}else console.warn("No compatible profiles found")}),this.addEvents(this.app.xr.input,"remove",e=>{var i;const s=this.controllers.get(e);s&&((i=s.entity)==null||i.destroy(),this.app.root.removeChild(s==null?void 0:s.entity),this.controllers.delete(e))}),this.addEvents(this.app.xr.input,"removeall",this.destroy),this.on("destroy",this.removeEvents)});h(this,"destroy",()=>{var i,r,a;const e=this.app;(i=this.controllers)==null||i.forEach(n=>{var o;e.root.removeChild(n==null?void 0:n.entity),(o=n.entity)==null||o.destroy()}),(r=this.controllers)==null||r.clear(),(a=this.preEntities)==null||a.forEach(n=>{e.root.removeChild(n),n==null||n.destroy()});const s=()=>{const n=e.root.findByName("Armature_left"),o=e.root.findByName("Armature_right");for(n&&e.root.removeChild(n),o&&e.root.removeChild(o);e.root.findByName("Armature_left")||e.root.findByName("Armature_right");)s()};s()})}update(e){var s;if((s=this.app.xr)!=null&&s.active)for(const[i,{entity:r,jointMap:a}]of this.controllers)if(i.hand)for(const[n,o]of a)o.setPosition(n.getPosition()),o.setRotation(n.getRotation());else r.setPosition(i.getPosition()),r.setRotation(i.getRotation())}}h(Mk,"scriptName","xrControllers");class Lk extends Jt{constructor(){super(...arguments);h(this,"inputSources",new Set);h(this,"activePointers",new Map);h(this,"validColor",new ae(0,1,0));h(this,"invalidColor",new ae(1,0,0));h(this,"inputHandlers",new Map);h(this,"teleportOpenStatus",!1);h(this,"teleportLeftOpenStatus",!1)}initialize(){if(!this.app.xr){console.error("XrNavigation script requires XR to be enabled on the application");return}this.app.xr.input.on("add",e=>{const s=()=>{this.activePointers.set(e,!0)},i=()=>{this.activePointers.set(e,!1),this.tryTeleport(e)};e.on("selectstart",s),e.on("selectend",i),this.inputHandlers.set(e,{handleSelectStart:s,handleSelectEnd:i}),this.inputSources.add(e)}),this.app.xr.input.on("remove",e=>{const s=this.inputHandlers.get(e);s&&(e.off("selectstart",s.handleSelectStart),e.off("selectend",s.handleSelectEnd),this.inputHandlers.delete(e)),this.activePointers.delete(e),this.inputSources.delete(e)})}findPlaneIntersection(e,s){if(Math.abs(s.y)<1e-5)return null;const i=-e.y/s.y;return i<0?null:new A(e.x+s.x*i,0,e.z+s.z*i)}tryTeleport(e){if(this.teleportOpenStatus||this.teleportLeftOpenStatus){const s=e.getOrigin(),i=e.getDirection(),r=this.findPlaneIntersection(s,i);if(r){const a=this.entity.getPosition().y;r.y=a,this.entity.setPosition(r)}}}update(){for(const e of this.inputSources){if(e.gamepad&&!e.hand){const n=e.gamepad;for(let o=0;o<n.buttons.length;++o)n.buttons[o].pressed&&console.log(o,e.handedness),e.handedness==="right"&&o===1&&(this.teleportOpenStatus=n.buttons[1].pressed),e.handedness==="left"&&o===1&&(this.teleportLeftOpenStatus=n.buttons[1].pressed)}const s=e.handedness;if(!this.teleportOpenStatus&&s==="right"||s==="left"&&!this.teleportLeftOpenStatus)continue;const i=e.getOrigin(),r=e.getDirection(),a=this.findPlaneIntersection(i,r);if(a)this.app.drawLine(i,a,this.validColor),this.drawTeleportIndicator(a);else{const n=i.clone().add(r.clone().mulScalar(100));this.app.drawLine(i,n,this.invalidColor)}}}drawTeleportIndicator(e){for(let r=0;r<32;r++){const a=r/32*Math.PI*2,n=(r+1)/32*Math.PI*2,o=e.x+Math.cos(a)*.2,c=e.z+Math.sin(a)*.2,d=e.x+Math.cos(n)*.2,f=e.z+Math.sin(n)*.2;this.app.drawLine(new A(o,.01,c),new A(d,.01,f),this.validColor)}}}h(Lk,"scriptName","xrNavigation");export{ie as $,Gk as A,Jg as B,ae as C,Nk as D,lt as E,MA as F,bh as G,Ge as H,zn as I,Ht as J,Om as K,Tp as L,Bl as M,Ae as N,Ks as O,Wk as P,ue as Q,B_ as R,Hs as S,my as T,wt as U,A as V,rS as W,lk as X,Ve as Y,Xs as Z,Y as _,oe as a,Me as a0,Ok as a1,Xk as a2,Mk as a3,Lk as a4,Fk as a5,rv as a6,Qv as a7,Xv as a8,Se as a9,Hk as aa,be as ab,Do as ac,Qg as ad,$N as b,J as c,_e as d,Tl as e,yn as f,ni as g,Pp as h,kk as i,Uk as j,Bk as k,zk as l,Vk as m,dy as n,cy as o,fy as p,KT as q,YT as r,Lf as s,bp as t,Yo as u,kt as v,K3 as w,ja as x,My as y,Zv as z};
